// Copyright (c) 2025, Klas Kala√ü <habbatical@gmail.com>
// All rights reserved. Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// GENERATED CODE - DO NOT MODIFY BY HAND
// Generated by VocabularyBuilder

import 'package:rdf_core/rdf_core.dart';

/// InsertDeletePatch class from Solid vocabulary
///
/// A class of patch expressing insertions, deletions, and conditional modifications to a resource that has an RDF-based representation.
///
/// Inherits from:
/// - Patch (http://www.w3.org/ns/solid/terms#Patch)
/// - Resource (http://www.w3.org/2000/01/rdf-schema#Resource)
///
/// This class provides access to all properties that can be used with InsertDeletePatch.
/// [Class Reference](http://www.w3.org/ns/solid/terms#InsertDeletePatch)
///
/// [Vocabulary Reference](http://www.w3.org/ns/solid/terms#)
class SolidInsertDeletePatch {
  // Private constructor prevents instantiation
  const SolidInsertDeletePatch._();

  /// IRI term for the InsertDeletePatch class
  /// Use this to specify that a resource is of this type.
  static const classIri = IriTerm.prevalidated(
    'http://www.w3.org/ns/solid/terms#InsertDeletePatch',
  );

  /// account
  ///
  /// A solid account belonging to an Agent.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const account = IriTerm.prevalidated(
    'http://www.w3.org/ns/solid/terms#account',
  );

  /// deletes [Expects: http://www.w3.org/2000/10/swap/log#Formula]
  ///
  /// The triple patterns this patch removes from the document.
  ///
  /// Can be used on: http://www.w3.org/ns/solid/terms#Patch
  ///
  static const deletes = IriTerm.prevalidated(
    'http://www.w3.org/ns/solid/terms#deletes',
  );

  /// forClass
  ///
  /// A class that is used to map an listed or unlisted type index.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const forClass = IriTerm.prevalidated(
    'http://www.w3.org/ns/solid/terms#forClass',
  );

  /// inbox
  ///
  /// Deprecated pointer to a Linked Data Notifications inbox; please use http://www.w3.org/ns/ldp#inbox instead.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const inbox = IriTerm.prevalidated(
    'http://www.w3.org/ns/solid/terms#inbox',
  );

  /// inserts [Expects: http://www.w3.org/2000/10/swap/log#Formula]
  ///
  /// The triple patterns this patch adds to the document.
  ///
  /// Can be used on: http://www.w3.org/ns/solid/terms#Patch
  ///
  static const inserts = IriTerm.prevalidated(
    'http://www.w3.org/ns/solid/terms#inserts',
  );

  /// instance
  ///
  /// Maps a type to an individual resource, typically an index or a directory listing resource.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const instance = IriTerm.prevalidated(
    'http://www.w3.org/ns/solid/terms#instance',
  );

  /// instanceContainer
  ///
  /// Maps a type to a container which the client would have to list to get the instances of that type.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const instanceContainer = IriTerm.prevalidated(
    'http://www.w3.org/ns/solid/terms#instanceContainer',
  );

  /// loginEndpoint
  ///
  /// The login URI of a given server.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const loginEndpoint = IriTerm.prevalidated(
    'http://www.w3.org/ns/solid/terms#loginEndpoint',
  );

  /// logoutEndpoint
  ///
  /// The logout URI of a given server.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const logoutEndpoint = IriTerm.prevalidated(
    'http://www.w3.org/ns/solid/terms#logoutEndpoint',
  );

  /// notification
  ///
  /// Notification resource for an inbox.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const notification = IriTerm.prevalidated(
    'http://www.w3.org/ns/solid/terms#notification',
  );

  /// oidcIssuer
  ///
  /// The preferred OpenID Connect issuer URI for a given WebID.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const oidcIssuer = IriTerm.prevalidated(
    'http://www.w3.org/ns/solid/terms#oidcIssuer',
  );

  /// owner [Expects: http://xmlns.com/foaf/0.1/Agent]
  ///
  /// A person or social entity that is considered to have control, rights, and responsibilities over a data storage.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const owner = IriTerm.prevalidated(
    'http://www.w3.org/ns/solid/terms#owner',
  );

  /// patches [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// The document to which this patch applies.
  ///
  /// Can be used on: http://www.w3.org/ns/solid/terms#Patch
  ///
  static const patches = IriTerm.prevalidated(
    'http://www.w3.org/ns/solid/terms#patches',
  );

  /// privateTypeIndex [Expects: http://www.w3.org/ns/solid/terms#UnlistedDocument]
  ///
  /// Points to an unlisted type index resource.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const privateTypeIndex = IriTerm.prevalidated(
    'http://www.w3.org/ns/solid/terms#privateTypeIndex',
  );

  /// publicTypeIndex [Expects: http://www.w3.org/ns/solid/terms#ListedDocument]
  ///
  /// Points to a listed type index resource.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const publicTypeIndex = IriTerm.prevalidated(
    'http://www.w3.org/ns/solid/terms#publicTypeIndex',
  );

  /// privateLabelIndex [Expects: http://www.w3.org/ns/solid/terms#UnlistedDocument]
  ///
  /// Points to an unlisted label index resource.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const privateLabelIndex = IriTerm.prevalidated(
    'http://www.w3.org/ns/solid/terms#privateLabelIndex',
  );

  /// storageDescription
  ///
  /// Refers to the resource that provides a description of the storage containing this resource.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  /// [See also](https://solidproject.org/TR/2024/protocol-20240512#server-storage-description)
  ///
  static const storageDescription = IriTerm.prevalidated(
    'http://www.w3.org/ns/solid/terms#storageDescription',
  );

  /// typeIndex [Expects: http://www.w3.org/ns/solid/terms#TypeIndex]
  ///
  /// Points to a TypeIndex resource.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const typeIndex = IriTerm.prevalidated(
    'http://www.w3.org/ns/solid/terms#typeIndex',
  );

  /// timeline
  ///
  /// Timeline for a given resource.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const timeline = IriTerm.prevalidated(
    'http://www.w3.org/ns/solid/terms#timeline',
  );

  /// where [Expects: http://www.w3.org/2000/10/swap/log#Formula]
  ///
  /// The conditions the document and the inserted and deleted triple patterns need to satisfy in order for the patch to be applied.
  ///
  /// Can be used on: http://www.w3.org/ns/solid/terms#Patch
  ///
  static const where = IriTerm.prevalidated(
    'http://www.w3.org/ns/solid/terms#where',
  );

  /// type from rdf vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Class]
  ///
  /// The subject is an instance of a class.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfType = IriTerm.prevalidated(
    'http://www.w3.org/1999/02/22-rdf-syntax-ns#type',
  );

  /// value from rdf vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// Idiomatic property used for structured values.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfValue = IriTerm.prevalidated(
    'http://www.w3.org/1999/02/22-rdf-syntax-ns#value',
  );

  /// comment from rdfs vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// A description of the subject resource.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfsComment = IriTerm.prevalidated(
    'http://www.w3.org/2000/01/rdf-schema#comment',
  );

  /// label from rdfs vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// A human-readable name for the subject.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfsLabel = IriTerm.prevalidated(
    'http://www.w3.org/2000/01/rdf-schema#label',
  );

  /// seeAlso from rdfs vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// Further information about the subject resource.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfsSeeAlso = IriTerm.prevalidated(
    'http://www.w3.org/2000/01/rdf-schema#seeAlso',
  );

  /// isDefinedBy from rdfs vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// The definition of the subject resource.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfsIsDefinedBy = IriTerm.prevalidated(
    'http://www.w3.org/2000/01/rdf-schema#isDefinedBy',
  );

  /// member from rdfs vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// A member of the subject resource.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfsMember = IriTerm.prevalidated(
    'http://www.w3.org/2000/01/rdf-schema#member',
  );

  /// annotatedProperty from owl vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// The property that determines the predicate of an annotated axiom or annotated annotation.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const owlAnnotatedProperty = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#annotatedProperty',
  );

  /// annotatedSource from owl vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// The property that determines the subject of an annotated axiom or annotated annotation.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const owlAnnotatedSource = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#annotatedSource',
  );

  /// annotatedTarget from owl vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// The property that determines the object of an annotated axiom or annotated annotation.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const owlAnnotatedTarget = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#annotatedTarget',
  );

  /// deprecated from owl vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// The annotation property that indicates that a given entity has been deprecated.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const owlDeprecated = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#deprecated',
  );

  /// members from owl vocabulary [Expects: http://www.w3.org/1999/02/22-rdf-syntax-ns#List]
  ///
  /// The property that determines the collection of members in either a owl:AllDifferent, owl:AllDisjointClasses or owl:AllDisjointProperties axiom.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const owlMembers = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#members',
  );

  /// versionInfo from owl vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// The annotation property that provides version information for an ontology or another OWL construct.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const owlVersionInfo = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#versionInfo',
  );

  /// abstract_ from bibo vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// A summary of the resource.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const biboAbstract_ = IriTerm.prevalidated(
    'http://purl.org/ontology/bibo/abstract',
  );
}
