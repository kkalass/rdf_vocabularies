// Copyright (c) 2025, Klas Kala√ü <habbatical@gmail.com>
// All rights reserved. Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// GENERATED CODE - DO NOT MODIFY BY HAND
// Generated by VocabularyBuilder

import 'package:rdf_core/rdf_core.dart';

/// JobPosting class from SchemaHttp vocabulary
///
/// A listing that describes a job opening in a certain organization.
///
/// Inherits from:
/// - Intangible (http://schema.org/Intangible)
/// - Thing (http://schema.org/Thing)
///
/// This class provides access to all properties that can be used with JobPosting.
/// [Class Reference](http://schema.org/JobPosting)
///
/// [Vocabulary Reference](http://schema.org/)
class SchemaHttpJobPosting {
  // Private constructor prevents instantiation
  const SchemaHttpJobPosting._();

  /// IRI term for the JobPosting class
  /// Use this to specify that a resource is of this type.
  static const classIri = IriTerm.prevalidated('http://schema.org/JobPosting');

  /// additionalType [Expects: http://schema.org/Text, http://schema.org/URL]
  ///
  /// An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. Typically the value is a URI-identified RDF class, and in this case corresponds to the
  /// use of rdf:type in RDF. Text values can be used sparingly, for cases where useful information can be added without their being an appropriate schema to reference. In the case of text values, the class label should follow the schema.org <a href="http://schema.org/docs/styleguide.html">style guide</a>.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const additionalType = IriTerm.prevalidated(
    'http://schema.org/additionalType',
  );

  /// applicantLocationRequirements [Expects: http://schema.org/AdministrativeArea]
  ///
  /// The location(s) applicants can apply from. This is usually used for telecommuting jobs where the applicant does not need to be in a physical office. Note: This should not be used for citizenship or work visa requirements.
  ///
  /// Can be used on: http://schema.org/JobPosting
  ///
  static const applicantLocationRequirements = IriTerm.prevalidated(
    'http://schema.org/applicantLocationRequirements',
  );

  /// applicationContact [Expects: http://schema.org/ContactPoint]
  ///
  /// Contact details for further information relevant to this job posting.
  ///
  /// Can be used on: http://schema.org/JobPosting
  ///
  static const applicationContact = IriTerm.prevalidated(
    'http://schema.org/applicationContact',
  );

  /// baseSalary [Expects: http://schema.org/MonetaryAmount, http://schema.org/Number, http://schema.org/PriceSpecification]
  ///
  /// The base salary of the job or of an employee in an EmployeeRole.
  ///
  /// Can be used on: http://schema.org/EmployeeRole, http://schema.org/JobPosting
  ///
  static const baseSalary = IriTerm.prevalidated(
    'http://schema.org/baseSalary',
  );

  /// benefits [Expects: http://schema.org/Text]
  ///
  /// Description of benefits associated with the job.
  ///
  /// Can be used on: http://schema.org/JobPosting
  ///
  static const benefits = IriTerm.prevalidated('http://schema.org/benefits');

  /// datePosted [Expects: http://schema.org/Date, http://schema.org/DateTime]
  ///
  /// Publication date of an online listing.
  ///
  /// Can be used on: http://schema.org/CDCPMDRecord, http://schema.org/JobPosting, http://schema.org/RealEstateListing, http://schema.org/SpecialAnnouncement
  ///
  static const datePosted = IriTerm.prevalidated(
    'http://schema.org/datePosted',
  );

  /// directApply [Expects: http://schema.org/Boolean]
  ///
  /// Indicates whether an {[url]} that is associated with a {[JobPosting]} enables direct application for the job, via the posting website. A job posting is considered to have directApply of {[True]} if an application process for the specified job can be directly initiated via the url(s) given (noting that e.g. multiple internet domains might nevertheless be involved at an implementation level). A value of {[False]} is appropriate if there is no clear path to applying directly online for the specified job, navigating directly from the JobPosting url(s) supplied.
  ///
  /// Can be used on: http://schema.org/JobPosting
  ///
  static const directApply = IriTerm.prevalidated(
    'http://schema.org/directApply',
  );

  /// disambiguatingDescription [Expects: http://schema.org/Text]
  ///
  /// A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const disambiguatingDescription = IriTerm.prevalidated(
    'http://schema.org/disambiguatingDescription',
  );

  /// educationRequirements [Expects: http://schema.org/EducationalOccupationalCredential, http://schema.org/Text]
  ///
  /// Educational background needed for the position or Occupation.
  ///
  /// Can be used on: http://schema.org/JobPosting, http://schema.org/Occupation
  ///
  static const educationRequirements = IriTerm.prevalidated(
    'http://schema.org/educationRequirements',
  );

  /// eligibilityToWorkRequirement [Expects: http://schema.org/Text]
  ///
  /// The legal requirements such as citizenship, visa and other documentation required for an applicant to this job.
  ///
  /// Can be used on: http://schema.org/JobPosting
  ///
  static const eligibilityToWorkRequirement = IriTerm.prevalidated(
    'http://schema.org/eligibilityToWorkRequirement',
  );

  /// employerOverview [Expects: http://schema.org/Text]
  ///
  /// A description of the employer, career opportunities and work environment for this position.
  ///
  /// Can be used on: http://schema.org/JobPosting
  ///
  static const employerOverview = IriTerm.prevalidated(
    'http://schema.org/employerOverview',
  );

  /// employmentType [Expects: http://schema.org/Text]
  ///
  /// Type of employment (e.g. full-time, part-time, contract, temporary, seasonal, internship).
  ///
  /// Can be used on: http://schema.org/JobPosting
  ///
  static const employmentType = IriTerm.prevalidated(
    'http://schema.org/employmentType',
  );

  /// employmentUnit [Expects: http://schema.org/Organization]
  ///
  /// Indicates the department, unit and/or facility where the employee reports and/or in which the job is to be performed.
  ///
  /// Can be used on: http://schema.org/JobPosting
  ///
  static const employmentUnit = IriTerm.prevalidated(
    'http://schema.org/employmentUnit',
  );

  /// estimatedSalary [Expects: http://schema.org/MonetaryAmount, http://schema.org/MonetaryAmountDistribution, http://schema.org/Number]
  ///
  /// An estimated salary for a job posting or occupation, based on a variety of variables including, but not limited to industry, job title, and location. Estimated salaries  are often computed by outside organizations rather than the hiring organization, who may not have committed to the estimated value.
  ///
  /// Can be used on: http://schema.org/JobPosting, http://schema.org/Occupation
  ///
  static const estimatedSalary = IriTerm.prevalidated(
    'http://schema.org/estimatedSalary',
  );

  /// experienceInPlaceOfEducation [Expects: http://schema.org/Boolean]
  ///
  /// Indicates whether a {[JobPosting]} will accept experience (as indicated by {[OccupationalExperienceRequirements]}) in place of its formal educational qualifications (as indicated by {[educationRequirements]}). If true, indicates that satisfying one of these requirements is sufficient.
  ///
  /// Can be used on: http://schema.org/JobPosting
  ///
  static const experienceInPlaceOfEducation = IriTerm.prevalidated(
    'http://schema.org/experienceInPlaceOfEducation',
  );

  /// experienceRequirements [Expects: http://schema.org/OccupationalExperienceRequirements, http://schema.org/Text]
  ///
  /// Description of skills and experience needed for the position or Occupation.
  ///
  /// Can be used on: http://schema.org/JobPosting, http://schema.org/Occupation
  ///
  static const experienceRequirements = IriTerm.prevalidated(
    'http://schema.org/experienceRequirements',
  );

  /// hiringOrganization [Expects: http://schema.org/Organization, http://schema.org/Person]
  ///
  /// Organization or Person offering the job position.
  ///
  /// Can be used on: http://schema.org/JobPosting
  ///
  static const hiringOrganization = IriTerm.prevalidated(
    'http://schema.org/hiringOrganization',
  );

  /// incentives [Expects: http://schema.org/Text]
  ///
  /// Description of bonus and commission compensation aspects of the job.
  ///
  /// Can be used on: http://schema.org/JobPosting
  ///
  static const incentives = IriTerm.prevalidated(
    'http://schema.org/incentives',
  );

  /// industry [Expects: http://schema.org/DefinedTerm, http://schema.org/Text]
  ///
  /// The industry associated with the job position.
  ///
  /// Can be used on: http://schema.org/JobPosting
  ///
  static const industry = IriTerm.prevalidated('http://schema.org/industry');

  /// interactionCount
  ///
  /// This property is deprecated, alongside the UserInteraction types on which it depended.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const interactionCount = IriTerm.prevalidated(
    'http://schema.org/interactionCount',
  );

  /// jobImmediateStart [Expects: http://schema.org/Boolean]
  ///
  /// An indicator as to whether a position is available for an immediate start.
  ///
  /// Can be used on: http://schema.org/JobPosting
  ///
  static const jobImmediateStart = IriTerm.prevalidated(
    'http://schema.org/jobImmediateStart',
  );

  /// jobLocation [Expects: http://schema.org/Place]
  ///
  /// A (typically single) geographic location associated with the job position.
  ///
  /// Can be used on: http://schema.org/JobPosting
  ///
  static const jobLocation = IriTerm.prevalidated(
    'http://schema.org/jobLocation',
  );

  /// jobLocationType [Expects: http://schema.org/Text]
  ///
  /// A description of the job location (e.g. TELECOMMUTE for telecommute jobs).
  ///
  /// Can be used on: http://schema.org/JobPosting
  ///
  static const jobLocationType = IriTerm.prevalidated(
    'http://schema.org/jobLocationType',
  );

  /// jobStartDate [Expects: http://schema.org/Date, http://schema.org/Text]
  ///
  /// The date on which a successful applicant for this job would be expected to start work. Choose a specific date in the future or use the jobImmediateStart property to indicate the position is to be filled as soon as possible.
  ///
  /// Can be used on: http://schema.org/JobPosting
  ///
  static const jobStartDate = IriTerm.prevalidated(
    'http://schema.org/jobStartDate',
  );

  /// name [Expects: http://schema.org/Text]
  ///
  /// The name of the item.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const name = IriTerm.prevalidated('http://schema.org/name');

  /// occupationalCategory [Expects: http://schema.org/CategoryCode, http://schema.org/Text]
  ///
  /// A category describing the job, preferably using a term from a taxonomy such as [BLS O*NET-SOC](http://www.onetcenter.org/taxonomy.html), [ISCO-08](https://www.ilo.org/public/english/bureau/stat/isco/isco08/) or similar, with the property repeated for each applicable value. Ideally the taxonomy should be identified, and both the textual label and formal code for the category should be provided.\n
  /// Note: for historical reasons, any textual label and formal code provided as a literal may be assumed to be from O*NET-SOC.
  ///
  /// Can be used on: http://schema.org/EducationalOccupationalProgram, http://schema.org/JobPosting, http://schema.org/Occupation, http://schema.org/Physician, http://schema.org/WorkBasedProgram
  ///
  static const occupationalCategory = IriTerm.prevalidated(
    'http://schema.org/occupationalCategory',
  );

  /// physicalRequirement [Expects: http://schema.org/DefinedTerm, http://schema.org/Text, http://schema.org/URL]
  ///
  /// A description of the types of physical activity associated with the job. Defined terms such as those in O*net may be used, but note that there is no way to specify the level of ability as well as its nature when using a defined term.
  ///
  /// Can be used on: http://schema.org/JobPosting
  ///
  static const physicalRequirement = IriTerm.prevalidated(
    'http://schema.org/physicalRequirement',
  );

  /// potentialAction [Expects: http://schema.org/Action]
  ///
  /// Indicates a potential Action, which describes an idealized action in which this thing would play an 'object' role.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const potentialAction = IriTerm.prevalidated(
    'http://schema.org/potentialAction',
  );

  /// qualifications [Expects: http://schema.org/EducationalOccupationalCredential, http://schema.org/Text]
  ///
  /// Specific qualifications required for this role or Occupation.
  ///
  /// Can be used on: http://schema.org/JobPosting, http://schema.org/Occupation
  ///
  static const qualifications = IriTerm.prevalidated(
    'http://schema.org/qualifications',
  );

  /// relevantOccupation [Expects: http://schema.org/Occupation]
  ///
  /// The Occupation for the JobPosting.
  ///
  /// Can be used on: http://schema.org/JobPosting
  ///
  static const relevantOccupation = IriTerm.prevalidated(
    'http://schema.org/relevantOccupation',
  );

  /// responsibilities [Expects: http://schema.org/Text]
  ///
  /// Responsibilities associated with this role or Occupation.
  ///
  /// Can be used on: http://schema.org/JobPosting, http://schema.org/Occupation
  ///
  static const responsibilities = IriTerm.prevalidated(
    'http://schema.org/responsibilities',
  );

  /// salaryCurrency [Expects: http://schema.org/Text]
  ///
  /// The currency (coded using [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217)) used for the main salary information in this job posting or for this employee.
  ///
  /// Can be used on: http://schema.org/EmployeeRole, http://schema.org/JobPosting
  ///
  static const salaryCurrency = IriTerm.prevalidated(
    'http://schema.org/salaryCurrency',
  );

  /// sameAs [Expects: http://schema.org/URL]
  ///
  /// URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Wikidata entry, or official website.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const sameAs = IriTerm.prevalidated('http://schema.org/sameAs');

  /// securityClearanceRequirement [Expects: http://schema.org/Text, http://schema.org/URL]
  ///
  /// A description of any security clearance requirements of the job.
  ///
  /// Can be used on: http://schema.org/JobPosting
  ///
  static const securityClearanceRequirement = IriTerm.prevalidated(
    'http://schema.org/securityClearanceRequirement',
  );

  /// sensoryRequirement [Expects: http://schema.org/DefinedTerm, http://schema.org/Text, http://schema.org/URL]
  ///
  /// A description of any sensory requirements and levels necessary to function on the job, including hearing and vision. Defined terms such as those in O*net may be used, but note that there is no way to specify the level of ability as well as its nature when using a defined term.
  ///
  /// Can be used on: http://schema.org/JobPosting
  ///
  static const sensoryRequirement = IriTerm.prevalidated(
    'http://schema.org/sensoryRequirement',
  );

  /// skills [Expects: http://schema.org/DefinedTerm, http://schema.org/Text]
  ///
  /// A statement of knowledge, skill, ability, task or any other assertion expressing a competency that is either claimed by a person, an organization or desired or required to fulfill a role or to work in an occupation.
  ///
  /// Can be used on: http://schema.org/JobPosting, http://schema.org/Occupation, http://schema.org/Organization, http://schema.org/Person
  ///
  static const skills = IriTerm.prevalidated('http://schema.org/skills');

  /// specialCommitments [Expects: http://schema.org/Text]
  ///
  /// Any special commitments associated with this job posting. Valid entries include VeteranCommit, MilitarySpouseCommit, etc.
  ///
  /// Can be used on: http://schema.org/JobPosting
  ///
  static const specialCommitments = IriTerm.prevalidated(
    'http://schema.org/specialCommitments',
  );

  /// title [Expects: http://schema.org/Text]
  ///
  /// The title of the job.
  ///
  /// Can be used on: http://schema.org/JobPosting
  ///
  static const title = IriTerm.prevalidated('http://schema.org/title');

  /// totalJobOpenings [Expects: http://schema.org/Integer]
  ///
  /// The number of positions open for this job posting. Use a positive integer. Do not use if the number of positions is unclear or not known.
  ///
  /// Can be used on: http://schema.org/JobPosting
  ///
  static const totalJobOpenings = IriTerm.prevalidated(
    'http://schema.org/totalJobOpenings',
  );

  /// url [Expects: http://schema.org/URL]
  ///
  /// URL of the item.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const url = IriTerm.prevalidated('http://schema.org/url');

  /// validThrough [Expects: http://schema.org/Date, http://schema.org/DateTime]
  ///
  /// The date after when the item is not valid. For example the end of an offer, salary period, or a period of opening hours.
  ///
  /// Can be used on: http://schema.org/Demand, http://schema.org/FinancialIncentive, http://schema.org/JobPosting, http://schema.org/LocationFeatureSpecification, http://schema.org/MonetaryAmount, http://schema.org/Offer, http://schema.org/OpeningHoursSpecification, http://schema.org/PriceSpecification
  ///
  static const validThrough = IriTerm.prevalidated(
    'http://schema.org/validThrough',
  );

  /// workHours [Expects: http://schema.org/Text]
  ///
  /// The typical working hours for this job (e.g. 1st shift, night shift, 8am-5pm).
  ///
  /// Can be used on: http://schema.org/JobPosting
  ///
  static const workHours = IriTerm.prevalidated('http://schema.org/workHours');

  /// alternateName [Expects: http://schema.org/Text]
  ///
  /// An alias for the item.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const alternateName = IriTerm.prevalidated(
    'http://schema.org/alternateName',
  );

  /// incentiveCompensation [Expects: http://schema.org/Text]
  ///
  /// Description of bonus and commission compensation aspects of the job.
  ///
  /// Can be used on: http://schema.org/JobPosting
  ///
  static const incentiveCompensation = IriTerm.prevalidated(
    'http://schema.org/incentiveCompensation',
  );

  /// jobBenefits [Expects: http://schema.org/Text]
  ///
  /// Description of benefits associated with the job.
  ///
  /// Can be used on: http://schema.org/JobPosting
  ///
  static const jobBenefits = IriTerm.prevalidated(
    'http://schema.org/jobBenefits',
  );

  /// mainEntityOfPage [Expects: http://schema.org/CreativeWork, http://schema.org/URL]
  ///
  /// Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See [background notes](/docs/datamodel.html#mainEntityBackground) for details.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const mainEntityOfPage = IriTerm.prevalidated(
    'http://schema.org/mainEntityOfPage',
  );

  /// subjectOf [Expects: http://schema.org/CreativeWork, http://schema.org/Event]
  ///
  /// A CreativeWork or Event about this Thing.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const subjectOf = IriTerm.prevalidated('http://schema.org/subjectOf');

  /// description [Expects: http://schema.org/Text, http://schema.org/TextObject]
  ///
  /// A description of the item.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const description = IriTerm.prevalidated(
    'http://schema.org/description',
  );

  /// image [Expects: http://schema.org/ImageObject, http://schema.org/URL]
  ///
  /// An image of the item. This can be a {[URL]} or a fully described {[ImageObject]}.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const image = IriTerm.prevalidated('http://schema.org/image');

  /// identifier [Expects: http://schema.org/PropertyValue, http://schema.org/Text, http://schema.org/URL]
  ///
  /// The identifier property represents any kind of identifier for any kind of {[Thing]}, such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
  ///
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const identifier = IriTerm.prevalidated(
    'http://schema.org/identifier',
  );

  /// source
  ///
  ///
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const source = IriTerm.prevalidated('http://schema.org/source');
}
