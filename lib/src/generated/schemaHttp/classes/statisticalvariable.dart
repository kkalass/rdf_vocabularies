// Copyright (c) 2025, Klas Kala√ü <habbatical@gmail.com>
// All rights reserved. Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// GENERATED CODE - DO NOT MODIFY BY HAND
// Generated by VocabularyBuilder

import 'package:rdf_core/rdf_core.dart';

/// StatisticalVariable class from SchemaHttp vocabulary
///
/// {[StatisticalVariable]} represents any type of statistical metric that can be measured at a place and time. The usage pattern for {[StatisticalVariable]} is typically expressed using {[Observation]} with an explicit {[populationType]}, which is a type, typically drawn from Schema.org. Each {[StatisticalVariable]} is marked as a {[ConstraintNode]}, meaning that some properties (those listed using {[constraintProperty]}) serve in this setting solely to define the statistical variable rather than literally describe a specific person, place or thing. For example, a {[StatisticalVariable]} Median_Height_Person_Female representing the median height of women, could be written as follows: the population type is {[Person]}; the measuredProperty {[height]}; the {[statType]} {[median]}; the {[gender]} {[Female]}. It is important to note that there are many kinds of scientific quantitative observation which are not fully, perfectly or unambiguously described following this pattern, or with solely Schema.org terminology. The approach taken here is designed to allow partial, incremental or minimal description of {[StatisticalVariable]}s, and the use of detailed sets of entity and property IDs from external repositories. The {[measurementMethod]}, {[unitCode]} and {[unitText]} properties can also be used to clarify the specific nature and notation of an observed measurement.
///
/// Inherits from:
/// - ConstraintNode (http://schema.org/ConstraintNode)
/// - Intangible (http://schema.org/Intangible)
/// - Thing (http://schema.org/Thing)
///
/// This class provides access to all properties that can be used with StatisticalVariable.
/// [Class Reference](http://schema.org/StatisticalVariable)
///
/// [Vocabulary Reference](http://schema.org/)
class SchemaHttpStatisticalVariable {
  // Private constructor prevents instantiation
  const SchemaHttpStatisticalVariable._();

  /// IRI term for the StatisticalVariable class
  /// Use this to specify that a resource is of this type.
  static const classIri = IriTerm.prevalidated(
    'http://schema.org/StatisticalVariable',
  );

  /// additionalType [Expects: http://schema.org/Text, http://schema.org/URL]
  ///
  /// An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. Typically the value is a URI-identified RDF class, and in this case corresponds to the
  /// use of rdf:type in RDF. Text values can be used sparingly, for cases where useful information can be added without their being an appropriate schema to reference. In the case of text values, the class label should follow the schema.org <a href="http://schema.org/docs/styleguide.html">style guide</a>.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const additionalType = IriTerm.prevalidated(
    'http://schema.org/additionalType',
  );

  /// constraintProperty [Expects: http://schema.org/Property, http://schema.org/URL]
  ///
  /// Indicates a property used as a constraint. For example, in the definition of a {[StatisticalVariable]}. The value is a property, either from within Schema.org or from other compatible (e.g. RDF) systems such as DataCommons.org or Wikidata.org.
  ///
  /// Can be used on: http://schema.org/ConstraintNode
  ///
  static const constraintProperty = IriTerm.prevalidated(
    'http://schema.org/constraintProperty',
  );

  /// disambiguatingDescription [Expects: http://schema.org/Text]
  ///
  /// A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const disambiguatingDescription = IriTerm.prevalidated(
    'http://schema.org/disambiguatingDescription',
  );

  /// interactionCount
  ///
  /// This property is deprecated, alongside the UserInteraction types on which it depended.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const interactionCount = IriTerm.prevalidated(
    'http://schema.org/interactionCount',
  );

  /// measuredProperty [Expects: http://schema.org/Property]
  ///
  /// The measuredProperty of an {[Observation]}, typically via its {[StatisticalVariable]}. There are various kinds of applicable {[Property]}: a schema.org property, a property from other RDF-compatible systems, e.g. W3C RDF Data Cube, Data Commons, Wikidata, or schema.org extensions such as [GS1's](https://www.gs1.org/voc/?show=properties).
  ///
  /// Can be used on: http://schema.org/Observation, http://schema.org/StatisticalVariable
  ///
  static const measuredProperty = IriTerm.prevalidated(
    'http://schema.org/measuredProperty',
  );

  /// measurementDenominator [Expects: http://schema.org/StatisticalVariable]
  ///
  /// Identifies the denominator variable when an observation represents a ratio or percentage.
  ///
  /// Can be used on: http://schema.org/Observation, http://schema.org/StatisticalVariable
  ///
  static const measurementDenominator = IriTerm.prevalidated(
    'http://schema.org/measurementDenominator',
  );

  /// measurementMethod [Expects: http://schema.org/DefinedTerm, http://schema.org/MeasurementMethodEnum, http://schema.org/Text, http://schema.org/URL]
  ///
  /// A subproperty of {[measurementTechnique]} that can be used for specifying specific methods, in particular via {[MeasurementMethodEnum]}.
  ///
  /// Can be used on: http://schema.org/DataCatalog, http://schema.org/DataDownload, http://schema.org/Dataset, http://schema.org/Observation, http://schema.org/PropertyValue, http://schema.org/StatisticalVariable
  ///
  static const measurementMethod = IriTerm.prevalidated(
    'http://schema.org/measurementMethod',
  );

  /// measurementQualifier [Expects: http://schema.org/Enumeration]
  ///
  /// Provides additional qualification to an observation. For example, a GDP observation measures the Nominal value.
  ///
  /// Can be used on: http://schema.org/Observation, http://schema.org/StatisticalVariable
  ///
  static const measurementQualifier = IriTerm.prevalidated(
    'http://schema.org/measurementQualifier',
  );

  /// name [Expects: http://schema.org/Text]
  ///
  /// The name of the item.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const name = IriTerm.prevalidated('http://schema.org/name');

  /// numConstraints [Expects: http://schema.org/Integer]
  ///
  /// Indicates the number of constraints property values defined for a particular {[ConstraintNode]} such as {[StatisticalVariable]}. This helps applications understand if they have access to a sufficiently complete description of a {[StatisticalVariable]} or other construct that is defined using properties on template-style nodes.
  ///
  /// Can be used on: http://schema.org/ConstraintNode
  ///
  static const numConstraints = IriTerm.prevalidated(
    'http://schema.org/numConstraints',
  );

  /// populationType [Expects: http://schema.org/Class]
  ///
  /// Indicates the populationType common to all members of a {[StatisticalPopulation]} or all cases within the scope of a {[StatisticalVariable]}.
  ///
  /// Can be used on: http://schema.org/StatisticalPopulation, http://schema.org/StatisticalVariable
  ///
  static const populationType = IriTerm.prevalidated(
    'http://schema.org/populationType',
  );

  /// potentialAction [Expects: http://schema.org/Action]
  ///
  /// Indicates a potential Action, which describes an idealized action in which this thing would play an 'object' role.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const potentialAction = IriTerm.prevalidated(
    'http://schema.org/potentialAction',
  );

  /// sameAs [Expects: http://schema.org/URL]
  ///
  /// URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Wikidata entry, or official website.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const sameAs = IriTerm.prevalidated('http://schema.org/sameAs');

  /// statType [Expects: http://schema.org/Property, http://schema.org/Text, http://schema.org/URL]
  ///
  /// Indicates the kind of statistic represented by a {[StatisticalVariable]}, e.g. mean, count etc. The value of statType is a property, either from within Schema.org (e.g. {[median]}, {[marginOfError]}, {[maxValue]}, {[minValue]}) or from other compatible (e.g. RDF) systems such as DataCommons.org or Wikidata.org.
  ///
  /// Can be used on: http://schema.org/StatisticalVariable
  ///
  static const statType = IriTerm.prevalidated('http://schema.org/statType');

  /// url [Expects: http://schema.org/URL]
  ///
  /// URL of the item.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const url = IriTerm.prevalidated('http://schema.org/url');

  /// alternateName [Expects: http://schema.org/Text]
  ///
  /// An alias for the item.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const alternateName = IriTerm.prevalidated(
    'http://schema.org/alternateName',
  );

  /// mainEntityOfPage [Expects: http://schema.org/CreativeWork, http://schema.org/URL]
  ///
  /// Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See [background notes](/docs/datamodel.html#mainEntityBackground) for details.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const mainEntityOfPage = IriTerm.prevalidated(
    'http://schema.org/mainEntityOfPage',
  );

  /// measurementTechnique [Expects: http://schema.org/DefinedTerm, http://schema.org/MeasurementMethodEnum, http://schema.org/Text, http://schema.org/URL]
  ///
  /// A technique, method or technology used in an {[Observation]}, {[StatisticalVariable]} or {[Dataset]} (or {[DataDownload]}, {[DataCatalog]}), corresponding to the method used for measuring the corresponding variable(s) (for datasets, described using {[variableMeasured]}; for {[Observation]}, a {[StatisticalVariable]}). Often but not necessarily each {[variableMeasured]} will have an explicit representation as (or mapping to) an property such as those defined in Schema.org, or other RDF vocabularies and "knowledge graphs". In that case the subproperty of {[variableMeasured]} called {[measuredProperty]} is applicable.
  ///
  /// The {[measurementTechnique]} property helps when extra clarification is needed about how a {[measuredProperty]} was measured. This is oriented towards scientific and scholarly dataset publication but may have broader applicability; it is not intended as a full representation of measurement, but can often serve as a high level summary for dataset discovery.
  ///
  /// For example, if {[variableMeasured]} is: molecule concentration, {[measurementTechnique]} could be: "mass spectrometry" or "nmr spectroscopy" or "colorimetry" or "immunofluorescence". If the {[variableMeasured]} is "depression rating", the {[measurementTechnique]} could be "Zung Scale" or "HAM-D" or "Beck Depression Inventory".
  ///
  /// If there are several {[variableMeasured]} properties recorded for some given data object, use a {[PropertyValue]} for each {[variableMeasured]} and attach the corresponding {[measurementTechnique]}. The value can also be from an enumeration, organized as a {[MeasurementMetholdEnumeration]}.
  ///
  /// Can be used on: http://schema.org/DataCatalog, http://schema.org/DataDownload, http://schema.org/Dataset, http://schema.org/Observation, http://schema.org/PropertyValue, http://schema.org/StatisticalVariable
  ///
  static const measurementTechnique = IriTerm.prevalidated(
    'http://schema.org/measurementTechnique',
  );

  /// subjectOf [Expects: http://schema.org/CreativeWork, http://schema.org/Event]
  ///
  /// A CreativeWork or Event about this Thing.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const subjectOf = IriTerm.prevalidated('http://schema.org/subjectOf');

  /// description [Expects: http://schema.org/Text, http://schema.org/TextObject]
  ///
  /// A description of the item.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const description = IriTerm.prevalidated(
    'http://schema.org/description',
  );

  /// image [Expects: http://schema.org/ImageObject, http://schema.org/URL]
  ///
  /// An image of the item. This can be a {[URL]} or a fully described {[ImageObject]}.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const image = IriTerm.prevalidated('http://schema.org/image');

  /// identifier [Expects: http://schema.org/PropertyValue, http://schema.org/Text, http://schema.org/URL]
  ///
  /// The identifier property represents any kind of identifier for any kind of {[Thing]}, such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
  ///
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const identifier = IriTerm.prevalidated(
    'http://schema.org/identifier',
  );

  /// source
  ///
  ///
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const source = IriTerm.prevalidated('http://schema.org/source');
}
