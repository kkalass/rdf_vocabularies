// Copyright (c) 2025, Klas Kala√ü <habbatical@gmail.com>
// All rights reserved. Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// GENERATED CODE - DO NOT MODIFY BY HAND
// Generated by VocabularyBuilder

import 'package:rdf_core/rdf_core.dart';

/// WorkBasedProgram class from SchemaHttp vocabulary
///
/// A program with both an educational and employment component. Typically based at a workplace and structured around work-based learning, with the aim of instilling competencies related to an occupation. WorkBasedProgram is used to distinguish programs such as apprenticeships from school, college or other classroom based educational programs.
///
/// Inherits from:
/// - EducationalOccupationalProgram (http://schema.org/EducationalOccupationalProgram)
/// - Intangible (http://schema.org/Intangible)
/// - Resource (http://www.w3.org/2000/01/rdf-schema#Resource)
/// - Thing (http://schema.org/Thing)
///
/// This class provides access to all properties that can be used with WorkBasedProgram.
/// [Class Reference](http://schema.org/WorkBasedProgram)
///
/// [Vocabulary Reference](http://schema.org/)
class SchemaHttpWorkBasedProgram {
  // Private constructor prevents instantiation
  const SchemaHttpWorkBasedProgram._();

  /// IRI term for the WorkBasedProgram class
  /// Use this to specify that a resource is of this type.
  static const classIri = IriTerm.prevalidated(
    'http://schema.org/WorkBasedProgram',
  );

  /// additionalType [Expects: http://schema.org/Text, http://schema.org/URL]
  ///
  /// An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. Typically the value is a URI-identified RDF class, and in this case corresponds to the
  /// use of rdf:type in RDF. Text values can be used sparingly, for cases where useful information can be added without their being an appropriate schema to reference. In the case of text values, the class label should follow the schema.org <a href="http://schema.org/docs/styleguide.html">style guide</a>.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const additionalType = IriTerm.prevalidated(
    'http://schema.org/additionalType',
  );

  /// applicationDeadline [Expects: http://schema.org/Date, http://schema.org/Text]
  ///
  /// The date on which the program stops collecting applications for the next enrollment cycle. Flexible application deadlines (for example, a program with rolling admissions) can be described in a textual string, rather than as a DateTime.
  ///
  /// Can be used on: http://schema.org/EducationalOccupationalProgram
  ///
  static const applicationDeadline = IriTerm.prevalidated(
    'http://schema.org/applicationDeadline',
  );

  /// applicationStartDate [Expects: http://schema.org/Date]
  ///
  /// The date at which the program begins collecting applications for the next enrollment cycle.
  ///
  /// Can be used on: http://schema.org/EducationalOccupationalProgram
  ///
  static const applicationStartDate = IriTerm.prevalidated(
    'http://schema.org/applicationStartDate',
  );

  /// dayOfWeek [Expects: http://schema.org/DayOfWeek]
  ///
  /// The day of the week for which these opening hours are valid.
  ///
  /// Can be used on: http://schema.org/EducationalOccupationalProgram, http://schema.org/OpeningHoursSpecification
  ///
  static const dayOfWeek = IriTerm.prevalidated('http://schema.org/dayOfWeek');

  /// disambiguatingDescription [Expects: http://schema.org/Text]
  ///
  /// A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const disambiguatingDescription = IriTerm.prevalidated(
    'http://schema.org/disambiguatingDescription',
  );

  /// educationalCredentialAwarded [Expects: http://schema.org/EducationalOccupationalCredential, http://schema.org/Text, http://schema.org/URL]
  ///
  /// A description of the qualification, award, certificate, diploma or other educational credential awarded as a consequence of successful completion of this course or program.
  ///
  /// Can be used on: http://schema.org/Course, http://schema.org/EducationalOccupationalProgram
  ///
  static const educationalCredentialAwarded = IriTerm.prevalidated(
    'http://schema.org/educationalCredentialAwarded',
  );

  /// educationalProgramMode [Expects: http://schema.org/Text, http://schema.org/URL]
  ///
  /// Similar to courseMode, the medium or means of delivery of the program as a whole. The value may either be a text label (e.g. "online", "onsite" or "blended"; "synchronous" or "asynchronous"; "full-time" or "part-time") or a URL reference to a term from a controlled vocabulary (e.g. https://ceds.ed.gov/element/001311#Asynchronous ).
  ///
  /// Can be used on: http://schema.org/EducationalOccupationalProgram
  ///
  static const educationalProgramMode = IriTerm.prevalidated(
    'http://schema.org/educationalProgramMode',
  );

  /// endDate [Expects: http://schema.org/Date, http://schema.org/DateTime]
  ///
  /// The end date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).
  ///
  /// Can be used on: http://schema.org/CreativeWorkSeason, http://schema.org/CreativeWorkSeries, http://schema.org/DatedMoneySpecification, http://schema.org/EducationalOccupationalProgram, http://schema.org/Event, http://schema.org/MerchantReturnPolicySeasonalOverride, http://schema.org/Role, http://schema.org/Schedule
  ///
  static const endDate = IriTerm.prevalidated('http://schema.org/endDate');

  /// financialAidEligible [Expects: http://schema.org/DefinedTerm, http://schema.org/Text]
  ///
  /// A financial aid type or program which students may use to pay for tuition or fees associated with the program.
  ///
  /// Can be used on: http://schema.org/Course, http://schema.org/EducationalOccupationalProgram
  ///
  static const financialAidEligible = IriTerm.prevalidated(
    'http://schema.org/financialAidEligible',
  );

  /// hasCourse [Expects: http://schema.org/Course]
  ///
  /// A course or class that is one of the learning opportunities that constitute an educational / occupational program. No information is implied about whether the course is mandatory or optional; no guarantee is implied about whether the course will be available to everyone on the program.
  ///
  /// Can be used on: http://schema.org/EducationalOccupationalProgram
  ///
  static const hasCourse = IriTerm.prevalidated('http://schema.org/hasCourse');

  /// interactionCount
  ///
  /// This property is deprecated, alongside the UserInteraction types on which it depended.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const interactionCount = IriTerm.prevalidated(
    'http://schema.org/interactionCount',
  );

  /// maximumEnrollment [Expects: http://schema.org/Integer]
  ///
  /// The maximum number of students who may be enrolled in the program.
  ///
  /// Can be used on: http://schema.org/EducationalOccupationalProgram
  ///
  static const maximumEnrollment = IriTerm.prevalidated(
    'http://schema.org/maximumEnrollment',
  );

  /// name [Expects: http://schema.org/Text]
  ///
  /// The name of the item.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const name = IriTerm.prevalidated('http://schema.org/name');

  /// numberOfCredits [Expects: http://schema.org/Integer, http://schema.org/StructuredValue]
  ///
  /// The number of credits or units awarded by a Course or required to complete an EducationalOccupationalProgram.
  ///
  /// Can be used on: http://schema.org/Course, http://schema.org/EducationalOccupationalProgram
  ///
  static const numberOfCredits = IriTerm.prevalidated(
    'http://schema.org/numberOfCredits',
  );

  /// occupationalCategory [Expects: http://schema.org/CategoryCode, http://schema.org/Text]
  ///
  /// A category describing the job, preferably using a term from a taxonomy such as [BLS O*NET-SOC](http://www.onetcenter.org/taxonomy.html), [ISCO-08](https://www.ilo.org/public/english/bureau/stat/isco/isco08/) or similar, with the property repeated for each applicable value. Ideally the taxonomy should be identified, and both the textual label and formal code for the category should be provided.\n
  /// Note: for historical reasons, any textual label and formal code provided as a literal may be assumed to be from O*NET-SOC.
  ///
  /// Can be used on: http://schema.org/EducationalOccupationalProgram, http://schema.org/JobPosting, http://schema.org/Occupation, http://schema.org/Physician, http://schema.org/WorkBasedProgram
  ///
  static const occupationalCategory = IriTerm.prevalidated(
    'http://schema.org/occupationalCategory',
  );

  /// occupationalCredentialAwarded [Expects: http://schema.org/EducationalOccupationalCredential, http://schema.org/Text, http://schema.org/URL]
  ///
  /// A description of the qualification, award, certificate, diploma or other occupational credential awarded as a consequence of successful completion of this course or program.
  ///
  /// Can be used on: http://schema.org/Course, http://schema.org/EducationalOccupationalProgram
  ///
  static const occupationalCredentialAwarded = IriTerm.prevalidated(
    'http://schema.org/occupationalCredentialAwarded',
  );

  /// potentialAction [Expects: http://schema.org/Action]
  ///
  /// Indicates a potential Action, which describes an idealized action in which this thing would play an 'object' role.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const potentialAction = IriTerm.prevalidated(
    'http://schema.org/potentialAction',
  );

  /// programPrerequisites [Expects: http://schema.org/AlignmentObject, http://schema.org/Course, http://schema.org/EducationalOccupationalCredential, http://schema.org/Text]
  ///
  /// Prerequisites for enrolling in the program.
  ///
  /// Can be used on: http://schema.org/EducationalOccupationalProgram
  ///
  static const programPrerequisites = IriTerm.prevalidated(
    'http://schema.org/programPrerequisites',
  );

  /// programType [Expects: http://schema.org/DefinedTerm, http://schema.org/Text]
  ///
  /// The type of educational or occupational program. For example, classroom, internship, alternance, etc.
  ///
  /// Can be used on: http://schema.org/EducationalOccupationalProgram
  ///
  static const programType = IriTerm.prevalidated(
    'http://schema.org/programType',
  );

  /// salaryUponCompletion [Expects: http://schema.org/MonetaryAmountDistribution]
  ///
  /// The expected salary upon completing the training.
  ///
  /// Can be used on: http://schema.org/EducationalOccupationalProgram
  ///
  static const salaryUponCompletion = IriTerm.prevalidated(
    'http://schema.org/salaryUponCompletion',
  );

  /// sameAs [Expects: http://schema.org/URL]
  ///
  /// URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Wikidata entry, or official website.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const sameAs = IriTerm.prevalidated('http://schema.org/sameAs');

  /// startDate [Expects: http://schema.org/Date, http://schema.org/DateTime]
  ///
  /// The start date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).
  ///
  /// Can be used on: http://schema.org/CreativeWorkSeason, http://schema.org/CreativeWorkSeries, http://schema.org/DatedMoneySpecification, http://schema.org/EducationalOccupationalProgram, http://schema.org/Event, http://schema.org/MerchantReturnPolicySeasonalOverride, http://schema.org/Role, http://schema.org/Schedule
  ///
  static const startDate = IriTerm.prevalidated('http://schema.org/startDate');

  /// termDuration [Expects: http://schema.org/Duration]
  ///
  /// The amount of time in a term as defined by the institution. A term is a length of time where students take one or more classes. Semesters and quarters are common units for term.
  ///
  /// Can be used on: http://schema.org/EducationalOccupationalProgram
  ///
  static const termDuration = IriTerm.prevalidated(
    'http://schema.org/termDuration',
  );

  /// termsPerYear [Expects: http://schema.org/Number]
  ///
  /// The number of times terms of study are offered per year. Semesters and quarters are common units for term. For example, if the student can only take 2 semesters for the program in one year, then termsPerYear should be 2.
  ///
  /// Can be used on: http://schema.org/EducationalOccupationalProgram
  ///
  static const termsPerYear = IriTerm.prevalidated(
    'http://schema.org/termsPerYear',
  );

  /// timeOfDay [Expects: http://schema.org/Text]
  ///
  /// The time of day the program normally runs. For example, "evenings".
  ///
  /// Can be used on: http://schema.org/EducationalOccupationalProgram
  ///
  static const timeOfDay = IriTerm.prevalidated('http://schema.org/timeOfDay');

  /// timeToComplete [Expects: http://schema.org/Duration]
  ///
  /// The expected length of time to complete the program if attending full-time.
  ///
  /// Can be used on: http://schema.org/EducationalOccupationalProgram
  ///
  static const timeToComplete = IriTerm.prevalidated(
    'http://schema.org/timeToComplete',
  );

  /// trainingSalary [Expects: http://schema.org/MonetaryAmountDistribution]
  ///
  /// The estimated salary earned while in the program.
  ///
  /// Can be used on: http://schema.org/EducationalOccupationalProgram, http://schema.org/WorkBasedProgram
  ///
  static const trainingSalary = IriTerm.prevalidated(
    'http://schema.org/trainingSalary',
  );

  /// typicalCreditsPerTerm [Expects: http://schema.org/Integer, http://schema.org/StructuredValue]
  ///
  /// The number of credits or units a full-time student would be expected to take in 1 term however 'term' is defined by the institution.
  ///
  /// Can be used on: http://schema.org/EducationalOccupationalProgram
  ///
  static const typicalCreditsPerTerm = IriTerm.prevalidated(
    'http://schema.org/typicalCreditsPerTerm',
  );

  /// url [Expects: http://schema.org/URL]
  ///
  /// URL of the item.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const url = IriTerm.prevalidated('http://schema.org/url');

  /// alternateName [Expects: http://schema.org/Text]
  ///
  /// An alias for the item.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const alternateName = IriTerm.prevalidated(
    'http://schema.org/alternateName',
  );

  /// mainEntityOfPage [Expects: http://schema.org/CreativeWork, http://schema.org/URL]
  ///
  /// Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See [background notes](/docs/datamodel.html#mainEntityBackground) for details.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const mainEntityOfPage = IriTerm.prevalidated(
    'http://schema.org/mainEntityOfPage',
  );

  /// offers [Expects: http://schema.org/Demand, http://schema.org/Offer]
  ///
  /// An offer to provide this item&#x2014;for example, an offer to sell a product, rent the DVD of a movie, perform a service, or give away tickets to an event. Use {[businessFunction]} to indicate the kind of transaction offered, i.e. sell, lease, etc. This property can also be used to describe a {[Demand]}. While this property is listed as expected on a number of common types, it can be used in others. In that case, using a second type, such as Product or a subtype of Product, can clarify the nature of the offer.
  ///
  ///
  /// Can be used on: http://schema.org/AggregateOffer, http://schema.org/CreativeWork, http://schema.org/EducationalOccupationalProgram, http://schema.org/Event, http://schema.org/MenuItem, http://schema.org/Product, http://schema.org/Service, http://schema.org/Trip
  ///
  static const offers = IriTerm.prevalidated('http://schema.org/offers');

  /// provider [Expects: http://schema.org/Organization, http://schema.org/Person]
  ///
  /// The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller.
  ///
  /// Can be used on: http://schema.org/Action, http://schema.org/CreativeWork, http://schema.org/EducationalOccupationalProgram, http://schema.org/FinancialIncentive, http://schema.org/Invoice, http://schema.org/ParcelDelivery, http://schema.org/Reservation, http://schema.org/Service, http://schema.org/Trip
  ///
  static const provider = IriTerm.prevalidated('http://schema.org/provider');

  /// subjectOf [Expects: http://schema.org/CreativeWork, http://schema.org/Event]
  ///
  /// A CreativeWork or Event about this Thing.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const subjectOf = IriTerm.prevalidated('http://schema.org/subjectOf');

  /// description [Expects: http://schema.org/Text, http://schema.org/TextObject]
  ///
  /// A description of the item.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const description = IriTerm.prevalidated(
    'http://schema.org/description',
  );

  /// image [Expects: http://schema.org/ImageObject, http://schema.org/URL]
  ///
  /// An image of the item. This can be a {[URL]} or a fully described {[ImageObject]}.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const image = IriTerm.prevalidated('http://schema.org/image');

  /// identifier [Expects: http://schema.org/PropertyValue, http://schema.org/Text, http://schema.org/URL]
  ///
  /// The identifier property represents any kind of identifier for any kind of {[Thing]}, such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
  ///
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const identifier = IriTerm.prevalidated(
    'http://schema.org/identifier',
  );

  /// source
  ///
  ///
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const source = IriTerm.prevalidated('http://schema.org/source');

  /// type from rdf vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Class]
  ///
  /// The subject is an instance of a class.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfType = IriTerm.prevalidated(
    'http://www.w3.org/1999/02/22-rdf-syntax-ns#type',
  );

  /// value from rdf vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// Idiomatic property used for structured values.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfValue = IriTerm.prevalidated(
    'http://www.w3.org/1999/02/22-rdf-syntax-ns#value',
  );

  /// comment from rdfs vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// A description of the subject resource.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfsComment = IriTerm.prevalidated(
    'http://www.w3.org/2000/01/rdf-schema#comment',
  );

  /// label from rdfs vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// A human-readable name for the subject.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfsLabel = IriTerm.prevalidated(
    'http://www.w3.org/2000/01/rdf-schema#label',
  );

  /// seeAlso from rdfs vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// Further information about the subject resource.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfsSeeAlso = IriTerm.prevalidated(
    'http://www.w3.org/2000/01/rdf-schema#seeAlso',
  );

  /// isDefinedBy from rdfs vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// The definition of the subject resource.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfsIsDefinedBy = IriTerm.prevalidated(
    'http://www.w3.org/2000/01/rdf-schema#isDefinedBy',
  );

  /// member from rdfs vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// A member of the subject resource.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfsMember = IriTerm.prevalidated(
    'http://www.w3.org/2000/01/rdf-schema#member',
  );

  /// annotatedProperty from owl vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// The property that determines the predicate of an annotated axiom or annotated annotation.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const owlAnnotatedProperty = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#annotatedProperty',
  );

  /// annotatedSource from owl vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// The property that determines the subject of an annotated axiom or annotated annotation.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const owlAnnotatedSource = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#annotatedSource',
  );

  /// annotatedTarget from owl vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// The property that determines the object of an annotated axiom or annotated annotation.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const owlAnnotatedTarget = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#annotatedTarget',
  );

  /// deprecated from owl vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// The annotation property that indicates that a given entity has been deprecated.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const owlDeprecated = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#deprecated',
  );

  /// members from owl vocabulary [Expects: http://www.w3.org/1999/02/22-rdf-syntax-ns#List]
  ///
  /// The property that determines the collection of members in either a owl:AllDifferent, owl:AllDisjointClasses or owl:AllDisjointProperties axiom.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const owlMembers = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#members',
  );

  /// versionInfo from owl vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// The annotation property that provides version information for an ontology or another OWL construct.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const owlVersionInfo = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#versionInfo',
  );

  /// abstract_ from bibo vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// A summary of the resource.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const biboAbstract_ = IriTerm.prevalidated(
    'http://purl.org/ontology/bibo/abstract',
  );
}
