// Copyright (c) 2025, Klas Kala√ü <habbatical@gmail.com>
// All rights reserved. Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// GENERATED CODE - DO NOT MODIFY BY HAND
// Generated by VocabularyBuilder

import 'package:rdf_core/rdf_core.dart';

/// Main SchemaHttp vocabulary class containing all terms
///
/// Contains all terms defined in the http://schema.org/ vocabulary.
class SchemaHttp {
  // Private constructor prevents instantiation
  const SchemaHttp._();

  /// Base IRI for SchemaHttp vocabulary
  /// [Spec](http://schema.org/)
  static const String namespace = 'http://schema.org/';
  static const String prefix = 'schemahttp';

  /// IRI for schemahttp:n3DModel
  ///
  /// A 3D model represents some kind of 3D content, which may have {[encoding]}s in one or more {[MediaObject]}s. Many 3D formats are available (e.g. see [Wikipedia](https://en.wikipedia.org/wiki/Category:3D_graphics_file_formats)); specific encoding formats can be represented using the {[encodingFormat]} property applied to the relevant {[MediaObject]}. For the
  /// case of a single file published after Zip compression, the convention of appending '+zip' to the {[encodingFormat]} can be used. Geospatial, AR/VR, artistic/animation, gaming, engineering and scientific content can all be represented using {[3DModel]}.
  ///
  static const n3DModel = IriTerm.prevalidated('http://schema.org/3DModel');

  /// IRI for schemahttp:AMRadioChannel
  ///
  /// A radio channel that uses AM.
  ///
  static const AMRadioChannel = IriTerm.prevalidated(
    'http://schema.org/AMRadioChannel',
  );

  /// IRI for schemahttp:APIReference
  ///
  /// Reference documentation for application programming interfaces (APIs).
  ///
  static const APIReference = IriTerm.prevalidated(
    'http://schema.org/APIReference',
  );

  /// IRI for schemahttp:AboutPage
  ///
  /// Web page type: About page.
  ///
  static const AboutPage = IriTerm.prevalidated('http://schema.org/AboutPage');

  /// IRI for schemahttp:AcceptAction
  ///
  /// The act of committing to/adopting an object.\n\nRelated actions:\n\n* {[RejectAction]}: The antonym of AcceptAction.
  ///
  static const AcceptAction = IriTerm.prevalidated(
    'http://schema.org/AcceptAction',
  );

  /// IRI for schemahttp:Accommodation
  ///
  /// An accommodation is a place that can accommodate human beings, e.g. a hotel room, a camping pitch, or a meeting room. Many accommodations are for overnight stays, but this is not a mandatory requirement.
  /// For more specific types of accommodations not defined in schema.org, one can use {[additionalType]} with external vocabularies.
  /// <br /><br />
  /// See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.
  ///
  ///
  static const Accommodation = IriTerm.prevalidated(
    'http://schema.org/Accommodation',
  );

  /// IRI for schemahttp:AccountingService
  ///
  /// Accountancy business.\n\nAs a {[LocalBusiness]} it can be described as a {[provider]} of one or more {[Service]}\(s).
  ///
  ///
  static const AccountingService = IriTerm.prevalidated(
    'http://schema.org/AccountingService',
  );

  /// IRI for schemahttp:AchieveAction
  ///
  /// The act of accomplishing something via previous efforts. It is an instantaneous action rather than an ongoing process.
  ///
  static const AchieveAction = IriTerm.prevalidated(
    'http://schema.org/AchieveAction',
  );

  /// IRI for schemahttp:Action
  ///
  /// An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](http://schema.org/docs/actions.html).
  ///
  static const Action = IriTerm.prevalidated('http://schema.org/Action');

  /// IRI for schemahttp:ActionAccessSpecification
  ///
  /// A set of requirements that must be fulfilled in order to perform an Action.
  ///
  static const ActionAccessSpecification = IriTerm.prevalidated(
    'http://schema.org/ActionAccessSpecification',
  );

  /// IRI for schemahttp:ActionStatusType
  ///
  /// The status of an Action.
  ///
  static const ActionStatusType = IriTerm.prevalidated(
    'http://schema.org/ActionStatusType',
  );

  /// IRI for schemahttp:ActivateAction
  ///
  /// The act of starting or activating a device or application (e.g. starting a timer or turning on a flashlight).
  ///
  static const ActivateAction = IriTerm.prevalidated(
    'http://schema.org/ActivateAction',
  );

  /// IRI for schemahttp:AddAction
  ///
  /// The act of editing by adding an object to a collection.
  ///
  static const AddAction = IriTerm.prevalidated('http://schema.org/AddAction');

  /// IRI for schemahttp:AdministrativeArea
  ///
  /// A geographical region, typically under the jurisdiction of a particular government.
  ///
  static const AdministrativeArea = IriTerm.prevalidated(
    'http://schema.org/AdministrativeArea',
  );

  /// IRI for schemahttp:AdultEntertainment
  ///
  /// An adult entertainment establishment.
  ///
  static const AdultEntertainment = IriTerm.prevalidated(
    'http://schema.org/AdultEntertainment',
  );

  /// IRI for schemahttp:AdultOrientedEnumeration
  ///
  /// Enumeration of considerations that make a product relevant or potentially restricted for adults only.
  ///
  static const AdultOrientedEnumeration = IriTerm.prevalidated(
    'http://schema.org/AdultOrientedEnumeration',
  );

  /// IRI for schemahttp:AdvertiserContentArticle
  ///
  /// An {[Article]} that an external entity has paid to place or to produce to its specifications. Includes [advertorials](https://en.wikipedia.org/wiki/Advertorial), sponsored content, native advertising and other paid content.
  ///
  static const AdvertiserContentArticle = IriTerm.prevalidated(
    'http://schema.org/AdvertiserContentArticle',
  );

  /// IRI for schemahttp:AggregateOffer
  ///
  /// When a single product is associated with multiple offers (for example, the same pair of shoes is offered by different merchants), then AggregateOffer can be used.\n\nNote: AggregateOffers are normally expected to associate multiple offers that all share the same defined {[businessFunction]} value, or default to http://purl.org/goodrelations/v1#Sell if businessFunction is not explicitly defined.
  ///
  static const AggregateOffer = IriTerm.prevalidated(
    'http://schema.org/AggregateOffer',
  );

  /// IRI for schemahttp:AggregateRating
  ///
  /// The average rating based on multiple ratings or reviews.
  ///
  static const AggregateRating = IriTerm.prevalidated(
    'http://schema.org/AggregateRating',
  );

  /// IRI for schemahttp:AgreeAction
  ///
  /// The act of expressing a consistency of opinion with the object. An agent agrees to/about an object (a proposition, topic or theme) with participants.
  ///
  static const AgreeAction = IriTerm.prevalidated(
    'http://schema.org/AgreeAction',
  );

  /// IRI for schemahttp:Airline
  ///
  /// An organization that provides flights for passengers.
  ///
  static const Airline = IriTerm.prevalidated('http://schema.org/Airline');

  /// IRI for schemahttp:Airport
  ///
  /// An airport.
  ///
  static const Airport = IriTerm.prevalidated('http://schema.org/Airport');

  /// IRI for schemahttp:AlignmentObject
  ///
  /// An intangible item that describes an alignment between a learning resource and a node in an educational framework.
  ///
  /// Should not be used where the nature of the alignment can be described using a simple property, for example to express that a resource {[teaches]} or {[assesses]} a competency.
  ///
  static const AlignmentObject = IriTerm.prevalidated(
    'http://schema.org/AlignmentObject',
  );

  /// IRI for schemahttp:AllocateAction
  ///
  /// The act of organizing tasks/objects/events by associating resources to it.
  ///
  static const AllocateAction = IriTerm.prevalidated(
    'http://schema.org/AllocateAction',
  );

  /// IRI for schemahttp:AmpStory
  ///
  /// A creative work with a visual storytelling format intended to be viewed online, particularly on mobile devices.
  ///
  static const AmpStory = IriTerm.prevalidated('http://schema.org/AmpStory');

  /// IRI for schemahttp:AmusementPark
  ///
  /// An amusement park.
  ///
  static const AmusementPark = IriTerm.prevalidated(
    'http://schema.org/AmusementPark',
  );

  /// IRI for schemahttp:AnalysisNewsArticle
  ///
  /// An AnalysisNewsArticle is a {[NewsArticle]} that, while based on factual reporting, incorporates the expertise of the author/producer, offering interpretations and conclusions.
  ///
  static const AnalysisNewsArticle = IriTerm.prevalidated(
    'http://schema.org/AnalysisNewsArticle',
  );

  /// IRI for schemahttp:AnatomicalStructure
  ///
  /// Any part of the human body, typically a component of an anatomical system. Organs, tissues, and cells are all anatomical structures.
  ///
  static const AnatomicalStructure = IriTerm.prevalidated(
    'http://schema.org/AnatomicalStructure',
  );

  /// IRI for schemahttp:AnatomicalSystem
  ///
  /// An anatomical system is a group of anatomical structures that work together to perform a certain task. Anatomical systems, such as organ systems, are one organizing principle of anatomy, and can include circulatory, digestive, endocrine, integumentary, immune, lymphatic, muscular, nervous, reproductive, respiratory, skeletal, urinary, vestibular, and other systems.
  ///
  static const AnatomicalSystem = IriTerm.prevalidated(
    'http://schema.org/AnatomicalSystem',
  );

  /// IRI for schemahttp:AnimalShelter
  ///
  /// Animal shelter.
  ///
  static const AnimalShelter = IriTerm.prevalidated(
    'http://schema.org/AnimalShelter',
  );

  /// IRI for schemahttp:Answer
  ///
  /// An answer offered to a question; perhaps correct, perhaps opinionated or wrong.
  ///
  static const Answer = IriTerm.prevalidated('http://schema.org/Answer');

  /// IRI for schemahttp:Apartment
  ///
  /// An apartment (in American English) or flat (in British English) is a self-contained housing unit (a type of residential real estate) that occupies only part of a building (source: Wikipedia, the free encyclopedia, see <a href="http://en.wikipedia.org/wiki/Apartment">http://en.wikipedia.org/wiki/Apartment</a>).
  ///
  static const Apartment = IriTerm.prevalidated('http://schema.org/Apartment');

  /// IRI for schemahttp:ApartmentComplex
  ///
  /// Residence type: Apartment complex.
  ///
  static const ApartmentComplex = IriTerm.prevalidated(
    'http://schema.org/ApartmentComplex',
  );

  /// IRI for schemahttp:AppendAction
  ///
  /// The act of inserting at the end if an ordered collection.
  ///
  static const AppendAction = IriTerm.prevalidated(
    'http://schema.org/AppendAction',
  );

  /// IRI for schemahttp:ApplyAction
  ///
  /// The act of registering to an organization/service without the guarantee to receive it.\n\nRelated actions:\n\n* {[RegisterAction]}: Unlike RegisterAction, ApplyAction has no guarantees that the application will be accepted.
  ///
  static const ApplyAction = IriTerm.prevalidated(
    'http://schema.org/ApplyAction',
  );

  /// IRI for schemahttp:ApprovedIndication
  ///
  /// An indication for a medical therapy that has been formally specified or approved by a regulatory body that regulates use of the therapy; for example, the US FDA approves indications for most drugs in the US.
  ///
  static const ApprovedIndication = IriTerm.prevalidated(
    'http://schema.org/ApprovedIndication',
  );

  /// IRI for schemahttp:Aquarium
  ///
  /// Aquarium.
  ///
  static const Aquarium = IriTerm.prevalidated('http://schema.org/Aquarium');

  /// IRI for schemahttp:ArchiveComponent
  ///
  /// An intangible type to be applied to any archive content, carrying with it a set of properties required to describe archival items and collections.
  ///
  static const ArchiveComponent = IriTerm.prevalidated(
    'http://schema.org/ArchiveComponent',
  );

  /// IRI for schemahttp:ArchiveOrganization
  ///
  /// An organization with archival holdings. An organization which keeps and preserves archival material and typically makes it accessible to the public.
  ///
  static const ArchiveOrganization = IriTerm.prevalidated(
    'http://schema.org/ArchiveOrganization',
  );

  /// IRI for schemahttp:ArriveAction
  ///
  /// The act of arriving at a place. An agent arrives at a destination from a fromLocation, optionally with participants.
  ///
  static const ArriveAction = IriTerm.prevalidated(
    'http://schema.org/ArriveAction',
  );

  /// IRI for schemahttp:ArtGallery
  ///
  /// An art gallery.
  ///
  static const ArtGallery = IriTerm.prevalidated(
    'http://schema.org/ArtGallery',
  );

  /// IRI for schemahttp:Artery
  ///
  /// A type of blood vessel that specifically carries blood away from the heart.
  ///
  static const Artery = IriTerm.prevalidated('http://schema.org/Artery');

  /// IRI for schemahttp:Article
  ///
  /// An article, such as a news article or piece of investigative report. Newspapers and magazines have articles of many different types and this is intended to cover them all.\n\nSee also [blog post](http://blog.schema.org/2014/09/schemaorg-support-for-bibliographic_2.html).
  ///
  static const Article = IriTerm.prevalidated('http://schema.org/Article');

  /// IRI for schemahttp:AskAction
  ///
  /// The act of posing a question / favor to someone.\n\nRelated actions:\n\n* {[ReplyAction]}: Appears generally as a response to AskAction.
  ///
  static const AskAction = IriTerm.prevalidated('http://schema.org/AskAction');

  /// IRI for schemahttp:AskPublicNewsArticle
  ///
  /// A {[NewsArticle]} expressing an open call by a {[NewsMediaOrganization]} asking the public for input, insights, clarifications, anecdotes, documentation, etc., on an issue, for reporting purposes.
  ///
  static const AskPublicNewsArticle = IriTerm.prevalidated(
    'http://schema.org/AskPublicNewsArticle',
  );

  /// IRI for schemahttp:AssessAction
  ///
  /// The act of forming one's opinion, reaction or sentiment.
  ///
  static const AssessAction = IriTerm.prevalidated(
    'http://schema.org/AssessAction',
  );

  /// IRI for schemahttp:AssignAction
  ///
  /// The act of allocating an action/event/task to some destination (someone or something).
  ///
  static const AssignAction = IriTerm.prevalidated(
    'http://schema.org/AssignAction',
  );

  /// IRI for schemahttp:Atlas
  ///
  /// A collection or bound volume of maps, charts, plates or tables, physical or in media form illustrating any subject.
  ///
  static const Atlas = IriTerm.prevalidated('http://schema.org/Atlas');

  /// IRI for schemahttp:Attorney
  ///
  /// Professional service: Attorney. \n\nThis type is deprecated - {[LegalService]} is more inclusive and less ambiguous.
  ///
  static const Attorney = IriTerm.prevalidated('http://schema.org/Attorney');

  /// IRI for schemahttp:Audience
  ///
  /// Intended audience for an item, i.e. the group for whom the item was created.
  ///
  static const Audience = IriTerm.prevalidated('http://schema.org/Audience');

  /// IRI for schemahttp:AudioObject
  ///
  /// An audio file.
  ///
  static const AudioObject = IriTerm.prevalidated(
    'http://schema.org/AudioObject',
  );

  /// IRI for schemahttp:AudioObjectSnapshot
  ///
  /// A specific and exact (byte-for-byte) version of an {[AudioObject]}. Two byte-for-byte identical files, for the purposes of this type, considered identical. If they have different embedded metadata the files will differ. Different external facts about the files, e.g. creator or dateCreated that aren't represented in their actual content, do not affect this notion of identity.
  ///
  static const AudioObjectSnapshot = IriTerm.prevalidated(
    'http://schema.org/AudioObjectSnapshot',
  );

  /// IRI for schemahttp:Audiobook
  ///
  /// An audiobook.
  ///
  static const Audiobook = IriTerm.prevalidated('http://schema.org/Audiobook');

  /// IRI for schemahttp:AuthorizeAction
  ///
  /// The act of granting permission to an object.
  ///
  static const AuthorizeAction = IriTerm.prevalidated(
    'http://schema.org/AuthorizeAction',
  );

  /// IRI for schemahttp:AutoBodyShop
  ///
  /// Auto body shop.
  ///
  static const AutoBodyShop = IriTerm.prevalidated(
    'http://schema.org/AutoBodyShop',
  );

  /// IRI for schemahttp:AutoDealer
  ///
  /// An car dealership.
  ///
  static const AutoDealer = IriTerm.prevalidated(
    'http://schema.org/AutoDealer',
  );

  /// IRI for schemahttp:AutoPartsStore
  ///
  /// An auto parts store.
  ///
  static const AutoPartsStore = IriTerm.prevalidated(
    'http://schema.org/AutoPartsStore',
  );

  /// IRI for schemahttp:AutoRental
  ///
  /// A car rental business.
  ///
  static const AutoRental = IriTerm.prevalidated(
    'http://schema.org/AutoRental',
  );

  /// IRI for schemahttp:AutoRepair
  ///
  /// Car repair business.
  ///
  static const AutoRepair = IriTerm.prevalidated(
    'http://schema.org/AutoRepair',
  );

  /// IRI for schemahttp:AutoWash
  ///
  /// A car wash business.
  ///
  static const AutoWash = IriTerm.prevalidated('http://schema.org/AutoWash');

  /// IRI for schemahttp:AutomatedTeller
  ///
  /// ATM/cash machine.
  ///
  static const AutomatedTeller = IriTerm.prevalidated(
    'http://schema.org/AutomatedTeller',
  );

  /// IRI for schemahttp:AutomotiveBusiness
  ///
  /// Car repair, sales, or parts.
  ///
  static const AutomotiveBusiness = IriTerm.prevalidated(
    'http://schema.org/AutomotiveBusiness',
  );

  /// IRI for schemahttp:BackgroundNewsArticle
  ///
  /// A {[NewsArticle]} providing historical context, definition and detail on a specific topic (aka "explainer" or "backgrounder"). For example, an in-depth article or frequently-asked-questions ([FAQ](https://en.wikipedia.org/wiki/FAQ)) document on topics such as Climate Change or the European Union. Other kinds of background material from a non-news setting are often described using {[Book]} or {[Article]}, in particular {[ScholarlyArticle]}. See also {[NewsArticle]} for related vocabulary from a learning/education perspective.
  ///
  static const BackgroundNewsArticle = IriTerm.prevalidated(
    'http://schema.org/BackgroundNewsArticle',
  );

  /// IRI for schemahttp:Bakery
  ///
  /// A bakery.
  ///
  static const Bakery = IriTerm.prevalidated('http://schema.org/Bakery');

  /// IRI for schemahttp:BankAccount
  ///
  /// A product or service offered by a bank whereby one may deposit, withdraw or transfer money and in some cases be paid interest.
  ///
  static const BankAccount = IriTerm.prevalidated(
    'http://schema.org/BankAccount',
  );

  /// IRI for schemahttp:BankOrCreditUnion
  ///
  /// Bank or credit union.
  ///
  static const BankOrCreditUnion = IriTerm.prevalidated(
    'http://schema.org/BankOrCreditUnion',
  );

  /// IRI for schemahttp:BarOrPub
  ///
  /// A bar or pub.
  ///
  static const BarOrPub = IriTerm.prevalidated('http://schema.org/BarOrPub');

  /// IRI for schemahttp:Barcode
  ///
  /// An image of a visual machine-readable code such as a barcode or QR code.
  ///
  static const Barcode = IriTerm.prevalidated('http://schema.org/Barcode');

  /// IRI for schemahttp:Beach
  ///
  /// Beach.
  ///
  static const Beach = IriTerm.prevalidated('http://schema.org/Beach');

  /// IRI for schemahttp:BeautySalon
  ///
  /// Beauty salon.
  ///
  static const BeautySalon = IriTerm.prevalidated(
    'http://schema.org/BeautySalon',
  );

  /// IRI for schemahttp:BedAndBreakfast
  ///
  /// Bed and breakfast.
  /// <br /><br />
  /// See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.
  ///
  ///
  static const BedAndBreakfast = IriTerm.prevalidated(
    'http://schema.org/BedAndBreakfast',
  );

  /// IRI for schemahttp:BedDetails
  ///
  /// An entity holding detailed information about the available bed types, e.g. the quantity of twin beds for a hotel room. For the single case of just one bed of a certain type, you can use bed directly with a text. See also {[BedType]} (under development).
  ///
  static const BedDetails = IriTerm.prevalidated(
    'http://schema.org/BedDetails',
  );

  /// IRI for schemahttp:BedType
  ///
  /// A type of bed. This is used for indicating the bed or beds available in an accommodation.
  ///
  static const BedType = IriTerm.prevalidated('http://schema.org/BedType');

  /// IRI for schemahttp:BefriendAction
  ///
  /// The act of forming a personal connection with someone (object) mutually/bidirectionally/symmetrically.\n\nRelated actions:\n\n* {[FollowAction]}: Unlike FollowAction, BefriendAction implies that the connection is reciprocal.
  ///
  static const BefriendAction = IriTerm.prevalidated(
    'http://schema.org/BefriendAction',
  );

  /// IRI for schemahttp:BikeStore
  ///
  /// A bike store.
  ///
  static const BikeStore = IriTerm.prevalidated('http://schema.org/BikeStore');

  /// IRI for schemahttp:BioChemEntity
  ///
  /// Any biological, chemical, or biochemical thing. For example: a protein; a gene; a chemical; a synthetic chemical.
  ///
  static const BioChemEntity = IriTerm.prevalidated(
    'http://schema.org/BioChemEntity',
  );

  /// IRI for schemahttp:Blog
  ///
  /// A [blog](https://en.wikipedia.org/wiki/Blog), sometimes known as a "weblog". Note that the individual posts ({[BlogPosting]}s) in a {[Blog]} are often colloquially referred to by the same term.
  ///
  static const Blog = IriTerm.prevalidated('http://schema.org/Blog');

  /// IRI for schemahttp:BlogPosting
  ///
  /// A blog post.
  ///
  static const BlogPosting = IriTerm.prevalidated(
    'http://schema.org/BlogPosting',
  );

  /// IRI for schemahttp:BloodTest
  ///
  /// A medical test performed on a sample of a patient's blood.
  ///
  static const BloodTest = IriTerm.prevalidated('http://schema.org/BloodTest');

  /// IRI for schemahttp:BoardingPolicyType
  ///
  /// A type of boarding policy used by an airline.
  ///
  static const BoardingPolicyType = IriTerm.prevalidated(
    'http://schema.org/BoardingPolicyType',
  );

  /// IRI for schemahttp:BoatReservation
  ///
  /// A reservation for boat travel.
  ///
  /// Note: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, use {[Offer]}.
  ///
  static const BoatReservation = IriTerm.prevalidated(
    'http://schema.org/BoatReservation',
  );

  /// IRI for schemahttp:BoatTerminal
  ///
  /// A terminal for boats, ships, and other water vessels.
  ///
  static const BoatTerminal = IriTerm.prevalidated(
    'http://schema.org/BoatTerminal',
  );

  /// IRI for schemahttp:BoatTrip
  ///
  /// A trip on a commercial ferry line.
  ///
  static const BoatTrip = IriTerm.prevalidated('http://schema.org/BoatTrip');

  /// IRI for schemahttp:BodyMeasurementTypeEnumeration
  ///
  /// Enumerates types (or dimensions) of a person's body measurements, for example for fitting of clothes.
  ///
  static const BodyMeasurementTypeEnumeration = IriTerm.prevalidated(
    'http://schema.org/BodyMeasurementTypeEnumeration',
  );

  /// IRI for schemahttp:BodyOfWater
  ///
  /// A body of water, such as a sea, ocean, or lake.
  ///
  static const BodyOfWater = IriTerm.prevalidated(
    'http://schema.org/BodyOfWater',
  );

  /// IRI for schemahttp:Bone
  ///
  /// Rigid connective tissue that comprises up the skeletal structure of the human body.
  ///
  static const Bone = IriTerm.prevalidated('http://schema.org/Bone');

  /// IRI for schemahttp:Book
  ///
  /// A book.
  ///
  static const Book = IriTerm.prevalidated('http://schema.org/Book');

  /// IRI for schemahttp:BookFormatType
  ///
  /// The publication format of the book.
  ///
  static const BookFormatType = IriTerm.prevalidated(
    'http://schema.org/BookFormatType',
  );

  /// IRI for schemahttp:BookSeries
  ///
  /// A series of books. Included books can be indicated with the hasPart property.
  ///
  static const BookSeries = IriTerm.prevalidated(
    'http://schema.org/BookSeries',
  );

  /// IRI for schemahttp:BookStore
  ///
  /// A bookstore.
  ///
  static const BookStore = IriTerm.prevalidated('http://schema.org/BookStore');

  /// IRI for schemahttp:BookmarkAction
  ///
  /// An agent bookmarks/flags/labels/tags/marks an object.
  ///
  static const BookmarkAction = IriTerm.prevalidated(
    'http://schema.org/BookmarkAction',
  );

  /// IRI for schemahttp:Boolean
  ///
  /// Boolean: True or False.
  ///
  static const Boolean = IriTerm.prevalidated('http://schema.org/Boolean');

  /// IRI for schemahttp:BorrowAction
  ///
  /// The act of obtaining an object under an agreement to return it at a later date. Reciprocal of LendAction.\n\nRelated actions:\n\n* {[LendAction]}: Reciprocal of BorrowAction.
  ///
  static const BorrowAction = IriTerm.prevalidated(
    'http://schema.org/BorrowAction',
  );

  /// IRI for schemahttp:BowlingAlley
  ///
  /// A bowling alley.
  ///
  static const BowlingAlley = IriTerm.prevalidated(
    'http://schema.org/BowlingAlley',
  );

  /// IRI for schemahttp:BrainStructure
  ///
  /// Any anatomical structure which pertains to the soft nervous tissue functioning as the coordinating center of sensation and intellectual and nervous activity.
  ///
  static const BrainStructure = IriTerm.prevalidated(
    'http://schema.org/BrainStructure',
  );

  /// IRI for schemahttp:Brand
  ///
  /// A brand is a name used by an organization or business person for labeling a product, product group, or similar.
  ///
  static const Brand = IriTerm.prevalidated('http://schema.org/Brand');

  /// IRI for schemahttp:BreadcrumbList
  ///
  /// A BreadcrumbList is an ItemList consisting of a chain of linked Web pages, typically described using at least their URL and their name, and typically ending with the current page.\n\nThe {[position]} property is used to reconstruct the order of the items in a BreadcrumbList. The convention is that a breadcrumb list has an {[itemListOrder]} of {[ItemListOrderAscending]} (lower values listed first), and that the first items in this list correspond to the "top" or beginning of the breadcrumb trail, e.g. with a site or section homepage. The specific values of 'position' are not assigned meaning for a BreadcrumbList, but they should be integers, e.g. beginning with '1' for the first item in the list.
  ///
  ///
  static const BreadcrumbList = IriTerm.prevalidated(
    'http://schema.org/BreadcrumbList',
  );

  /// IRI for schemahttp:Brewery
  ///
  /// Brewery.
  ///
  static const Brewery = IriTerm.prevalidated('http://schema.org/Brewery');

  /// IRI for schemahttp:Bridge
  ///
  /// A bridge.
  ///
  static const Bridge = IriTerm.prevalidated('http://schema.org/Bridge');

  /// IRI for schemahttp:BroadcastChannel
  ///
  /// A unique instance of a BroadcastService on a CableOrSatelliteService lineup.
  ///
  static const BroadcastChannel = IriTerm.prevalidated(
    'http://schema.org/BroadcastChannel',
  );

  /// IRI for schemahttp:BroadcastEvent
  ///
  /// An over the air or online broadcast event.
  ///
  static const BroadcastEvent = IriTerm.prevalidated(
    'http://schema.org/BroadcastEvent',
  );

  /// IRI for schemahttp:BroadcastFrequencySpecification
  ///
  /// The frequency in MHz and the modulation used for a particular BroadcastService.
  ///
  static const BroadcastFrequencySpecification = IriTerm.prevalidated(
    'http://schema.org/BroadcastFrequencySpecification',
  );

  /// IRI for schemahttp:BroadcastService
  ///
  /// A delivery service through which content is provided via broadcast over the air or online.
  ///
  static const BroadcastService = IriTerm.prevalidated(
    'http://schema.org/BroadcastService',
  );

  /// IRI for schemahttp:BrokerageAccount
  ///
  /// An account that allows an investor to deposit funds and place investment orders with a licensed broker or brokerage firm.
  ///
  static const BrokerageAccount = IriTerm.prevalidated(
    'http://schema.org/BrokerageAccount',
  );

  /// IRI for schemahttp:BuddhistTemple
  ///
  /// A Buddhist temple.
  ///
  static const BuddhistTemple = IriTerm.prevalidated(
    'http://schema.org/BuddhistTemple',
  );

  /// IRI for schemahttp:BusOrCoach
  ///
  /// A bus (also omnibus or autobus) is a road vehicle designed to carry passengers. Coaches are luxury buses, usually in service for long distance travel.
  ///
  static const BusOrCoach = IriTerm.prevalidated(
    'http://schema.org/BusOrCoach',
  );

  /// IRI for schemahttp:BusReservation
  ///
  /// A reservation for bus travel. \n\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, use {[Offer]}.
  ///
  static const BusReservation = IriTerm.prevalidated(
    'http://schema.org/BusReservation',
  );

  /// IRI for schemahttp:BusStation
  ///
  /// A bus station.
  ///
  static const BusStation = IriTerm.prevalidated(
    'http://schema.org/BusStation',
  );

  /// IRI for schemahttp:BusStop
  ///
  /// A bus stop.
  ///
  static const BusStop = IriTerm.prevalidated('http://schema.org/BusStop');

  /// IRI for schemahttp:BusTrip
  ///
  /// A trip on a commercial bus line.
  ///
  static const BusTrip = IriTerm.prevalidated('http://schema.org/BusTrip');

  /// IRI for schemahttp:BusinessAudience
  ///
  /// A set of characteristics belonging to businesses, e.g. who compose an item's target audience.
  ///
  static const BusinessAudience = IriTerm.prevalidated(
    'http://schema.org/BusinessAudience',
  );

  /// IRI for schemahttp:BusinessEntityType
  ///
  /// A business entity type is a conceptual entity representing the legal form, the size, the main line of business, the position in the value chain, or any combination thereof, of an organization or business person.\n\nCommonly used values:\n\n* http://purl.org/goodrelations/v1#Business\n* http://purl.org/goodrelations/v1#Enduser\n* http://purl.org/goodrelations/v1#PublicInstitution\n* http://purl.org/goodrelations/v1#Reseller
  ///
  ///
  static const BusinessEntityType = IriTerm.prevalidated(
    'http://schema.org/BusinessEntityType',
  );

  /// IRI for schemahttp:BusinessEvent
  ///
  /// Event type: Business event.
  ///
  static const BusinessEvent = IriTerm.prevalidated(
    'http://schema.org/BusinessEvent',
  );

  /// IRI for schemahttp:BusinessFunction
  ///
  /// The business function specifies the type of activity or access (i.e., the bundle of rights) offered by the organization or business person through the offer. Typical are sell, rental or lease, maintenance or repair, manufacture / produce, recycle / dispose, engineering / construction, or installation. Proprietary specifications of access rights are also instances of this class.\n\nCommonly used values:\n\n* http://purl.org/goodrelations/v1#ConstructionInstallation\n* http://purl.org/goodrelations/v1#Dispose\n* http://purl.org/goodrelations/v1#LeaseOut\n* http://purl.org/goodrelations/v1#Maintain\n* http://purl.org/goodrelations/v1#ProvideService\n* http://purl.org/goodrelations/v1#Repair\n* http://purl.org/goodrelations/v1#Sell\n* http://purl.org/goodrelations/v1#Buy
  ///
  ///
  static const BusinessFunction = IriTerm.prevalidated(
    'http://schema.org/BusinessFunction',
  );

  /// IRI for schemahttp:BuyAction
  ///
  /// The act of giving money to a seller in exchange for goods or services rendered. An agent buys an object, product, or service from a seller for a price. Reciprocal of SellAction.
  ///
  static const BuyAction = IriTerm.prevalidated('http://schema.org/BuyAction');

  /// IRI for schemahttp:CDCPMDRecord
  ///
  /// A CDCPMDRecord is a data structure representing a record in a CDC tabular data format
  /// used for hospital data reporting. See [documentation](/docs/cdc-covid.html) for details, and the linked CDC materials for authoritative
  /// definitions used as the source here.
  ///
  ///
  static const CDCPMDRecord = IriTerm.prevalidated(
    'http://schema.org/CDCPMDRecord',
  );

  /// IRI for schemahttp:CableOrSatelliteService
  ///
  /// A service which provides access to media programming like TV or radio. Access may be via cable or satellite.
  ///
  static const CableOrSatelliteService = IriTerm.prevalidated(
    'http://schema.org/CableOrSatelliteService',
  );

  /// IRI for schemahttp:CafeOrCoffeeShop
  ///
  /// A cafe or coffee shop.
  ///
  static const CafeOrCoffeeShop = IriTerm.prevalidated(
    'http://schema.org/CafeOrCoffeeShop',
  );

  /// IRI for schemahttp:Campground
  ///
  /// A camping site, campsite, or {[Campground]} is a place used for overnight stay in the outdoors, typically containing individual {[CampingPitch]} locations. \n\n
  /// In British English a campsite is an area, usually divided into a number of pitches, where people can camp overnight using tents or camper vans or caravans; this British English use of the word is synonymous with the American English expression campground. In American English the term campsite generally means an area where an individual, family, group, or military unit can pitch a tent or park a camper; a campground may contain many campsites (source: Wikipedia, see [https://en.wikipedia.org/wiki/Campsite](https://en.wikipedia.org/wiki/Campsite)).\n\n
  ///
  /// See also the dedicated [document on the use of schema.org for marking up hotels and other forms of accommodations](/docs/hotels.html).
  ///
  ///
  static const Campground = IriTerm.prevalidated(
    'http://schema.org/Campground',
  );

  /// IRI for schemahttp:CampingPitch
  ///
  /// A {[CampingPitch]} is an individual place for overnight stay in the outdoors, typically being part of a larger camping site, or {[Campground]}.\n\n
  /// In British English a campsite, or campground, is an area, usually divided into a number of pitches, where people can camp overnight using tents or camper vans or caravans; this British English use of the word is synonymous with the American English expression campground. In American English the term campsite generally means an area where an individual, family, group, or military unit can pitch a tent or park a camper; a campground may contain many campsites.
  /// (Source: Wikipedia, see [https://en.wikipedia.org/wiki/Campsite](https://en.wikipedia.org/wiki/Campsite).)\n\n
  /// See also the dedicated [document on the use of schema.org for marking up hotels and other forms of accommodations](/docs/hotels.html).
  ///
  ///
  static const CampingPitch = IriTerm.prevalidated(
    'http://schema.org/CampingPitch',
  );

  /// IRI for schemahttp:Canal
  ///
  /// A canal, like the Panama Canal.
  ///
  static const Canal = IriTerm.prevalidated('http://schema.org/Canal');

  /// IRI for schemahttp:CancelAction
  ///
  /// The act of asserting that a future event/action is no longer going to happen.\n\nRelated actions:\n\n* {[ConfirmAction]}: The antonym of CancelAction.
  ///
  static const CancelAction = IriTerm.prevalidated(
    'http://schema.org/CancelAction',
  );

  /// IRI for schemahttp:Car
  ///
  /// A car is a wheeled, self-powered motor vehicle used for transportation.
  ///
  static const Car = IriTerm.prevalidated('http://schema.org/Car');

  /// IRI for schemahttp:CarUsageType
  ///
  /// A value indicating a special usage of a car, e.g. commercial rental, driving school, or as a taxi.
  ///
  static const CarUsageType = IriTerm.prevalidated(
    'http://schema.org/CarUsageType',
  );

  /// IRI for schemahttp:Casino
  ///
  /// A casino.
  ///
  static const Casino = IriTerm.prevalidated('http://schema.org/Casino');

  /// IRI for schemahttp:CategoryCode
  ///
  /// A Category Code.
  ///
  static const CategoryCode = IriTerm.prevalidated(
    'http://schema.org/CategoryCode',
  );

  /// IRI for schemahttp:CategoryCodeSet
  ///
  /// A set of Category Code values.
  ///
  static const CategoryCodeSet = IriTerm.prevalidated(
    'http://schema.org/CategoryCodeSet',
  );

  /// IRI for schemahttp:CatholicChurch
  ///
  /// A Catholic church.
  ///
  static const CatholicChurch = IriTerm.prevalidated(
    'http://schema.org/CatholicChurch',
  );

  /// IRI for schemahttp:Cemetery
  ///
  /// A graveyard.
  ///
  static const Cemetery = IriTerm.prevalidated('http://schema.org/Cemetery');

  /// IRI for schemahttp:Certification
  ///
  /// A Certification is an official and authoritative statement about a subject, for example a product, service, person, or organization. A certification is typically issued by an indendent certification body, for example a professional organization or government. It formally attests certain characteristics about the subject, for example Organizations can be ISO certified, Food products can be certified Organic or Vegan, a Person can be a certified professional, a Place can be certified for food processing. There are certifications for many domains: regulatory, organizational, recycling, food, efficiency, educational, ecological, etc. A certification is a form of credential, as are accreditations and licenses. Mapped from the [gs1:CertificationDetails](https://www.gs1.org/voc/CertificationDetails) class in the GS1 Web Vocabulary.
  ///
  static const Certification = IriTerm.prevalidated(
    'http://schema.org/Certification',
  );

  /// IRI for schemahttp:CertificationStatusEnumeration
  ///
  /// Enumerates the different statuses of a Certification (Active and Inactive).
  ///
  static const CertificationStatusEnumeration = IriTerm.prevalidated(
    'http://schema.org/CertificationStatusEnumeration',
  );

  /// IRI for schemahttp:Chapter
  ///
  /// One of the sections into which a book is divided. A chapter usually has a section number or a name.
  ///
  static const Chapter = IriTerm.prevalidated('http://schema.org/Chapter');

  /// IRI for schemahttp:CheckAction
  ///
  /// An agent inspects, determines, investigates, inquires, or examines an object's accuracy, quality, condition, or state.
  ///
  static const CheckAction = IriTerm.prevalidated(
    'http://schema.org/CheckAction',
  );

  /// IRI for schemahttp:CheckInAction
  ///
  /// The act of an agent communicating (service provider, social media, etc) their arrival by registering/confirming for a previously reserved service (e.g. flight check-in) or at a place (e.g. hotel), possibly resulting in a result (boarding pass, etc).\n\nRelated actions:\n\n* {[CheckOutAction]}: The antonym of CheckInAction.\n* {[ArriveAction]}: Unlike ArriveAction, CheckInAction implies that the agent is informing/confirming the start of a previously reserved service.\n* {[ConfirmAction]}: Unlike ConfirmAction, CheckInAction implies that the agent is informing/confirming the *start* of a previously reserved service rather than its validity/existence.
  ///
  static const CheckInAction = IriTerm.prevalidated(
    'http://schema.org/CheckInAction',
  );

  /// IRI for schemahttp:CheckOutAction
  ///
  /// The act of an agent communicating (service provider, social media, etc) their departure of a previously reserved service (e.g. flight check-in) or place (e.g. hotel).\n\nRelated actions:\n\n* {[CheckInAction]}: The antonym of CheckOutAction.\n* {[DepartAction]}: Unlike DepartAction, CheckOutAction implies that the agent is informing/confirming the end of a previously reserved service.\n* {[CancelAction]}: Unlike CancelAction, CheckOutAction implies that the agent is informing/confirming the end of a previously reserved service.
  ///
  static const CheckOutAction = IriTerm.prevalidated(
    'http://schema.org/CheckOutAction',
  );

  /// IRI for schemahttp:CheckoutPage
  ///
  /// Web page type: Checkout page.
  ///
  static const CheckoutPage = IriTerm.prevalidated(
    'http://schema.org/CheckoutPage',
  );

  /// IRI for schemahttp:ChemicalSubstance
  ///
  /// A chemical substance is 'a portion of matter of constant composition, composed of molecular entities of the same type or of different types' (source: [ChEBI:59999](https://www.ebi.ac.uk/chebi/searchId.do?chebiId=59999)).
  ///
  static const ChemicalSubstance = IriTerm.prevalidated(
    'http://schema.org/ChemicalSubstance',
  );

  /// IRI for schemahttp:ChildCare
  ///
  /// A Childcare center.
  ///
  static const ChildCare = IriTerm.prevalidated('http://schema.org/ChildCare');

  /// IRI for schemahttp:ChildrensEvent
  ///
  /// Event type: Children's event.
  ///
  static const ChildrensEvent = IriTerm.prevalidated(
    'http://schema.org/ChildrensEvent',
  );

  /// IRI for schemahttp:ChooseAction
  ///
  /// The act of expressing a preference from a set of options or a large or unbounded set of choices/options.
  ///
  static const ChooseAction = IriTerm.prevalidated(
    'http://schema.org/ChooseAction',
  );

  /// IRI for schemahttp:Church
  ///
  /// A church.
  ///
  static const Church = IriTerm.prevalidated('http://schema.org/Church');

  /// IRI for schemahttp:City
  ///
  /// A city or town.
  ///
  static const City = IriTerm.prevalidated('http://schema.org/City');

  /// IRI for schemahttp:CityHall
  ///
  /// A city hall.
  ///
  static const CityHall = IriTerm.prevalidated('http://schema.org/CityHall');

  /// IRI for schemahttp:CivicStructure
  ///
  /// A public structure, such as a town hall or concert hall.
  ///
  static const CivicStructure = IriTerm.prevalidated(
    'http://schema.org/CivicStructure',
  );

  /// IRI for schemahttp:Claim
  ///
  /// A {[Claim]} in Schema.org represents a specific, factually-oriented claim that could be the {[itemReviewed]} in a {[ClaimReview]}. The content of a claim can be summarized with the {[text]} property. Variations on well known claims can have their common identity indicated via {[sameAs]} links, and summarized with a {[name]}. Ideally, a {[Claim]} description includes enough contextual information to minimize the risk of ambiguity or inclarity. In practice, many claims are better understood in the context in which they appear or the interpretations provided by claim reviews.
  ///
  /// Beyond {[ClaimReview]}, the Claim type can be associated with related creative works - for example a {[ScholarlyArticle]} or {[Question]} might be {[about]} some {[Claim]}.
  ///
  /// At this time, Schema.org does not define any types of relationship between claims. This is a natural area for future exploration.
  ///
  ///
  static const Claim = IriTerm.prevalidated('http://schema.org/Claim');

  /// IRI for schemahttp:ClaimReview
  ///
  /// A fact-checking review of claims made (or reported) in some creative work (referenced via itemReviewed).
  ///
  static const ClaimReview = IriTerm.prevalidated(
    'http://schema.org/ClaimReview',
  );

  /// IRI for schemahttp:Class
  ///
  /// A class, also often called a 'Type'; equivalent to rdfs:Class.
  ///
  static const Class = IriTerm.prevalidated('http://schema.org/Class');

  /// IRI for schemahttp:Clip
  ///
  /// A short TV or radio program or a segment/part of a program.
  ///
  static const Clip = IriTerm.prevalidated('http://schema.org/Clip');

  /// IRI for schemahttp:ClothingStore
  ///
  /// A clothing store.
  ///
  static const ClothingStore = IriTerm.prevalidated(
    'http://schema.org/ClothingStore',
  );

  /// IRI for schemahttp:Code
  ///
  /// Computer programming source code. Example: Full (compile ready) solutions, code snippet samples, scripts, templates.
  ///
  static const Code = IriTerm.prevalidated('http://schema.org/Code');

  /// IRI for schemahttp:Collection
  ///
  /// A collection of items, e.g. creative works or products.
  ///
  static const Collection = IriTerm.prevalidated(
    'http://schema.org/Collection',
  );

  /// IRI for schemahttp:CollectionPage
  ///
  /// Web page type: Collection page.
  ///
  static const CollectionPage = IriTerm.prevalidated(
    'http://schema.org/CollectionPage',
  );

  /// IRI for schemahttp:CollegeOrUniversity
  ///
  /// A college, university, or other third-level educational institution.
  ///
  static const CollegeOrUniversity = IriTerm.prevalidated(
    'http://schema.org/CollegeOrUniversity',
  );

  /// IRI for schemahttp:ComedyClub
  ///
  /// A comedy club.
  ///
  static const ComedyClub = IriTerm.prevalidated(
    'http://schema.org/ComedyClub',
  );

  /// IRI for schemahttp:ComedyEvent
  ///
  /// Event type: Comedy event.
  ///
  static const ComedyEvent = IriTerm.prevalidated(
    'http://schema.org/ComedyEvent',
  );

  /// IRI for schemahttp:ComicCoverArt
  ///
  /// The artwork on the cover of a comic.
  ///
  static const ComicCoverArt = IriTerm.prevalidated(
    'http://schema.org/ComicCoverArt',
  );

  /// IRI for schemahttp:ComicIssue
  ///
  /// Individual comic issues are serially published as
  /// part of a larger series. For the sake of consistency, even one-shot issues
  /// belong to a series comprised of a single issue. All comic issues can be
  /// uniquely identified by: the combination of the name and volume number of the
  /// series to which the issue belongs; the issue number; and the variant
  /// description of the issue (if any).
  ///
  static const ComicIssue = IriTerm.prevalidated(
    'http://schema.org/ComicIssue',
  );

  /// IRI for schemahttp:ComicSeries
  ///
  /// A sequential publication of comic stories under a
  /// unifying title, for example "The Amazing Spider-Man" or "Groo the
  /// Wanderer".
  ///
  static const ComicSeries = IriTerm.prevalidated(
    'http://schema.org/ComicSeries',
  );

  /// IRI for schemahttp:ComicStory
  ///
  /// The term "story" is any indivisible, re-printable
  /// unit of a comic, including the interior stories, covers, and backmatter. Most
  /// comics have at least two stories: a cover (ComicCoverArt) and an interior story.
  ///
  static const ComicStory = IriTerm.prevalidated(
    'http://schema.org/ComicStory',
  );

  /// IRI for schemahttp:Comment
  ///
  /// A comment on an item - for example, a comment on a blog post. The comment's content is expressed via the {[text]} property, and its topic via {[about]}, properties shared with all CreativeWorks.
  ///
  static const Comment = IriTerm.prevalidated('http://schema.org/Comment');

  /// IRI for schemahttp:CommentAction
  ///
  /// The act of generating a comment about a subject.
  ///
  static const CommentAction = IriTerm.prevalidated(
    'http://schema.org/CommentAction',
  );

  /// IRI for schemahttp:CommunicateAction
  ///
  /// The act of conveying information to another person via a communication medium (instrument) such as speech, email, or telephone conversation.
  ///
  static const CommunicateAction = IriTerm.prevalidated(
    'http://schema.org/CommunicateAction',
  );

  /// IRI for schemahttp:CompleteDataFeed
  ///
  /// A {[CompleteDataFeed]} is a {[DataFeed]} whose standard representation includes content for every item currently in the feed.
  ///
  /// This is the equivalent of Atom's element as defined in Feed Paging and Archiving [RFC 5005](https://tools.ietf.org/html/rfc5005), for example (and as defined for Atom), when using data from a feed that represents a collection of items that varies over time (e.g. "Top Twenty Records") there is no need to have newer entries mixed in alongside older, obsolete entries. By marking this feed as a CompleteDataFeed, old entries can be safely discarded when the feed is refreshed, since we can assume the feed has provided descriptions for all current items.
  ///
  static const CompleteDataFeed = IriTerm.prevalidated(
    'http://schema.org/CompleteDataFeed',
  );

  /// IRI for schemahttp:CompoundPriceSpecification
  ///
  /// A compound price specification is one that bundles multiple prices that all apply in combination for different dimensions of consumption. Use the name property of the attached unit price specification for indicating the dimension of a price component (e.g. "electricity" or "final cleaning").
  ///
  static const CompoundPriceSpecification = IriTerm.prevalidated(
    'http://schema.org/CompoundPriceSpecification',
  );

  /// IRI for schemahttp:ComputerLanguage
  ///
  /// This type covers computer programming languages such as Scheme and Lisp, as well as other language-like computer representations. Natural languages are best represented with the {[Language]} type.
  ///
  static const ComputerLanguage = IriTerm.prevalidated(
    'http://schema.org/ComputerLanguage',
  );

  /// IRI for schemahttp:ComputerStore
  ///
  /// A computer store.
  ///
  static const ComputerStore = IriTerm.prevalidated(
    'http://schema.org/ComputerStore',
  );

  /// IRI for schemahttp:ConfirmAction
  ///
  /// The act of notifying someone that a future event/action is going to happen as expected.\n\nRelated actions:\n\n* {[CancelAction]}: The antonym of ConfirmAction.
  ///
  static const ConfirmAction = IriTerm.prevalidated(
    'http://schema.org/ConfirmAction',
  );

  /// IRI for schemahttp:Consortium
  ///
  /// A Consortium is a membership {[Organization]} whose members are typically Organizations.
  ///
  static const Consortium = IriTerm.prevalidated(
    'http://schema.org/Consortium',
  );

  /// IRI for schemahttp:ConstraintNode
  ///
  /// The ConstraintNode type is provided to support usecases in which a node in a structured data graph is described with properties which appear to describe a single entity, but are being used in a situation where they serve a more abstract purpose. A {[ConstraintNode]} can be described using {[constraintProperty]} and {[numConstraints]}. These constraint properties can serve a
  /// variety of purposes, and their values may sometimes be understood to indicate sets of possible values rather than single, exact and specific values.
  ///
  static const ConstraintNode = IriTerm.prevalidated(
    'http://schema.org/ConstraintNode',
  );

  /// IRI for schemahttp:ConsumeAction
  ///
  /// The act of ingesting information/resources/food.
  ///
  static const ConsumeAction = IriTerm.prevalidated(
    'http://schema.org/ConsumeAction',
  );

  /// IRI for schemahttp:ContactPage
  ///
  /// Web page type: Contact page.
  ///
  static const ContactPage = IriTerm.prevalidated(
    'http://schema.org/ContactPage',
  );

  /// IRI for schemahttp:ContactPoint
  ///
  /// A contact point&#x2014;for example, a Customer Complaints department.
  ///
  static const ContactPoint = IriTerm.prevalidated(
    'http://schema.org/ContactPoint',
  );

  /// IRI for schemahttp:ContactPointOption
  ///
  /// Enumerated options related to a ContactPoint.
  ///
  static const ContactPointOption = IriTerm.prevalidated(
    'http://schema.org/ContactPointOption',
  );

  /// IRI for schemahttp:Continent
  ///
  /// One of the continents (for example, Europe or Africa).
  ///
  static const Continent = IriTerm.prevalidated('http://schema.org/Continent');

  /// IRI for schemahttp:ControlAction
  ///
  /// An agent controls a device or application.
  ///
  static const ControlAction = IriTerm.prevalidated(
    'http://schema.org/ControlAction',
  );

  /// IRI for schemahttp:ConvenienceStore
  ///
  /// A convenience store.
  ///
  static const ConvenienceStore = IriTerm.prevalidated(
    'http://schema.org/ConvenienceStore',
  );

  /// IRI for schemahttp:Conversation
  ///
  /// One or more messages between organizations or people on a particular topic. Individual messages can be linked to the conversation with isPartOf or hasPart properties.
  ///
  static const Conversation = IriTerm.prevalidated(
    'http://schema.org/Conversation',
  );

  /// IRI for schemahttp:CookAction
  ///
  /// The act of producing/preparing food.
  ///
  static const CookAction = IriTerm.prevalidated(
    'http://schema.org/CookAction',
  );

  /// IRI for schemahttp:Cooperative
  ///
  /// An organization that is a joint project of multiple organizations or persons.
  ///
  static const Cooperative = IriTerm.prevalidated(
    'http://schema.org/Cooperative',
  );

  /// IRI for schemahttp:Corporation
  ///
  /// Organization: A business corporation.
  ///
  static const Corporation = IriTerm.prevalidated(
    'http://schema.org/Corporation',
  );

  /// IRI for schemahttp:CorrectionComment
  ///
  /// A {[comment]} that corrects {[CreativeWork]}.
  ///
  static const CorrectionComment = IriTerm.prevalidated(
    'http://schema.org/CorrectionComment',
  );

  /// IRI for schemahttp:Country
  ///
  /// A country.
  ///
  static const Country = IriTerm.prevalidated('http://schema.org/Country');

  /// IRI for schemahttp:Course
  ///
  /// A description of an educational course which may be offered as distinct instances which take place at different times or take place at different locations, or be offered through different media or modes of study. An educational course is a sequence of one or more educational events and/or creative works which aims to build knowledge, competence or ability of learners.
  ///
  static const Course = IriTerm.prevalidated('http://schema.org/Course');

  /// IRI for schemahttp:CourseInstance
  ///
  /// An instance of a {[Course]} which is distinct from other instances because it is offered at a different time or location or through different media or modes of study or to a specific section of students.
  ///
  static const CourseInstance = IriTerm.prevalidated(
    'http://schema.org/CourseInstance',
  );

  /// IRI for schemahttp:Courthouse
  ///
  /// A courthouse.
  ///
  static const Courthouse = IriTerm.prevalidated(
    'http://schema.org/Courthouse',
  );

  /// IRI for schemahttp:CoverArt
  ///
  /// The artwork on the outer surface of a CreativeWork.
  ///
  static const CoverArt = IriTerm.prevalidated('http://schema.org/CoverArt');

  /// IRI for schemahttp:CovidTestingFacility
  ///
  /// A CovidTestingFacility is a {[MedicalClinic]} where testing for the COVID-19 Coronavirus
  /// disease is available. If the facility is being made available from an established {[Pharmacy]}, {[Hotel]}, or other
  /// non-medical organization, multiple types can be listed. This makes it easier to re-use existing schema.org information
  /// about that place, e.g. contact info, address, opening hours. Note that in an emergency, such information may not always be reliable.
  ///
  ///
  static const CovidTestingFacility = IriTerm.prevalidated(
    'http://schema.org/CovidTestingFacility',
  );

  /// IRI for schemahttp:CreateAction
  ///
  /// The act of deliberately creating/producing/generating/building a result out of the agent.
  ///
  static const CreateAction = IriTerm.prevalidated(
    'http://schema.org/CreateAction',
  );

  /// IRI for schemahttp:CreativeWork
  ///
  /// The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  ///
  static const CreativeWork = IriTerm.prevalidated(
    'http://schema.org/CreativeWork',
  );

  /// IRI for schemahttp:CreativeWorkSeason
  ///
  /// A media season, e.g. TV, radio, video game etc.
  ///
  static const CreativeWorkSeason = IriTerm.prevalidated(
    'http://schema.org/CreativeWorkSeason',
  );

  /// IRI for schemahttp:CreativeWorkSeries
  ///
  /// A CreativeWorkSeries in schema.org is a group of related items, typically but not necessarily of the same kind. CreativeWorkSeries are usually organized into some order, often chronological. Unlike {[ItemList]} which is a general purpose data structure for lists of things, the emphasis with CreativeWorkSeries is on published materials (written e.g. books and periodicals, or media such as TV, radio and games).\n\nSpecific subtypes are available for describing {[TVSeries]}, {[RadioSeries]}, {[MovieSeries]}, {[BookSeries]}, {[Periodical]} and {[VideoGameSeries]}. In each case, the {[hasPart]} / {[isPartOf]} properties can be used to relate the CreativeWorkSeries to its parts. The general CreativeWorkSeries type serves largely just to organize these more specific and practical subtypes.\n\nIt is common for properties applicable to an item from the series to be usefully applied to the containing group. Schema.org attempts to anticipate some of these cases, but publishers should be free to apply properties of the series parts to the series as a whole wherever they seem appropriate.
  ///
  ///
  static const CreativeWorkSeries = IriTerm.prevalidated(
    'http://schema.org/CreativeWorkSeries',
  );

  /// IRI for schemahttp:CreditCard
  ///
  /// A card payment method of a particular brand or name.  Used to mark up a particular payment method and/or the financial product/service that supplies the card account.\n\nCommonly used values:\n\n* http://purl.org/goodrelations/v1#AmericanExpress\n* http://purl.org/goodrelations/v1#DinersClub\n* http://purl.org/goodrelations/v1#Discover\n* http://purl.org/goodrelations/v1#JCB\n* http://purl.org/goodrelations/v1#MasterCard\n* http://purl.org/goodrelations/v1#VISA
  ///
  ///
  static const CreditCard = IriTerm.prevalidated(
    'http://schema.org/CreditCard',
  );

  /// IRI for schemahttp:Crematorium
  ///
  /// A crematorium.
  ///
  static const Crematorium = IriTerm.prevalidated(
    'http://schema.org/Crematorium',
  );

  /// IRI for schemahttp:CriticReview
  ///
  /// A {[CriticReview]} is a more specialized form of Review written or published by a source that is recognized for its reviewing activities. These can include online columns, travel and food guides, TV and radio shows, blogs and other independent Web sites. {[CriticReview]}s are typically more in-depth and professionally written. For simpler, casually written user/visitor/viewer/customer reviews, it is more appropriate to use the {[UserReview]} type. Review aggregator sites such as Metacritic already separate out the site's user reviews from selected critic reviews that originate from third-party sources.
  ///
  static const CriticReview = IriTerm.prevalidated(
    'http://schema.org/CriticReview',
  );

  /// IRI for schemahttp:CssSelectorType
  ///
  /// Text representing a CSS selector.
  ///
  static const CssSelectorType = IriTerm.prevalidated(
    'http://schema.org/CssSelectorType',
  );

  /// IRI for schemahttp:CurrencyConversionService
  ///
  /// A service to convert funds from one currency to another currency.
  ///
  static const CurrencyConversionService = IriTerm.prevalidated(
    'http://schema.org/CurrencyConversionService',
  );

  /// IRI for schemahttp:DDxElement
  ///
  /// An alternative, closely-related condition typically considered later in the differential diagnosis process along with the signs that are used to distinguish it.
  ///
  static const DDxElement = IriTerm.prevalidated(
    'http://schema.org/DDxElement',
  );

  /// IRI for schemahttp:DanceEvent
  ///
  /// Event type: A social dance.
  ///
  static const DanceEvent = IriTerm.prevalidated(
    'http://schema.org/DanceEvent',
  );

  /// IRI for schemahttp:DanceGroup
  ///
  /// A dance group&#x2014;for example, the Alvin Ailey Dance Theater or Riverdance.
  ///
  static const DanceGroup = IriTerm.prevalidated(
    'http://schema.org/DanceGroup',
  );

  /// IRI for schemahttp:DataCatalog
  ///
  /// A collection of datasets.
  ///
  static const DataCatalog = IriTerm.prevalidated(
    'http://schema.org/DataCatalog',
  );

  /// IRI for schemahttp:DataDownload
  ///
  /// All or part of a {[Dataset]} in downloadable form.
  ///
  static const DataDownload = IriTerm.prevalidated(
    'http://schema.org/DataDownload',
  );

  /// IRI for schemahttp:DataFeed
  ///
  /// A single feed providing structured information about one or more entities or topics.
  ///
  static const DataFeed = IriTerm.prevalidated('http://schema.org/DataFeed');

  /// IRI for schemahttp:DataFeedItem
  ///
  /// A single item within a larger data feed.
  ///
  static const DataFeedItem = IriTerm.prevalidated(
    'http://schema.org/DataFeedItem',
  );

  /// IRI for schemahttp:DataType
  ///
  /// The basic data types such as Integers, Strings, etc.
  ///
  static const DataType = IriTerm.prevalidated('http://schema.org/DataType');

  /// IRI for schemahttp:Dataset
  ///
  /// A body of structured information describing some topic(s) of interest.
  ///
  static const Dataset = IriTerm.prevalidated('http://schema.org/Dataset');

  /// IRI for schemahttp:Date
  ///
  /// A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  ///
  static const Date = IriTerm.prevalidated('http://schema.org/Date');

  /// IRI for schemahttp:DateTime
  ///
  /// A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  ///
  static const DateTime = IriTerm.prevalidated('http://schema.org/DateTime');

  /// IRI for schemahttp:DatedMoneySpecification
  ///
  /// A DatedMoneySpecification represents monetary values with optional start and end dates. For example, this could represent an employee's salary over a specific period of time. __Note:__ This type has been superseded by {[MonetaryAmount]}, use of that type is recommended.
  ///
  static const DatedMoneySpecification = IriTerm.prevalidated(
    'http://schema.org/DatedMoneySpecification',
  );

  /// IRI for schemahttp:DayOfWeek
  ///
  /// The day of the week, e.g. used to specify to which day the opening hours of an OpeningHoursSpecification refer.
  ///
  /// Originally, URLs from [GoodRelations](http://purl.org/goodrelations/v1) were used (for {[Monday]}, {[Tuesday]}, {[Wednesday]}, {[Thursday]}, {[Friday]}, {[Saturday]}, {[Sunday]} plus a special entry for {[PublicHolidays]}); these have now been integrated directly into schema.org.
  ///
  ///
  static const DayOfWeek = IriTerm.prevalidated('http://schema.org/DayOfWeek');

  /// IRI for schemahttp:DaySpa
  ///
  /// A day spa.
  ///
  static const DaySpa = IriTerm.prevalidated('http://schema.org/DaySpa');

  /// IRI for schemahttp:DeactivateAction
  ///
  /// The act of stopping or deactivating a device or application (e.g. stopping a timer or turning off a flashlight).
  ///
  static const DeactivateAction = IriTerm.prevalidated(
    'http://schema.org/DeactivateAction',
  );

  /// IRI for schemahttp:DefenceEstablishment
  ///
  /// A defence establishment, such as an army or navy base.
  ///
  static const DefenceEstablishment = IriTerm.prevalidated(
    'http://schema.org/DefenceEstablishment',
  );

  /// IRI for schemahttp:DefinedRegion
  ///
  /// A DefinedRegion is a geographic area defined by potentially arbitrary (rather than political, administrative or natural geographical) criteria. Properties are provided for defining a region by reference to sets of postal codes.
  ///
  /// Examples: a delivery destination when shopping. Region where regional pricing is configured.
  ///
  /// Requirement 1:
  /// Country: US
  /// States: "NY", "CA"
  ///
  /// Requirement 2:
  /// Country: US
  /// PostalCode Set: { [94000-94585], [97000, 97999], [13000, 13599]}
  /// { [12345, 12345], [78945, 78945], }
  /// Region = state, canton, prefecture, autonomous community...
  ///
  ///
  static const DefinedRegion = IriTerm.prevalidated(
    'http://schema.org/DefinedRegion',
  );

  /// IRI for schemahttp:DefinedTerm
  ///
  /// A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  ///
  static const DefinedTerm = IriTerm.prevalidated(
    'http://schema.org/DefinedTerm',
  );

  /// IRI for schemahttp:DefinedTermSet
  ///
  /// A set of defined terms, for example a set of categories or a classification scheme, a glossary, dictionary or enumeration.
  ///
  static const DefinedTermSet = IriTerm.prevalidated(
    'http://schema.org/DefinedTermSet',
  );

  /// IRI for schemahttp:DeleteAction
  ///
  /// The act of editing a recipient by removing one of its objects.
  ///
  static const DeleteAction = IriTerm.prevalidated(
    'http://schema.org/DeleteAction',
  );

  /// IRI for schemahttp:DeliveryChargeSpecification
  ///
  /// The price for the delivery of an offer using a particular delivery method.
  ///
  static const DeliveryChargeSpecification = IriTerm.prevalidated(
    'http://schema.org/DeliveryChargeSpecification',
  );

  /// IRI for schemahttp:DeliveryEvent
  ///
  /// An event involving the delivery of an item.
  ///
  static const DeliveryEvent = IriTerm.prevalidated(
    'http://schema.org/DeliveryEvent',
  );

  /// IRI for schemahttp:DeliveryMethod
  ///
  /// A delivery method is a standardized procedure for transferring the product or service to the destination of fulfillment chosen by the customer. Delivery methods are characterized by the means of transportation used, and by the organization or group that is the contracting party for the sending organization or person.\n\nCommonly used values:\n\n* http://purl.org/goodrelations/v1#DeliveryModeDirectDownload\n* http://purl.org/goodrelations/v1#DeliveryModeFreight\n* http://purl.org/goodrelations/v1#DeliveryModeMail\n* http://purl.org/goodrelations/v1#DeliveryModeOwnFleet\n* http://purl.org/goodrelations/v1#DeliveryModePickUp\n* http://purl.org/goodrelations/v1#DHL\n* http://purl.org/goodrelations/v1#FederalExpress\n* http://purl.org/goodrelations/v1#UPS
  ///
  ///
  static const DeliveryMethod = IriTerm.prevalidated(
    'http://schema.org/DeliveryMethod',
  );

  /// IRI for schemahttp:Demand
  ///
  /// A demand entity represents the public, not necessarily binding, not necessarily exclusive, announcement by an organization or person to seek a certain type of goods or services. For describing demand using this type, the very same properties used for Offer apply.
  ///
  static const Demand = IriTerm.prevalidated('http://schema.org/Demand');

  /// IRI for schemahttp:Dentist
  ///
  /// A dentist.
  ///
  static const Dentist = IriTerm.prevalidated('http://schema.org/Dentist');

  /// IRI for schemahttp:DepartAction
  ///
  /// The act of  departing from a place. An agent departs from a fromLocation for a destination, optionally with participants.
  ///
  static const DepartAction = IriTerm.prevalidated(
    'http://schema.org/DepartAction',
  );

  /// IRI for schemahttp:DepartmentStore
  ///
  /// A department store.
  ///
  static const DepartmentStore = IriTerm.prevalidated(
    'http://schema.org/DepartmentStore',
  );

  /// IRI for schemahttp:DepositAccount
  ///
  /// A type of Bank Account with a main purpose of depositing funds to gain interest or other benefits.
  ///
  static const DepositAccount = IriTerm.prevalidated(
    'http://schema.org/DepositAccount',
  );

  /// IRI for schemahttp:DiagnosticLab
  ///
  /// A medical laboratory that offers on-site or off-site diagnostic services.
  ///
  static const DiagnosticLab = IriTerm.prevalidated(
    'http://schema.org/DiagnosticLab',
  );

  /// IRI for schemahttp:DiagnosticProcedure
  ///
  /// A medical procedure intended primarily for diagnostic, as opposed to therapeutic, purposes.
  ///
  static const DiagnosticProcedure = IriTerm.prevalidated(
    'http://schema.org/DiagnosticProcedure',
  );

  /// IRI for schemahttp:Diet
  ///
  /// A strategy of regulating the intake of food to achieve or maintain a specific health-related goal.
  ///
  static const Diet = IriTerm.prevalidated('http://schema.org/Diet');

  /// IRI for schemahttp:DietarySupplement
  ///
  /// A product taken by mouth that contains a dietary ingredient intended to supplement the diet. Dietary ingredients may include vitamins, minerals, herbs or other botanicals, amino acids, and substances such as enzymes, organ tissues, glandulars and metabolites.
  ///
  static const DietarySupplement = IriTerm.prevalidated(
    'http://schema.org/DietarySupplement',
  );

  /// IRI for schemahttp:DigitalDocument
  ///
  /// An electronic file or document.
  ///
  static const DigitalDocument = IriTerm.prevalidated(
    'http://schema.org/DigitalDocument',
  );

  /// IRI for schemahttp:DigitalDocumentPermission
  ///
  /// A permission for a particular person or group to access a particular file.
  ///
  static const DigitalDocumentPermission = IriTerm.prevalidated(
    'http://schema.org/DigitalDocumentPermission',
  );

  /// IRI for schemahttp:DigitalDocumentPermissionType
  ///
  /// A type of permission which can be granted for accessing a digital document.
  ///
  static const DigitalDocumentPermissionType = IriTerm.prevalidated(
    'http://schema.org/DigitalDocumentPermissionType',
  );

  /// IRI for schemahttp:DigitalPlatformEnumeration
  ///
  /// Enumerates some common technology platforms, for use with properties such as {[actionPlatform]}. It is not supposed to be comprehensive - when a suitable code is not enumerated here, textual or URL values can be used instead. These codes are at a fairly high level and do not deal with versioning and other nuance. Additional codes can be suggested [in github](https://github.com/schemaorg/schemaorg/issues/3057).
  ///
  static const DigitalPlatformEnumeration = IriTerm.prevalidated(
    'http://schema.org/DigitalPlatformEnumeration',
  );

  /// IRI for schemahttp:DisagreeAction
  ///
  /// The act of expressing a difference of opinion with the object. An agent disagrees to/about an object (a proposition, topic or theme) with participants.
  ///
  static const DisagreeAction = IriTerm.prevalidated(
    'http://schema.org/DisagreeAction',
  );

  /// IRI for schemahttp:DiscoverAction
  ///
  /// The act of discovering/finding an object.
  ///
  static const DiscoverAction = IriTerm.prevalidated(
    'http://schema.org/DiscoverAction',
  );

  /// IRI for schemahttp:DiscussionForumPosting
  ///
  /// A posting to a discussion forum.
  ///
  static const DiscussionForumPosting = IriTerm.prevalidated(
    'http://schema.org/DiscussionForumPosting',
  );

  /// IRI for schemahttp:DislikeAction
  ///
  /// The act of expressing a negative sentiment about the object. An agent dislikes an object (a proposition, topic or theme) with participants.
  ///
  static const DislikeAction = IriTerm.prevalidated(
    'http://schema.org/DislikeAction',
  );

  /// IRI for schemahttp:Distance
  ///
  /// Properties that take Distances as values are of the form '&lt;Number&gt; &lt;Length unit of measure&gt;'. E.g., '7 ft'.
  ///
  static const Distance = IriTerm.prevalidated('http://schema.org/Distance');

  /// IRI for schemahttp:Distillery
  ///
  /// A distillery.
  ///
  static const Distillery = IriTerm.prevalidated(
    'http://schema.org/Distillery',
  );

  /// IRI for schemahttp:DonateAction
  ///
  /// The act of providing goods, services, or money without compensation, often for philanthropic reasons.
  ///
  static const DonateAction = IriTerm.prevalidated(
    'http://schema.org/DonateAction',
  );

  /// IRI for schemahttp:DoseSchedule
  ///
  /// A specific dosing schedule for a drug or supplement.
  ///
  static const DoseSchedule = IriTerm.prevalidated(
    'http://schema.org/DoseSchedule',
  );

  /// IRI for schemahttp:DownloadAction
  ///
  /// The act of downloading an object.
  ///
  static const DownloadAction = IriTerm.prevalidated(
    'http://schema.org/DownloadAction',
  );

  /// IRI for schemahttp:DrawAction
  ///
  /// The act of producing a visual/graphical representation of an object, typically with a pen/pencil and paper as instruments.
  ///
  static const DrawAction = IriTerm.prevalidated(
    'http://schema.org/DrawAction',
  );

  /// IRI for schemahttp:Drawing
  ///
  /// A picture or diagram made with a pencil, pen, or crayon rather than paint.
  ///
  static const Drawing = IriTerm.prevalidated('http://schema.org/Drawing');

  /// IRI for schemahttp:DrinkAction
  ///
  /// The act of swallowing liquids.
  ///
  static const DrinkAction = IriTerm.prevalidated(
    'http://schema.org/DrinkAction',
  );

  /// IRI for schemahttp:DriveWheelConfigurationValue
  ///
  /// A value indicating which roadwheels will receive torque.
  ///
  static const DriveWheelConfigurationValue = IriTerm.prevalidated(
    'http://schema.org/DriveWheelConfigurationValue',
  );

  /// IRI for schemahttp:Drug
  ///
  /// A chemical or biologic substance, used as a medical therapy, that has a physiological effect on an organism. Here the term drug is used interchangeably with the term medicine although clinical knowledge makes a clear difference between them.
  ///
  static const Drug = IriTerm.prevalidated('http://schema.org/Drug');

  /// IRI for schemahttp:DrugClass
  ///
  /// A class of medical drugs, e.g., statins. Classes can represent general pharmacological class, common mechanisms of action, common physiological effects, etc.
  ///
  static const DrugClass = IriTerm.prevalidated('http://schema.org/DrugClass');

  /// IRI for schemahttp:DrugCost
  ///
  /// The cost per unit of a medical drug. Note that this type is not meant to represent the price in an offer of a drug for sale; see the Offer type for that. This type will typically be used to tag wholesale or average retail cost of a drug, or maximum reimbursable cost. Costs of medical drugs vary widely depending on how and where they are paid for, so while this type captures some of the variables, costs should be used with caution by consumers of this schema's markup.
  ///
  static const DrugCost = IriTerm.prevalidated('http://schema.org/DrugCost');

  /// IRI for schemahttp:DrugCostCategory
  ///
  /// Enumerated categories of medical drug costs.
  ///
  static const DrugCostCategory = IriTerm.prevalidated(
    'http://schema.org/DrugCostCategory',
  );

  /// IRI for schemahttp:DrugLegalStatus
  ///
  /// The legal availability status of a medical drug.
  ///
  static const DrugLegalStatus = IriTerm.prevalidated(
    'http://schema.org/DrugLegalStatus',
  );

  /// IRI for schemahttp:DrugPregnancyCategory
  ///
  /// Categories that represent an assessment of the risk of fetal injury due to a drug or pharmaceutical used as directed by the mother during pregnancy.
  ///
  static const DrugPregnancyCategory = IriTerm.prevalidated(
    'http://schema.org/DrugPregnancyCategory',
  );

  /// IRI for schemahttp:DrugPrescriptionStatus
  ///
  /// Indicates whether this drug is available by prescription or over-the-counter.
  ///
  static const DrugPrescriptionStatus = IriTerm.prevalidated(
    'http://schema.org/DrugPrescriptionStatus',
  );

  /// IRI for schemahttp:DrugStrength
  ///
  /// A specific strength in which a medical drug is available in a specific country.
  ///
  static const DrugStrength = IriTerm.prevalidated(
    'http://schema.org/DrugStrength',
  );

  /// IRI for schemahttp:DryCleaningOrLaundry
  ///
  /// A dry-cleaning business.
  ///
  static const DryCleaningOrLaundry = IriTerm.prevalidated(
    'http://schema.org/DryCleaningOrLaundry',
  );

  /// IRI for schemahttp:Duration
  ///
  /// Quantity: Duration (use [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601)).
  ///
  static const Duration = IriTerm.prevalidated('http://schema.org/Duration');

  /// IRI for schemahttp:EUEnergyEfficiencyEnumeration
  ///
  /// Enumerates the EU energy efficiency classes A-G as well as A+, A++, and A+++ as defined in EU directive 2017/1369.
  ///
  static const EUEnergyEfficiencyEnumeration = IriTerm.prevalidated(
    'http://schema.org/EUEnergyEfficiencyEnumeration',
  );

  /// IRI for schemahttp:EatAction
  ///
  /// The act of swallowing solid objects.
  ///
  static const EatAction = IriTerm.prevalidated('http://schema.org/EatAction');

  /// IRI for schemahttp:EducationEvent
  ///
  /// Event type: Education event.
  ///
  static const EducationEvent = IriTerm.prevalidated(
    'http://schema.org/EducationEvent',
  );

  /// IRI for schemahttp:EducationalAudience
  ///
  /// An EducationalAudience.
  ///
  static const EducationalAudience = IriTerm.prevalidated(
    'http://schema.org/EducationalAudience',
  );

  /// IRI for schemahttp:EducationalOccupationalCredential
  ///
  /// An educational or occupational credential. A diploma, academic degree, certification, qualification, badge, etc., that may be awarded to a person or other entity that meets the requirements defined by the credentialer.
  ///
  static const EducationalOccupationalCredential = IriTerm.prevalidated(
    'http://schema.org/EducationalOccupationalCredential',
  );

  /// IRI for schemahttp:EducationalOccupationalProgram
  ///
  /// A program offered by an institution which determines the learning progress to achieve an outcome, usually a credential like a degree or certificate. This would define a discrete set of opportunities (e.g., job, courses) that together constitute a program with a clear start, end, set of requirements, and transition to a new occupational opportunity (e.g., a job), or sometimes a higher educational opportunity (e.g., an advanced degree).
  ///
  static const EducationalOccupationalProgram = IriTerm.prevalidated(
    'http://schema.org/EducationalOccupationalProgram',
  );

  /// IRI for schemahttp:EducationalOrganization
  ///
  /// An educational organization.
  ///
  static const EducationalOrganization = IriTerm.prevalidated(
    'http://schema.org/EducationalOrganization',
  );

  /// IRI for schemahttp:Electrician
  ///
  /// An electrician.
  ///
  static const Electrician = IriTerm.prevalidated(
    'http://schema.org/Electrician',
  );

  /// IRI for schemahttp:ElectronicsStore
  ///
  /// An electronics store.
  ///
  static const ElectronicsStore = IriTerm.prevalidated(
    'http://schema.org/ElectronicsStore',
  );

  /// IRI for schemahttp:ElementarySchool
  ///
  /// An elementary school.
  ///
  static const ElementarySchool = IriTerm.prevalidated(
    'http://schema.org/ElementarySchool',
  );

  /// IRI for schemahttp:EmailMessage
  ///
  /// An email message.
  ///
  static const EmailMessage = IriTerm.prevalidated(
    'http://schema.org/EmailMessage',
  );

  /// IRI for schemahttp:Embassy
  ///
  /// An embassy.
  ///
  static const Embassy = IriTerm.prevalidated('http://schema.org/Embassy');

  /// IRI for schemahttp:EmergencyService
  ///
  /// An emergency service, such as a fire station or ER.
  ///
  static const EmergencyService = IriTerm.prevalidated(
    'http://schema.org/EmergencyService',
  );

  /// IRI for schemahttp:EmployeeRole
  ///
  /// A subclass of OrganizationRole used to describe employee relationships.
  ///
  static const EmployeeRole = IriTerm.prevalidated(
    'http://schema.org/EmployeeRole',
  );

  /// IRI for schemahttp:EmployerAggregateRating
  ///
  /// An aggregate rating of an Organization related to its role as an employer.
  ///
  static const EmployerAggregateRating = IriTerm.prevalidated(
    'http://schema.org/EmployerAggregateRating',
  );

  /// IRI for schemahttp:EmployerReview
  ///
  /// An {[EmployerReview]} is a review of an {[Organization]} regarding its role as an employer, written by a current or former employee of that organization.
  ///
  static const EmployerReview = IriTerm.prevalidated(
    'http://schema.org/EmployerReview',
  );

  /// IRI for schemahttp:EmploymentAgency
  ///
  /// An employment agency.
  ///
  static const EmploymentAgency = IriTerm.prevalidated(
    'http://schema.org/EmploymentAgency',
  );

  /// IRI for schemahttp:EndorseAction
  ///
  /// An agent approves/certifies/likes/supports/sanctions an object.
  ///
  static const EndorseAction = IriTerm.prevalidated(
    'http://schema.org/EndorseAction',
  );

  /// IRI for schemahttp:EndorsementRating
  ///
  /// An EndorsementRating is a rating that expresses some level of endorsement, for example inclusion in a "critic's pick" blog, a
  /// "Like" or "+1" on a social network. It can be considered the {[result]} of an {[EndorseAction]} in which the {[object]} of the action is rated positively by
  /// some {[agent]}. As is common elsewhere in schema.org, it is sometimes more useful to describe the results of such an action without explicitly describing the {[Action]}.
  ///
  /// An {[EndorsementRating]} may be part of a numeric scale or organized system, but this is not required: having an explicit type for indicating a positive,
  /// endorsement rating is particularly useful in the absence of numeric scales as it helps consumers understand that the rating is broadly positive.
  ///
  ///
  static const EndorsementRating = IriTerm.prevalidated(
    'http://schema.org/EndorsementRating',
  );

  /// IRI for schemahttp:Energy
  ///
  /// Properties that take Energy as values are of the form '&lt;Number&gt; &lt;Energy unit of measure&gt;'.
  ///
  static const Energy = IriTerm.prevalidated('http://schema.org/Energy');

  /// IRI for schemahttp:EnergyConsumptionDetails
  ///
  /// EnergyConsumptionDetails represents information related to the energy efficiency of a product that consumes energy. The information that can be provided is based on international regulations such as for example [EU directive 2017/1369](https://eur-lex.europa.eu/eli/reg/2017/1369/oj) for energy labeling and the [Energy labeling rule](https://www.ftc.gov/enforcement/rules/rulemaking-regulatory-reform-proceedings/energy-water-use-labeling-consumer) under the Energy Policy and Conservation Act (EPCA) in the US.
  ///
  static const EnergyConsumptionDetails = IriTerm.prevalidated(
    'http://schema.org/EnergyConsumptionDetails',
  );

  /// IRI for schemahttp:EnergyEfficiencyEnumeration
  ///
  /// Enumerates energy efficiency levels (also known as "classes" or "ratings") and certifications that are part of several international energy efficiency standards.
  ///
  static const EnergyEfficiencyEnumeration = IriTerm.prevalidated(
    'http://schema.org/EnergyEfficiencyEnumeration',
  );

  /// IRI for schemahttp:EnergyStarEnergyEfficiencyEnumeration
  ///
  /// Used to indicate whether a product is EnergyStar certified.
  ///
  static const EnergyStarEnergyEfficiencyEnumeration = IriTerm.prevalidated(
    'http://schema.org/EnergyStarEnergyEfficiencyEnumeration',
  );

  /// IRI for schemahttp:EngineSpecification
  ///
  /// Information about the engine of the vehicle. A vehicle can have multiple engines represented by multiple engine specification entities.
  ///
  static const EngineSpecification = IriTerm.prevalidated(
    'http://schema.org/EngineSpecification',
  );

  /// IRI for schemahttp:EntertainmentBusiness
  ///
  /// A business providing entertainment.
  ///
  static const EntertainmentBusiness = IriTerm.prevalidated(
    'http://schema.org/EntertainmentBusiness',
  );

  /// IRI for schemahttp:EntryPoint
  ///
  /// An entry point, within some Web-based protocol.
  ///
  static const EntryPoint = IriTerm.prevalidated(
    'http://schema.org/EntryPoint',
  );

  /// IRI for schemahttp:Enumeration
  ///
  /// Lists or enumerations‚Äîfor example, a list of cuisines or music genres, etc.
  ///
  static const Enumeration = IriTerm.prevalidated(
    'http://schema.org/Enumeration',
  );

  /// IRI for schemahttp:Episode
  ///
  /// A media episode (e.g. TV, radio, video game) which can be part of a series or season.
  ///
  static const Episode = IriTerm.prevalidated('http://schema.org/Episode');

  /// IRI for schemahttp:Event
  ///
  /// An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the {[offers]} property. Repeated events may be structured as separate Event objects.
  ///
  static const Event = IriTerm.prevalidated('http://schema.org/Event');

  /// IRI for schemahttp:EventAttendanceModeEnumeration
  ///
  /// An EventAttendanceModeEnumeration value is one of potentially several modes of organising an event, relating to whether it is online or offline.
  ///
  static const EventAttendanceModeEnumeration = IriTerm.prevalidated(
    'http://schema.org/EventAttendanceModeEnumeration',
  );

  /// IRI for schemahttp:EventReservation
  ///
  /// A reservation for an event like a concert, sporting event, or lecture.\n\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, use {[Offer]}.
  ///
  static const EventReservation = IriTerm.prevalidated(
    'http://schema.org/EventReservation',
  );

  /// IRI for schemahttp:EventSeries
  ///
  /// A series of {[Event]}s. Included events can relate with the series using the {[superEvent]} property.
  ///
  /// An EventSeries is a collection of events that share some unifying characteristic. For example, "The Olympic Games" is a series, which
  /// is repeated regularly. The "2012 London Olympics" can be presented both as an {[Event]} in the series "Olympic Games", and as an
  /// {[EventSeries]} that included a number of sporting competitions as Events.
  ///
  /// The nature of the association between the events in an {[EventSeries]} can vary, but typical examples could
  /// include a thematic event series (e.g. topical meetups or classes), or a series of regular events that share a location, attendee group and/or organizers.
  ///
  /// EventSeries has been defined as a kind of Event to make it easy for publishers to use it in an Event context without
  /// worrying about which kinds of series are really event-like enough to call an Event. In general an EventSeries
  /// may seem more Event-like when the period of time is compact and when aspects such as location are fixed, but
  /// it may also sometimes prove useful to describe a longer-term series as an Event.
  ///
  ///
  static const EventSeries = IriTerm.prevalidated(
    'http://schema.org/EventSeries',
  );

  /// IRI for schemahttp:EventStatusType
  ///
  /// EventStatusType is an enumeration type whose instances represent several states that an Event may be in.
  ///
  static const EventStatusType = IriTerm.prevalidated(
    'http://schema.org/EventStatusType',
  );

  /// IRI for schemahttp:EventVenue
  ///
  /// An event venue.
  ///
  static const EventVenue = IriTerm.prevalidated(
    'http://schema.org/EventVenue',
  );

  /// IRI for schemahttp:ExchangeRateSpecification
  ///
  /// A structured value representing exchange rate.
  ///
  static const ExchangeRateSpecification = IriTerm.prevalidated(
    'http://schema.org/ExchangeRateSpecification',
  );

  /// IRI for schemahttp:ExerciseAction
  ///
  /// The act of participating in exertive activity for the purposes of improving health and fitness.
  ///
  static const ExerciseAction = IriTerm.prevalidated(
    'http://schema.org/ExerciseAction',
  );

  /// IRI for schemahttp:ExerciseGym
  ///
  /// A gym.
  ///
  static const ExerciseGym = IriTerm.prevalidated(
    'http://schema.org/ExerciseGym',
  );

  /// IRI for schemahttp:ExercisePlan
  ///
  /// Fitness-related activity designed for a specific health-related purpose, including defined exercise routines as well as activity prescribed by a clinician.
  ///
  static const ExercisePlan = IriTerm.prevalidated(
    'http://schema.org/ExercisePlan',
  );

  /// IRI for schemahttp:ExhibitionEvent
  ///
  /// Event type: Exhibition event, e.g. at a museum, library, archive, tradeshow, ...
  ///
  static const ExhibitionEvent = IriTerm.prevalidated(
    'http://schema.org/ExhibitionEvent',
  );

  /// IRI for schemahttp:FAQPage
  ///
  /// A {[FAQPage]} is a {[WebPage]} presenting one or more "[Frequently asked questions](https://en.wikipedia.org/wiki/FAQ)" (see also {[QAPage]}).
  ///
  static const FAQPage = IriTerm.prevalidated('http://schema.org/FAQPage');

  /// IRI for schemahttp:FMRadioChannel
  ///
  /// A radio channel that uses FM.
  ///
  static const FMRadioChannel = IriTerm.prevalidated(
    'http://schema.org/FMRadioChannel',
  );

  /// IRI for schemahttp:FastFoodRestaurant
  ///
  /// A fast-food restaurant.
  ///
  static const FastFoodRestaurant = IriTerm.prevalidated(
    'http://schema.org/FastFoodRestaurant',
  );

  /// IRI for schemahttp:Festival
  ///
  /// Event type: Festival.
  ///
  static const Festival = IriTerm.prevalidated('http://schema.org/Festival');

  /// IRI for schemahttp:FilmAction
  ///
  /// The act of capturing sound and moving images on film, video, or digitally.
  ///
  static const FilmAction = IriTerm.prevalidated(
    'http://schema.org/FilmAction',
  );

  /// IRI for schemahttp:FinancialIncentive
  ///
  /// <p>Represents financial incentives for goods/services offered by an organization (or individual).</p>
  ///
  /// <p>Typically contains the {[name]} of the incentive, the {[incentivizedItem]}, the {[incentiveAmount]}, the {[incentiveStatus]}, {[incentiveType]}, the {[provider]} of the incentive, and {[eligibleWithSupplier]}.</p>
  ///
  /// <p>Optionally contains criteria on whether the incentive is limited based on {[purchaseType]}, {[purchasePriceLimit]}, {[incomeLimit]}, and the {[qualifiedExpense]}.
  ///
  ///
  static const FinancialIncentive = IriTerm.prevalidated(
    'http://schema.org/FinancialIncentive',
  );

  /// IRI for schemahttp:FinancialProduct
  ///
  /// A product provided to consumers and businesses by financial institutions such as banks, insurance companies, brokerage firms, consumer finance companies, and investment companies which comprise the financial services industry.
  ///
  static const FinancialProduct = IriTerm.prevalidated(
    'http://schema.org/FinancialProduct',
  );

  /// IRI for schemahttp:FinancialService
  ///
  /// Financial services business.
  ///
  static const FinancialService = IriTerm.prevalidated(
    'http://schema.org/FinancialService',
  );

  /// IRI for schemahttp:FindAction
  ///
  /// The act of finding an object.\n\nRelated actions:\n\n* {[SearchAction]}: FindAction is generally lead by a SearchAction, but not necessarily.
  ///
  static const FindAction = IriTerm.prevalidated(
    'http://schema.org/FindAction',
  );

  /// IRI for schemahttp:FireStation
  ///
  /// A fire station. With firemen.
  ///
  static const FireStation = IriTerm.prevalidated(
    'http://schema.org/FireStation',
  );

  /// IRI for schemahttp:Flight
  ///
  /// An airline flight.
  ///
  static const Flight = IriTerm.prevalidated('http://schema.org/Flight');

  /// IRI for schemahttp:FlightReservation
  ///
  /// A reservation for air travel.\n\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, use {[Offer]}.
  ///
  static const FlightReservation = IriTerm.prevalidated(
    'http://schema.org/FlightReservation',
  );

  /// IRI for schemahttp:Float
  ///
  /// Data type: Floating number.
  ///
  static const Float = IriTerm.prevalidated('http://schema.org/Float');

  /// IRI for schemahttp:FloorPlan
  ///
  /// A FloorPlan is an explicit representation of a collection of similar accommodations, allowing the provision of common information (room counts, sizes, layout diagrams) and offers for rental or sale. In typical use, some {[ApartmentComplex]} has an {[accommodationFloorPlan]} which is a {[FloorPlan]}.  A FloorPlan is always in the context of a particular place, either a larger {[ApartmentComplex]} or a single {[Apartment]}. The visual/spatial aspects of a floor plan (i.e. room layout, [see wikipedia](https://en.wikipedia.org/wiki/Floor_plan)) can be indicated using {[image]}.
  ///
  static const FloorPlan = IriTerm.prevalidated('http://schema.org/FloorPlan');

  /// IRI for schemahttp:Florist
  ///
  /// A florist.
  ///
  static const Florist = IriTerm.prevalidated('http://schema.org/Florist');

  /// IRI for schemahttp:FollowAction
  ///
  /// The act of forming a personal connection with someone/something (object) unidirectionally/asymmetrically to get updates polled from.\n\nRelated actions:\n\n* {[BefriendAction]}: Unlike BefriendAction, FollowAction implies that the connection is *not* necessarily reciprocal.\n* {[SubscribeAction]}: Unlike SubscribeAction, FollowAction implies that the follower acts as an active agent constantly/actively polling for updates.\n* {[RegisterAction]}: Unlike RegisterAction, FollowAction implies that the agent is interested in continuing receiving updates from the object.\n* {[JoinAction]}: Unlike JoinAction, FollowAction implies that the agent is interested in getting updates from the object.\n* {[TrackAction]}: Unlike TrackAction, FollowAction refers to the polling of updates of all aspects of animate objects rather than the location of inanimate objects (e.g. you track a package, but you don't follow it).
  ///
  static const FollowAction = IriTerm.prevalidated(
    'http://schema.org/FollowAction',
  );

  /// IRI for schemahttp:FoodEstablishment
  ///
  /// A food-related business.
  ///
  static const FoodEstablishment = IriTerm.prevalidated(
    'http://schema.org/FoodEstablishment',
  );

  /// IRI for schemahttp:FoodEstablishmentReservation
  ///
  /// A reservation to dine at a food-related business.\n\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations.
  ///
  static const FoodEstablishmentReservation = IriTerm.prevalidated(
    'http://schema.org/FoodEstablishmentReservation',
  );

  /// IRI for schemahttp:FoodEvent
  ///
  /// Event type: Food event.
  ///
  static const FoodEvent = IriTerm.prevalidated('http://schema.org/FoodEvent');

  /// IRI for schemahttp:FoodService
  ///
  /// A food service, like breakfast, lunch, or dinner.
  ///
  static const FoodService = IriTerm.prevalidated(
    'http://schema.org/FoodService',
  );

  /// IRI for schemahttp:FulfillmentTypeEnumeration
  ///
  /// A type of product fulfillment.
  ///
  static const FulfillmentTypeEnumeration = IriTerm.prevalidated(
    'http://schema.org/FulfillmentTypeEnumeration',
  );

  /// IRI for schemahttp:FundingAgency
  ///
  /// A FundingAgency is an organization that implements one or more {[FundingScheme]}s and manages
  /// the granting process (via {[Grant]}s, typically {[MonetaryGrant]}s).
  /// A funding agency is not always required for grant funding, e.g. philanthropic giving, corporate sponsorship etc.
  ///
  /// Examples of funding agencies include ERC, REA, NIH, Bill and Melinda Gates Foundation, ...
  ///
  ///
  static const FundingAgency = IriTerm.prevalidated(
    'http://schema.org/FundingAgency',
  );

  /// IRI for schemahttp:FundingScheme
  ///
  /// A FundingScheme combines organizational, project and policy aspects of grant-based funding
  /// that sets guidelines, principles and mechanisms to support other kinds of projects and activities.
  /// Funding is typically organized via {[Grant]} funding. Examples of funding schemes: Swiss Priority Programmes (SPPs); EU Framework 7 (FP7); Horizon 2020; the NIH-R01 Grant Program; Wellcome institutional strategic support fund. For large scale public sector funding, the management and administration of grant awards is often handled by other, dedicated, organizations - {[FundingAgency]}s such as ERC, REA, ...
  ///
  static const FundingScheme = IriTerm.prevalidated(
    'http://schema.org/FundingScheme',
  );

  /// IRI for schemahttp:FurnitureStore
  ///
  /// A furniture store.
  ///
  static const FurnitureStore = IriTerm.prevalidated(
    'http://schema.org/FurnitureStore',
  );

  /// IRI for schemahttp:Game
  ///
  /// The Game type represents things which are games. These are typically rule-governed recreational activities, e.g. role-playing games in which players assume the role of characters in a fictional setting.
  ///
  static const Game = IriTerm.prevalidated('http://schema.org/Game');

  /// IRI for schemahttp:GameAvailabilityEnumeration
  ///
  /// For a {[VideoGame]}, such as used with a {[PlayGameAction]}, an enumeration of the kind of game availability offered.
  ///
  static const GameAvailabilityEnumeration = IriTerm.prevalidated(
    'http://schema.org/GameAvailabilityEnumeration',
  );

  /// IRI for schemahttp:GamePlayMode
  ///
  /// Indicates whether this game is multi-player, co-op or single-player.
  ///
  static const GamePlayMode = IriTerm.prevalidated(
    'http://schema.org/GamePlayMode',
  );

  /// IRI for schemahttp:GameServer
  ///
  /// Server that provides game interaction in a multiplayer game.
  ///
  static const GameServer = IriTerm.prevalidated(
    'http://schema.org/GameServer',
  );

  /// IRI for schemahttp:GameServerStatus
  ///
  /// Status of a game server.
  ///
  static const GameServerStatus = IriTerm.prevalidated(
    'http://schema.org/GameServerStatus',
  );

  /// IRI for schemahttp:GardenStore
  ///
  /// A garden store.
  ///
  static const GardenStore = IriTerm.prevalidated(
    'http://schema.org/GardenStore',
  );

  /// IRI for schemahttp:GasStation
  ///
  /// A gas station.
  ///
  static const GasStation = IriTerm.prevalidated(
    'http://schema.org/GasStation',
  );

  /// IRI for schemahttp:GatedResidenceCommunity
  ///
  /// Residence type: Gated community.
  ///
  static const GatedResidenceCommunity = IriTerm.prevalidated(
    'http://schema.org/GatedResidenceCommunity',
  );

  /// IRI for schemahttp:GenderType
  ///
  /// An enumeration of genders.
  ///
  static const GenderType = IriTerm.prevalidated(
    'http://schema.org/GenderType',
  );

  /// IRI for schemahttp:Gene
  ///
  /// A discrete unit of inheritance which affects one or more biological traits (Source: [https://en.wikipedia.org/wiki/Gene](https://en.wikipedia.org/wiki/Gene)). Examples include FOXP2 (Forkhead box protein P2), SCARNA21 (small Cajal body-specific RNA 21), A- (agouti genotype).
  ///
  static const Gene = IriTerm.prevalidated('http://schema.org/Gene');

  /// IRI for schemahttp:GeneralContractor
  ///
  /// A general contractor.
  ///
  static const GeneralContractor = IriTerm.prevalidated(
    'http://schema.org/GeneralContractor',
  );

  /// IRI for schemahttp:GeoCircle
  ///
  /// A GeoCircle is a GeoShape representing a circular geographic area. As it is a GeoShape
  /// it provides the simple textual property 'circle', but also allows the combination of postalCode alongside geoRadius.
  /// The center of the circle can be indicated via the 'geoMidpoint' property, or more approximately using 'address', 'postalCode'.
  ///
  ///
  static const GeoCircle = IriTerm.prevalidated('http://schema.org/GeoCircle');

  /// IRI for schemahttp:GeoCoordinates
  ///
  /// The geographic coordinates of a place or event.
  ///
  static const GeoCoordinates = IriTerm.prevalidated(
    'http://schema.org/GeoCoordinates',
  );

  /// IRI for schemahttp:GeoShape
  ///
  /// The geographic shape of a place. A GeoShape can be described using several properties whose values are based on latitude/longitude pairs. Either whitespace or commas can be used to separate latitude and longitude; whitespace should be used when writing a list of several such points.
  ///
  static const GeoShape = IriTerm.prevalidated('http://schema.org/GeoShape');

  /// IRI for schemahttp:GeospatialGeometry
  ///
  /// (Eventually to be defined as) a supertype of GeoShape designed to accommodate definitions from Geo-Spatial best practices.
  ///
  static const GeospatialGeometry = IriTerm.prevalidated(
    'http://schema.org/GeospatialGeometry',
  );

  /// IRI for schemahttp:GiveAction
  ///
  /// The act of transferring ownership of an object to a destination. Reciprocal of TakeAction.\n\nRelated actions:\n\n* {[TakeAction]}: Reciprocal of GiveAction.\n* {[SendAction]}: Unlike SendAction, GiveAction implies that ownership is being transferred (e.g. I may send my laptop to you, but that doesn't mean I'm giving it to you).
  ///
  static const GiveAction = IriTerm.prevalidated(
    'http://schema.org/GiveAction',
  );

  /// IRI for schemahttp:GolfCourse
  ///
  /// A golf course.
  ///
  static const GolfCourse = IriTerm.prevalidated(
    'http://schema.org/GolfCourse',
  );

  /// IRI for schemahttp:GovernmentBenefitsType
  ///
  /// GovernmentBenefitsType enumerates several kinds of government benefits to support the COVID-19 situation. Note that this structure may not capture all benefits offered.
  ///
  static const GovernmentBenefitsType = IriTerm.prevalidated(
    'http://schema.org/GovernmentBenefitsType',
  );

  /// IRI for schemahttp:GovernmentBuilding
  ///
  /// A government building.
  ///
  static const GovernmentBuilding = IriTerm.prevalidated(
    'http://schema.org/GovernmentBuilding',
  );

  /// IRI for schemahttp:GovernmentOffice
  ///
  /// A government office&#x2014;for example, an IRS or DMV office.
  ///
  static const GovernmentOffice = IriTerm.prevalidated(
    'http://schema.org/GovernmentOffice',
  );

  /// IRI for schemahttp:GovernmentOrganization
  ///
  /// A governmental organization or agency.
  ///
  static const GovernmentOrganization = IriTerm.prevalidated(
    'http://schema.org/GovernmentOrganization',
  );

  /// IRI for schemahttp:GovernmentPermit
  ///
  /// A permit issued by a government agency.
  ///
  static const GovernmentPermit = IriTerm.prevalidated(
    'http://schema.org/GovernmentPermit',
  );

  /// IRI for schemahttp:GovernmentService
  ///
  /// A service provided by a government organization, e.g. food stamps, veterans benefits, etc.
  ///
  static const GovernmentService = IriTerm.prevalidated(
    'http://schema.org/GovernmentService',
  );

  /// IRI for schemahttp:Grant
  ///
  /// A grant, typically financial or otherwise quantifiable, of resources. Typically a {[funder]} sponsors some {[MonetaryAmount]} to an {[Organization]} or {[Person]},
  /// sometimes not necessarily via a dedicated or long-lived {[Project]}, resulting in one or more outputs, or {[fundedItem]}s. For financial sponsorship, indicate the {[funder]} of a {[MonetaryGrant]}. For non-financial support, indicate {[sponsor]} of {[Grant]}s of resources (e.g. office space).
  ///
  /// Grants support  activities directed towards some agreed collective goals, often but not always organized as {[Project]}s. Long-lived projects are sometimes sponsored by a variety of grants over time, but it is also common for a project to be associated with a single grant.
  ///
  /// The amount of a {[Grant]} is represented using {[amount]} as a {[MonetaryAmount]}.
  ///
  ///
  static const Grant = IriTerm.prevalidated('http://schema.org/Grant');

  /// IRI for schemahttp:GroceryStore
  ///
  /// A grocery store.
  ///
  static const GroceryStore = IriTerm.prevalidated(
    'http://schema.org/GroceryStore',
  );

  /// IRI for schemahttp:Guide
  ///
  /// {[Guide]} is a page or article that recommends specific products or services, or aspects of a thing for a user to consider. A {[Guide]} may represent a Buying Guide and detail aspects of products or services for a user to consider. A {[Guide]} may represent a Product Guide and recommend specific products or services. A {[Guide]} may represent a Ranked List and recommend specific products or services with ranking.
  ///
  static const Guide = IriTerm.prevalidated('http://schema.org/Guide');

  /// IRI for schemahttp:HVACBusiness
  ///
  /// A business that provides Heating, Ventilation and Air Conditioning services.
  ///
  static const HVACBusiness = IriTerm.prevalidated(
    'http://schema.org/HVACBusiness',
  );

  /// IRI for schemahttp:Hackathon
  ///
  /// A [hackathon](https://en.wikipedia.org/wiki/Hackathon) event.
  ///
  static const Hackathon = IriTerm.prevalidated('http://schema.org/Hackathon');

  /// IRI for schemahttp:HairSalon
  ///
  /// A hair salon.
  ///
  static const HairSalon = IriTerm.prevalidated('http://schema.org/HairSalon');

  /// IRI for schemahttp:HardwareStore
  ///
  /// A hardware store.
  ///
  static const HardwareStore = IriTerm.prevalidated(
    'http://schema.org/HardwareStore',
  );

  /// IRI for schemahttp:HealthAndBeautyBusiness
  ///
  /// Health and beauty.
  ///
  static const HealthAndBeautyBusiness = IriTerm.prevalidated(
    'http://schema.org/HealthAndBeautyBusiness',
  );

  /// IRI for schemahttp:HealthAspectEnumeration
  ///
  /// HealthAspectEnumeration enumerates several aspects of health content online, each of which might be described using {[hasHealthAspect]} and {[HealthTopicContent]}.
  ///
  static const HealthAspectEnumeration = IriTerm.prevalidated(
    'http://schema.org/HealthAspectEnumeration',
  );

  /// IRI for schemahttp:HealthClub
  ///
  /// A health club.
  ///
  static const HealthClub = IriTerm.prevalidated(
    'http://schema.org/HealthClub',
  );

  /// IRI for schemahttp:HealthInsurancePlan
  ///
  /// A US-style health insurance plan, including PPOs, EPOs, and HMOs.
  ///
  static const HealthInsurancePlan = IriTerm.prevalidated(
    'http://schema.org/HealthInsurancePlan',
  );

  /// IRI for schemahttp:HealthPlanCostSharingSpecification
  ///
  /// A description of costs to the patient under a given network or formulary.
  ///
  static const HealthPlanCostSharingSpecification = IriTerm.prevalidated(
    'http://schema.org/HealthPlanCostSharingSpecification',
  );

  /// IRI for schemahttp:HealthPlanFormulary
  ///
  /// For a given health insurance plan, the specification for costs and coverage of prescription drugs.
  ///
  static const HealthPlanFormulary = IriTerm.prevalidated(
    'http://schema.org/HealthPlanFormulary',
  );

  /// IRI for schemahttp:HealthPlanNetwork
  ///
  /// A US-style health insurance plan network.
  ///
  static const HealthPlanNetwork = IriTerm.prevalidated(
    'http://schema.org/HealthPlanNetwork',
  );

  /// IRI for schemahttp:HealthTopicContent
  ///
  /// {[HealthTopicContent]} is {[WebContent]} that is about some aspect of a health topic, e.g. a condition, its symptoms or treatments. Such content may be comprised of several parts or sections and use different types of media. Multiple instances of {[WebContent]} (and hence {[HealthTopicContent]}) can be related using {[hasPart]} / {[isPartOf]} where there is some kind of content hierarchy, and their content described with {[about]} and {[mentions]} e.g. building upon the existing {[MedicalCondition]} vocabulary.
  ///
  ///
  static const HealthTopicContent = IriTerm.prevalidated(
    'http://schema.org/HealthTopicContent',
  );

  /// IRI for schemahttp:HighSchool
  ///
  /// A high school.
  ///
  static const HighSchool = IriTerm.prevalidated(
    'http://schema.org/HighSchool',
  );

  /// IRI for schemahttp:HinduTemple
  ///
  /// A Hindu temple.
  ///
  static const HinduTemple = IriTerm.prevalidated(
    'http://schema.org/HinduTemple',
  );

  /// IRI for schemahttp:HobbyShop
  ///
  /// A store that sells materials useful or necessary for various hobbies.
  ///
  static const HobbyShop = IriTerm.prevalidated('http://schema.org/HobbyShop');

  /// IRI for schemahttp:HomeAndConstructionBusiness
  ///
  /// A construction business.\n\nA HomeAndConstructionBusiness is a {[LocalBusiness]} that provides services around homes and buildings.\n\nAs a {[LocalBusiness]} it can be described as a {[provider]} of one or more {[Service]}\(s).
  ///
  static const HomeAndConstructionBusiness = IriTerm.prevalidated(
    'http://schema.org/HomeAndConstructionBusiness',
  );

  /// IRI for schemahttp:HomeGoodsStore
  ///
  /// A home goods store.
  ///
  static const HomeGoodsStore = IriTerm.prevalidated(
    'http://schema.org/HomeGoodsStore',
  );

  /// IRI for schemahttp:Hospital
  ///
  /// A hospital.
  ///
  static const Hospital = IriTerm.prevalidated('http://schema.org/Hospital');

  /// IRI for schemahttp:Hostel
  ///
  /// A hostel - cheap accommodation, often in shared dormitories.
  /// <br /><br />
  /// See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.
  ///
  ///
  static const Hostel = IriTerm.prevalidated('http://schema.org/Hostel');

  /// IRI for schemahttp:Hotel
  ///
  /// A hotel is an establishment that provides lodging paid on a short-term basis (source: Wikipedia, the free encyclopedia, see http://en.wikipedia.org/wiki/Hotel).
  /// <br /><br />
  /// See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.
  ///
  ///
  static const Hotel = IriTerm.prevalidated('http://schema.org/Hotel');

  /// IRI for schemahttp:HotelRoom
  ///
  /// A hotel room is a single room in a hotel.
  /// <br /><br />
  /// See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.
  ///
  ///
  static const HotelRoom = IriTerm.prevalidated('http://schema.org/HotelRoom');

  /// IRI for schemahttp:House
  ///
  /// A house is a building or structure that has the ability to be occupied for habitation by humans or other creatures (source: Wikipedia, the free encyclopedia, see <a href="http://en.wikipedia.org/wiki/House">http://en.wikipedia.org/wiki/House</a>).
  ///
  static const House = IriTerm.prevalidated('http://schema.org/House');

  /// IRI for schemahttp:HousePainter
  ///
  /// A house painting service.
  ///
  static const HousePainter = IriTerm.prevalidated(
    'http://schema.org/HousePainter',
  );

  /// IRI for schemahttp:HowTo
  ///
  /// Instructions that explain how to achieve a result by performing a sequence of steps.
  ///
  static const HowTo = IriTerm.prevalidated('http://schema.org/HowTo');

  /// IRI for schemahttp:HowToDirection
  ///
  /// A direction indicating a single action to do in the instructions for how to achieve a result.
  ///
  static const HowToDirection = IriTerm.prevalidated(
    'http://schema.org/HowToDirection',
  );

  /// IRI for schemahttp:HowToItem
  ///
  /// An item used as either a tool or supply when performing the instructions for how to achieve a result.
  ///
  static const HowToItem = IriTerm.prevalidated('http://schema.org/HowToItem');

  /// IRI for schemahttp:HowToSection
  ///
  /// A sub-grouping of steps in the instructions for how to achieve a result (e.g. steps for making a pie crust within a pie recipe).
  ///
  static const HowToSection = IriTerm.prevalidated(
    'http://schema.org/HowToSection',
  );

  /// IRI for schemahttp:HowToStep
  ///
  /// A step in the instructions for how to achieve a result. It is an ordered list with HowToDirection and/or HowToTip items.
  ///
  static const HowToStep = IriTerm.prevalidated('http://schema.org/HowToStep');

  /// IRI for schemahttp:HowToSupply
  ///
  /// A supply consumed when performing the instructions for how to achieve a result.
  ///
  static const HowToSupply = IriTerm.prevalidated(
    'http://schema.org/HowToSupply',
  );

  /// IRI for schemahttp:HowToTip
  ///
  /// An explanation in the instructions for how to achieve a result. It provides supplementary information about a technique, supply, author's preference, etc. It can explain what could be done, or what should not be done, but doesn't specify what should be done (see HowToDirection).
  ///
  static const HowToTip = IriTerm.prevalidated('http://schema.org/HowToTip');

  /// IRI for schemahttp:HowToTool
  ///
  /// A tool used (but not consumed) when performing instructions for how to achieve a result.
  ///
  static const HowToTool = IriTerm.prevalidated('http://schema.org/HowToTool');

  /// IRI for schemahttp:HyperToc
  ///
  /// A HyperToc represents a hypertext table of contents for complex media objects, such as {[VideoObject]}, {[AudioObject]}. Items in the table of contents are indicated using the {[tocEntry]} property, and typed {[HyperTocEntry]}. For cases where the same larger work is split into multiple files, {[associatedMedia]} can be used on individual {[HyperTocEntry]} items.
  ///
  static const HyperToc = IriTerm.prevalidated('http://schema.org/HyperToc');

  /// IRI for schemahttp:HyperTocEntry
  ///
  /// A HyperToEntry is an item within a {[HyperToc]}, which represents a hypertext table of contents for complex media objects, such as {[VideoObject]}, {[AudioObject]}. The media object itself is indicated using {[associatedMedia]}. Each section of interest within that content can be described with a {[HyperTocEntry]}, with associated {[startOffset]} and {[endOffset]}. When several entries are all from the same file, {[associatedMedia]} is used on the overarching {[HyperTocEntry]}; if the content has been split into multiple files, they can be referenced using {[associatedMedia]} on each {[HyperTocEntry]}.
  ///
  static const HyperTocEntry = IriTerm.prevalidated(
    'http://schema.org/HyperTocEntry',
  );

  /// IRI for schemahttp:IPTCDigitalSourceEnumeration
  ///
  /// <a href="https://www.iptc.org/">IPTC</a> "Digital Source" codes for use with the {[digitalSourceType]} property, providing information about the source for a digital media object.
  /// In general these codes are not declared here to be mutually exclusive, although some combinations would be contradictory if applied simultaneously, or might be considered mutually incompatible by upstream maintainers of the definitions. See the IPTC <a href="https://www.iptc.org/std/photometadata/documentation/userguide/">documentation</a>
  /// for <a href="https://cv.iptc.org/newscodes/digitalsourcetype/">detailed definitions</a> of all terms.
  ///
  static const IPTCDigitalSourceEnumeration = IriTerm.prevalidated(
    'http://schema.org/IPTCDigitalSourceEnumeration',
  );

  /// IRI for schemahttp:IceCreamShop
  ///
  /// An ice cream shop.
  ///
  static const IceCreamShop = IriTerm.prevalidated(
    'http://schema.org/IceCreamShop',
  );

  /// IRI for schemahttp:IgnoreAction
  ///
  /// The act of intentionally disregarding the object. An agent ignores an object.
  ///
  static const IgnoreAction = IriTerm.prevalidated(
    'http://schema.org/IgnoreAction',
  );

  /// IRI for schemahttp:ImageGallery
  ///
  /// Web page type: Image gallery page.
  ///
  static const ImageGallery = IriTerm.prevalidated(
    'http://schema.org/ImageGallery',
  );

  /// IRI for schemahttp:ImageObject
  ///
  /// An image file.
  ///
  static const ImageObject = IriTerm.prevalidated(
    'http://schema.org/ImageObject',
  );

  /// IRI for schemahttp:ImageObjectSnapshot
  ///
  /// A specific and exact (byte-for-byte) version of an {[ImageObject]}. Two byte-for-byte identical files, for the purposes of this type, considered identical. If they have different embedded metadata (e.g. XMP, EXIF) the files will differ. Different external facts about the files, e.g. creator or dateCreated that aren't represented in their actual content, do not affect this notion of identity.
  ///
  static const ImageObjectSnapshot = IriTerm.prevalidated(
    'http://schema.org/ImageObjectSnapshot',
  );

  /// IRI for schemahttp:ImagingTest
  ///
  /// Any medical imaging modality typically used for diagnostic purposes.
  ///
  static const ImagingTest = IriTerm.prevalidated(
    'http://schema.org/ImagingTest',
  );

  /// IRI for schemahttp:IncentiveQualifiedExpenseType
  ///
  /// The types of expenses that are covered by the incentive. For example some incentives are only for the goods (tangible items) but the services (labor) are excluded.
  ///
  static const IncentiveQualifiedExpenseType = IriTerm.prevalidated(
    'http://schema.org/IncentiveQualifiedExpenseType',
  );

  /// IRI for schemahttp:IncentiveStatus
  ///
  /// Enumerates a status for an incentive, such as whether it is active.
  ///
  static const IncentiveStatus = IriTerm.prevalidated(
    'http://schema.org/IncentiveStatus',
  );

  /// IRI for schemahttp:IncentiveType
  ///
  /// Enumerates common financial incentives for products, including tax credits, tax deductions, rebates and subsidies, etc.
  ///
  static const IncentiveType = IriTerm.prevalidated(
    'http://schema.org/IncentiveType',
  );

  /// IRI for schemahttp:IndividualPhysician
  ///
  /// An individual medical practitioner. For their official address use {[address]}, for affiliations to hospitals use {[hospitalAffiliation]}.
  /// The {[practicesAt]} property can be used to indicate {[MedicalOrganization]} hospitals, clinics, pharmacies etc. where this physician practices.
  ///
  static const IndividualPhysician = IriTerm.prevalidated(
    'http://schema.org/IndividualPhysician',
  );

  /// IRI for schemahttp:IndividualProduct
  ///
  /// A single, identifiable product instance (e.g. a laptop with a particular serial number).
  ///
  static const IndividualProduct = IriTerm.prevalidated(
    'http://schema.org/IndividualProduct',
  );

  /// IRI for schemahttp:InfectiousAgentClass
  ///
  /// Classes of agents or pathogens that transmit infectious diseases. Enumerated type.
  ///
  static const InfectiousAgentClass = IriTerm.prevalidated(
    'http://schema.org/InfectiousAgentClass',
  );

  /// IRI for schemahttp:InfectiousDisease
  ///
  /// An infectious disease is a clinically evident human disease resulting from the presence of pathogenic microbial agents, like pathogenic viruses, pathogenic bacteria, fungi, protozoa, multicellular parasites, and prions. To be considered an infectious disease, such pathogens are known to be able to cause this disease.
  ///
  static const InfectiousDisease = IriTerm.prevalidated(
    'http://schema.org/InfectiousDisease',
  );

  /// IRI for schemahttp:InformAction
  ///
  /// The act of notifying someone of information pertinent to them, with no expectation of a response.
  ///
  static const InformAction = IriTerm.prevalidated(
    'http://schema.org/InformAction',
  );

  /// IRI for schemahttp:InsertAction
  ///
  /// The act of adding at a specific location in an ordered collection.
  ///
  static const InsertAction = IriTerm.prevalidated(
    'http://schema.org/InsertAction',
  );

  /// IRI for schemahttp:InstallAction
  ///
  /// The act of installing an application.
  ///
  static const InstallAction = IriTerm.prevalidated(
    'http://schema.org/InstallAction',
  );

  /// IRI for schemahttp:InsuranceAgency
  ///
  /// An Insurance agency.
  ///
  static const InsuranceAgency = IriTerm.prevalidated(
    'http://schema.org/InsuranceAgency',
  );

  /// IRI for schemahttp:Intangible
  ///
  /// A utility class that serves as the umbrella for a number of 'intangible' things such as quantities, structured values, etc.
  ///
  static const Intangible = IriTerm.prevalidated(
    'http://schema.org/Intangible',
  );

  /// IRI for schemahttp:Integer
  ///
  /// Data type: Integer.
  ///
  static const Integer = IriTerm.prevalidated('http://schema.org/Integer');

  /// IRI for schemahttp:InteractAction
  ///
  /// The act of interacting with another person or organization.
  ///
  static const InteractAction = IriTerm.prevalidated(
    'http://schema.org/InteractAction',
  );

  /// IRI for schemahttp:InteractionCounter
  ///
  /// A summary of how users have interacted with this CreativeWork. In most cases, authors will use a subtype to specify the specific type of interaction.
  ///
  static const InteractionCounter = IriTerm.prevalidated(
    'http://schema.org/InteractionCounter',
  );

  /// IRI for schemahttp:InternetCafe
  ///
  /// An internet cafe.
  ///
  static const InternetCafe = IriTerm.prevalidated(
    'http://schema.org/InternetCafe',
  );

  /// IRI for schemahttp:InvestmentFund
  ///
  /// A company or fund that gathers capital from a number of investors to create a pool of money that is then re-invested into stocks, bonds and other assets.
  ///
  static const InvestmentFund = IriTerm.prevalidated(
    'http://schema.org/InvestmentFund',
  );

  /// IRI for schemahttp:InvestmentOrDeposit
  ///
  /// A type of financial product that typically requires the client to transfer funds to a financial service in return for potential beneficial financial return.
  ///
  static const InvestmentOrDeposit = IriTerm.prevalidated(
    'http://schema.org/InvestmentOrDeposit',
  );

  /// IRI for schemahttp:InviteAction
  ///
  /// The act of asking someone to attend an event. Reciprocal of RsvpAction.
  ///
  static const InviteAction = IriTerm.prevalidated(
    'http://schema.org/InviteAction',
  );

  /// IRI for schemahttp:Invoice
  ///
  /// A statement of the money due for goods or services; a bill.
  ///
  static const Invoice = IriTerm.prevalidated('http://schema.org/Invoice');

  /// IRI for schemahttp:ItemAvailability
  ///
  /// A list of possible product availability options.
  ///
  static const ItemAvailability = IriTerm.prevalidated(
    'http://schema.org/ItemAvailability',
  );

  /// IRI for schemahttp:ItemList
  ///
  /// A list of items of any sort&#x2014;for example, Top 10 Movies About Weathermen, or Top 100 Party Songs. Not to be confused with HTML lists, which are often used only for formatting.
  ///
  static const ItemList = IriTerm.prevalidated('http://schema.org/ItemList');

  /// IRI for schemahttp:ItemListOrderType
  ///
  /// Enumerated for values for itemListOrder for indicating how an ordered ItemList is organized.
  ///
  static const ItemListOrderType = IriTerm.prevalidated(
    'http://schema.org/ItemListOrderType',
  );

  /// IRI for schemahttp:ItemPage
  ///
  /// A page devoted to a single item, such as a particular product or hotel.
  ///
  static const ItemPage = IriTerm.prevalidated('http://schema.org/ItemPage');

  /// IRI for schemahttp:JewelryStore
  ///
  /// A jewelry store.
  ///
  static const JewelryStore = IriTerm.prevalidated(
    'http://schema.org/JewelryStore',
  );

  /// IRI for schemahttp:JobPosting
  ///
  /// A listing that describes a job opening in a certain organization.
  ///
  static const JobPosting = IriTerm.prevalidated(
    'http://schema.org/JobPosting',
  );

  /// IRI for schemahttp:JoinAction
  ///
  /// An agent joins an event/group with participants/friends at a location.\n\nRelated actions:\n\n* {[RegisterAction]}: Unlike RegisterAction, JoinAction refers to joining a group/team of people.\n* {[SubscribeAction]}: Unlike SubscribeAction, JoinAction does not imply that you'll be receiving updates.\n* {[FollowAction]}: Unlike FollowAction, JoinAction does not imply that you'll be polling for updates.
  ///
  static const JoinAction = IriTerm.prevalidated(
    'http://schema.org/JoinAction',
  );

  /// IRI for schemahttp:Joint
  ///
  /// The anatomical location at which two or more bones make contact.
  ///
  static const Joint = IriTerm.prevalidated('http://schema.org/Joint');

  /// IRI for schemahttp:LakeBodyOfWater
  ///
  /// A lake (for example, Lake Pontrachain).
  ///
  static const LakeBodyOfWater = IriTerm.prevalidated(
    'http://schema.org/LakeBodyOfWater',
  );

  /// IRI for schemahttp:Landform
  ///
  /// A landform or physical feature.  Landform elements include mountains, plains, lakes, rivers, seascape and oceanic waterbody interface features such as bays, peninsulas, seas and so forth, including sub-aqueous terrain features such as submersed mountain ranges, volcanoes, and the great ocean basins.
  ///
  static const Landform = IriTerm.prevalidated('http://schema.org/Landform');

  /// IRI for schemahttp:LandmarksOrHistoricalBuildings
  ///
  /// An historical landmark or building.
  ///
  static const LandmarksOrHistoricalBuildings = IriTerm.prevalidated(
    'http://schema.org/LandmarksOrHistoricalBuildings',
  );

  /// IRI for schemahttp:Language
  ///
  /// Natural languages such as Spanish, Tamil, Hindi, English, etc. Formal language code tags expressed in [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) can be used via the {[alternateName]} property. The Language type previously also covered programming languages such as Scheme and Lisp, which are now best represented using {[ComputerLanguage]}.
  ///
  static const Language = IriTerm.prevalidated('http://schema.org/Language');

  /// IRI for schemahttp:LearningResource
  ///
  /// The LearningResource type can be used to indicate {[CreativeWork]}s (whether physical or digital) that have a particular and explicit orientation towards learning, education, skill acquisition, and other educational purposes.
  ///
  /// {[LearningResource]} is expected to be used as an addition to a primary type such as {[Book]}, {[VideoObject]}, {[Product]} etc.
  ///
  /// {[EducationEvent]} serves a similar purpose for event-like things (e.g. a {[Trip]}). A {[LearningResource]} may be created as a result of an {[EducationEvent]}, for example by recording one.
  ///
  static const LearningResource = IriTerm.prevalidated(
    'http://schema.org/LearningResource',
  );

  /// IRI for schemahttp:LeaveAction
  ///
  /// An agent leaves an event / group with participants/friends at a location.\n\nRelated actions:\n\n* {[JoinAction]}: The antonym of LeaveAction.\n* {[UnRegisterAction]}: Unlike UnRegisterAction, LeaveAction implies leaving a group/team of people rather than a service.
  ///
  static const LeaveAction = IriTerm.prevalidated(
    'http://schema.org/LeaveAction',
  );

  /// IRI for schemahttp:LegalForceStatus
  ///
  /// A list of possible statuses for the legal force of a legislation.
  ///
  static const LegalForceStatus = IriTerm.prevalidated(
    'http://schema.org/LegalForceStatus',
  );

  /// IRI for schemahttp:LegalService
  ///
  /// A LegalService is a business that provides legally-oriented services, advice and representation, e.g. law firms.\n\nAs a {[LocalBusiness]} it can be described as a {[provider]} of one or more {[Service]}\(s).
  ///
  static const LegalService = IriTerm.prevalidated(
    'http://schema.org/LegalService',
  );

  /// IRI for schemahttp:LegalValueLevel
  ///
  /// A list of possible levels for the legal validity of a legislation.
  ///
  static const LegalValueLevel = IriTerm.prevalidated(
    'http://schema.org/LegalValueLevel',
  );

  /// IRI for schemahttp:Legislation
  ///
  /// A legal document such as an act, decree, bill, etc. (enforceable or not) or a component of a legal act (like an article).
  ///
  static const Legislation = IriTerm.prevalidated(
    'http://schema.org/Legislation',
  );

  /// IRI for schemahttp:LegislationObject
  ///
  /// A specific object or file containing a Legislation. Note that the same Legislation can be published in multiple files. For example, a digitally signed PDF, a plain PDF and an HTML version.
  ///
  static const LegislationObject = IriTerm.prevalidated(
    'http://schema.org/LegislationObject',
  );

  /// IRI for schemahttp:LegislativeBuilding
  ///
  /// A legislative building&#x2014;for example, the state capitol.
  ///
  static const LegislativeBuilding = IriTerm.prevalidated(
    'http://schema.org/LegislativeBuilding',
  );

  /// IRI for schemahttp:LendAction
  ///
  /// The act of providing an object under an agreement that it will be returned at a later date. Reciprocal of BorrowAction.\n\nRelated actions:\n\n* {[BorrowAction]}: Reciprocal of LendAction.
  ///
  static const LendAction = IriTerm.prevalidated(
    'http://schema.org/LendAction',
  );

  /// IRI for schemahttp:Library
  ///
  /// A library.
  ///
  static const Library = IriTerm.prevalidated('http://schema.org/Library');

  /// IRI for schemahttp:LibrarySystem
  ///
  /// A {[LibrarySystem]} is a collaborative system amongst several libraries.
  ///
  static const LibrarySystem = IriTerm.prevalidated(
    'http://schema.org/LibrarySystem',
  );

  /// IRI for schemahttp:LifestyleModification
  ///
  /// A process of care involving exercise, changes to diet, fitness routines, and other lifestyle changes aimed at improving a health condition.
  ///
  static const LifestyleModification = IriTerm.prevalidated(
    'http://schema.org/LifestyleModification',
  );

  /// IRI for schemahttp:Ligament
  ///
  /// A short band of tough, flexible, fibrous connective tissue that functions to connect multiple bones, cartilages, and structurally support joints.
  ///
  static const Ligament = IriTerm.prevalidated('http://schema.org/Ligament');

  /// IRI for schemahttp:LikeAction
  ///
  /// The act of expressing a positive sentiment about the object. An agent likes an object (a proposition, topic or theme) with participants.
  ///
  static const LikeAction = IriTerm.prevalidated(
    'http://schema.org/LikeAction',
  );

  /// IRI for schemahttp:LinkRole
  ///
  /// A Role that represents a Web link, e.g. as expressed via the 'url' property. Its linkRelationship property can indicate URL-based and plain textual link types, e.g. those in IANA link registry or others such as 'amphtml'. This structure provides a placeholder where details from HTML's link element can be represented outside of HTML, e.g. in JSON-LD feeds.
  ///
  static const LinkRole = IriTerm.prevalidated('http://schema.org/LinkRole');

  /// IRI for schemahttp:LiquorStore
  ///
  /// A shop that sells alcoholic drinks such as wine, beer, whisky and other spirits.
  ///
  static const LiquorStore = IriTerm.prevalidated(
    'http://schema.org/LiquorStore',
  );

  /// IRI for schemahttp:ListItem
  ///
  /// An list item, e.g. a step in a checklist or how-to description.
  ///
  static const ListItem = IriTerm.prevalidated('http://schema.org/ListItem');

  /// IRI for schemahttp:ListenAction
  ///
  /// The act of consuming audio content.
  ///
  static const ListenAction = IriTerm.prevalidated(
    'http://schema.org/ListenAction',
  );

  /// IRI for schemahttp:LiteraryEvent
  ///
  /// Event type: Literary event.
  ///
  static const LiteraryEvent = IriTerm.prevalidated(
    'http://schema.org/LiteraryEvent',
  );

  /// IRI for schemahttp:LiveBlogPosting
  ///
  /// A {[LiveBlogPosting]} is a {[BlogPosting]} intended to provide a rolling textual coverage of an ongoing event through continuous updates.
  ///
  static const LiveBlogPosting = IriTerm.prevalidated(
    'http://schema.org/LiveBlogPosting',
  );

  /// IRI for schemahttp:LoanOrCredit
  ///
  /// A financial product for the loaning of an amount of money, or line of credit, under agreed terms and charges.
  ///
  static const LoanOrCredit = IriTerm.prevalidated(
    'http://schema.org/LoanOrCredit',
  );

  /// IRI for schemahttp:LocalBusiness
  ///
  /// A particular physical business or branch of an organization. Examples of LocalBusiness include a restaurant, a particular branch of a restaurant chain, a branch of a bank, a medical practice, a club, a bowling alley, etc.
  ///
  static const LocalBusiness = IriTerm.prevalidated(
    'http://schema.org/LocalBusiness',
  );

  /// IRI for schemahttp:LocationFeatureSpecification
  ///
  /// Specifies a location feature by providing a structured value representing a feature of an accommodation as a property-value pair of varying degrees of formality.
  ///
  static const LocationFeatureSpecification = IriTerm.prevalidated(
    'http://schema.org/LocationFeatureSpecification',
  );

  /// IRI for schemahttp:Locksmith
  ///
  /// A locksmith.
  ///
  static const Locksmith = IriTerm.prevalidated('http://schema.org/Locksmith');

  /// IRI for schemahttp:LodgingBusiness
  ///
  /// A lodging business, such as a motel, hotel, or inn.
  ///
  static const LodgingBusiness = IriTerm.prevalidated(
    'http://schema.org/LodgingBusiness',
  );

  /// IRI for schemahttp:LodgingReservation
  ///
  /// A reservation for lodging at a hotel, motel, inn, etc.\n\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations.
  ///
  static const LodgingReservation = IriTerm.prevalidated(
    'http://schema.org/LodgingReservation',
  );

  /// IRI for schemahttp:LoseAction
  ///
  /// The act of being defeated in a competitive activity.
  ///
  static const LoseAction = IriTerm.prevalidated(
    'http://schema.org/LoseAction',
  );

  /// IRI for schemahttp:LymphaticVessel
  ///
  /// A type of blood vessel that specifically carries lymph fluid unidirectionally toward the heart.
  ///
  static const LymphaticVessel = IriTerm.prevalidated(
    'http://schema.org/LymphaticVessel',
  );

  /// IRI for schemahttp:Manuscript
  ///
  /// A book, document, or piece of music written by hand rather than typed or printed.
  ///
  static const Manuscript = IriTerm.prevalidated(
    'http://schema.org/Manuscript',
  );

  /// IRI for schemahttp:Map
  ///
  /// A map.
  ///
  static const Map = IriTerm.prevalidated('http://schema.org/Map');

  /// IRI for schemahttp:MapCategoryType
  ///
  /// An enumeration of several kinds of Map.
  ///
  static const MapCategoryType = IriTerm.prevalidated(
    'http://schema.org/MapCategoryType',
  );

  /// IRI for schemahttp:MarryAction
  ///
  /// The act of marrying a person.
  ///
  static const MarryAction = IriTerm.prevalidated(
    'http://schema.org/MarryAction',
  );

  /// IRI for schemahttp:Mass
  ///
  /// Properties that take Mass as values are of the form '&lt;Number&gt; &lt;Mass unit of measure&gt;'. E.g., '7 kg'.
  ///
  static const Mass = IriTerm.prevalidated('http://schema.org/Mass');

  /// IRI for schemahttp:MathSolver
  ///
  /// A math solver which is capable of solving a subset of mathematical problems.
  ///
  static const MathSolver = IriTerm.prevalidated(
    'http://schema.org/MathSolver',
  );

  /// IRI for schemahttp:MaximumDoseSchedule
  ///
  /// The maximum dosing schedule considered safe for a drug or supplement as recommended by an authority or by the drug/supplement's manufacturer. Capture the recommending authority in the recognizingAuthority property of MedicalEntity.
  ///
  static const MaximumDoseSchedule = IriTerm.prevalidated(
    'http://schema.org/MaximumDoseSchedule',
  );

  /// IRI for schemahttp:MeasurementMethodEnum
  ///
  /// Enumeration(s) for use with {[measurementMethod]}.
  ///
  static const MeasurementMethodEnum = IriTerm.prevalidated(
    'http://schema.org/MeasurementMethodEnum',
  );

  /// IRI for schemahttp:MeasurementTypeEnumeration
  ///
  /// Enumeration of common measurement types (or dimensions), for example "chest" for a person, "inseam" for pants, "gauge" for screws, or "wheel" for bicycles.
  ///
  static const MeasurementTypeEnumeration = IriTerm.prevalidated(
    'http://schema.org/MeasurementTypeEnumeration',
  );

  /// IRI for schemahttp:MediaEnumeration
  ///
  /// MediaEnumeration enumerations are lists of codes, labels etc. useful for describing media objects. They may be reflections of externally developed lists, or created at schema.org, or a combination.
  ///
  static const MediaEnumeration = IriTerm.prevalidated(
    'http://schema.org/MediaEnumeration',
  );

  /// IRI for schemahttp:MediaGallery
  ///
  /// Web page type: Media gallery page. A mixed-media page that can contain media such as images, videos, and other multimedia.
  ///
  static const MediaGallery = IriTerm.prevalidated(
    'http://schema.org/MediaGallery',
  );

  /// IRI for schemahttp:MediaManipulationRatingEnumeration
  ///
  /// Codes for use with the {[mediaAuthenticityCategory]} property, indicating the authenticity of a media object (in the context of how it was published or shared). In general these codes are not mutually exclusive, although some combinations (such as 'original' versus 'transformed', 'edited' and 'staged') would be contradictory if applied in the same {[MediaReview]}. Note that the application of these codes is with regard to a piece of media shared or published in a particular context.
  ///
  static const MediaManipulationRatingEnumeration = IriTerm.prevalidated(
    'http://schema.org/MediaManipulationRatingEnumeration',
  );

  /// IRI for schemahttp:MediaObject
  ///
  /// A media object, such as an image, video, audio, or text object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  ///
  static const MediaObject = IriTerm.prevalidated(
    'http://schema.org/MediaObject',
  );

  /// IRI for schemahttp:MediaReview
  ///
  /// A {[MediaReview]} is a more specialized form of Review dedicated to the evaluation of media content online, typically in the context of fact-checking and misinformation.
  /// For more general reviews of media in the broader sense, use {[UserReview]}, {[CriticReview]} or other {[Review]} types. This definition is
  /// a work in progress. While the {[MediaManipulationRatingEnumeration]} list reflects significant community review amongst fact-checkers and others working
  /// to combat misinformation, the specific structures for representing media objects, their versions and publication context, are still evolving. Similarly, best practices for the relationship between {[MediaReview]} and {[ClaimReview]} markup have not yet been finalized.
  ///
  static const MediaReview = IriTerm.prevalidated(
    'http://schema.org/MediaReview',
  );

  /// IRI for schemahttp:MediaReviewItem
  ///
  /// Represents an item or group of closely related items treated as a unit for the sake of evaluation in a {[MediaReview]}. Authorship etc. apply to the items rather than to the curation/grouping or reviewing party.
  ///
  static const MediaReviewItem = IriTerm.prevalidated(
    'http://schema.org/MediaReviewItem',
  );

  /// IRI for schemahttp:MediaSubscription
  ///
  /// A subscription which allows a user to access media including audio, video, books, etc.
  ///
  static const MediaSubscription = IriTerm.prevalidated(
    'http://schema.org/MediaSubscription',
  );

  /// IRI for schemahttp:MedicalAudience
  ///
  /// Target audiences for medical web pages.
  ///
  static const MedicalAudience = IriTerm.prevalidated(
    'http://schema.org/MedicalAudience',
  );

  /// IRI for schemahttp:MedicalAudienceType
  ///
  /// Target audiences types for medical web pages. Enumerated type.
  ///
  static const MedicalAudienceType = IriTerm.prevalidated(
    'http://schema.org/MedicalAudienceType',
  );

  /// IRI for schemahttp:MedicalBusiness
  ///
  /// A particular physical or virtual business of an organization for medical purposes. Examples of MedicalBusiness include different businesses run by health professionals.
  ///
  static const MedicalBusiness = IriTerm.prevalidated(
    'http://schema.org/MedicalBusiness',
  );

  /// IRI for schemahttp:MedicalCause
  ///
  /// The causative agent(s) that are responsible for the pathophysiologic process that eventually results in a medical condition, symptom or sign. In this schema, unless otherwise specified this is meant to be the proximate cause of the medical condition, symptom or sign. The proximate cause is defined as the causative agent that most directly results in the medical condition, symptom or sign. For example, the HIV virus could be considered a cause of AIDS. Or in a diagnostic context, if a patient fell and sustained a hip fracture and two days later sustained a pulmonary embolism which eventuated in a cardiac arrest, the cause of the cardiac arrest (the proximate cause) would be the pulmonary embolism and not the fall. Medical causes can include cardiovascular, chemical, dermatologic, endocrine, environmental, gastroenterologic, genetic, hematologic, gynecologic, iatrogenic, infectious, musculoskeletal, neurologic, nutritional, obstetric, oncologic, otolaryngologic, pharmacologic, psychiatric, pulmonary, renal, rheumatologic, toxic, traumatic, or urologic causes; medical conditions can be causes as well.
  ///
  static const MedicalCause = IriTerm.prevalidated(
    'http://schema.org/MedicalCause',
  );

  /// IRI for schemahttp:MedicalClinic
  ///
  /// A facility, often associated with a hospital or medical school, that is devoted to the specific diagnosis and/or healthcare. Previously limited to outpatients but with evolution it may be open to inpatients as well.
  ///
  static const MedicalClinic = IriTerm.prevalidated(
    'http://schema.org/MedicalClinic',
  );

  /// IRI for schemahttp:MedicalCode
  ///
  /// A code for a medical entity.
  ///
  static const MedicalCode = IriTerm.prevalidated(
    'http://schema.org/MedicalCode',
  );

  /// IRI for schemahttp:MedicalCondition
  ///
  /// Any condition of the human body that affects the normal functioning of a person, whether physically or mentally. Includes diseases, injuries, disabilities, disorders, syndromes, etc.
  ///
  static const MedicalCondition = IriTerm.prevalidated(
    'http://schema.org/MedicalCondition',
  );

  /// IRI for schemahttp:MedicalConditionStage
  ///
  /// A stage of a medical condition, such as 'Stage IIIa'.
  ///
  static const MedicalConditionStage = IriTerm.prevalidated(
    'http://schema.org/MedicalConditionStage',
  );

  /// IRI for schemahttp:MedicalContraindication
  ///
  /// A condition or factor that serves as a reason to withhold a certain medical therapy. Contraindications can be absolute (there are no reasonable circumstances for undertaking a course of action) or relative (the patient is at higher risk of complications, but these risks may be outweighed by other considerations or mitigated by other measures).
  ///
  static const MedicalContraindication = IriTerm.prevalidated(
    'http://schema.org/MedicalContraindication',
  );

  /// IRI for schemahttp:MedicalDevice
  ///
  /// Any object used in a medical capacity, such as to diagnose or treat a patient.
  ///
  static const MedicalDevice = IriTerm.prevalidated(
    'http://schema.org/MedicalDevice',
  );

  /// IRI for schemahttp:MedicalDevicePurpose
  ///
  /// Categories of medical devices, organized by the purpose or intended use of the device.
  ///
  static const MedicalDevicePurpose = IriTerm.prevalidated(
    'http://schema.org/MedicalDevicePurpose',
  );

  /// IRI for schemahttp:MedicalEntity
  ///
  /// The most generic type of entity related to health and the practice of medicine.
  ///
  static const MedicalEntity = IriTerm.prevalidated(
    'http://schema.org/MedicalEntity',
  );

  /// IRI for schemahttp:MedicalEnumeration
  ///
  /// Enumerations related to health and the practice of medicine: A concept that is used to attribute a quality to another concept, as a qualifier, a collection of items or a listing of all of the elements of a set in medicine practice.
  ///
  static const MedicalEnumeration = IriTerm.prevalidated(
    'http://schema.org/MedicalEnumeration',
  );

  /// IRI for schemahttp:MedicalEvidenceLevel
  ///
  /// Level of evidence for a medical guideline. Enumerated type.
  ///
  static const MedicalEvidenceLevel = IriTerm.prevalidated(
    'http://schema.org/MedicalEvidenceLevel',
  );

  /// IRI for schemahttp:MedicalGuideline
  ///
  /// Any recommendation made by a standard society (e.g. ACC/AHA) or consensus statement that denotes how to diagnose and treat a particular condition. Note: this type should be used to tag the actual guideline recommendation; if the guideline recommendation occurs in a larger scholarly article, use MedicalScholarlyArticle to tag the overall article, not this type. Note also: the organization making the recommendation should be captured in the recognizingAuthority base property of MedicalEntity.
  ///
  static const MedicalGuideline = IriTerm.prevalidated(
    'http://schema.org/MedicalGuideline',
  );

  /// IRI for schemahttp:MedicalGuidelineContraindication
  ///
  /// A guideline contraindication that designates a process as harmful and where quality of the data supporting the contraindication is sound.
  ///
  static const MedicalGuidelineContraindication = IriTerm.prevalidated(
    'http://schema.org/MedicalGuidelineContraindication',
  );

  /// IRI for schemahttp:MedicalGuidelineRecommendation
  ///
  /// A guideline recommendation that is regarded as efficacious and where quality of the data supporting the recommendation is sound.
  ///
  static const MedicalGuidelineRecommendation = IriTerm.prevalidated(
    'http://schema.org/MedicalGuidelineRecommendation',
  );

  /// IRI for schemahttp:MedicalImagingTechnique
  ///
  /// Any medical imaging modality typically used for diagnostic purposes. Enumerated type.
  ///
  static const MedicalImagingTechnique = IriTerm.prevalidated(
    'http://schema.org/MedicalImagingTechnique',
  );

  /// IRI for schemahttp:MedicalIndication
  ///
  /// A condition or factor that indicates use of a medical therapy, including signs, symptoms, risk factors, anatomical states, etc.
  ///
  static const MedicalIndication = IriTerm.prevalidated(
    'http://schema.org/MedicalIndication',
  );

  /// IRI for schemahttp:MedicalIntangible
  ///
  /// A utility class that serves as the umbrella for a number of 'intangible' things in the medical space.
  ///
  static const MedicalIntangible = IriTerm.prevalidated(
    'http://schema.org/MedicalIntangible',
  );

  /// IRI for schemahttp:MedicalObservationalStudy
  ///
  /// An observational study is a type of medical study that attempts to infer the possible effect of a treatment through observation of a cohort of subjects over a period of time. In an observational study, the assignment of subjects into treatment groups versus control groups is outside the control of the investigator. This is in contrast with controlled studies, such as the randomized controlled trials represented by MedicalTrial, where each subject is randomly assigned to a treatment group or a control group before the start of the treatment.
  ///
  static const MedicalObservationalStudy = IriTerm.prevalidated(
    'http://schema.org/MedicalObservationalStudy',
  );

  /// IRI for schemahttp:MedicalObservationalStudyDesign
  ///
  /// Design models for observational medical studies. Enumerated type.
  ///
  static const MedicalObservationalStudyDesign = IriTerm.prevalidated(
    'http://schema.org/MedicalObservationalStudyDesign',
  );

  /// IRI for schemahttp:MedicalOrganization
  ///
  /// A medical organization (physical or not), such as hospital, institution or clinic.
  ///
  static const MedicalOrganization = IriTerm.prevalidated(
    'http://schema.org/MedicalOrganization',
  );

  /// IRI for schemahttp:MedicalProcedure
  ///
  /// A process of care used in either a diagnostic, therapeutic, preventive or palliative capacity that relies on invasive (surgical), non-invasive, or other techniques.
  ///
  static const MedicalProcedure = IriTerm.prevalidated(
    'http://schema.org/MedicalProcedure',
  );

  /// IRI for schemahttp:MedicalProcedureType
  ///
  /// An enumeration that describes different types of medical procedures.
  ///
  static const MedicalProcedureType = IriTerm.prevalidated(
    'http://schema.org/MedicalProcedureType',
  );

  /// IRI for schemahttp:MedicalRiskCalculator
  ///
  /// A complex mathematical calculation requiring an online calculator, used to assess prognosis. Note: use the url property of Thing to record any URLs for online calculators.
  ///
  static const MedicalRiskCalculator = IriTerm.prevalidated(
    'http://schema.org/MedicalRiskCalculator',
  );

  /// IRI for schemahttp:MedicalRiskEstimator
  ///
  /// Any rule set or interactive tool for estimating the risk of developing a complication or condition.
  ///
  static const MedicalRiskEstimator = IriTerm.prevalidated(
    'http://schema.org/MedicalRiskEstimator',
  );

  /// IRI for schemahttp:MedicalRiskFactor
  ///
  /// A risk factor is anything that increases a person's likelihood of developing or contracting a disease, medical condition, or complication.
  ///
  static const MedicalRiskFactor = IriTerm.prevalidated(
    'http://schema.org/MedicalRiskFactor',
  );

  /// IRI for schemahttp:MedicalRiskScore
  ///
  /// A simple system that adds up the number of risk factors to yield a score that is associated with prognosis, e.g. CHAD score, TIMI risk score.
  ///
  static const MedicalRiskScore = IriTerm.prevalidated(
    'http://schema.org/MedicalRiskScore',
  );

  /// IRI for schemahttp:MedicalScholarlyArticle
  ///
  /// A scholarly article in the medical domain.
  ///
  static const MedicalScholarlyArticle = IriTerm.prevalidated(
    'http://schema.org/MedicalScholarlyArticle',
  );

  /// IRI for schemahttp:MedicalSign
  ///
  /// Any physical manifestation of a person's medical condition discoverable by objective diagnostic tests or physical examination.
  ///
  static const MedicalSign = IriTerm.prevalidated(
    'http://schema.org/MedicalSign',
  );

  /// IRI for schemahttp:MedicalSignOrSymptom
  ///
  /// Any feature associated or not with a medical condition. In medicine a symptom is generally subjective while a sign is objective.
  ///
  static const MedicalSignOrSymptom = IriTerm.prevalidated(
    'http://schema.org/MedicalSignOrSymptom',
  );

  /// IRI for schemahttp:MedicalSpecialty
  ///
  /// Any specific branch of medical science or practice. Medical specialities include clinical specialties that pertain to particular organ systems and their respective disease states, as well as allied health specialties. Enumerated type.
  ///
  static const MedicalSpecialty = IriTerm.prevalidated(
    'http://schema.org/MedicalSpecialty',
  );

  /// IRI for schemahttp:MedicalStudy
  ///
  /// A medical study is an umbrella type covering all kinds of research studies relating to human medicine or health, including observational studies and interventional trials and registries, randomized, controlled or not. When the specific type of study is known, use one of the extensions of this type, such as MedicalTrial or MedicalObservationalStudy. Also, note that this type should be used to mark up data that describes the study itself; to tag an article that publishes the results of a study, use MedicalScholarlyArticle. Note: use the code property of MedicalEntity to store study IDs, e.g. clinicaltrials.gov ID.
  ///
  static const MedicalStudy = IriTerm.prevalidated(
    'http://schema.org/MedicalStudy',
  );

  /// IRI for schemahttp:MedicalStudyStatus
  ///
  /// The status of a medical study. Enumerated type.
  ///
  static const MedicalStudyStatus = IriTerm.prevalidated(
    'http://schema.org/MedicalStudyStatus',
  );

  /// IRI for schemahttp:MedicalSymptom
  ///
  /// Any complaint sensed and expressed by the patient (therefore defined as subjective)  like stomachache, lower-back pain, or fatigue.
  ///
  static const MedicalSymptom = IriTerm.prevalidated(
    'http://schema.org/MedicalSymptom',
  );

  /// IRI for schemahttp:MedicalTest
  ///
  /// Any medical test, typically performed for diagnostic purposes.
  ///
  static const MedicalTest = IriTerm.prevalidated(
    'http://schema.org/MedicalTest',
  );

  /// IRI for schemahttp:MedicalTestPanel
  ///
  /// Any collection of tests commonly ordered together.
  ///
  static const MedicalTestPanel = IriTerm.prevalidated(
    'http://schema.org/MedicalTestPanel',
  );

  /// IRI for schemahttp:MedicalTherapy
  ///
  /// Any medical intervention designed to prevent, treat, and cure human diseases and medical conditions, including both curative and palliative therapies. Medical therapies are typically processes of care relying upon pharmacotherapy, behavioral therapy, supportive therapy (with fluid or nutrition for example), or detoxification (e.g. hemodialysis) aimed at improving or preventing a health condition.
  ///
  static const MedicalTherapy = IriTerm.prevalidated(
    'http://schema.org/MedicalTherapy',
  );

  /// IRI for schemahttp:MedicalTrial
  ///
  /// A medical trial is a type of medical study that uses a scientific process to compare the safety and efficacy of medical therapies or medical procedures. In general, medical trials are controlled and subjects are allocated at random to the different treatment and/or control groups.
  ///
  static const MedicalTrial = IriTerm.prevalidated(
    'http://schema.org/MedicalTrial',
  );

  /// IRI for schemahttp:MedicalTrialDesign
  ///
  /// Design models for medical trials. Enumerated type.
  ///
  static const MedicalTrialDesign = IriTerm.prevalidated(
    'http://schema.org/MedicalTrialDesign',
  );

  /// IRI for schemahttp:MedicalWebPage
  ///
  /// A web page that provides medical information.
  ///
  static const MedicalWebPage = IriTerm.prevalidated(
    'http://schema.org/MedicalWebPage',
  );

  /// IRI for schemahttp:MedicineSystem
  ///
  /// Systems of medical practice.
  ///
  static const MedicineSystem = IriTerm.prevalidated(
    'http://schema.org/MedicineSystem',
  );

  /// IRI for schemahttp:MeetingRoom
  ///
  /// A meeting room, conference room, or conference hall is a room provided for singular events such as business conferences and meetings (source: Wikipedia, the free encyclopedia, see <a href="http://en.wikipedia.org/wiki/Conference_hall">http://en.wikipedia.org/wiki/Conference_hall</a>).
  /// <br /><br />
  /// See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.
  ///
  ///
  static const MeetingRoom = IriTerm.prevalidated(
    'http://schema.org/MeetingRoom',
  );

  /// IRI for schemahttp:MemberProgram
  ///
  /// A MemberProgram defines a loyalty (or membership) program that provides its members with certain benefits, for example better pricing, free shipping or returns, or the ability to earn loyalty points. Member programs may have multiple tiers, for example silver and gold members, each with different benefits.
  ///
  static const MemberProgram = IriTerm.prevalidated(
    'http://schema.org/MemberProgram',
  );

  /// IRI for schemahttp:MemberProgramTier
  ///
  /// A MemberProgramTier specifies a tier under a loyalty (member) program, for example "gold".
  ///
  static const MemberProgramTier = IriTerm.prevalidated(
    'http://schema.org/MemberProgramTier',
  );

  /// IRI for schemahttp:MensClothingStore
  ///
  /// A men's clothing store.
  ///
  static const MensClothingStore = IriTerm.prevalidated(
    'http://schema.org/MensClothingStore',
  );

  /// IRI for schemahttp:Menu
  ///
  /// A structured representation of food or drink items available from a FoodEstablishment.
  ///
  static const Menu = IriTerm.prevalidated('http://schema.org/Menu');

  /// IRI for schemahttp:MenuItem
  ///
  /// A food or drink item listed in a menu or menu section.
  ///
  static const MenuItem = IriTerm.prevalidated('http://schema.org/MenuItem');

  /// IRI for schemahttp:MenuSection
  ///
  /// A sub-grouping of food or drink items in a menu. E.g. courses (such as 'Dinner', 'Breakfast', etc.), specific type of dishes (such as 'Meat', 'Vegan', 'Drinks', etc.), or some other classification made by the menu provider.
  ///
  static const MenuSection = IriTerm.prevalidated(
    'http://schema.org/MenuSection',
  );

  /// IRI for schemahttp:MerchantReturnEnumeration
  ///
  /// Enumerates several kinds of product return policies.
  ///
  static const MerchantReturnEnumeration = IriTerm.prevalidated(
    'http://schema.org/MerchantReturnEnumeration',
  );

  /// IRI for schemahttp:MerchantReturnPolicy
  ///
  /// A MerchantReturnPolicy provides information about product return policies associated with an {[Organization]}, {[Product]}, or {[Offer]}.
  ///
  static const MerchantReturnPolicy = IriTerm.prevalidated(
    'http://schema.org/MerchantReturnPolicy',
  );

  /// IRI for schemahttp:MerchantReturnPolicySeasonalOverride
  ///
  /// A seasonal override of a return policy, for example used for holidays.
  ///
  static const MerchantReturnPolicySeasonalOverride = IriTerm.prevalidated(
    'http://schema.org/MerchantReturnPolicySeasonalOverride',
  );

  /// IRI for schemahttp:Message
  ///
  /// A single message from a sender to one or more organizations or people.
  ///
  static const Message = IriTerm.prevalidated('http://schema.org/Message');

  /// IRI for schemahttp:MiddleSchool
  ///
  /// A middle school (typically for children aged around 11-14, although this varies somewhat).
  ///
  static const MiddleSchool = IriTerm.prevalidated(
    'http://schema.org/MiddleSchool',
  );

  /// IRI for schemahttp:MobileApplication
  ///
  /// A software application designed specifically to work well on a mobile device such as a telephone.
  ///
  static const MobileApplication = IriTerm.prevalidated(
    'http://schema.org/MobileApplication',
  );

  /// IRI for schemahttp:MobilePhoneStore
  ///
  /// A store that sells mobile phones and related accessories.
  ///
  static const MobilePhoneStore = IriTerm.prevalidated(
    'http://schema.org/MobilePhoneStore',
  );

  /// IRI for schemahttp:MolecularEntity
  ///
  /// Any constitutionally or isotopically distinct atom, molecule, ion, ion pair, radical, radical ion, complex, conformer etc., identifiable as a separately distinguishable entity.
  ///
  static const MolecularEntity = IriTerm.prevalidated(
    'http://schema.org/MolecularEntity',
  );

  /// IRI for schemahttp:MonetaryAmount
  ///
  /// A monetary value or range. This type can be used to describe an amount of money such as $50 USD, or a range as in describing a bank account being suitable for a balance between ¬£1,000 and ¬£1,000,000 GBP, or the value of a salary, etc. It is recommended to use {[PriceSpecification]} Types to describe the price of an Offer, Invoice, etc.
  ///
  static const MonetaryAmount = IriTerm.prevalidated(
    'http://schema.org/MonetaryAmount',
  );

  /// IRI for schemahttp:MonetaryAmountDistribution
  ///
  /// A statistical distribution of monetary amounts.
  ///
  static const MonetaryAmountDistribution = IriTerm.prevalidated(
    'http://schema.org/MonetaryAmountDistribution',
  );

  /// IRI for schemahttp:MonetaryGrant
  ///
  /// A monetary grant.
  ///
  static const MonetaryGrant = IriTerm.prevalidated(
    'http://schema.org/MonetaryGrant',
  );

  /// IRI for schemahttp:MoneyTransfer
  ///
  /// The act of transferring money from one place to another place. This may occur electronically or physically.
  ///
  static const MoneyTransfer = IriTerm.prevalidated(
    'http://schema.org/MoneyTransfer',
  );

  /// IRI for schemahttp:MortgageLoan
  ///
  /// A loan in which property or real estate is used as collateral. (A loan securitized against some real estate.)
  ///
  static const MortgageLoan = IriTerm.prevalidated(
    'http://schema.org/MortgageLoan',
  );

  /// IRI for schemahttp:Mosque
  ///
  /// A mosque.
  ///
  static const Mosque = IriTerm.prevalidated('http://schema.org/Mosque');

  /// IRI for schemahttp:Motel
  ///
  /// A motel.
  /// <br /><br />
  /// See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.
  ///
  ///
  static const Motel = IriTerm.prevalidated('http://schema.org/Motel');

  /// IRI for schemahttp:Motorcycle
  ///
  /// A motorcycle or motorbike is a single-track, two-wheeled motor vehicle.
  ///
  static const Motorcycle = IriTerm.prevalidated(
    'http://schema.org/Motorcycle',
  );

  /// IRI for schemahttp:MotorcycleDealer
  ///
  /// A motorcycle dealer.
  ///
  static const MotorcycleDealer = IriTerm.prevalidated(
    'http://schema.org/MotorcycleDealer',
  );

  /// IRI for schemahttp:MotorcycleRepair
  ///
  /// A motorcycle repair shop.
  ///
  static const MotorcycleRepair = IriTerm.prevalidated(
    'http://schema.org/MotorcycleRepair',
  );

  /// IRI for schemahttp:MotorizedBicycle
  ///
  /// A motorized bicycle is a bicycle with an attached motor used to power the vehicle, or to assist with pedaling.
  ///
  static const MotorizedBicycle = IriTerm.prevalidated(
    'http://schema.org/MotorizedBicycle',
  );

  /// IRI for schemahttp:Mountain
  ///
  /// A mountain, like Mount Whitney or Mount Everest.
  ///
  static const Mountain = IriTerm.prevalidated('http://schema.org/Mountain');

  /// IRI for schemahttp:MoveAction
  ///
  /// The act of an agent relocating to a place.\n\nRelated actions:\n\n* {[TransferAction]}: Unlike TransferAction, the subject of the move is a living Person or Organization rather than an inanimate object.
  ///
  static const MoveAction = IriTerm.prevalidated(
    'http://schema.org/MoveAction',
  );

  /// IRI for schemahttp:Movie
  ///
  /// A movie.
  ///
  static const Movie = IriTerm.prevalidated('http://schema.org/Movie');

  /// IRI for schemahttp:MovieClip
  ///
  /// A short segment/part of a movie.
  ///
  static const MovieClip = IriTerm.prevalidated('http://schema.org/MovieClip');

  /// IRI for schemahttp:MovieRentalStore
  ///
  /// A movie rental store.
  ///
  static const MovieRentalStore = IriTerm.prevalidated(
    'http://schema.org/MovieRentalStore',
  );

  /// IRI for schemahttp:MovieSeries
  ///
  /// A series of movies. Included movies can be indicated with the hasPart property.
  ///
  static const MovieSeries = IriTerm.prevalidated(
    'http://schema.org/MovieSeries',
  );

  /// IRI for schemahttp:MovieTheater
  ///
  /// A movie theater.
  ///
  static const MovieTheater = IriTerm.prevalidated(
    'http://schema.org/MovieTheater',
  );

  /// IRI for schemahttp:MovingCompany
  ///
  /// A moving company.
  ///
  static const MovingCompany = IriTerm.prevalidated(
    'http://schema.org/MovingCompany',
  );

  /// IRI for schemahttp:Muscle
  ///
  /// A muscle is an anatomical structure consisting of a contractile form of tissue that animals use to effect movement.
  ///
  static const Muscle = IriTerm.prevalidated('http://schema.org/Muscle');

  /// IRI for schemahttp:Museum
  ///
  /// A museum.
  ///
  static const Museum = IriTerm.prevalidated('http://schema.org/Museum');

  /// IRI for schemahttp:MusicAlbum
  ///
  /// A collection of music tracks.
  ///
  static const MusicAlbum = IriTerm.prevalidated(
    'http://schema.org/MusicAlbum',
  );

  /// IRI for schemahttp:MusicAlbumProductionType
  ///
  /// Classification of the album by its type of content: soundtrack, live album, studio album, etc.
  ///
  static const MusicAlbumProductionType = IriTerm.prevalidated(
    'http://schema.org/MusicAlbumProductionType',
  );

  /// IRI for schemahttp:MusicAlbumReleaseType
  ///
  /// The kind of release which this album is: single, EP or album.
  ///
  static const MusicAlbumReleaseType = IriTerm.prevalidated(
    'http://schema.org/MusicAlbumReleaseType',
  );

  /// IRI for schemahttp:MusicComposition
  ///
  /// A musical composition.
  ///
  static const MusicComposition = IriTerm.prevalidated(
    'http://schema.org/MusicComposition',
  );

  /// IRI for schemahttp:MusicEvent
  ///
  /// Event type: Music event.
  ///
  static const MusicEvent = IriTerm.prevalidated(
    'http://schema.org/MusicEvent',
  );

  /// IRI for schemahttp:MusicGroup
  ///
  /// A musical group, such as a band, an orchestra, or a choir. Can also be a solo musician.
  ///
  static const MusicGroup = IriTerm.prevalidated(
    'http://schema.org/MusicGroup',
  );

  /// IRI for schemahttp:MusicPlaylist
  ///
  /// A collection of music tracks in playlist form.
  ///
  static const MusicPlaylist = IriTerm.prevalidated(
    'http://schema.org/MusicPlaylist',
  );

  /// IRI for schemahttp:MusicRecording
  ///
  /// A music recording (track), usually a single song.
  ///
  static const MusicRecording = IriTerm.prevalidated(
    'http://schema.org/MusicRecording',
  );

  /// IRI for schemahttp:MusicRelease
  ///
  /// A MusicRelease is a specific release of a music album.
  ///
  static const MusicRelease = IriTerm.prevalidated(
    'http://schema.org/MusicRelease',
  );

  /// IRI for schemahttp:MusicReleaseFormatType
  ///
  /// Format of this release (the type of recording media used, i.e. compact disc, digital media, LP, etc.).
  ///
  static const MusicReleaseFormatType = IriTerm.prevalidated(
    'http://schema.org/MusicReleaseFormatType',
  );

  /// IRI for schemahttp:MusicStore
  ///
  /// A music store.
  ///
  static const MusicStore = IriTerm.prevalidated(
    'http://schema.org/MusicStore',
  );

  /// IRI for schemahttp:MusicVenue
  ///
  /// A music venue.
  ///
  static const MusicVenue = IriTerm.prevalidated(
    'http://schema.org/MusicVenue',
  );

  /// IRI for schemahttp:MusicVideoObject
  ///
  /// A music video file.
  ///
  static const MusicVideoObject = IriTerm.prevalidated(
    'http://schema.org/MusicVideoObject',
  );

  /// IRI for schemahttp:NGO
  ///
  /// Organization: Non-governmental Organization.
  ///
  static const NGO = IriTerm.prevalidated('http://schema.org/NGO');

  /// IRI for schemahttp:NLNonprofitType
  ///
  /// NLNonprofitType: Non-profit organization type originating from the Netherlands.
  ///
  static const NLNonprofitType = IriTerm.prevalidated(
    'http://schema.org/NLNonprofitType',
  );

  /// IRI for schemahttp:NailSalon
  ///
  /// A nail salon.
  ///
  static const NailSalon = IriTerm.prevalidated('http://schema.org/NailSalon');

  /// IRI for schemahttp:Nerve
  ///
  /// A common pathway for the electrochemical nerve impulses that are transmitted along each of the axons.
  ///
  static const Nerve = IriTerm.prevalidated('http://schema.org/Nerve');

  /// IRI for schemahttp:NewsArticle
  ///
  /// A NewsArticle is an article whose content reports news, or provides background context and supporting materials for understanding the news.
  ///
  /// A more detailed overview of [schema.org News markup](/docs/news.html) is also available.
  ///
  ///
  static const NewsArticle = IriTerm.prevalidated(
    'http://schema.org/NewsArticle',
  );

  /// IRI for schemahttp:NewsMediaOrganization
  ///
  /// A News/Media organization such as a newspaper or TV station.
  ///
  static const NewsMediaOrganization = IriTerm.prevalidated(
    'http://schema.org/NewsMediaOrganization',
  );

  /// IRI for schemahttp:Newspaper
  ///
  /// A publication containing information about varied topics that are pertinent to general information, a geographic area, or a specific subject matter (i.e. business, culture, education). Often published daily.
  ///
  static const Newspaper = IriTerm.prevalidated('http://schema.org/Newspaper');

  /// IRI for schemahttp:NightClub
  ///
  /// A nightclub or discotheque.
  ///
  static const NightClub = IriTerm.prevalidated('http://schema.org/NightClub');

  /// IRI for schemahttp:NonprofitType
  ///
  /// NonprofitType enumerates several kinds of official non-profit types of which a non-profit organization can be.
  ///
  static const NonprofitType = IriTerm.prevalidated(
    'http://schema.org/NonprofitType',
  );

  /// IRI for schemahttp:Notary
  ///
  /// A notary.
  ///
  static const Notary = IriTerm.prevalidated('http://schema.org/Notary');

  /// IRI for schemahttp:NoteDigitalDocument
  ///
  /// A file containing a note, primarily for the author.
  ///
  static const NoteDigitalDocument = IriTerm.prevalidated(
    'http://schema.org/NoteDigitalDocument',
  );

  /// IRI for schemahttp:Number
  ///
  /// Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  ///
  static const Number = IriTerm.prevalidated('http://schema.org/Number');

  /// IRI for schemahttp:NutritionInformation
  ///
  /// Nutritional information about the recipe.
  ///
  static const NutritionInformation = IriTerm.prevalidated(
    'http://schema.org/NutritionInformation',
  );

  /// IRI for schemahttp:Observation
  ///
  /// Instances of the class {[Observation]} are used to specify observations about an entity at a particular time. The principal properties of an {[Observation]} are {[observationAbout]}, {[measuredProperty]}, {[statType]}, {[value] and {[observationDate]}  and {[measuredProperty]}. Some but not all Observations represent a {[QuantitativeValue]}. Quantitative observations can be about a {[StatisticalVariable]}, which is an abstract specification about which we can make observations that are grounded at a particular location and time.
  ///
  /// Observations can also encode a subset of simple RDF-like statements (its observationAbout, a StatisticalVariable, defining the measuredPoperty; its observationAbout property indicating the entity the statement is about, and {[value]} )
  ///
  /// In the context of a quantitative knowledge graph, typical properties could include {[measuredProperty]}, {[observationAbout]}, {[observationDate]}, {[value]}, {[unitCode]}, {[unitText]}, {[measurementMethod]}.
  ///
  ///
  static const Observation = IriTerm.prevalidated(
    'http://schema.org/Observation',
  );

  /// IRI for schemahttp:Occupation
  ///
  /// A profession, may involve prolonged training and/or a formal qualification.
  ///
  static const Occupation = IriTerm.prevalidated(
    'http://schema.org/Occupation',
  );

  /// IRI for schemahttp:OccupationalExperienceRequirements
  ///
  /// Indicates employment-related experience requirements, e.g. {[monthsOfExperience]}.
  ///
  static const OccupationalExperienceRequirements = IriTerm.prevalidated(
    'http://schema.org/OccupationalExperienceRequirements',
  );

  /// IRI for schemahttp:OccupationalTherapy
  ///
  /// A treatment of people with physical, emotional, or social problems, using purposeful activity to help them overcome or learn to deal with their problems.
  ///
  static const OccupationalTherapy = IriTerm.prevalidated(
    'http://schema.org/OccupationalTherapy',
  );

  /// IRI for schemahttp:OceanBodyOfWater
  ///
  /// An ocean (for example, the Pacific).
  ///
  static const OceanBodyOfWater = IriTerm.prevalidated(
    'http://schema.org/OceanBodyOfWater',
  );

  /// IRI for schemahttp:Offer
  ///
  /// An offer to transfer some rights to an item or to provide a service ‚Äî for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.\n\nNote: As the {[businessFunction]} property, which identifies the form of offer (e.g. sell, lease, repair, dispose), defaults to http://purl.org/goodrelations/v1#Sell; an Offer without a defined businessFunction value can be assumed to be an offer to sell.\n\nFor [GTIN](http://www.gs1.org/barcodes/technical/idkeys/gtin)-related fields, see [Check Digit calculator](http://www.gs1.org/barcodes/support/check_digit_calculator) and [validation guide](http://www.gs1us.org/resources/standards/gtin-validation-guide) from [GS1](http://www.gs1.org/).
  ///
  static const Offer = IriTerm.prevalidated('http://schema.org/Offer');

  /// IRI for schemahttp:OfferCatalog
  ///
  /// An OfferCatalog is an ItemList that contains related Offers and/or further OfferCatalogs that are offeredBy the same provider.
  ///
  static const OfferCatalog = IriTerm.prevalidated(
    'http://schema.org/OfferCatalog',
  );

  /// IRI for schemahttp:OfferForLease
  ///
  /// An {[OfferForLease]} in Schema.org represents an {[Offer]} to lease out something, i.e. an {[Offer]} whose
  /// {[businessFunction]} is [lease out](http://purl.org/goodrelations/v1#LeaseOut.). See [Good Relations](https://en.wikipedia.org/wiki/GoodRelations) for
  /// background on the underlying concepts.
  ///
  ///
  static const OfferForLease = IriTerm.prevalidated(
    'http://schema.org/OfferForLease',
  );

  /// IRI for schemahttp:OfferForPurchase
  ///
  /// An {[OfferForPurchase]} in Schema.org represents an {[Offer]} to sell something, i.e. an {[Offer]} whose
  /// {[businessFunction]} is [sell](http://purl.org/goodrelations/v1#Sell.). See [Good Relations](https://en.wikipedia.org/wiki/GoodRelations) for
  /// background on the underlying concepts.
  ///
  ///
  static const OfferForPurchase = IriTerm.prevalidated(
    'http://schema.org/OfferForPurchase',
  );

  /// IRI for schemahttp:OfferItemCondition
  ///
  /// A list of possible conditions for the item.
  ///
  static const OfferItemCondition = IriTerm.prevalidated(
    'http://schema.org/OfferItemCondition',
  );

  /// IRI for schemahttp:OfferShippingDetails
  ///
  /// OfferShippingDetails represents information about shipping destinations.
  ///
  /// Multiple of these entities can be used to represent different shipping rates for different destinations:
  ///
  /// One entity for Alaska/Hawaii. A different one for continental US. A different one for all France.
  ///
  /// Multiple of these entities can be used to represent different shipping costs and delivery times.
  ///
  /// Two entities that are identical but differ in rate and time:
  ///
  /// E.g. Cheaper and slower: $5 in 5-7 days
  /// or Fast and expensive: $15 in 1-2 days.
  ///
  static const OfferShippingDetails = IriTerm.prevalidated(
    'http://schema.org/OfferShippingDetails',
  );

  /// IRI for schemahttp:OfficeEquipmentStore
  ///
  /// An office equipment store.
  ///
  static const OfficeEquipmentStore = IriTerm.prevalidated(
    'http://schema.org/OfficeEquipmentStore',
  );

  /// IRI for schemahttp:OnDemandEvent
  ///
  /// A publication event, e.g. catch-up TV or radio podcast, during which a program is available on-demand.
  ///
  static const OnDemandEvent = IriTerm.prevalidated(
    'http://schema.org/OnDemandEvent',
  );

  /// IRI for schemahttp:OnlineBusiness
  ///
  /// A particular online business, either standalone or the online part of a broader organization. Examples include an eCommerce site, an online travel booking site, an online learning site, an online logistics and shipping provider, an online (virtual) doctor, etc.
  ///
  static const OnlineBusiness = IriTerm.prevalidated(
    'http://schema.org/OnlineBusiness',
  );

  /// IRI for schemahttp:OnlineStore
  ///
  /// An eCommerce site.
  ///
  static const OnlineStore = IriTerm.prevalidated(
    'http://schema.org/OnlineStore',
  );

  /// IRI for schemahttp:OpeningHoursSpecification
  ///
  /// A structured value providing information about the opening hours of a place or a certain service inside a place.\n\n
  /// The place is __open__ if the {[opens]} property is specified, and __closed__ otherwise.\n\nIf the value for the {[closes]} property is less than the value for the {[opens]} property then the hour range is assumed to span over the next day.
  ///
  ///
  static const OpeningHoursSpecification = IriTerm.prevalidated(
    'http://schema.org/OpeningHoursSpecification',
  );

  /// IRI for schemahttp:OpinionNewsArticle
  ///
  /// An {[OpinionNewsArticle]} is a {[NewsArticle]} that primarily expresses opinions rather than journalistic reporting of news and events. For example, a {[NewsArticle]} consisting of a column or {[Blog]}/{[BlogPosting]} entry in the Opinions section of a news publication.
  ///
  static const OpinionNewsArticle = IriTerm.prevalidated(
    'http://schema.org/OpinionNewsArticle',
  );

  /// IRI for schemahttp:Optician
  ///
  /// A store that sells reading glasses and similar devices for improving vision.
  ///
  static const Optician = IriTerm.prevalidated('http://schema.org/Optician');

  /// IRI for schemahttp:Order
  ///
  /// An order is a confirmation of a transaction (a receipt), which can contain multiple line items, each represented by an Offer that has been accepted by the customer.
  ///
  static const Order = IriTerm.prevalidated('http://schema.org/Order');

  /// IRI for schemahttp:OrderAction
  ///
  /// An agent orders an object/product/service to be delivered/sent.
  ///
  static const OrderAction = IriTerm.prevalidated(
    'http://schema.org/OrderAction',
  );

  /// IRI for schemahttp:OrderItem
  ///
  /// An order item is a line of an order. It includes the quantity and shipping details of a bought offer.
  ///
  static const OrderItem = IriTerm.prevalidated('http://schema.org/OrderItem');

  /// IRI for schemahttp:OrderStatus
  ///
  /// Enumerated status values for Order.
  ///
  static const OrderStatus = IriTerm.prevalidated(
    'http://schema.org/OrderStatus',
  );

  /// IRI for schemahttp:Organization
  ///
  /// An organization such as a school, NGO, corporation, club, etc.
  ///
  static const Organization = IriTerm.prevalidated(
    'http://schema.org/Organization',
  );

  /// IRI for schemahttp:OrganizationRole
  ///
  /// A subclass of Role used to describe roles within organizations.
  ///
  static const OrganizationRole = IriTerm.prevalidated(
    'http://schema.org/OrganizationRole',
  );

  /// IRI for schemahttp:OrganizeAction
  ///
  /// The act of manipulating/administering/supervising/controlling one or more objects.
  ///
  static const OrganizeAction = IriTerm.prevalidated(
    'http://schema.org/OrganizeAction',
  );

  /// IRI for schemahttp:OutletStore
  ///
  /// An outlet store.
  ///
  static const OutletStore = IriTerm.prevalidated(
    'http://schema.org/OutletStore',
  );

  /// IRI for schemahttp:OwnershipInfo
  ///
  /// A structured value providing information about when a certain organization or person owned a certain product.
  ///
  static const OwnershipInfo = IriTerm.prevalidated(
    'http://schema.org/OwnershipInfo',
  );

  /// IRI for schemahttp:PaintAction
  ///
  /// The act of producing a painting, typically with paint and canvas as instruments.
  ///
  static const PaintAction = IriTerm.prevalidated(
    'http://schema.org/PaintAction',
  );

  /// IRI for schemahttp:Painting
  ///
  /// A painting.
  ///
  static const Painting = IriTerm.prevalidated('http://schema.org/Painting');

  /// IRI for schemahttp:PalliativeProcedure
  ///
  /// A medical procedure intended primarily for palliative purposes, aimed at relieving the symptoms of an underlying health condition.
  ///
  static const PalliativeProcedure = IriTerm.prevalidated(
    'http://schema.org/PalliativeProcedure',
  );

  /// IRI for schemahttp:ParcelDelivery
  ///
  /// The delivery of a parcel either via the postal service or a commercial service.
  ///
  static const ParcelDelivery = IriTerm.prevalidated(
    'http://schema.org/ParcelDelivery',
  );

  /// IRI for schemahttp:ParentAudience
  ///
  /// A set of characteristics describing parents, who can be interested in viewing some content.
  ///
  static const ParentAudience = IriTerm.prevalidated(
    'http://schema.org/ParentAudience',
  );

  /// IRI for schemahttp:Park
  ///
  /// A park.
  ///
  static const Park = IriTerm.prevalidated('http://schema.org/Park');

  /// IRI for schemahttp:ParkingFacility
  ///
  /// A parking lot or other parking facility.
  ///
  static const ParkingFacility = IriTerm.prevalidated(
    'http://schema.org/ParkingFacility',
  );

  /// IRI for schemahttp:PathologyTest
  ///
  /// A medical test performed by a laboratory that typically involves examination of a tissue sample by a pathologist.
  ///
  static const PathologyTest = IriTerm.prevalidated(
    'http://schema.org/PathologyTest',
  );

  /// IRI for schemahttp:Patient
  ///
  /// A patient is any person recipient of health care services.
  ///
  static const Patient = IriTerm.prevalidated('http://schema.org/Patient');

  /// IRI for schemahttp:PawnShop
  ///
  /// A shop that will buy, or lend money against the security of, personal possessions.
  ///
  static const PawnShop = IriTerm.prevalidated('http://schema.org/PawnShop');

  /// IRI for schemahttp:PayAction
  ///
  /// An agent pays a price to a participant.
  ///
  static const PayAction = IriTerm.prevalidated('http://schema.org/PayAction');

  /// IRI for schemahttp:PaymentCard
  ///
  /// A payment method using a credit, debit, store or other card to associate the payment with an account.
  ///
  static const PaymentCard = IriTerm.prevalidated(
    'http://schema.org/PaymentCard',
  );

  /// IRI for schemahttp:PaymentChargeSpecification
  ///
  /// The costs of settling the payment using a particular payment method.
  ///
  static const PaymentChargeSpecification = IriTerm.prevalidated(
    'http://schema.org/PaymentChargeSpecification',
  );

  /// IRI for schemahttp:PaymentMethod
  ///
  /// A payment method is a standardized procedure for transferring the monetary amount for a purchase. Payment methods are characterized by the legal and technical structures used, and by the organization or group carrying out the transaction. The following legacy values should be accepted:
  /// \n\n* http://purl.org/goodrelations/v1#ByBankTransferInAdvance\n* http://purl.org/goodrelations/v1#ByInvoice\n* http://purl.org/goodrelations/v1#Cash\n* http://purl.org/goodrelations/v1#CheckInAdvance\n* http://purl.org/goodrelations/v1#COD\n* http://purl.org/goodrelations/v1#DirectDebit\n* http://purl.org/goodrelations/v1#GoogleCheckout\n* http://purl.org/goodrelations/v1#PayPal\n* http://purl.org/goodrelations/v1#PaySwarm\n\nStructured values are recommended for newer payment methods.
  ///
  static const PaymentMethod = IriTerm.prevalidated(
    'http://schema.org/PaymentMethod',
  );

  /// IRI for schemahttp:PaymentMethodType
  ///
  /// The type of payment method, only for generic payment types, specific forms of payments, like card payment should be expressed using subclasses of PaymentMethod.
  ///
  static const PaymentMethodType = IriTerm.prevalidated(
    'http://schema.org/PaymentMethodType',
  );

  /// IRI for schemahttp:PaymentService
  ///
  /// A Service to transfer funds from a person or organization to a beneficiary person or organization.
  ///
  static const PaymentService = IriTerm.prevalidated(
    'http://schema.org/PaymentService',
  );

  /// IRI for schemahttp:PaymentStatusType
  ///
  /// A specific payment status. For example, PaymentDue, PaymentComplete, etc.
  ///
  static const PaymentStatusType = IriTerm.prevalidated(
    'http://schema.org/PaymentStatusType',
  );

  /// IRI for schemahttp:PeopleAudience
  ///
  /// A set of characteristics belonging to people, e.g. who compose an item's target audience.
  ///
  static const PeopleAudience = IriTerm.prevalidated(
    'http://schema.org/PeopleAudience',
  );

  /// IRI for schemahttp:PerformAction
  ///
  /// The act of participating in performance arts.
  ///
  static const PerformAction = IriTerm.prevalidated(
    'http://schema.org/PerformAction',
  );

  /// IRI for schemahttp:PerformanceRole
  ///
  /// A PerformanceRole is a Role that some entity places with regard to a theatrical performance, e.g. in a Movie, TVSeries etc.
  ///
  static const PerformanceRole = IriTerm.prevalidated(
    'http://schema.org/PerformanceRole',
  );

  /// IRI for schemahttp:PerformingArtsTheater
  ///
  /// A theater or other performing art center.
  ///
  static const PerformingArtsTheater = IriTerm.prevalidated(
    'http://schema.org/PerformingArtsTheater',
  );

  /// IRI for schemahttp:PerformingGroup
  ///
  /// A performance group, such as a band, an orchestra, or a circus.
  ///
  static const PerformingGroup = IriTerm.prevalidated(
    'http://schema.org/PerformingGroup',
  );

  /// IRI for schemahttp:Periodical
  ///
  /// A publication in any medium issued in successive parts bearing numerical or chronological designations and intended to continue indefinitely, such as a magazine, scholarly journal, or newspaper.\n\nSee also [blog post](http://blog.schema.org/2014/09/schemaorg-support-for-bibliographic_2.html).
  ///
  static const Periodical = IriTerm.prevalidated(
    'http://schema.org/Periodical',
  );

  /// IRI for schemahttp:Permit
  ///
  /// A permit issued by an organization, e.g. a parking pass.
  ///
  static const Permit = IriTerm.prevalidated('http://schema.org/Permit');

  /// IRI for schemahttp:Person
  ///
  /// A person (alive, dead, undead, or fictional).
  ///
  static const Person = IriTerm.prevalidated('http://schema.org/Person');

  /// IRI for schemahttp:PetStore
  ///
  /// A pet store.
  ///
  static const PetStore = IriTerm.prevalidated('http://schema.org/PetStore');

  /// IRI for schemahttp:Pharmacy
  ///
  /// A pharmacy or drugstore.
  ///
  static const Pharmacy = IriTerm.prevalidated('http://schema.org/Pharmacy');

  /// IRI for schemahttp:Photograph
  ///
  /// A photograph.
  ///
  static const Photograph = IriTerm.prevalidated(
    'http://schema.org/Photograph',
  );

  /// IRI for schemahttp:PhotographAction
  ///
  /// The act of capturing still images of objects using a camera.
  ///
  static const PhotographAction = IriTerm.prevalidated(
    'http://schema.org/PhotographAction',
  );

  /// IRI for schemahttp:PhysicalActivity
  ///
  /// Any bodily activity that enhances or maintains physical fitness and overall health and wellness. Includes activity that is part of daily living and routine, structured exercise, and exercise prescribed as part of a medical treatment or recovery plan.
  ///
  static const PhysicalActivity = IriTerm.prevalidated(
    'http://schema.org/PhysicalActivity',
  );

  /// IRI for schemahttp:PhysicalActivityCategory
  ///
  /// Categories of physical activity, organized by physiologic classification.
  ///
  static const PhysicalActivityCategory = IriTerm.prevalidated(
    'http://schema.org/PhysicalActivityCategory',
  );

  /// IRI for schemahttp:PhysicalExam
  ///
  /// A type of physical examination of a patient performed by a physician.
  ///
  static const PhysicalExam = IriTerm.prevalidated(
    'http://schema.org/PhysicalExam',
  );

  /// IRI for schemahttp:PhysicalTherapy
  ///
  /// A process of progressive physical care and rehabilitation aimed at improving a health condition.
  ///
  static const PhysicalTherapy = IriTerm.prevalidated(
    'http://schema.org/PhysicalTherapy',
  );

  /// IRI for schemahttp:Physician
  ///
  /// An individual physician or a physician's office considered as a {[MedicalOrganization]}.
  ///
  static const Physician = IriTerm.prevalidated('http://schema.org/Physician');

  /// IRI for schemahttp:PhysiciansOffice
  ///
  /// A doctor's office or clinic.
  ///
  static const PhysiciansOffice = IriTerm.prevalidated(
    'http://schema.org/PhysiciansOffice',
  );

  /// IRI for schemahttp:Place
  ///
  /// Entities that have a somewhat fixed, physical extension.
  ///
  static const Place = IriTerm.prevalidated('http://schema.org/Place');

  /// IRI for schemahttp:PlaceOfWorship
  ///
  /// Place of worship, such as a church, synagogue, or mosque.
  ///
  static const PlaceOfWorship = IriTerm.prevalidated(
    'http://schema.org/PlaceOfWorship',
  );

  /// IRI for schemahttp:PlanAction
  ///
  /// The act of planning the execution of an event/task/action/reservation/plan to a future date.
  ///
  static const PlanAction = IriTerm.prevalidated(
    'http://schema.org/PlanAction',
  );

  /// IRI for schemahttp:Play
  ///
  /// A play is a form of literature, usually consisting of dialogue between characters, intended for theatrical performance rather than just reading. Note: A performance of a Play would be a {[TheaterEvent]} or {[BroadcastEvent]} - the *Play* being the {[workPerformed]}.
  ///
  static const Play = IriTerm.prevalidated('http://schema.org/Play');

  /// IRI for schemahttp:PlayAction
  ///
  /// The act of playing/exercising/training/performing for enjoyment, leisure, recreation, competition or exercise.\n\nRelated actions:\n\n* {[ListenAction]}: Unlike ListenAction (which is under ConsumeAction), PlayAction refers to performing for an audience or at an event, rather than consuming music.\n* {[WatchAction]}: Unlike WatchAction (which is under ConsumeAction), PlayAction refers to showing/displaying for an audience or at an event, rather than consuming visual content.
  ///
  static const PlayAction = IriTerm.prevalidated(
    'http://schema.org/PlayAction',
  );

  /// IRI for schemahttp:PlayGameAction
  ///
  /// The act of playing a video game.
  ///
  static const PlayGameAction = IriTerm.prevalidated(
    'http://schema.org/PlayGameAction',
  );

  /// IRI for schemahttp:Playground
  ///
  /// A playground.
  ///
  static const Playground = IriTerm.prevalidated(
    'http://schema.org/Playground',
  );

  /// IRI for schemahttp:Plumber
  ///
  /// A plumbing service.
  ///
  static const Plumber = IriTerm.prevalidated('http://schema.org/Plumber');

  /// IRI for schemahttp:PodcastEpisode
  ///
  /// A single episode of a podcast series.
  ///
  static const PodcastEpisode = IriTerm.prevalidated(
    'http://schema.org/PodcastEpisode',
  );

  /// IRI for schemahttp:PodcastSeason
  ///
  /// A single season of a podcast. Many podcasts do not break down into separate seasons. In that case, PodcastSeries should be used.
  ///
  static const PodcastSeason = IriTerm.prevalidated(
    'http://schema.org/PodcastSeason',
  );

  /// IRI for schemahttp:PodcastSeries
  ///
  /// A podcast is an episodic series of digital audio or video files which a user can download and listen to.
  ///
  static const PodcastSeries = IriTerm.prevalidated(
    'http://schema.org/PodcastSeries',
  );

  /// IRI for schemahttp:PoliceStation
  ///
  /// A police station.
  ///
  static const PoliceStation = IriTerm.prevalidated(
    'http://schema.org/PoliceStation',
  );

  /// IRI for schemahttp:PoliticalParty
  ///
  /// Organization: Political Party.
  ///
  static const PoliticalParty = IriTerm.prevalidated(
    'http://schema.org/PoliticalParty',
  );

  /// IRI for schemahttp:Pond
  ///
  /// A pond.
  ///
  static const Pond = IriTerm.prevalidated('http://schema.org/Pond');

  /// IRI for schemahttp:PostOffice
  ///
  /// A post office.
  ///
  static const PostOffice = IriTerm.prevalidated(
    'http://schema.org/PostOffice',
  );

  /// IRI for schemahttp:PostalAddress
  ///
  /// The mailing address.
  ///
  static const PostalAddress = IriTerm.prevalidated(
    'http://schema.org/PostalAddress',
  );

  /// IRI for schemahttp:PostalCodeRangeSpecification
  ///
  /// Indicates a range of postal codes, usually defined as the set of valid codes between {[postalCodeBegin]} and {[postalCodeEnd]}, inclusively.
  ///
  static const PostalCodeRangeSpecification = IriTerm.prevalidated(
    'http://schema.org/PostalCodeRangeSpecification',
  );

  /// IRI for schemahttp:Poster
  ///
  /// A large, usually printed placard, bill, or announcement, often illustrated, that is posted to advertise or publicize something.
  ///
  static const Poster = IriTerm.prevalidated('http://schema.org/Poster');

  /// IRI for schemahttp:PreOrderAction
  ///
  /// An agent orders a (not yet released) object/product/service to be delivered/sent.
  ///
  static const PreOrderAction = IriTerm.prevalidated(
    'http://schema.org/PreOrderAction',
  );

  /// IRI for schemahttp:PrependAction
  ///
  /// The act of inserting at the beginning if an ordered collection.
  ///
  static const PrependAction = IriTerm.prevalidated(
    'http://schema.org/PrependAction',
  );

  /// IRI for schemahttp:Preschool
  ///
  /// A preschool.
  ///
  static const Preschool = IriTerm.prevalidated('http://schema.org/Preschool');

  /// IRI for schemahttp:PresentationDigitalDocument
  ///
  /// A file containing slides or used for a presentation.
  ///
  static const PresentationDigitalDocument = IriTerm.prevalidated(
    'http://schema.org/PresentationDigitalDocument',
  );

  /// IRI for schemahttp:PreventionIndication
  ///
  /// An indication for preventing an underlying condition, symptom, etc.
  ///
  static const PreventionIndication = IriTerm.prevalidated(
    'http://schema.org/PreventionIndication',
  );

  /// IRI for schemahttp:PriceComponentTypeEnumeration
  ///
  /// Enumerates different price components that together make up the total price for an offered product.
  ///
  static const PriceComponentTypeEnumeration = IriTerm.prevalidated(
    'http://schema.org/PriceComponentTypeEnumeration',
  );

  /// IRI for schemahttp:PriceSpecification
  ///
  /// A structured value representing a price or price range. Typically, only the subclasses of this type are used for markup. It is recommended to use {[MonetaryAmount]} to describe independent amounts of money such as a salary, credit card limits, etc.
  ///
  static const PriceSpecification = IriTerm.prevalidated(
    'http://schema.org/PriceSpecification',
  );

  /// IRI for schemahttp:PriceTypeEnumeration
  ///
  /// Enumerates different price types, for example list price, invoice price, and sale price.
  ///
  static const PriceTypeEnumeration = IriTerm.prevalidated(
    'http://schema.org/PriceTypeEnumeration',
  );

  /// IRI for schemahttp:Product
  ///
  /// Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
  ///
  static const Product = IriTerm.prevalidated('http://schema.org/Product');

  /// IRI for schemahttp:ProductCollection
  ///
  /// A set of products (either {[ProductGroup]}s or specific variants) that are listed together e.g. in an {[Offer]}.
  ///
  static const ProductCollection = IriTerm.prevalidated(
    'http://schema.org/ProductCollection',
  );

  /// IRI for schemahttp:ProductGroup
  ///
  /// A ProductGroup represents a group of {[Product]}s that vary only in certain well-described ways, such as by {[size]}, {[color]}, {[material]} etc.
  ///
  /// While a ProductGroup itself is not directly offered for sale, the various varying products that it represents can be. The ProductGroup serves as a prototype or template, standing in for all of the products who have an {[isVariantOf]} relationship to it. As such, properties (including additional types) can be applied to the ProductGroup to represent characteristics shared by each of the (possibly very many) variants. Properties that reference a ProductGroup are not included in this mechanism; neither are the following specific properties {[variesBy]}, {[hasVariant]}, {[url]}.
  ///
  static const ProductGroup = IriTerm.prevalidated(
    'http://schema.org/ProductGroup',
  );

  /// IRI for schemahttp:ProductModel
  ///
  /// A datasheet or vendor specification of a product (in the sense of a prototypical description).
  ///
  static const ProductModel = IriTerm.prevalidated(
    'http://schema.org/ProductModel',
  );

  /// IRI for schemahttp:ProfessionalService
  ///
  /// Original definition: "provider of professional services."\n\nThe general {[ProfessionalService]} type for local businesses was deprecated due to confusion with {[Service]}. For reference, the types that it included were: {[Dentist]},
  /// {[AccountingService]}, {[Attorney]}, {[Notary]}, as well as types for several kinds of {[HomeAndConstructionBusiness]}: {[Electrician]}, {[GeneralContractor]},
  /// {[HousePainter]}, {[Locksmith]}, {[Plumber]}, {[RoofingContractor]}. {[LegalService]} was introduced as a more inclusive supertype of {[Attorney]}.
  ///
  static const ProfessionalService = IriTerm.prevalidated(
    'http://schema.org/ProfessionalService',
  );

  /// IRI for schemahttp:ProfilePage
  ///
  /// Web page type: Profile page.
  ///
  static const ProfilePage = IriTerm.prevalidated(
    'http://schema.org/ProfilePage',
  );

  /// IRI for schemahttp:ProgramMembership
  ///
  /// Used to describe membership in a loyalty programs (e.g. "StarAliance"), traveler clubs (e.g. "AAA"), purchase clubs ("Safeway Club"), etc.
  ///
  static const ProgramMembership = IriTerm.prevalidated(
    'http://schema.org/ProgramMembership',
  );

  /// IRI for schemahttp:Project
  ///
  /// An enterprise (potentially individual but typically collaborative), planned to achieve a particular aim.
  /// Use properties from {[Organization]}, {[subOrganization]}/{[parentOrganization]} to indicate project sub-structures.
  ///
  ///
  static const Project = IriTerm.prevalidated('http://schema.org/Project');

  /// IRI for schemahttp:PronounceableText
  ///
  /// Data type: PronounceableText.
  ///
  static const PronounceableText = IriTerm.prevalidated(
    'http://schema.org/PronounceableText',
  );

  /// IRI for schemahttp:Property
  ///
  /// A property, used to indicate attributes and relationships of some Thing; equivalent to rdf:Property.
  ///
  static const Property = IriTerm.prevalidated('http://schema.org/Property');

  /// IRI for schemahttp:PropertyValue
  ///
  /// A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.
  ///
  ///
  static const PropertyValue = IriTerm.prevalidated(
    'http://schema.org/PropertyValue',
  );

  /// IRI for schemahttp:PropertyValueSpecification
  ///
  /// A Property value specification.
  ///
  static const PropertyValueSpecification = IriTerm.prevalidated(
    'http://schema.org/PropertyValueSpecification',
  );

  /// IRI for schemahttp:Protein
  ///
  /// Protein is here used in its widest possible definition, as classes of amino acid based molecules. Amyloid-beta Protein in human (UniProt P05067), eukaryota (e.g. an OrthoDB group) or even a single molecule that one can point to are all of type :Protein. A protein can thus be a subclass of another protein, e.g. :Protein as a UniProt record can have multiple isoforms inside it which would also be :Protein. They can be imagined, synthetic, hypothetical or naturally occurring.
  ///
  static const Protein = IriTerm.prevalidated('http://schema.org/Protein');

  /// IRI for schemahttp:PsychologicalTreatment
  ///
  /// A process of care relying upon counseling, dialogue and communication  aimed at improving a mental health condition without use of drugs.
  ///
  static const PsychologicalTreatment = IriTerm.prevalidated(
    'http://schema.org/PsychologicalTreatment',
  );

  /// IRI for schemahttp:PublicSwimmingPool
  ///
  /// A public swimming pool.
  ///
  static const PublicSwimmingPool = IriTerm.prevalidated(
    'http://schema.org/PublicSwimmingPool',
  );

  /// IRI for schemahttp:PublicToilet
  ///
  /// A public toilet is a room or small building containing one or more toilets (and possibly also urinals) which is available for use by the general public, or by customers or employees of certain businesses.
  ///
  static const PublicToilet = IriTerm.prevalidated(
    'http://schema.org/PublicToilet',
  );

  /// IRI for schemahttp:PublicationEvent
  ///
  /// A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type, e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  ///
  static const PublicationEvent = IriTerm.prevalidated(
    'http://schema.org/PublicationEvent',
  );

  /// IRI for schemahttp:PublicationIssue
  ///
  /// A part of a successively published publication such as a periodical or publication volume, often numbered, usually containing a grouping of works such as articles.\n\nSee also [blog post](https://blog-schema.org/2014/09/02/schema-org-support-for-bibliographic-relationships-and-periodicals/).
  ///
  static const PublicationIssue = IriTerm.prevalidated(
    'http://schema.org/PublicationIssue',
  );

  /// IRI for schemahttp:PublicationVolume
  ///
  /// A part of a successively published publication such as a periodical or multi-volume work, often numbered. It may represent a time span, such as a year.\n\nSee also [blog post](https://blog-schema.org/2014/09/02/schema-org-support-for-bibliographic-relationships-and-periodicals/).
  ///
  static const PublicationVolume = IriTerm.prevalidated(
    'http://schema.org/PublicationVolume',
  );

  /// IRI for schemahttp:PurchaseType
  ///
  /// Enumerates a purchase type for an item.
  ///
  static const PurchaseType = IriTerm.prevalidated(
    'http://schema.org/PurchaseType',
  );

  /// IRI for schemahttp:QAPage
  ///
  /// A QAPage is a WebPage focussed on a specific Question and its Answer(s), e.g. in a question answering site or documenting Frequently Asked Questions (FAQs).
  ///
  static const QAPage = IriTerm.prevalidated('http://schema.org/QAPage');

  /// IRI for schemahttp:QualitativeValue
  ///
  /// A predefined value for a product characteristic, e.g. the power cord plug type 'US' or the garment sizes 'S', 'M', 'L', and 'XL'.
  ///
  static const QualitativeValue = IriTerm.prevalidated(
    'http://schema.org/QualitativeValue',
  );

  /// IRI for schemahttp:QuantitativeValue
  ///
  /// A point value or interval for product characteristics and other purposes.
  ///
  static const QuantitativeValue = IriTerm.prevalidated(
    'http://schema.org/QuantitativeValue',
  );

  /// IRI for schemahttp:QuantitativeValueDistribution
  ///
  /// A statistical distribution of values.
  ///
  static const QuantitativeValueDistribution = IriTerm.prevalidated(
    'http://schema.org/QuantitativeValueDistribution',
  );

  /// IRI for schemahttp:Quantity
  ///
  /// Quantities such as distance, time, mass, weight, etc. Particular instances of say Mass are entities like '3 kg' or '4 milligrams'.
  ///
  static const Quantity = IriTerm.prevalidated('http://schema.org/Quantity');

  /// IRI for schemahttp:Question
  ///
  /// A specific question - e.g. from a user seeking answers online, or collected in a Frequently Asked Questions (FAQ) document.
  ///
  static const Question = IriTerm.prevalidated('http://schema.org/Question');

  /// IRI for schemahttp:Quiz
  ///
  /// Quiz: A test of knowledge, skills and abilities.
  ///
  static const Quiz = IriTerm.prevalidated('http://schema.org/Quiz');

  /// IRI for schemahttp:Quotation
  ///
  /// A quotation. Often but not necessarily from some written work, attributable to a real world author and - if associated with a fictional character - to any fictional Person. Use {[isBasedOn]} to link to source/origin. The {[recordedIn]} property can be used to reference a Quotation from an {[Event]}.
  ///
  static const Quotation = IriTerm.prevalidated('http://schema.org/Quotation');

  /// IRI for schemahttp:QuoteAction
  ///
  /// An agent quotes/estimates/appraises an object/product/service with a price at a location/store.
  ///
  static const QuoteAction = IriTerm.prevalidated(
    'http://schema.org/QuoteAction',
  );

  /// IRI for schemahttp:RVPark
  ///
  /// A place offering space for "Recreational Vehicles", Caravans, mobile homes and the like.
  ///
  static const RVPark = IriTerm.prevalidated('http://schema.org/RVPark');

  /// IRI for schemahttp:RadiationTherapy
  ///
  /// A process of care using radiation aimed at improving a health condition.
  ///
  static const RadiationTherapy = IriTerm.prevalidated(
    'http://schema.org/RadiationTherapy',
  );

  /// IRI for schemahttp:RadioBroadcastService
  ///
  /// A delivery service through which radio content is provided via broadcast over the air or online.
  ///
  static const RadioBroadcastService = IriTerm.prevalidated(
    'http://schema.org/RadioBroadcastService',
  );

  /// IRI for schemahttp:RadioChannel
  ///
  /// A unique instance of a radio BroadcastService on a CableOrSatelliteService lineup.
  ///
  static const RadioChannel = IriTerm.prevalidated(
    'http://schema.org/RadioChannel',
  );

  /// IRI for schemahttp:RadioClip
  ///
  /// A short radio program or a segment/part of a radio program.
  ///
  static const RadioClip = IriTerm.prevalidated('http://schema.org/RadioClip');

  /// IRI for schemahttp:RadioEpisode
  ///
  /// A radio episode which can be part of a series or season.
  ///
  static const RadioEpisode = IriTerm.prevalidated(
    'http://schema.org/RadioEpisode',
  );

  /// IRI for schemahttp:RadioSeason
  ///
  /// Season dedicated to radio broadcast and associated online delivery.
  ///
  static const RadioSeason = IriTerm.prevalidated(
    'http://schema.org/RadioSeason',
  );

  /// IRI for schemahttp:RadioSeries
  ///
  /// CreativeWorkSeries dedicated to radio broadcast and associated online delivery.
  ///
  static const RadioSeries = IriTerm.prevalidated(
    'http://schema.org/RadioSeries',
  );

  /// IRI for schemahttp:RadioStation
  ///
  /// A radio station.
  ///
  static const RadioStation = IriTerm.prevalidated(
    'http://schema.org/RadioStation',
  );

  /// IRI for schemahttp:Rating
  ///
  /// A rating is an evaluation on a numeric scale, such as 1 to 5 stars.
  ///
  static const Rating = IriTerm.prevalidated('http://schema.org/Rating');

  /// IRI for schemahttp:ReactAction
  ///
  /// The act of responding instinctively and emotionally to an object, expressing a sentiment.
  ///
  static const ReactAction = IriTerm.prevalidated(
    'http://schema.org/ReactAction',
  );

  /// IRI for schemahttp:ReadAction
  ///
  /// The act of consuming written content.
  ///
  static const ReadAction = IriTerm.prevalidated(
    'http://schema.org/ReadAction',
  );

  /// IRI for schemahttp:RealEstateAgent
  ///
  /// A real-estate agent.
  ///
  static const RealEstateAgent = IriTerm.prevalidated(
    'http://schema.org/RealEstateAgent',
  );

  /// IRI for schemahttp:RealEstateListing
  ///
  /// A {[RealEstateListing]} is a listing that describes one or more real-estate {[Offer]}s (whose {[businessFunction]} is typically to lease out, or to sell).
  /// The {[RealEstateListing]} type itself represents the overall listing, as manifested in some {[WebPage]}.
  ///
  ///
  static const RealEstateListing = IriTerm.prevalidated(
    'http://schema.org/RealEstateListing',
  );

  /// IRI for schemahttp:ReceiveAction
  ///
  /// The act of physically/electronically taking delivery of an object that has been transferred from an origin to a destination. Reciprocal of SendAction.\n\nRelated actions:\n\n* {[SendAction]}: The reciprocal of ReceiveAction.\n* {[TakeAction]}: Unlike TakeAction, ReceiveAction does not imply that the ownership has been transferred (e.g. I can receive a package, but it does not mean the package is now mine).
  ///
  static const ReceiveAction = IriTerm.prevalidated(
    'http://schema.org/ReceiveAction',
  );

  /// IRI for schemahttp:Recipe
  ///
  /// A recipe. For dietary restrictions covered by the recipe, a few common restrictions are enumerated via {[suitableForDiet]}. The {[keywords]} property can also be used to add more detail.
  ///
  static const Recipe = IriTerm.prevalidated('http://schema.org/Recipe');

  /// IRI for schemahttp:Recommendation
  ///
  /// {[Recommendation]} is a type of {[Review]} that suggests or proposes something as the best option or best course of action. Recommendations may be for products or services, or other concrete things, as in the case of a ranked list or product guide. A {[Guide]} may list multiple recommendations for different categories. For example, in a {[Guide]} about which TVs to buy, the author may have several {[Recommendation]}s.
  ///
  static const Recommendation = IriTerm.prevalidated(
    'http://schema.org/Recommendation',
  );

  /// IRI for schemahttp:RecommendedDoseSchedule
  ///
  /// A recommended dosing schedule for a drug or supplement as prescribed or recommended by an authority or by the drug/supplement's manufacturer. Capture the recommending authority in the recognizingAuthority property of MedicalEntity.
  ///
  static const RecommendedDoseSchedule = IriTerm.prevalidated(
    'http://schema.org/RecommendedDoseSchedule',
  );

  /// IRI for schemahttp:RecyclingCenter
  ///
  /// A recycling center.
  ///
  static const RecyclingCenter = IriTerm.prevalidated(
    'http://schema.org/RecyclingCenter',
  );

  /// IRI for schemahttp:RefundTypeEnumeration
  ///
  /// Enumerates several kinds of product return refund types.
  ///
  static const RefundTypeEnumeration = IriTerm.prevalidated(
    'http://schema.org/RefundTypeEnumeration',
  );

  /// IRI for schemahttp:RegisterAction
  ///
  /// The act of registering to be a user of a service, product or web page.\n\nRelated actions:\n\n* {[JoinAction]}: Unlike JoinAction, RegisterAction implies you are registering to be a user of a service, *not* a group/team of people.\n* {[FollowAction]}: Unlike FollowAction, RegisterAction doesn't imply that the agent is expecting to poll for updates from the object.\n* {[SubscribeAction]}: Unlike SubscribeAction, RegisterAction doesn't imply that the agent is expecting updates from the object.
  ///
  static const RegisterAction = IriTerm.prevalidated(
    'http://schema.org/RegisterAction',
  );

  /// IRI for schemahttp:RejectAction
  ///
  /// The act of rejecting to/adopting an object.\n\nRelated actions:\n\n* {[AcceptAction]}: The antonym of RejectAction.
  ///
  static const RejectAction = IriTerm.prevalidated(
    'http://schema.org/RejectAction',
  );

  /// IRI for schemahttp:RentAction
  ///
  /// The act of giving money in return for temporary use, but not ownership, of an object such as a vehicle or property. For example, an agent rents a property from a landlord in exchange for a periodic payment.
  ///
  static const RentAction = IriTerm.prevalidated(
    'http://schema.org/RentAction',
  );

  /// IRI for schemahttp:RentalCarReservation
  ///
  /// A reservation for a rental car.\n\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations.
  ///
  static const RentalCarReservation = IriTerm.prevalidated(
    'http://schema.org/RentalCarReservation',
  );

  /// IRI for schemahttp:RepaymentSpecification
  ///
  /// A structured value representing repayment.
  ///
  static const RepaymentSpecification = IriTerm.prevalidated(
    'http://schema.org/RepaymentSpecification',
  );

  /// IRI for schemahttp:ReplaceAction
  ///
  /// The act of editing a recipient by replacing an old object with a new object.
  ///
  static const ReplaceAction = IriTerm.prevalidated(
    'http://schema.org/ReplaceAction',
  );

  /// IRI for schemahttp:ReplyAction
  ///
  /// The act of responding to a question/message asked/sent by the object. Related to {[AskAction]}.\n\nRelated actions:\n\n* {[AskAction]}: Appears generally as an origin of a ReplyAction.
  ///
  static const ReplyAction = IriTerm.prevalidated(
    'http://schema.org/ReplyAction',
  );

  /// IRI for schemahttp:Report
  ///
  /// A Report generated by governmental or non-governmental organization.
  ///
  static const Report = IriTerm.prevalidated('http://schema.org/Report');

  /// IRI for schemahttp:ReportageNewsArticle
  ///
  /// The {[ReportageNewsArticle]} type is a subtype of {[NewsArticle]} representing
  /// news articles which are the result of journalistic news reporting conventions.
  ///
  /// In practice many news publishers produce a wide variety of article types, many of which might be considered a {[NewsArticle]} but not a {[ReportageNewsArticle]}. For example, opinion pieces, reviews, analysis, sponsored or satirical articles, or articles that combine several of these elements.
  ///
  /// The {[ReportageNewsArticle]} type is based on a stricter ideal for "news" as a work of journalism, with articles based on factual information either observed or verified by the author, or reported and verified from knowledgeable sources.  This often includes perspectives from multiple viewpoints on a particular issue (distinguishing news reports from public relations or propaganda).  News reports in the {[ReportageNewsArticle]} sense de-emphasize the opinion of the author, with commentary and value judgements typically expressed elsewhere.
  ///
  /// A {[ReportageNewsArticle]} which goes deeper into analysis can also be marked with an additional type of {[AnalysisNewsArticle]}.
  ///
  ///
  static const ReportageNewsArticle = IriTerm.prevalidated(
    'http://schema.org/ReportageNewsArticle',
  );

  /// IRI for schemahttp:ReportedDoseSchedule
  ///
  /// A patient-reported or observed dosing schedule for a drug or supplement.
  ///
  static const ReportedDoseSchedule = IriTerm.prevalidated(
    'http://schema.org/ReportedDoseSchedule',
  );

  /// IRI for schemahttp:ResearchOrganization
  ///
  /// A Research Organization (e.g. scientific institute, research company).
  ///
  static const ResearchOrganization = IriTerm.prevalidated(
    'http://schema.org/ResearchOrganization',
  );

  /// IRI for schemahttp:ResearchProject
  ///
  /// A Research project.
  ///
  static const ResearchProject = IriTerm.prevalidated(
    'http://schema.org/ResearchProject',
  );

  /// IRI for schemahttp:Researcher
  ///
  /// Researchers.
  ///
  static const Researcher = IriTerm.prevalidated(
    'http://schema.org/Researcher',
  );

  /// IRI for schemahttp:Reservation
  ///
  /// Describes a reservation for travel, dining or an event. Some reservations require tickets. \n\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, restaurant reservations, flights, or rental cars, use {[Offer]}.
  ///
  static const Reservation = IriTerm.prevalidated(
    'http://schema.org/Reservation',
  );

  /// IRI for schemahttp:ReservationPackage
  ///
  /// A group of multiple reservations with common values for all sub-reservations.
  ///
  static const ReservationPackage = IriTerm.prevalidated(
    'http://schema.org/ReservationPackage',
  );

  /// IRI for schemahttp:ReservationStatusType
  ///
  /// Enumerated status values for Reservation.
  ///
  static const ReservationStatusType = IriTerm.prevalidated(
    'http://schema.org/ReservationStatusType',
  );

  /// IRI for schemahttp:ReserveAction
  ///
  /// Reserving a concrete object.\n\nRelated actions:\n\n* {[ScheduleAction]}: Unlike ScheduleAction, ReserveAction reserves concrete objects (e.g. a table, a hotel) towards a time slot / spatial allocation.
  ///
  static const ReserveAction = IriTerm.prevalidated(
    'http://schema.org/ReserveAction',
  );

  /// IRI for schemahttp:Reservoir
  ///
  /// A reservoir of water, typically an artificially created lake, like the Lake Kariba reservoir.
  ///
  static const Reservoir = IriTerm.prevalidated('http://schema.org/Reservoir');

  /// IRI for schemahttp:Residence
  ///
  /// The place where a person lives.
  ///
  static const Residence = IriTerm.prevalidated('http://schema.org/Residence');

  /// IRI for schemahttp:Resort
  ///
  /// A resort is a place used for relaxation or recreation, attracting visitors for holidays or vacations. Resorts are places, towns or sometimes commercial establishments operated by a single company (source: Wikipedia, the free encyclopedia, see <a href="http://en.wikipedia.org/wiki/Resort">http://en.wikipedia.org/wiki/Resort</a>).
  /// <br /><br />
  /// See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.
  ///
  ///
  static const Resort = IriTerm.prevalidated('http://schema.org/Resort');

  /// IRI for schemahttp:Restaurant
  ///
  /// A restaurant.
  ///
  static const Restaurant = IriTerm.prevalidated(
    'http://schema.org/Restaurant',
  );

  /// IRI for schemahttp:RestrictedDiet
  ///
  /// A diet restricted to certain foods or preparations for cultural, religious, health or lifestyle reasons.
  ///
  static const RestrictedDiet = IriTerm.prevalidated(
    'http://schema.org/RestrictedDiet',
  );

  /// IRI for schemahttp:ResumeAction
  ///
  /// The act of resuming a device or application which was formerly paused (e.g. resume music playback or resume a timer).
  ///
  static const ResumeAction = IriTerm.prevalidated(
    'http://schema.org/ResumeAction',
  );

  /// IRI for schemahttp:ReturnAction
  ///
  /// The act of returning to the origin that which was previously received (concrete objects) or taken (ownership).
  ///
  static const ReturnAction = IriTerm.prevalidated(
    'http://schema.org/ReturnAction',
  );

  /// IRI for schemahttp:ReturnFeesEnumeration
  ///
  /// Enumerates several kinds of policies for product return fees.
  ///
  static const ReturnFeesEnumeration = IriTerm.prevalidated(
    'http://schema.org/ReturnFeesEnumeration',
  );

  /// IRI for schemahttp:ReturnLabelSourceEnumeration
  ///
  /// Enumerates several types of return labels for product returns.
  ///
  static const ReturnLabelSourceEnumeration = IriTerm.prevalidated(
    'http://schema.org/ReturnLabelSourceEnumeration',
  );

  /// IRI for schemahttp:ReturnMethodEnumeration
  ///
  /// Enumerates several types of product return methods.
  ///
  static const ReturnMethodEnumeration = IriTerm.prevalidated(
    'http://schema.org/ReturnMethodEnumeration',
  );

  /// IRI for schemahttp:Review
  ///
  /// A review of an item - for example, of a restaurant, movie, or store.
  ///
  static const Review = IriTerm.prevalidated('http://schema.org/Review');

  /// IRI for schemahttp:ReviewAction
  ///
  /// The act of producing a balanced opinion about the object for an audience. An agent reviews an object with participants resulting in a review.
  ///
  static const ReviewAction = IriTerm.prevalidated(
    'http://schema.org/ReviewAction',
  );

  /// IRI for schemahttp:ReviewNewsArticle
  ///
  /// A {[NewsArticle]} and {[CriticReview]} providing a professional critic's assessment of a service, product, performance, or artistic or literary work.
  ///
  static const ReviewNewsArticle = IriTerm.prevalidated(
    'http://schema.org/ReviewNewsArticle',
  );

  /// IRI for schemahttp:RiverBodyOfWater
  ///
  /// A river (for example, the broad majestic Shannon).
  ///
  static const RiverBodyOfWater = IriTerm.prevalidated(
    'http://schema.org/RiverBodyOfWater',
  );

  /// IRI for schemahttp:Role
  ///
  /// Represents additional information about a relationship or property. For example a Role can be used to say that a 'member' role linking some SportsTeam to a player occurred during a particular time period. Or that a Person's 'actor' role in a Movie was for some particular characterName. Such properties can be attached to a Role entity, which is then associated with the main entities using ordinary properties like 'member' or 'actor'.\n\nSee also [blog post](http://blog.schema.org/2014/06/introducing-role.html).
  ///
  static const Role = IriTerm.prevalidated('http://schema.org/Role');

  /// IRI for schemahttp:RoofingContractor
  ///
  /// A roofing contractor.
  ///
  static const RoofingContractor = IriTerm.prevalidated(
    'http://schema.org/RoofingContractor',
  );

  /// IRI for schemahttp:Room
  ///
  /// A room is a distinguishable space within a structure, usually separated from other spaces by interior walls (source: Wikipedia, the free encyclopedia, see <a href="http://en.wikipedia.org/wiki/Room">http://en.wikipedia.org/wiki/Room</a>).
  /// <br /><br />
  /// See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.
  ///
  ///
  static const Room = IriTerm.prevalidated('http://schema.org/Room');

  /// IRI for schemahttp:RsvpAction
  ///
  /// The act of notifying an event organizer as to whether you expect to attend the event.
  ///
  static const RsvpAction = IriTerm.prevalidated(
    'http://schema.org/RsvpAction',
  );

  /// IRI for schemahttp:RsvpResponseType
  ///
  /// RsvpResponseType is an enumeration type whose instances represent responding to an RSVP request.
  ///
  static const RsvpResponseType = IriTerm.prevalidated(
    'http://schema.org/RsvpResponseType',
  );

  /// IRI for schemahttp:SaleEvent
  ///
  /// Event type: Sales event.
  ///
  static const SaleEvent = IriTerm.prevalidated('http://schema.org/SaleEvent');

  /// IRI for schemahttp:SatiricalArticle
  ///
  /// An {[Article]} whose content is primarily {[satirical]}(https://en.wikipedia.org/wiki/Satire) in nature, i.e. unlikely to be literally true. A satirical article is sometimes but not necessarily also a {[NewsArticle]}. {[ScholarlyArticle]}s are also sometimes satirized.
  ///
  static const SatiricalArticle = IriTerm.prevalidated(
    'http://schema.org/SatiricalArticle',
  );

  /// IRI for schemahttp:Schedule
  ///
  /// A schedule defines a repeating time period used to describe a regularly occurring {[Event]}. At a minimum a schedule will specify {[repeatFrequency]} which describes the interval between occurrences of the event. Additional information can be provided to specify the schedule more precisely.
  /// This includes identifying the day(s) of the week or month when the recurring event will take place, in addition to its start and end time. Schedules may also
  /// have start and end dates to indicate when they are active, e.g. to define a limited calendar of events.
  ///
  static const Schedule = IriTerm.prevalidated('http://schema.org/Schedule');

  /// IRI for schemahttp:ScheduleAction
  ///
  /// Scheduling future actions, events, or tasks.\n\nRelated actions:\n\n* {[ReserveAction]}: Unlike ReserveAction, ScheduleAction allocates future actions (e.g. an event, a task, etc) towards a time slot / spatial allocation.
  ///
  static const ScheduleAction = IriTerm.prevalidated(
    'http://schema.org/ScheduleAction',
  );

  /// IRI for schemahttp:ScholarlyArticle
  ///
  /// A scholarly article.
  ///
  static const ScholarlyArticle = IriTerm.prevalidated(
    'http://schema.org/ScholarlyArticle',
  );

  /// IRI for schemahttp:School
  ///
  /// A school.
  ///
  static const School = IriTerm.prevalidated('http://schema.org/School');

  /// IRI for schemahttp:SchoolDistrict
  ///
  /// A School District is an administrative area for the administration of schools.
  ///
  static const SchoolDistrict = IriTerm.prevalidated(
    'http://schema.org/SchoolDistrict',
  );

  /// IRI for schemahttp:ScreeningEvent
  ///
  /// A screening of a movie or other video.
  ///
  static const ScreeningEvent = IriTerm.prevalidated(
    'http://schema.org/ScreeningEvent',
  );

  /// IRI for schemahttp:Sculpture
  ///
  /// A piece of sculpture.
  ///
  static const Sculpture = IriTerm.prevalidated('http://schema.org/Sculpture');

  /// IRI for schemahttp:SeaBodyOfWater
  ///
  /// A sea (for example, the Caspian sea).
  ///
  static const SeaBodyOfWater = IriTerm.prevalidated(
    'http://schema.org/SeaBodyOfWater',
  );

  /// IRI for schemahttp:SearchAction
  ///
  /// The act of searching for an object.\n\nRelated actions:\n\n* {[FindAction]}: SearchAction generally leads to a FindAction, but not necessarily.
  ///
  static const SearchAction = IriTerm.prevalidated(
    'http://schema.org/SearchAction',
  );

  /// IRI for schemahttp:SearchRescueOrganization
  ///
  /// A Search and Rescue organization of some kind.
  ///
  static const SearchRescueOrganization = IriTerm.prevalidated(
    'http://schema.org/SearchRescueOrganization',
  );

  /// IRI for schemahttp:SearchResultsPage
  ///
  /// Web page type: Search results page.
  ///
  static const SearchResultsPage = IriTerm.prevalidated(
    'http://schema.org/SearchResultsPage',
  );

  /// IRI for schemahttp:Season
  ///
  /// A media season, e.g. TV, radio, video game etc.
  ///
  static const Season = IriTerm.prevalidated('http://schema.org/Season');

  /// IRI for schemahttp:Seat
  ///
  /// Used to describe a seat, such as a reserved seat in an event reservation.
  ///
  static const Seat = IriTerm.prevalidated('http://schema.org/Seat');

  /// IRI for schemahttp:SeekToAction
  ///
  /// This is the {[Action]} of navigating to a specific {[startOffset]} timestamp within a {[VideoObject]}, typically represented with a URL template structure.
  ///
  static const SeekToAction = IriTerm.prevalidated(
    'http://schema.org/SeekToAction',
  );

  /// IRI for schemahttp:SelfStorage
  ///
  /// A self-storage facility.
  ///
  static const SelfStorage = IriTerm.prevalidated(
    'http://schema.org/SelfStorage',
  );

  /// IRI for schemahttp:SellAction
  ///
  /// The act of taking money from a buyer in exchange for goods or services rendered. An agent sells an object, product, or service to a buyer for a price. Reciprocal of BuyAction.
  ///
  static const SellAction = IriTerm.prevalidated(
    'http://schema.org/SellAction',
  );

  /// IRI for schemahttp:SendAction
  ///
  /// The act of physically/electronically dispatching an object for transfer from an origin to a destination. Related actions:\n\n* {[ReceiveAction]}: The reciprocal of SendAction.\n* {[GiveAction]}: Unlike GiveAction, SendAction does not imply the transfer of ownership (e.g. I can send you my laptop, but I'm not necessarily giving it to you).
  ///
  static const SendAction = IriTerm.prevalidated(
    'http://schema.org/SendAction',
  );

  /// IRI for schemahttp:Series
  ///
  /// A Series in schema.org is a group of related items, typically but not necessarily of the same kind. See also {[CreativeWorkSeries]}, {[EventSeries]}.
  ///
  static const Series = IriTerm.prevalidated('http://schema.org/Series');

  /// IRI for schemahttp:Service
  ///
  /// A service provided by an organization, e.g. delivery service, print services, etc.
  ///
  static const Service = IriTerm.prevalidated('http://schema.org/Service');

  /// IRI for schemahttp:ServiceChannel
  ///
  /// A means for accessing a service, e.g. a government office location, web site, or phone number.
  ///
  static const ServiceChannel = IriTerm.prevalidated(
    'http://schema.org/ServiceChannel',
  );

  /// IRI for schemahttp:ServicePeriod
  ///
  /// ServicePeriod represents a duration with some constraints about cutoff time and business days. This is used e.g. in shipping for handling times or transit time.
  ///
  static const ServicePeriod = IriTerm.prevalidated(
    'http://schema.org/ServicePeriod',
  );

  /// IRI for schemahttp:ShareAction
  ///
  /// The act of distributing content to people for their amusement or edification.
  ///
  static const ShareAction = IriTerm.prevalidated(
    'http://schema.org/ShareAction',
  );

  /// IRI for schemahttp:SheetMusic
  ///
  /// Printed music, as opposed to performed or recorded music.
  ///
  static const SheetMusic = IriTerm.prevalidated(
    'http://schema.org/SheetMusic',
  );

  /// IRI for schemahttp:ShippingConditions
  ///
  /// ShippingConditions represent a set of constraints and information about the conditions of shipping a product. Such conditions may apply to only a subset of the products being shipped, depending on aspects of the product like weight, size, price, destination, and others. All the specified conditions must be met for this ShippingConditions to apply.
  ///
  static const ShippingConditions = IriTerm.prevalidated(
    'http://schema.org/ShippingConditions',
  );

  /// IRI for schemahttp:ShippingDeliveryTime
  ///
  /// ShippingDeliveryTime provides various pieces of information about delivery times for shipping.
  ///
  static const ShippingDeliveryTime = IriTerm.prevalidated(
    'http://schema.org/ShippingDeliveryTime',
  );

  /// IRI for schemahttp:ShippingRateSettings
  ///
  /// A ShippingRateSettings represents re-usable pieces of shipping information. It is designed for publication on an URL that may be referenced via the {[shippingSettingsLink]} property of an {[OfferShippingDetails]}. Several occurrences can be published, distinguished and matched (i.e. identified/referenced) by their different values for {[shippingLabel]}.
  ///
  static const ShippingRateSettings = IriTerm.prevalidated(
    'http://schema.org/ShippingRateSettings',
  );

  /// IRI for schemahttp:ShippingService
  ///
  /// ShippingService represents the criteria used to determine if and how an offer could be shipped to a customer.
  ///
  static const ShippingService = IriTerm.prevalidated(
    'http://schema.org/ShippingService',
  );

  /// IRI for schemahttp:ShoeStore
  ///
  /// A shoe store.
  ///
  static const ShoeStore = IriTerm.prevalidated('http://schema.org/ShoeStore');

  /// IRI for schemahttp:ShoppingCenter
  ///
  /// A shopping center or mall.
  ///
  static const ShoppingCenter = IriTerm.prevalidated(
    'http://schema.org/ShoppingCenter',
  );

  /// IRI for schemahttp:ShortStory
  ///
  /// Short story or tale. A brief work of literature, usually written in narrative prose.
  ///
  static const ShortStory = IriTerm.prevalidated(
    'http://schema.org/ShortStory',
  );

  /// IRI for schemahttp:SingleFamilyResidence
  ///
  /// Residence type: Single-family home.
  ///
  static const SingleFamilyResidence = IriTerm.prevalidated(
    'http://schema.org/SingleFamilyResidence',
  );

  /// IRI for schemahttp:SiteNavigationElement
  ///
  /// A navigation element of the page.
  ///
  static const SiteNavigationElement = IriTerm.prevalidated(
    'http://schema.org/SiteNavigationElement',
  );

  /// IRI for schemahttp:SizeGroupEnumeration
  ///
  /// Enumerates common size groups for various product categories.
  ///
  static const SizeGroupEnumeration = IriTerm.prevalidated(
    'http://schema.org/SizeGroupEnumeration',
  );

  /// IRI for schemahttp:SizeSpecification
  ///
  /// Size related properties of a product, typically a size code ({[name]}) and optionally a {[sizeSystem]}, {[sizeGroup]}, and product measurements ({[hasMeasurement]}). In addition, the intended audience can be defined through {[suggestedAge]}, {[suggestedGender]}, and suggested body measurements ({[suggestedMeasurement]}).
  ///
  static const SizeSpecification = IriTerm.prevalidated(
    'http://schema.org/SizeSpecification',
  );

  /// IRI for schemahttp:SizeSystemEnumeration
  ///
  /// Enumerates common size systems for different categories of products, for example "EN-13402" or "UK" for wearables or "Imperial" for screws.
  ///
  static const SizeSystemEnumeration = IriTerm.prevalidated(
    'http://schema.org/SizeSystemEnumeration',
  );

  /// IRI for schemahttp:SkiResort
  ///
  /// A ski resort.
  ///
  static const SkiResort = IriTerm.prevalidated('http://schema.org/SkiResort');

  /// IRI for schemahttp:SocialEvent
  ///
  /// Event type: Social event.
  ///
  static const SocialEvent = IriTerm.prevalidated(
    'http://schema.org/SocialEvent',
  );

  /// IRI for schemahttp:SocialMediaPosting
  ///
  /// A post to a social media platform, including blog posts, tweets, Facebook posts, etc.
  ///
  static const SocialMediaPosting = IriTerm.prevalidated(
    'http://schema.org/SocialMediaPosting',
  );

  /// IRI for schemahttp:SoftwareApplication
  ///
  /// A software application.
  ///
  static const SoftwareApplication = IriTerm.prevalidated(
    'http://schema.org/SoftwareApplication',
  );

  /// IRI for schemahttp:SoftwareSourceCode
  ///
  /// Computer programming source code. Example: Full (compile ready) solutions, code snippet samples, scripts, templates.
  ///
  static const SoftwareSourceCode = IriTerm.prevalidated(
    'http://schema.org/SoftwareSourceCode',
  );

  /// IRI for schemahttp:SolveMathAction
  ///
  /// The action that takes in a math expression and directs users to a page potentially capable of solving/simplifying that expression.
  ///
  static const SolveMathAction = IriTerm.prevalidated(
    'http://schema.org/SolveMathAction',
  );

  /// IRI for schemahttp:SomeProducts
  ///
  /// A placeholder for multiple similar products of the same kind.
  ///
  static const SomeProducts = IriTerm.prevalidated(
    'http://schema.org/SomeProducts',
  );

  /// IRI for schemahttp:SpeakableSpecification
  ///
  /// A SpeakableSpecification indicates (typically via {[xpath]} or {[cssSelector]}) sections of a document that are highlighted as particularly {[speakable]}. Instances of this type are expected to be used primarily as values of the {[speakable]} property.
  ///
  static const SpeakableSpecification = IriTerm.prevalidated(
    'http://schema.org/SpeakableSpecification',
  );

  /// IRI for schemahttp:SpecialAnnouncement
  ///
  /// A SpecialAnnouncement combines a simple date-stamped textual information update
  /// with contextualized Web links and other structured data.  It represents an information update made by a
  /// locally-oriented organization, for example schools, pharmacies, healthcare providers,  community groups, police,
  /// local government.
  ///
  /// For work in progress guidelines on Coronavirus-related markup see [this doc](https://docs.google.com/document/d/14ikaGCKxo50rRM7nvKSlbUpjyIk2WMQd3IkB1lItlrM/edit#).
  ///
  /// The motivating scenario for SpecialAnnouncement is the [Coronavirus pandemic](https://en.wikipedia.org/wiki/2019%E2%80%9320_coronavirus_pandemic), and the initial vocabulary is oriented to this urgent situation. Schema.org
  /// expect to improve the markup iteratively as it is deployed and as feedback emerges from use. In addition to our
  /// usual [Github entry](https://github.com/schemaorg/schemaorg/issues/2490), feedback comments can also be provided in [this document](https://docs.google.com/document/d/1fpdFFxk8s87CWwACs53SGkYv3aafSxz_DTtOQxMrBJQ/edit#).
  ///
  ///
  /// While this schema is designed to communicate urgent crisis-related information, it is not the same as an emergency warning technology like [CAP](https://en.wikipedia.org/wiki/Common_Alerting_Protocol), although there may be overlaps. The intent is to cover
  /// the kinds of everyday practical information being posted to existing websites during an emergency situation.
  ///
  /// Several kinds of information can be provided:
  ///
  /// We encourage the provision of "name", "text", "datePosted", "expires" (if appropriate), "category" and
  /// "url" as a simple baseline. It is important to provide a value for "category" where possible, most ideally as a well known
  /// URL from Wikipedia or Wikidata. In the case of the 2019-2020 Coronavirus pandemic, this should be "https://en.wikipedia.org/w/index.php?title=2019-20\_coronavirus\_pandemic" or "https://www.wikidata.org/wiki/Q81068910".
  ///
  /// For many of the possible properties, values can either be simple links or an inline description, depending on whether a summary is available. For a link, provide just the URL of the appropriate page as the property's value. For an inline description, use a {[WebContent]} type, and provide the url as a property of that, alongside at least a simple "{[text]}" summary of the page. It is
  /// unlikely that a single SpecialAnnouncement will need all of the possible properties simultaneously.
  ///
  /// We expect that in many cases the page referenced might contain more specialized structured data, e.g. contact info, {[openingHours]}, {[Event]}, {[FAQPage]} etc. By linking to those pages from a {[SpecialAnnouncement]} you can help make it clearer that the events are related to the situation (e.g. Coronavirus) indicated by the {[category]} property of the {[SpecialAnnouncement]}.
  ///
  /// Many {[SpecialAnnouncement]}s will relate to particular regions and to identifiable local organizations. Use {[spatialCoverage]} for the region, and {[announcementLocation]} to indicate specific {[LocalBusiness]}es and {[CivicStructure]}s. If the announcement affects both a particular region and a specific location (for example, a library closure that serves an entire region), use both {[spatialCoverage]} and {[announcementLocation]}.
  ///
  /// The {[about]} property can be used to indicate entities that are the focus of the announcement. We now recommend using {[about]} only
  /// for representing non-location entities (e.g. a {[Course]} or a {[RadioStation]}). For places, use {[announcementLocation]} and {[spatialCoverage]}. Consumers of this markup should be aware that the initial design encouraged the use of {[about]} for locations too.
  ///
  /// The basic content of {[SpecialAnnouncement]} is similar to that of an [RSS](https://en.wikipedia.org/wiki/RSS) or [Atom](https://en.wikipedia.org/wiki/Atom_(Web_standard)) feed. For publishers without such feeds, basic feed-like information can be shared by posting
  /// {[SpecialAnnouncement]} updates in a page, e.g. using JSON-LD. For sites with Atom/RSS functionality, you can point to a feed
  /// with the {[webFeed]} property. This can be a simple URL, or an inline {[DataFeed]} object, with {[encodingFormat]} providing
  /// media type information, e.g. "application/rss+xml" or "application/atom+xml".
  ///
  ///
  static const SpecialAnnouncement = IriTerm.prevalidated(
    'http://schema.org/SpecialAnnouncement',
  );

  /// IRI for schemahttp:Specialty
  ///
  /// Any branch of a field in which people typically develop specific expertise, usually after significant study, time, and effort.
  ///
  static const Specialty = IriTerm.prevalidated('http://schema.org/Specialty');

  /// IRI for schemahttp:SportingGoodsStore
  ///
  /// A sporting goods store.
  ///
  static const SportingGoodsStore = IriTerm.prevalidated(
    'http://schema.org/SportingGoodsStore',
  );

  /// IRI for schemahttp:SportsActivityLocation
  ///
  /// A sports location, such as a playing field.
  ///
  static const SportsActivityLocation = IriTerm.prevalidated(
    'http://schema.org/SportsActivityLocation',
  );

  /// IRI for schemahttp:SportsClub
  ///
  /// A sports club.
  ///
  static const SportsClub = IriTerm.prevalidated(
    'http://schema.org/SportsClub',
  );

  /// IRI for schemahttp:SportsEvent
  ///
  /// Event type: Sports event.
  ///
  static const SportsEvent = IriTerm.prevalidated(
    'http://schema.org/SportsEvent',
  );

  /// IRI for schemahttp:SportsOrganization
  ///
  /// Represents the collection of all sports organizations, including sports teams, governing bodies, and sports associations.
  ///
  static const SportsOrganization = IriTerm.prevalidated(
    'http://schema.org/SportsOrganization',
  );

  /// IRI for schemahttp:SportsTeam
  ///
  /// Organization: Sports team.
  ///
  static const SportsTeam = IriTerm.prevalidated(
    'http://schema.org/SportsTeam',
  );

  /// IRI for schemahttp:SpreadsheetDigitalDocument
  ///
  /// A spreadsheet file.
  ///
  static const SpreadsheetDigitalDocument = IriTerm.prevalidated(
    'http://schema.org/SpreadsheetDigitalDocument',
  );

  /// IRI for schemahttp:StadiumOrArena
  ///
  /// A stadium.
  ///
  static const StadiumOrArena = IriTerm.prevalidated(
    'http://schema.org/StadiumOrArena',
  );

  /// IRI for schemahttp:State
  ///
  /// A state or province of a country.
  ///
  static const State = IriTerm.prevalidated('http://schema.org/State');

  /// IRI for schemahttp:Statement
  ///
  /// A statement about something, for example a fun or interesting fact. If known, the main entity this statement is about can be indicated using mainEntity. For more formal claims (e.g. in Fact Checking), consider using {[Claim]} instead. Use the {[text]} property to capture the text of the statement.
  ///
  static const Statement = IriTerm.prevalidated('http://schema.org/Statement');

  /// IRI for schemahttp:StatisticalPopulation
  ///
  /// A StatisticalPopulation is a set of instances of a certain given type that satisfy some set of constraints. The property {[populationType]} is used to specify the type. Any property that can be used on instances of that type can appear on the statistical population. For example, a {[StatisticalPopulation]} representing all {[Person]}s with a {[homeLocation]} of East Podunk California would be described by applying the appropriate {[homeLocation]} and {[populationType]} properties to a {[StatisticalPopulation]} item that stands for that set of people.
  /// The properties {[numConstraints]} and {[constraintProperty]} are used to specify which of the populations properties are used to specify the population. Note that the sense of "population" used here is the general sense of a statistical
  /// population, and does not imply that the population consists of people. For example, a {[populationType]} of {[Event]} or {[NewsArticle]} could be used. See also {[Observation]}, where a {[populationType]} such as {[Person]} or {[Event]} can be indicated directly. In most cases it may be better to use {[StatisticalVariable]} instead of {[StatisticalPopulation]}.
  ///
  static const StatisticalPopulation = IriTerm.prevalidated(
    'http://schema.org/StatisticalPopulation',
  );

  /// IRI for schemahttp:StatisticalVariable
  ///
  /// {[StatisticalVariable]} represents any type of statistical metric that can be measured at a place and time. The usage pattern for {[StatisticalVariable]} is typically expressed using {[Observation]} with an explicit {[populationType]}, which is a type, typically drawn from Schema.org. Each {[StatisticalVariable]} is marked as a {[ConstraintNode]}, meaning that some properties (those listed using {[constraintProperty]}) serve in this setting solely to define the statistical variable rather than literally describe a specific person, place or thing. For example, a {[StatisticalVariable]} Median_Height_Person_Female representing the median height of women, could be written as follows: the population type is {[Person]}; the measuredProperty {[height]}; the {[statType]} {[median]}; the {[gender]} {[Female]}. It is important to note that there are many kinds of scientific quantitative observation which are not fully, perfectly or unambiguously described following this pattern, or with solely Schema.org terminology. The approach taken here is designed to allow partial, incremental or minimal description of {[StatisticalVariable]}s, and the use of detailed sets of entity and property IDs from external repositories. The {[measurementMethod]}, {[unitCode]} and {[unitText]} properties can also be used to clarify the specific nature and notation of an observed measurement.
  ///
  static const StatisticalVariable = IriTerm.prevalidated(
    'http://schema.org/StatisticalVariable',
  );

  /// IRI for schemahttp:StatusEnumeration
  ///
  /// Lists or enumerations dealing with status types.
  ///
  static const StatusEnumeration = IriTerm.prevalidated(
    'http://schema.org/StatusEnumeration',
  );

  /// IRI for schemahttp:SteeringPositionValue
  ///
  /// A value indicating a steering position.
  ///
  static const SteeringPositionValue = IriTerm.prevalidated(
    'http://schema.org/SteeringPositionValue',
  );

  /// IRI for schemahttp:Store
  ///
  /// A retail good store.
  ///
  static const Store = IriTerm.prevalidated('http://schema.org/Store');

  /// IRI for schemahttp:StructuredValue
  ///
  /// Structured values are used when the value of a property has a more complex structure than simply being a textual value or a reference to another thing.
  ///
  static const StructuredValue = IriTerm.prevalidated(
    'http://schema.org/StructuredValue',
  );

  /// IRI for schemahttp:SubscribeAction
  ///
  /// The act of forming a personal connection with someone/something (object) unidirectionally/asymmetrically to get updates pushed to.\n\nRelated actions:\n\n* {[FollowAction]}: Unlike FollowAction, SubscribeAction implies that the subscriber acts as a passive agent being constantly/actively pushed for updates.\n* {[RegisterAction]}: Unlike RegisterAction, SubscribeAction implies that the agent is interested in continuing receiving updates from the object.\n* {[JoinAction]}: Unlike JoinAction, SubscribeAction implies that the agent is interested in continuing receiving updates from the object.
  ///
  static const SubscribeAction = IriTerm.prevalidated(
    'http://schema.org/SubscribeAction',
  );

  /// IRI for schemahttp:Substance
  ///
  /// Any matter of defined composition that has discrete existence, whose origin may be biological, mineral or chemical.
  ///
  static const Substance = IriTerm.prevalidated('http://schema.org/Substance');

  /// IRI for schemahttp:SubwayStation
  ///
  /// A subway station.
  ///
  static const SubwayStation = IriTerm.prevalidated(
    'http://schema.org/SubwayStation',
  );

  /// IRI for schemahttp:Suite
  ///
  /// A suite in a hotel or other public accommodation, denotes a class of luxury accommodations, the key feature of which is multiple rooms (source: Wikipedia, the free encyclopedia, see <a href="http://en.wikipedia.org/wiki/Suite_(hotel)">http://en.wikipedia.org/wiki/Suite_(hotel)</a>).
  /// <br /><br />
  /// See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.
  ///
  ///
  static const Suite = IriTerm.prevalidated('http://schema.org/Suite');

  /// IRI for schemahttp:SuperficialAnatomy
  ///
  /// Anatomical features that can be observed by sight (without dissection), including the form and proportions of the human body as well as surface landmarks that correspond to deeper subcutaneous structures. Superficial anatomy plays an important role in sports medicine, phlebotomy, and other medical specialties as underlying anatomical structures can be identified through surface palpation. For example, during back surgery, superficial anatomy can be used to palpate and count vertebrae to find the site of incision. Or in phlebotomy, superficial anatomy can be used to locate an underlying vein; for example, the median cubital vein can be located by palpating the borders of the cubital fossa (such as the epicondyles of the humerus) and then looking for the superficial signs of the vein, such as size, prominence, ability to refill after depression, and feel of surrounding tissue support. As another example, in a subluxation (dislocation) of the glenohumeral joint, the bony structure becomes pronounced with the deltoid muscle failing to cover the glenohumeral joint allowing the edges of the scapula to be superficially visible. Here, the superficial anatomy is the visible edges of the scapula, implying the underlying dislocation of the joint (the related anatomical structure).
  ///
  static const SuperficialAnatomy = IriTerm.prevalidated(
    'http://schema.org/SuperficialAnatomy',
  );

  /// IRI for schemahttp:SurgicalProcedure
  ///
  /// A medical procedure involving an incision with instruments; performed for diagnose, or therapeutic purposes.
  ///
  static const SurgicalProcedure = IriTerm.prevalidated(
    'http://schema.org/SurgicalProcedure',
  );

  /// IRI for schemahttp:SuspendAction
  ///
  /// The act of momentarily pausing a device or application (e.g. pause music playback or pause a timer).
  ///
  static const SuspendAction = IriTerm.prevalidated(
    'http://schema.org/SuspendAction',
  );

  /// IRI for schemahttp:Syllabus
  ///
  /// A syllabus that describes the material covered in a course, often with several such sections per {[Course]} so that a distinct {[timeRequired]} can be provided for that section of the {[Course]}.
  ///
  static const Syllabus = IriTerm.prevalidated('http://schema.org/Syllabus');

  /// IRI for schemahttp:Synagogue
  ///
  /// A synagogue.
  ///
  static const Synagogue = IriTerm.prevalidated('http://schema.org/Synagogue');

  /// IRI for schemahttp:TVClip
  ///
  /// A short TV program or a segment/part of a TV program.
  ///
  static const TVClip = IriTerm.prevalidated('http://schema.org/TVClip');

  /// IRI for schemahttp:TVEpisode
  ///
  /// A TV episode which can be part of a series or season.
  ///
  static const TVEpisode = IriTerm.prevalidated('http://schema.org/TVEpisode');

  /// IRI for schemahttp:TVSeason
  ///
  /// Season dedicated to TV broadcast and associated online delivery.
  ///
  static const TVSeason = IriTerm.prevalidated('http://schema.org/TVSeason');

  /// IRI for schemahttp:TVSeries
  ///
  /// CreativeWorkSeries dedicated to TV broadcast and associated online delivery.
  ///
  static const TVSeries = IriTerm.prevalidated('http://schema.org/TVSeries');

  /// IRI for schemahttp:Table
  ///
  /// A table on a Web page.
  ///
  static const Table = IriTerm.prevalidated('http://schema.org/Table');

  /// IRI for schemahttp:TakeAction
  ///
  /// The act of gaining ownership of an object from an origin. Reciprocal of GiveAction.\n\nRelated actions:\n\n* {[GiveAction]}: The reciprocal of TakeAction.\n* {[ReceiveAction]}: Unlike ReceiveAction, TakeAction implies that ownership has been transferred.
  ///
  static const TakeAction = IriTerm.prevalidated(
    'http://schema.org/TakeAction',
  );

  /// IRI for schemahttp:TattooParlor
  ///
  /// A tattoo parlor.
  ///
  static const TattooParlor = IriTerm.prevalidated(
    'http://schema.org/TattooParlor',
  );

  /// IRI for schemahttp:Taxi
  ///
  /// A taxi.
  ///
  static const Taxi = IriTerm.prevalidated('http://schema.org/Taxi');

  /// IRI for schemahttp:TaxiReservation
  ///
  /// A reservation for a taxi.\n\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, use {[Offer]}.
  ///
  static const TaxiReservation = IriTerm.prevalidated(
    'http://schema.org/TaxiReservation',
  );

  /// IRI for schemahttp:TaxiService
  ///
  /// A service for a vehicle for hire with a driver for local travel. Fares are usually calculated based on distance traveled.
  ///
  static const TaxiService = IriTerm.prevalidated(
    'http://schema.org/TaxiService',
  );

  /// IRI for schemahttp:TaxiStand
  ///
  /// A taxi stand.
  ///
  static const TaxiStand = IriTerm.prevalidated('http://schema.org/TaxiStand');

  /// IRI for schemahttp:Taxon
  ///
  /// A set of organisms asserted to represent a natural cohesive biological unit.
  ///
  static const Taxon = IriTerm.prevalidated('http://schema.org/Taxon');

  /// IRI for schemahttp:TechArticle
  ///
  /// A technical article - Example: How-to (task) topics, step-by-step, procedural troubleshooting, specifications, etc.
  ///
  static const TechArticle = IriTerm.prevalidated(
    'http://schema.org/TechArticle',
  );

  /// IRI for schemahttp:TelevisionChannel
  ///
  /// A unique instance of a television BroadcastService on a CableOrSatelliteService lineup.
  ///
  static const TelevisionChannel = IriTerm.prevalidated(
    'http://schema.org/TelevisionChannel',
  );

  /// IRI for schemahttp:TelevisionStation
  ///
  /// A television station.
  ///
  static const TelevisionStation = IriTerm.prevalidated(
    'http://schema.org/TelevisionStation',
  );

  /// IRI for schemahttp:TennisComplex
  ///
  /// A tennis complex.
  ///
  static const TennisComplex = IriTerm.prevalidated(
    'http://schema.org/TennisComplex',
  );

  /// IRI for schemahttp:Text
  ///
  /// Data type: Text.
  ///
  static const Text = IriTerm.prevalidated('http://schema.org/Text');

  /// IRI for schemahttp:TextDigitalDocument
  ///
  /// A file composed primarily of text.
  ///
  static const TextDigitalDocument = IriTerm.prevalidated(
    'http://schema.org/TextDigitalDocument',
  );

  /// IRI for schemahttp:TextObject
  ///
  /// A text file. The text can be unformatted or contain markup, html, etc.
  ///
  static const TextObject = IriTerm.prevalidated(
    'http://schema.org/TextObject',
  );

  /// IRI for schemahttp:TheaterEvent
  ///
  /// Event type: Theater performance.
  ///
  static const TheaterEvent = IriTerm.prevalidated(
    'http://schema.org/TheaterEvent',
  );

  /// IRI for schemahttp:TheaterGroup
  ///
  /// A theater group or company, for example, the Royal Shakespeare Company or Druid Theatre.
  ///
  static const TheaterGroup = IriTerm.prevalidated(
    'http://schema.org/TheaterGroup',
  );

  /// IRI for schemahttp:TherapeuticProcedure
  ///
  /// A medical procedure intended primarily for therapeutic purposes, aimed at improving a health condition.
  ///
  static const TherapeuticProcedure = IriTerm.prevalidated(
    'http://schema.org/TherapeuticProcedure',
  );

  /// IRI for schemahttp:Thesis
  ///
  /// A thesis or dissertation document submitted in support of candidature for an academic degree or professional qualification.
  ///
  static const Thesis = IriTerm.prevalidated('http://schema.org/Thesis');

  /// IRI for schemahttp:Thing
  ///
  /// The most generic type of item.
  ///
  static const Thing = IriTerm.prevalidated('http://schema.org/Thing');

  /// IRI for schemahttp:Ticket
  ///
  /// Used to describe a ticket to an event, a flight, a bus ride, etc.
  ///
  static const Ticket = IriTerm.prevalidated('http://schema.org/Ticket');

  /// IRI for schemahttp:TieAction
  ///
  /// The act of reaching a draw in a competitive activity.
  ///
  static const TieAction = IriTerm.prevalidated('http://schema.org/TieAction');

  /// IRI for schemahttp:TierBenefitEnumeration
  ///
  /// An enumeration of possible benefits as part of a loyalty (members) program.
  ///
  static const TierBenefitEnumeration = IriTerm.prevalidated(
    'http://schema.org/TierBenefitEnumeration',
  );

  /// IRI for schemahttp:Time
  ///
  /// A point in time recurring on multiple days in the form hh:mm:ss[Z|(+|-)hh:mm] (see [XML schema for details](http://www.w3.org/TR/xmlschema-2/#time)).
  ///
  static const Time = IriTerm.prevalidated('http://schema.org/Time');

  /// IRI for schemahttp:TipAction
  ///
  /// The act of giving money voluntarily to a beneficiary in recognition of services rendered.
  ///
  static const TipAction = IriTerm.prevalidated('http://schema.org/TipAction');

  /// IRI for schemahttp:TireShop
  ///
  /// A tire shop.
  ///
  static const TireShop = IriTerm.prevalidated('http://schema.org/TireShop');

  /// IRI for schemahttp:TouristAttraction
  ///
  /// A tourist attraction.  In principle any Thing can be a {[TouristAttraction]}, from a {[Mountain]} and {[LandmarksOrHistoricalBuildings]} to a {[LocalBusiness]}.  This Type can be used on its own to describe a general {[TouristAttraction]}, or be used as an {[additionalType]} to add tourist attraction properties to any other type.  (See examples below)
  ///
  static const TouristAttraction = IriTerm.prevalidated(
    'http://schema.org/TouristAttraction',
  );

  /// IRI for schemahttp:TouristDestination
  ///
  /// A tourist destination. In principle any {[Place]} can be a {[TouristDestination]} from a {[City]}, Region or {[Country]} to an {[AmusementPark]} or {[Hotel]}. This Type can be used on its own to describe a general {[TouristDestination]}, or be used as an {[additionalType]} to add tourist relevant properties to any other {[Place]}.  A {[TouristDestination]} is defined as a {[Place]} that contains, or is colocated with, one or more {[TouristAttraction]}s, often linked by a similar theme or interest to a particular {[touristType]}. The [UNWTO](http://www2.unwto.org/) defines Destination (main destination of a tourism trip) as the place visited that is central to the decision to take the trip.
  /// (See examples below.)
  ///
  static const TouristDestination = IriTerm.prevalidated(
    'http://schema.org/TouristDestination',
  );

  /// IRI for schemahttp:TouristInformationCenter
  ///
  /// A tourist information center.
  ///
  static const TouristInformationCenter = IriTerm.prevalidated(
    'http://schema.org/TouristInformationCenter',
  );

  /// IRI for schemahttp:TouristTrip
  ///
  /// A tourist trip. A created itinerary of visits to one or more places of interest ({[TouristAttraction]}/{[TouristDestination]}) often linked by a similar theme, geographic area, or interest to a particular {[touristType]}. The [UNWTO](http://www2.unwto.org/) defines tourism trip as the Trip taken by visitors.
  /// (See examples below.)
  ///
  static const TouristTrip = IriTerm.prevalidated(
    'http://schema.org/TouristTrip',
  );

  /// IRI for schemahttp:ToyStore
  ///
  /// A toy store.
  ///
  static const ToyStore = IriTerm.prevalidated('http://schema.org/ToyStore');

  /// IRI for schemahttp:TrackAction
  ///
  /// An agent tracks an object for updates.\n\nRelated actions:\n\n* {[FollowAction]}: Unlike FollowAction, TrackAction refers to the interest on the location of innanimates objects.\n* {[SubscribeAction]}: Unlike SubscribeAction, TrackAction refers to  the interest on the location of innanimate objects.
  ///
  static const TrackAction = IriTerm.prevalidated(
    'http://schema.org/TrackAction',
  );

  /// IRI for schemahttp:TradeAction
  ///
  /// The act of participating in an exchange of goods and services for monetary compensation. An agent trades an object, product or service with a participant in exchange for a one time or periodic payment.
  ///
  static const TradeAction = IriTerm.prevalidated(
    'http://schema.org/TradeAction',
  );

  /// IRI for schemahttp:TrainReservation
  ///
  /// A reservation for train travel.\n\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, use {[Offer]}.
  ///
  static const TrainReservation = IriTerm.prevalidated(
    'http://schema.org/TrainReservation',
  );

  /// IRI for schemahttp:TrainStation
  ///
  /// A train station.
  ///
  static const TrainStation = IriTerm.prevalidated(
    'http://schema.org/TrainStation',
  );

  /// IRI for schemahttp:TrainTrip
  ///
  /// A trip on a commercial train line.
  ///
  static const TrainTrip = IriTerm.prevalidated('http://schema.org/TrainTrip');

  /// IRI for schemahttp:TransferAction
  ///
  /// The act of transferring/moving (abstract or concrete) animate or inanimate objects from one place to another.
  ///
  static const TransferAction = IriTerm.prevalidated(
    'http://schema.org/TransferAction',
  );

  /// IRI for schemahttp:TravelAction
  ///
  /// The act of traveling from a fromLocation to a destination by a specified mode of transport, optionally with participants.
  ///
  static const TravelAction = IriTerm.prevalidated(
    'http://schema.org/TravelAction',
  );

  /// IRI for schemahttp:TravelAgency
  ///
  /// A travel agency.
  ///
  static const TravelAgency = IriTerm.prevalidated(
    'http://schema.org/TravelAgency',
  );

  /// IRI for schemahttp:TreatmentIndication
  ///
  /// An indication for treating an underlying condition, symptom, etc.
  ///
  static const TreatmentIndication = IriTerm.prevalidated(
    'http://schema.org/TreatmentIndication',
  );

  /// IRI for schemahttp:Trip
  ///
  /// A trip or journey. An itinerary of visits to one or more places.
  ///
  static const Trip = IriTerm.prevalidated('http://schema.org/Trip');

  /// IRI for schemahttp:TypeAndQuantityNode
  ///
  /// A structured value indicating the quantity, unit of measurement, and business function of goods included in a bundle offer.
  ///
  static const TypeAndQuantityNode = IriTerm.prevalidated(
    'http://schema.org/TypeAndQuantityNode',
  );

  /// IRI for schemahttp:UKNonprofitType
  ///
  /// UKNonprofitType: Non-profit organization type originating from the United Kingdom.
  ///
  static const UKNonprofitType = IriTerm.prevalidated(
    'http://schema.org/UKNonprofitType',
  );

  /// IRI for schemahttp:URL
  ///
  /// Data type: URL.
  ///
  static const URL = IriTerm.prevalidated('http://schema.org/URL');

  /// IRI for schemahttp:USNonprofitType
  ///
  /// USNonprofitType: Non-profit organization type originating from the United States.
  ///
  static const USNonprofitType = IriTerm.prevalidated(
    'http://schema.org/USNonprofitType',
  );

  /// IRI for schemahttp:UnRegisterAction
  ///
  /// The act of un-registering from a service.\n\nRelated actions:\n\n* {[RegisterAction]}: antonym of UnRegisterAction.\n* {[LeaveAction]}: Unlike LeaveAction, UnRegisterAction implies that you are unregistering from a service you were previously registered, rather than leaving a team/group of people.
  ///
  static const UnRegisterAction = IriTerm.prevalidated(
    'http://schema.org/UnRegisterAction',
  );

  /// IRI for schemahttp:UnitPriceSpecification
  ///
  /// The price asked for a given offer by the respective organization or person.
  ///
  static const UnitPriceSpecification = IriTerm.prevalidated(
    'http://schema.org/UnitPriceSpecification',
  );

  /// IRI for schemahttp:UpdateAction
  ///
  /// The act of managing by changing/editing the state of the object.
  ///
  static const UpdateAction = IriTerm.prevalidated(
    'http://schema.org/UpdateAction',
  );

  /// IRI for schemahttp:UseAction
  ///
  /// The act of applying an object to its intended purpose.
  ///
  static const UseAction = IriTerm.prevalidated('http://schema.org/UseAction');

  /// IRI for schemahttp:UserBlocks
  ///
  /// UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use {[Action]}-based vocabulary, alongside types such as {[Comment]}.
  ///
  static const UserBlocks = IriTerm.prevalidated(
    'http://schema.org/UserBlocks',
  );

  /// IRI for schemahttp:UserCheckins
  ///
  /// UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use {[Action]}-based vocabulary, alongside types such as {[Comment]}.
  ///
  static const UserCheckins = IriTerm.prevalidated(
    'http://schema.org/UserCheckins',
  );

  /// IRI for schemahttp:UserComments
  ///
  /// UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use {[Action]}-based vocabulary, alongside types such as {[Comment]}.
  ///
  static const UserComments = IriTerm.prevalidated(
    'http://schema.org/UserComments',
  );

  /// IRI for schemahttp:UserDownloads
  ///
  /// UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use {[Action]}-based vocabulary, alongside types such as {[Comment]}.
  ///
  static const UserDownloads = IriTerm.prevalidated(
    'http://schema.org/UserDownloads',
  );

  /// IRI for schemahttp:UserInteraction
  ///
  /// UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use {[Action]}-based vocabulary, alongside types such as {[Comment]}.
  ///
  static const UserInteraction = IriTerm.prevalidated(
    'http://schema.org/UserInteraction',
  );

  /// IRI for schemahttp:UserLikes
  ///
  /// UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use {[Action]}-based vocabulary, alongside types such as {[Comment]}.
  ///
  static const UserLikes = IriTerm.prevalidated('http://schema.org/UserLikes');

  /// IRI for schemahttp:UserPageVisits
  ///
  /// UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use {[Action]}-based vocabulary, alongside types such as {[Comment]}.
  ///
  static const UserPageVisits = IriTerm.prevalidated(
    'http://schema.org/UserPageVisits',
  );

  /// IRI for schemahttp:UserPlays
  ///
  /// UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use {[Action]}-based vocabulary, alongside types such as {[Comment]}.
  ///
  static const UserPlays = IriTerm.prevalidated('http://schema.org/UserPlays');

  /// IRI for schemahttp:UserPlusOnes
  ///
  /// UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use {[Action]}-based vocabulary, alongside types such as {[Comment]}.
  ///
  static const UserPlusOnes = IriTerm.prevalidated(
    'http://schema.org/UserPlusOnes',
  );

  /// IRI for schemahttp:UserReview
  ///
  /// A review created by an end-user (e.g. consumer, purchaser, attendee etc.), in contrast with {[CriticReview]}.
  ///
  static const UserReview = IriTerm.prevalidated(
    'http://schema.org/UserReview',
  );

  /// IRI for schemahttp:UserTweets
  ///
  /// UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use {[Action]}-based vocabulary, alongside types such as {[Comment]}.
  ///
  static const UserTweets = IriTerm.prevalidated(
    'http://schema.org/UserTweets',
  );

  /// IRI for schemahttp:VacationRental
  ///
  /// A kind of lodging business that focuses on renting single properties for limited time.
  ///
  static const VacationRental = IriTerm.prevalidated(
    'http://schema.org/VacationRental',
  );

  /// IRI for schemahttp:Vehicle
  ///
  /// A vehicle is a device that is designed or used to transport people or cargo over land, water, air, or through space.
  ///
  static const Vehicle = IriTerm.prevalidated('http://schema.org/Vehicle');

  /// IRI for schemahttp:Vein
  ///
  /// A type of blood vessel that specifically carries blood to the heart.
  ///
  static const Vein = IriTerm.prevalidated('http://schema.org/Vein');

  /// IRI for schemahttp:Vessel
  ///
  /// A component of the human body circulatory system comprised of an intricate network of hollow tubes that transport blood throughout the entire body.
  ///
  static const Vessel = IriTerm.prevalidated('http://schema.org/Vessel');

  /// IRI for schemahttp:VeterinaryCare
  ///
  /// A vet's office.
  ///
  static const VeterinaryCare = IriTerm.prevalidated(
    'http://schema.org/VeterinaryCare',
  );

  /// IRI for schemahttp:VideoGallery
  ///
  /// Web page type: Video gallery page.
  ///
  static const VideoGallery = IriTerm.prevalidated(
    'http://schema.org/VideoGallery',
  );

  /// IRI for schemahttp:VideoGame
  ///
  /// A video game is an electronic game that involves human interaction with a user interface to generate visual feedback on a video device.
  ///
  static const VideoGame = IriTerm.prevalidated('http://schema.org/VideoGame');

  /// IRI for schemahttp:VideoGameClip
  ///
  /// A short segment/part of a video game.
  ///
  static const VideoGameClip = IriTerm.prevalidated(
    'http://schema.org/VideoGameClip',
  );

  /// IRI for schemahttp:VideoGameSeries
  ///
  /// A video game series.
  ///
  static const VideoGameSeries = IriTerm.prevalidated(
    'http://schema.org/VideoGameSeries',
  );

  /// IRI for schemahttp:VideoObject
  ///
  /// A video file.
  ///
  static const VideoObject = IriTerm.prevalidated(
    'http://schema.org/VideoObject',
  );

  /// IRI for schemahttp:VideoObjectSnapshot
  ///
  /// A specific and exact (byte-for-byte) version of a {[VideoObject]}. Two byte-for-byte identical files, for the purposes of this type, considered identical. If they have different embedded metadata the files will differ. Different external facts about the files, e.g. creator or dateCreated that aren't represented in their actual content, do not affect this notion of identity.
  ///
  static const VideoObjectSnapshot = IriTerm.prevalidated(
    'http://schema.org/VideoObjectSnapshot',
  );

  /// IRI for schemahttp:ViewAction
  ///
  /// The act of consuming static visual content.
  ///
  static const ViewAction = IriTerm.prevalidated(
    'http://schema.org/ViewAction',
  );

  /// IRI for schemahttp:VirtualLocation
  ///
  /// An online or virtual location for attending events. For example, one may attend an online seminar or educational event. While a virtual location may be used as the location of an event, virtual locations should not be confused with physical locations in the real world.
  ///
  static const VirtualLocation = IriTerm.prevalidated(
    'http://schema.org/VirtualLocation',
  );

  /// IRI for schemahttp:VisualArtsEvent
  ///
  /// Event type: Visual arts event.
  ///
  static const VisualArtsEvent = IriTerm.prevalidated(
    'http://schema.org/VisualArtsEvent',
  );

  /// IRI for schemahttp:VisualArtwork
  ///
  /// A work of art that is primarily visual in character.
  ///
  static const VisualArtwork = IriTerm.prevalidated(
    'http://schema.org/VisualArtwork',
  );

  /// IRI for schemahttp:VitalSign
  ///
  /// Vital signs are measures of various physiological functions in order to assess the most basic body functions.
  ///
  static const VitalSign = IriTerm.prevalidated('http://schema.org/VitalSign');

  /// IRI for schemahttp:Volcano
  ///
  /// A volcano, like Fujisan.
  ///
  static const Volcano = IriTerm.prevalidated('http://schema.org/Volcano');

  /// IRI for schemahttp:VoteAction
  ///
  /// The act of expressing a preference from a fixed/finite/structured set of choices/options.
  ///
  static const VoteAction = IriTerm.prevalidated(
    'http://schema.org/VoteAction',
  );

  /// IRI for schemahttp:WPAdBlock
  ///
  /// An advertising section of the page.
  ///
  static const WPAdBlock = IriTerm.prevalidated('http://schema.org/WPAdBlock');

  /// IRI for schemahttp:WPFooter
  ///
  /// The footer section of the page.
  ///
  static const WPFooter = IriTerm.prevalidated('http://schema.org/WPFooter');

  /// IRI for schemahttp:WPHeader
  ///
  /// The header section of the page.
  ///
  static const WPHeader = IriTerm.prevalidated('http://schema.org/WPHeader');

  /// IRI for schemahttp:WPSideBar
  ///
  /// A sidebar section of the page.
  ///
  static const WPSideBar = IriTerm.prevalidated('http://schema.org/WPSideBar');

  /// IRI for schemahttp:WantAction
  ///
  /// The act of expressing a desire about the object. An agent wants an object.
  ///
  static const WantAction = IriTerm.prevalidated(
    'http://schema.org/WantAction',
  );

  /// IRI for schemahttp:WarrantyPromise
  ///
  /// A structured value representing the duration and scope of services that will be provided to a customer free of charge in case of a defect or malfunction of a product.
  ///
  static const WarrantyPromise = IriTerm.prevalidated(
    'http://schema.org/WarrantyPromise',
  );

  /// IRI for schemahttp:WarrantyScope
  ///
  /// A range of services that will be provided to a customer free of charge in case of a defect or malfunction of a product.\n\nCommonly used values:\n\n* http://purl.org/goodrelations/v1#Labor-BringIn\n* http://purl.org/goodrelations/v1#PartsAndLabor-BringIn\n* http://purl.org/goodrelations/v1#PartsAndLabor-PickUp
  ///
  ///
  static const WarrantyScope = IriTerm.prevalidated(
    'http://schema.org/WarrantyScope',
  );

  /// IRI for schemahttp:WatchAction
  ///
  /// The act of consuming dynamic/moving visual content.
  ///
  static const WatchAction = IriTerm.prevalidated(
    'http://schema.org/WatchAction',
  );

  /// IRI for schemahttp:Waterfall
  ///
  /// A waterfall, like Niagara.
  ///
  static const Waterfall = IriTerm.prevalidated('http://schema.org/Waterfall');

  /// IRI for schemahttp:WearAction
  ///
  /// The act of dressing oneself in clothing.
  ///
  static const WearAction = IriTerm.prevalidated(
    'http://schema.org/WearAction',
  );

  /// IRI for schemahttp:WearableMeasurementTypeEnumeration
  ///
  /// Enumerates common types of measurement for wearables products.
  ///
  static const WearableMeasurementTypeEnumeration = IriTerm.prevalidated(
    'http://schema.org/WearableMeasurementTypeEnumeration',
  );

  /// IRI for schemahttp:WearableSizeGroupEnumeration
  ///
  /// Enumerates common size groups (also known as "size types") for wearable products.
  ///
  static const WearableSizeGroupEnumeration = IriTerm.prevalidated(
    'http://schema.org/WearableSizeGroupEnumeration',
  );

  /// IRI for schemahttp:WearableSizeSystemEnumeration
  ///
  /// Enumerates common size systems specific for wearable products.
  ///
  static const WearableSizeSystemEnumeration = IriTerm.prevalidated(
    'http://schema.org/WearableSizeSystemEnumeration',
  );

  /// IRI for schemahttp:WebAPI
  ///
  /// An application programming interface accessible over Web/Internet technologies.
  ///
  static const WebAPI = IriTerm.prevalidated('http://schema.org/WebAPI');

  /// IRI for schemahttp:WebApplication
  ///
  /// Web applications.
  ///
  static const WebApplication = IriTerm.prevalidated(
    'http://schema.org/WebApplication',
  );

  /// IRI for schemahttp:WebContent
  ///
  /// WebContent is a type representing all {[WebPage]}, {[WebSite]} and {[WebPageElement]} content. It is sometimes the case that detailed distinctions between Web pages, sites and their parts are not always important or obvious. The  {[WebContent]} type makes it easier to describe Web-addressable content without requiring such distinctions to always be stated. (The intent is that the existing types {[WebPage]}, {[WebSite]} and {[WebPageElement]} will eventually be declared as subtypes of {[WebContent]}.)
  ///
  static const WebContent = IriTerm.prevalidated(
    'http://schema.org/WebContent',
  );

  /// IRI for schemahttp:WebPage
  ///
  /// A web page. Every web page is implicitly assumed to be declared to be of type WebPage, so the various properties about that webpage, such as <code>breadcrumb</code> may be used. We recommend explicit declaration if these properties are specified, but if they are found outside of an itemscope, they will be assumed to be about the page.
  ///
  static const WebPage = IriTerm.prevalidated('http://schema.org/WebPage');

  /// IRI for schemahttp:WebPageElement
  ///
  /// A web page element, like a table or an image.
  ///
  static const WebPageElement = IriTerm.prevalidated(
    'http://schema.org/WebPageElement',
  );

  /// IRI for schemahttp:WebSite
  ///
  /// A WebSite is a set of related web pages and other items typically served from a single web domain and accessible via URLs.
  ///
  static const WebSite = IriTerm.prevalidated('http://schema.org/WebSite');

  /// IRI for schemahttp:WholesaleStore
  ///
  /// A wholesale store.
  ///
  static const WholesaleStore = IriTerm.prevalidated(
    'http://schema.org/WholesaleStore',
  );

  /// IRI for schemahttp:WinAction
  ///
  /// The act of achieving victory in a competitive activity.
  ///
  static const WinAction = IriTerm.prevalidated('http://schema.org/WinAction');

  /// IRI for schemahttp:Winery
  ///
  /// A winery.
  ///
  static const Winery = IriTerm.prevalidated('http://schema.org/Winery');

  /// IRI for schemahttp:WorkBasedProgram
  ///
  /// A program with both an educational and employment component. Typically based at a workplace and structured around work-based learning, with the aim of instilling competencies related to an occupation. WorkBasedProgram is used to distinguish programs such as apprenticeships from school, college or other classroom based educational programs.
  ///
  static const WorkBasedProgram = IriTerm.prevalidated(
    'http://schema.org/WorkBasedProgram',
  );

  /// IRI for schemahttp:WorkersUnion
  ///
  /// A Workers Union (also known as a Labor Union, Labour Union, or Trade Union) is an organization that promotes the interests of its worker members by collectively bargaining with management, organizing, and political lobbying.
  ///
  static const WorkersUnion = IriTerm.prevalidated(
    'http://schema.org/WorkersUnion',
  );

  /// IRI for schemahttp:WriteAction
  ///
  /// The act of authoring written creative content.
  ///
  static const WriteAction = IriTerm.prevalidated(
    'http://schema.org/WriteAction',
  );

  /// IRI for schemahttp:XPathType
  ///
  /// Text representing an XPath (typically but not necessarily version 1.0).
  ///
  static const XPathType = IriTerm.prevalidated('http://schema.org/XPathType');

  /// IRI for schemahttp:Zoo
  ///
  /// A zoo.
  ///
  static const Zoo = IriTerm.prevalidated('http://schema.org/Zoo');

  /// IRI for schemahttp:Abdomen
  ///
  /// Abdomen clinical examination.
  ///
  static const Abdomen = IriTerm.prevalidated('http://schema.org/Abdomen');

  /// IRI for schemahttp:ActivationFee
  ///
  /// Represents the activation fee part of the total price for an offered product, for example a cellphone contract.
  ///
  static const ActivationFee = IriTerm.prevalidated(
    'http://schema.org/ActivationFee',
  );

  /// IRI for schemahttp:ActiveActionStatus
  ///
  /// An in-progress action (e.g., while watching the movie, or driving to a location).
  ///
  static const ActiveActionStatus = IriTerm.prevalidated(
    'http://schema.org/ActiveActionStatus',
  );

  /// IRI for schemahttp:ActiveNotRecruiting
  ///
  /// Active, but not recruiting new participants.
  ///
  static const ActiveNotRecruiting = IriTerm.prevalidated(
    'http://schema.org/ActiveNotRecruiting',
  );

  /// IRI for schemahttp:AerobicActivity
  ///
  /// Physical activity of relatively low intensity that depends primarily on the aerobic energy-generating process; during activity, the aerobic metabolism uses oxygen to adequately meet energy demands during exercise.
  ///
  static const AerobicActivity = IriTerm.prevalidated(
    'http://schema.org/AerobicActivity',
  );

  /// IRI for schemahttp:AlbumRelease
  ///
  /// AlbumRelease.
  ///
  static const AlbumRelease = IriTerm.prevalidated(
    'http://schema.org/AlbumRelease',
  );

  /// IRI for schemahttp:AlcoholConsideration
  ///
  /// Item contains alcohol or promotes alcohol consumption.
  ///
  static const AlcoholConsideration = IriTerm.prevalidated(
    'http://schema.org/AlcoholConsideration',
  );

  /// IRI for schemahttp:AlgorithmicMediaDigitalSource
  ///
  /// Content coded as '<a href="https://cv.iptc.org/newscodes/digitalsourcetype/algorithmicMedia">algorithmic media</a>' using the IPTC <a href="https://cv.iptc.org/newscodes/digitalsourcetype/">digital source type</a> vocabulary.
  ///
  static const AlgorithmicMediaDigitalSource = IriTerm.prevalidated(
    'http://schema.org/AlgorithmicMediaDigitalSource',
  );

  /// IRI for schemahttp:AlgorithmicallyEnhancedDigitalSource
  ///
  /// Content coded as '<a href="https://cv.iptc.org/newscodes/digitalsourcetype/algorithmicallyEnhanced">algorithmically enhanced</a>' using the IPTC <a href="https://cv.iptc.org/newscodes/digitalsourcetype/">digital source type</a> vocabulary.
  ///
  static const AlgorithmicallyEnhancedDigitalSource = IriTerm.prevalidated(
    'http://schema.org/AlgorithmicallyEnhancedDigitalSource',
  );

  /// IRI for schemahttp:AllWheelDriveConfiguration
  ///
  /// All-wheel Drive is a transmission layout where the engine drives all four wheels.
  ///
  static const AllWheelDriveConfiguration = IriTerm.prevalidated(
    'http://schema.org/AllWheelDriveConfiguration',
  );

  /// IRI for schemahttp:AllergiesHealthAspect
  ///
  /// Content about the allergy-related aspects of a health topic.
  ///
  static const AllergiesHealthAspect = IriTerm.prevalidated(
    'http://schema.org/AllergiesHealthAspect',
  );

  /// IRI for schemahttp:AnaerobicActivity
  ///
  /// Physical activity that is of high-intensity which utilizes the anaerobic metabolism of the body.
  ///
  static const AnaerobicActivity = IriTerm.prevalidated(
    'http://schema.org/AnaerobicActivity',
  );

  /// IRI for schemahttp:AndroidPlatform
  ///
  /// Represents the broad notion of Android-based operating systems.
  ///
  static const AndroidPlatform = IriTerm.prevalidated(
    'http://schema.org/AndroidPlatform',
  );

  /// IRI for schemahttp:Anesthesia
  ///
  /// A specific branch of medical science that pertains to study of anesthetics and their application.
  ///
  static const Anesthesia = IriTerm.prevalidated(
    'http://schema.org/Anesthesia',
  );

  /// IRI for schemahttp:Appearance
  ///
  /// Appearance assessment with clinical examination.
  ///
  static const Appearance = IriTerm.prevalidated(
    'http://schema.org/Appearance',
  );

  /// IRI for schemahttp:AudiobookFormat
  ///
  /// Book format: Audiobook. This is an enumerated value for use with the bookFormat property. There is also a type 'Audiobook' in the bib extension which includes Audiobook specific properties.
  ///
  static const AudiobookFormat = IriTerm.prevalidated(
    'http://schema.org/AudiobookFormat',
  );

  /// IRI for schemahttp:AuthoritativeLegalValue
  ///
  /// Indicates that the publisher gives some special status to the publication of the document. ("The Queens Printer" version of a UK Act of Parliament, or the PDF version of a Directive published by the EU Office of Publications). Something "Authoritative" is considered to be also {[OfficialLegalValue]}".
  ///
  static const AuthoritativeLegalValue = IriTerm.prevalidated(
    'http://schema.org/AuthoritativeLegalValue',
  );

  /// IRI for schemahttp:Ayurvedic
  ///
  /// A system of medicine that originated in India over thousands of years and that focuses on integrating and balancing the body, mind, and spirit.
  ///
  static const Ayurvedic = IriTerm.prevalidated('http://schema.org/Ayurvedic');

  /// IRI for schemahttp:BackOrder
  ///
  /// Indicates that the item is available on back order.
  ///
  static const BackOrder = IriTerm.prevalidated('http://schema.org/BackOrder');

  /// IRI for schemahttp:Bacteria
  ///
  /// Pathogenic bacteria that cause bacterial infection.
  ///
  static const Bacteria = IriTerm.prevalidated('http://schema.org/Bacteria');

  /// IRI for schemahttp:Balance
  ///
  /// Physical activity that is engaged to help maintain posture and balance.
  ///
  static const Balance = IriTerm.prevalidated('http://schema.org/Balance');

  /// IRI for schemahttp:BasicIncome
  ///
  /// BasicIncome: this is a benefit for basic income.
  ///
  static const BasicIncome = IriTerm.prevalidated(
    'http://schema.org/BasicIncome',
  );

  /// IRI for schemahttp:BenefitsHealthAspect
  ///
  /// Content about the benefits and advantages of usage or utilization of topic.
  ///
  static const BenefitsHealthAspect = IriTerm.prevalidated(
    'http://schema.org/BenefitsHealthAspect',
  );

  /// IRI for schemahttp:BodyMeasurementArm
  ///
  /// Arm length (measured between arms/shoulder line intersection and the prominent wrist bone). Used, for example, to fit shirts.
  ///
  static const BodyMeasurementArm = IriTerm.prevalidated(
    'http://schema.org/BodyMeasurementArm',
  );

  /// IRI for schemahttp:BodyMeasurementBust
  ///
  /// Maximum girth of bust. Used, for example, to fit women's suits.
  ///
  static const BodyMeasurementBust = IriTerm.prevalidated(
    'http://schema.org/BodyMeasurementBust',
  );

  /// IRI for schemahttp:BodyMeasurementChest
  ///
  /// Maximum girth of chest. Used, for example, to fit men's suits.
  ///
  static const BodyMeasurementChest = IriTerm.prevalidated(
    'http://schema.org/BodyMeasurementChest',
  );

  /// IRI for schemahttp:BodyMeasurementFoot
  ///
  /// Foot length (measured between end of the most prominent toe and the most prominent part of the heel). Used, for example, to measure socks.
  ///
  static const BodyMeasurementFoot = IriTerm.prevalidated(
    'http://schema.org/BodyMeasurementFoot',
  );

  /// IRI for schemahttp:BodyMeasurementHand
  ///
  /// Maximum hand girth (measured over the knuckles of the open right hand excluding thumb, fingers together). Used, for example, to fit gloves.
  ///
  static const BodyMeasurementHand = IriTerm.prevalidated(
    'http://schema.org/BodyMeasurementHand',
  );

  /// IRI for schemahttp:BodyMeasurementHead
  ///
  /// Maximum girth of head above the ears. Used, for example, to fit hats.
  ///
  static const BodyMeasurementHead = IriTerm.prevalidated(
    'http://schema.org/BodyMeasurementHead',
  );

  /// IRI for schemahttp:BodyMeasurementHeight
  ///
  /// Body height (measured between crown of head and soles of feet). Used, for example, to fit jackets.
  ///
  static const BodyMeasurementHeight = IriTerm.prevalidated(
    'http://schema.org/BodyMeasurementHeight',
  );

  /// IRI for schemahttp:BodyMeasurementHips
  ///
  /// Girth of hips (measured around the buttocks). Used, for example, to fit skirts.
  ///
  static const BodyMeasurementHips = IriTerm.prevalidated(
    'http://schema.org/BodyMeasurementHips',
  );

  /// IRI for schemahttp:BodyMeasurementInsideLeg
  ///
  /// Inside leg (measured between crotch and soles of feet). Used, for example, to fit pants.
  ///
  static const BodyMeasurementInsideLeg = IriTerm.prevalidated(
    'http://schema.org/BodyMeasurementInsideLeg',
  );

  /// IRI for schemahttp:BodyMeasurementNeck
  ///
  /// Girth of neck. Used, for example, to fit shirts.
  ///
  static const BodyMeasurementNeck = IriTerm.prevalidated(
    'http://schema.org/BodyMeasurementNeck',
  );

  /// IRI for schemahttp:BodyMeasurementUnderbust
  ///
  /// Girth of body just below the bust. Used, for example, to fit women's swimwear.
  ///
  static const BodyMeasurementUnderbust = IriTerm.prevalidated(
    'http://schema.org/BodyMeasurementUnderbust',
  );

  /// IRI for schemahttp:BodyMeasurementWaist
  ///
  /// Girth of natural waistline (between hip bones and lower ribs). Used, for example, to fit pants.
  ///
  static const BodyMeasurementWaist = IriTerm.prevalidated(
    'http://schema.org/BodyMeasurementWaist',
  );

  /// IRI for schemahttp:BodyMeasurementWeight
  ///
  /// Body weight. Used, for example, to measure pantyhose.
  ///
  static const BodyMeasurementWeight = IriTerm.prevalidated(
    'http://schema.org/BodyMeasurementWeight',
  );

  /// IRI for schemahttp:BroadcastRelease
  ///
  /// BroadcastRelease.
  ///
  static const BroadcastRelease = IriTerm.prevalidated(
    'http://schema.org/BroadcastRelease',
  );

  /// IRI for schemahttp:BusinessSupport
  ///
  /// BusinessSupport: this is a benefit for supporting businesses.
  ///
  static const BusinessSupport = IriTerm.prevalidated(
    'http://schema.org/BusinessSupport',
  );

  /// IRI for schemahttp:ByBankTransferInAdvance
  ///
  /// Payment in advance by bank transfer, equivalent to <code>http://purl.org/goodrelations/v1#ByBankTransferInAdvance</code>.
  ///
  static const ByBankTransferInAdvance = IriTerm.prevalidated(
    'http://schema.org/ByBankTransferInAdvance',
  );

  /// IRI for schemahttp:ByInvoice
  ///
  /// Payment by invoice, typically after the goods were delivered, equivalent to <code>http://purl.org/goodrelations/v1#ByInvoice</code>.
  ///
  static const ByInvoice = IriTerm.prevalidated('http://schema.org/ByInvoice');

  /// IRI for schemahttp:CDFormat
  ///
  /// CDFormat.
  ///
  static const CDFormat = IriTerm.prevalidated('http://schema.org/CDFormat');

  /// IRI for schemahttp:COD
  ///
  /// Cash on Delivery (COD) payment, equivalent to <code>http://purl.org/goodrelations/v1#COD</code>.
  ///
  static const COD = IriTerm.prevalidated('http://schema.org/COD');

  /// IRI for schemahttp:CT
  ///
  /// X-ray computed tomography imaging.
  ///
  static const CT = IriTerm.prevalidated('http://schema.org/CT');

  /// IRI for schemahttp:Cardiovascular
  ///
  /// A specific branch of medical science that pertains to diagnosis and treatment of disorders of heart and vasculature.
  ///
  static const Cardiovascular = IriTerm.prevalidated(
    'http://schema.org/Cardiovascular',
  );

  /// IRI for schemahttp:CardiovascularExam
  ///
  /// Cardiovascular system assessment with clinical examination.
  ///
  static const CardiovascularExam = IriTerm.prevalidated(
    'http://schema.org/CardiovascularExam',
  );

  /// IRI for schemahttp:CaseSeries
  ///
  /// A case series (also known as a clinical series) is a medical research study that tracks patients with a known exposure given similar treatment or examines their medical records for exposure and outcome. A case series can be retrospective or prospective and usually involves a smaller number of patients than the more powerful case-control studies or randomized controlled trials. Case series may be consecutive or non-consecutive, depending on whether all cases presenting to the reporting authors over a period of time were included, or only a selection.
  ///
  static const CaseSeries = IriTerm.prevalidated(
    'http://schema.org/CaseSeries',
  );

  /// IRI for schemahttp:Cash
  ///
  /// Payment using cash, on premises, equivalent to <code>http://purl.org/goodrelations/v1#Cash</code>.
  ///
  static const Cash = IriTerm.prevalidated('http://schema.org/Cash');

  /// IRI for schemahttp:CassetteFormat
  ///
  /// CassetteFormat.
  ///
  static const CassetteFormat = IriTerm.prevalidated(
    'http://schema.org/CassetteFormat',
  );

  /// IRI for schemahttp:CausesHealthAspect
  ///
  /// Information about the causes and main actions that gave rise to the topic.
  ///
  static const CausesHealthAspect = IriTerm.prevalidated(
    'http://schema.org/CausesHealthAspect',
  );

  /// IRI for schemahttp:CertificationActive
  ///
  /// Specifies that a certification is active.
  ///
  static const CertificationActive = IriTerm.prevalidated(
    'http://schema.org/CertificationActive',
  );

  /// IRI for schemahttp:CertificationInactive
  ///
  /// Specifies that a certification is inactive (no longer in effect).
  ///
  static const CertificationInactive = IriTerm.prevalidated(
    'http://schema.org/CertificationInactive',
  );

  /// IRI for schemahttp:CharitableIncorporatedOrganization
  ///
  /// CharitableIncorporatedOrganization: Non-profit type referring to a Charitable Incorporated Organization (UK).
  ///
  static const CharitableIncorporatedOrganization = IriTerm.prevalidated(
    'http://schema.org/CharitableIncorporatedOrganization',
  );

  /// IRI for schemahttp:CheckInAdvance
  ///
  /// Payment in advance by sending a check, equivalent to <code>http://purl.org/goodrelations/v1#CheckInAdvance</code>.
  ///
  static const CheckInAdvance = IriTerm.prevalidated(
    'http://schema.org/CheckInAdvance',
  );

  /// IRI for schemahttp:Chiropractic
  ///
  /// A system of medicine focused on the relationship between the body's structure, mainly the spine, and its functioning.
  ///
  static const Chiropractic = IriTerm.prevalidated(
    'http://schema.org/Chiropractic',
  );

  /// IRI for schemahttp:CleaningFee
  ///
  /// Represents the cleaning fee part of the total price for an offered product, for example a vacation rental.
  ///
  static const CleaningFee = IriTerm.prevalidated(
    'http://schema.org/CleaningFee',
  );

  /// IRI for schemahttp:Clinician
  ///
  /// Medical clinicians, including practicing physicians and other medical professionals involved in clinical practice.
  ///
  static const Clinician = IriTerm.prevalidated('http://schema.org/Clinician');

  /// IRI for schemahttp:CoOp
  ///
  /// Play mode: CoOp. Co-operative games, where you play on the same team with friends.
  ///
  static const CoOp = IriTerm.prevalidated('http://schema.org/CoOp');

  /// IRI for schemahttp:CohortStudy
  ///
  /// Also known as a panel study. A cohort study is a form of longitudinal study used in medicine and social science. It is one type of study design and should be compared with a cross-sectional study.  A cohort is a group of people who share a common characteristic or experience within a defined period (e.g., are born, leave school, lose their job, are exposed to a drug or a vaccine, etc.). The comparison group may be the general population from which the cohort is drawn, or it may be another cohort of persons thought to have had little or no exposure to the substance under investigation, but otherwise similar. Alternatively, subgroups within the cohort may be compared with each other.
  ///
  static const CohortStudy = IriTerm.prevalidated(
    'http://schema.org/CohortStudy',
  );

  /// IRI for schemahttp:CommentPermission
  ///
  /// Permission to add comments to the document.
  ///
  static const CommentPermission = IriTerm.prevalidated(
    'http://schema.org/CommentPermission',
  );

  /// IRI for schemahttp:CommunityHealth
  ///
  /// A field of public health focusing on improving health characteristics of a defined population in relation with their geographical or environment areas.
  ///
  static const CommunityHealth = IriTerm.prevalidated(
    'http://schema.org/CommunityHealth',
  );

  /// IRI for schemahttp:CompilationAlbum
  ///
  /// CompilationAlbum.
  ///
  static const CompilationAlbum = IriTerm.prevalidated(
    'http://schema.org/CompilationAlbum',
  );

  /// IRI for schemahttp:Completed
  ///
  /// Completed.
  ///
  static const Completed = IriTerm.prevalidated('http://schema.org/Completed');

  /// IRI for schemahttp:CompletedActionStatus
  ///
  /// An action that has already taken place.
  ///
  static const CompletedActionStatus = IriTerm.prevalidated(
    'http://schema.org/CompletedActionStatus',
  );

  /// IRI for schemahttp:CompositeCaptureDigitalSource
  ///
  /// Content coded as '<a href="https://cv.iptc.org/newscodes/digitalsourcetype/compositeCapture">composite capture</a>' using the IPTC <a href="https://cv.iptc.org/newscodes/digitalsourcetype/">digital source type</a> vocabulary.
  ///
  static const CompositeCaptureDigitalSource = IriTerm.prevalidated(
    'http://schema.org/CompositeCaptureDigitalSource',
  );

  /// IRI for schemahttp:CompositeDigitalSource
  ///
  /// Content coded as '<a href="https://cv.iptc.org/newscodes/digitalsourcetype/algorithmicMedia">algorithmic media</a>' using the IPTC <a href="https://cv.iptc.org/newscodes/digitalsourcetype/">digital source type</a> vocabulary.
  ///
  static const CompositeDigitalSource = IriTerm.prevalidated(
    'http://schema.org/CompositeDigitalSource',
  );

  /// IRI for schemahttp:CompositeSyntheticDigitalSource
  ///
  /// Content coded as '<a href="https://cv.iptc.org/newscodes/digitalsourcetype/compositeSynthetic">composite synthetic</a>' using the IPTC <a href="https://cv.iptc.org/newscodes/digitalsourcetype/">digital source type</a> vocabulary.
  ///
  static const CompositeSyntheticDigitalSource = IriTerm.prevalidated(
    'http://schema.org/CompositeSyntheticDigitalSource',
  );

  /// IRI for schemahttp:CompositeWithTrainedAlgorithmicMediaDigitalSource
  ///
  /// Content coded as '<a href="https://cv.iptc.org/newscodes/digitalsourcetype/compositeWithTrainedAlgorithmicMedia">composite with trained algorithmic media</a>' using the IPTC <a href="https://cv.iptc.org/newscodes/digitalsourcetype/">digital source type</a> vocabulary.
  ///
  static const CompositeWithTrainedAlgorithmicMediaDigitalSource =
      IriTerm.prevalidated(
        'http://schema.org/CompositeWithTrainedAlgorithmicMediaDigitalSource',
      );

  /// IRI for schemahttp:ContagiousnessHealthAspect
  ///
  /// Content about contagion mechanisms and contagiousness information over the topic.
  ///
  static const ContagiousnessHealthAspect = IriTerm.prevalidated(
    'http://schema.org/ContagiousnessHealthAspect',
  );

  /// IRI for schemahttp:CrossSectional
  ///
  /// Studies carried out on pre-existing data (usually from 'snapshot' surveys), such as that collected by the Census Bureau. Sometimes called Prevalence Studies.
  ///
  static const CrossSectional = IriTerm.prevalidated(
    'http://schema.org/CrossSectional',
  );

  /// IRI for schemahttp:DJMixAlbum
  ///
  /// DJMixAlbum.
  ///
  static const DJMixAlbum = IriTerm.prevalidated(
    'http://schema.org/DJMixAlbum',
  );

  /// IRI for schemahttp:DVDFormat
  ///
  /// DVDFormat.
  ///
  static const DVDFormat = IriTerm.prevalidated('http://schema.org/DVDFormat');

  /// IRI for schemahttp:DamagedCondition
  ///
  /// Indicates that the item is damaged.
  ///
  static const DamagedCondition = IriTerm.prevalidated(
    'http://schema.org/DamagedCondition',
  );

  /// IRI for schemahttp:DangerousGoodConsideration
  ///
  /// The item is dangerous and requires careful handling and/or special training of the user. See also the [UN Model Classification](https://unece.org/DAM/trans/danger/publi/unrec/rev17/English/02EREv17_Part2.pdf) defining the 9 classes of dangerous goods such as explosives, gases, flammables, and more.
  ///
  static const DangerousGoodConsideration = IriTerm.prevalidated(
    'http://schema.org/DangerousGoodConsideration',
  );

  /// IRI for schemahttp:DataDrivenMediaDigitalSource
  ///
  /// Content coded as '<a href="https://cv.iptc.org/newscodes/digitalsourcetype/dataDrivenMedia">data driven media</a>' using the IPTC <a href="https://cv.iptc.org/newscodes/digitalsourcetype/">digital source type</a> vocabulary.
  ///
  static const DataDrivenMediaDigitalSource = IriTerm.prevalidated(
    'http://schema.org/DataDrivenMediaDigitalSource',
  );

  /// IRI for schemahttp:DecontextualizedContent
  ///
  /// Content coded 'missing context' in a {[MediaReview]}, considered in the context of how it was published or shared.
  ///
  /// For a {[VideoObject]} to be 'missing context': Presenting unaltered video in an inaccurate manner that misrepresents the footage. For example, using incorrect dates or locations, altering the transcript or sharing brief clips from a longer video to mislead viewers. (A video rated 'original' can also be missing context.)
  ///
  /// For an {[ImageObject]} to be 'missing context': Presenting unaltered images in an inaccurate manner to misrepresent the image and mislead the viewer. For example, a common tactic is using an unaltered image but saying it came from a different time or place. (An image rated 'original' can also be missing context.)
  ///
  /// For an {[ImageObject]} with embedded text to be 'missing context': An unaltered image presented in an inaccurate manner to misrepresent the image and mislead the viewer. For example, a common tactic is using an unaltered image but saying it came from a different time or place. (An 'original' image with inaccurate text would generally fall in this category.)
  ///
  /// For an {[AudioObject]} to be 'missing context': Unaltered audio presented in an inaccurate manner that misrepresents it. For example, using incorrect dates or locations, or sharing brief clips from a longer recording to mislead viewers. (Audio rated ‚Äúoriginal‚Äù can also be missing context.)
  ///
  ///
  static const DecontextualizedContent = IriTerm.prevalidated(
    'http://schema.org/DecontextualizedContent',
  );

  /// IRI for schemahttp:DefinitiveLegalValue
  ///
  /// Indicates a document for which the text is conclusively what the law says and is legally binding. (e.g. The digitally signed version of an Official Journal.)
  /// Something "Definitive" is considered to be also {[AuthoritativeLegalValue]}.
  ///
  static const DefinitiveLegalValue = IriTerm.prevalidated(
    'http://schema.org/DefinitiveLegalValue',
  );

  /// IRI for schemahttp:DemoAlbum
  ///
  /// DemoAlbum.
  ///
  static const DemoAlbum = IriTerm.prevalidated('http://schema.org/DemoAlbum');

  /// IRI for schemahttp:DemoGameAvailability
  ///
  /// Indicates demo game availability, i.e. a somehow limited demonstration of the full game.
  ///
  static const DemoGameAvailability = IriTerm.prevalidated(
    'http://schema.org/DemoGameAvailability',
  );

  /// IRI for schemahttp:Dentistry
  ///
  /// A branch of medicine that is involved in the dental care.
  ///
  static const Dentistry = IriTerm.prevalidated('http://schema.org/Dentistry');

  /// IRI for schemahttp:Dermatologic
  ///
  /// Something relating to or practicing dermatology.
  ///
  static const Dermatologic = IriTerm.prevalidated(
    'http://schema.org/Dermatologic',
  );

  /// IRI for schemahttp:DesktopWebPlatform
  ///
  /// Represents the broad notion of 'desktop' browsers as a Web Platform.
  ///
  static const DesktopWebPlatform = IriTerm.prevalidated(
    'http://schema.org/DesktopWebPlatform',
  );

  /// IRI for schemahttp:DiabeticDiet
  ///
  /// A diet appropriate for people with diabetes.
  ///
  static const DiabeticDiet = IriTerm.prevalidated(
    'http://schema.org/DiabeticDiet',
  );

  /// IRI for schemahttp:Diagnostic
  ///
  /// A medical device used for diagnostic purposes.
  ///
  static const Diagnostic = IriTerm.prevalidated(
    'http://schema.org/Diagnostic',
  );

  /// IRI for schemahttp:DietNutrition
  ///
  /// Dietetics and nutrition as a medical specialty.
  ///
  static const DietNutrition = IriTerm.prevalidated(
    'http://schema.org/DietNutrition',
  );

  /// IRI for schemahttp:DigitalArtDigitalSource
  ///
  /// Content coded as '<a href="https://cv.iptc.org/newscodes/digitalsourcetype/digitalArt">digital art</a>' using the IPTC <a href="https://cv.iptc.org/newscodes/digitalsourcetype/">digital source type</a> vocabulary.
  ///
  static const DigitalArtDigitalSource = IriTerm.prevalidated(
    'http://schema.org/DigitalArtDigitalSource',
  );

  /// IRI for schemahttp:DigitalAudioTapeFormat
  ///
  /// DigitalAudioTapeFormat.
  ///
  static const DigitalAudioTapeFormat = IriTerm.prevalidated(
    'http://schema.org/DigitalAudioTapeFormat',
  );

  /// IRI for schemahttp:DigitalCaptureDigitalSource
  ///
  /// Content coded as '<a href="https://cv.iptc.org/newscodes/digitalsourcetype/digitalCapture">digital capture</a></a>' using the IPTC <a href="https://cv.iptc.org/newscodes/digitalsourcetype/">digital source type</a> vocabulary.
  ///
  static const DigitalCaptureDigitalSource = IriTerm.prevalidated(
    'http://schema.org/DigitalCaptureDigitalSource',
  );

  /// IRI for schemahttp:DigitalFormat
  ///
  /// DigitalFormat.
  ///
  static const DigitalFormat = IriTerm.prevalidated(
    'http://schema.org/DigitalFormat',
  );

  /// IRI for schemahttp:DirectDebit
  ///
  /// Payment in advance by direct debit from the bank, equivalent to <code>http://purl.org/goodrelations/v1#DirectDebit</code>.
  ///
  static const DirectDebit = IriTerm.prevalidated(
    'http://schema.org/DirectDebit',
  );

  /// IRI for schemahttp:DisabilitySupport
  ///
  /// DisabilitySupport: this is a benefit for disability support.
  ///
  static const DisabilitySupport = IriTerm.prevalidated(
    'http://schema.org/DisabilitySupport',
  );

  /// IRI for schemahttp:Discontinued
  ///
  /// Indicates that the item has been discontinued.
  ///
  static const Discontinued = IriTerm.prevalidated(
    'http://schema.org/Discontinued',
  );

  /// IRI for schemahttp:DistanceFee
  ///
  /// Represents the distance fee (e.g., price per km or mile) part of the total price for an offered product, for example a car rental.
  ///
  static const DistanceFee = IriTerm.prevalidated(
    'http://schema.org/DistanceFee',
  );

  /// IRI for schemahttp:DoubleBlindedTrial
  ///
  /// A trial design in which neither the researcher nor the patient knows the details of the treatment the patient was randomly assigned to.
  ///
  static const DoubleBlindedTrial = IriTerm.prevalidated(
    'http://schema.org/DoubleBlindedTrial',
  );

  /// IRI for schemahttp:Downpayment
  ///
  /// Represents the downpayment (up-front payment) price component of the total price for an offered product that has additional installment payments.
  ///
  static const Downpayment = IriTerm.prevalidated(
    'http://schema.org/Downpayment',
  );

  /// IRI for schemahttp:DrivingSchoolVehicleUsage
  ///
  /// Indicates the usage of the vehicle for driving school.
  ///
  static const DrivingSchoolVehicleUsage = IriTerm.prevalidated(
    'http://schema.org/DrivingSchoolVehicleUsage',
  );

  /// IRI for schemahttp:EBook
  ///
  /// Book format: Ebook.
  ///
  static const EBook = IriTerm.prevalidated('http://schema.org/EBook');

  /// IRI for schemahttp:EPRelease
  ///
  /// EPRelease.
  ///
  static const EPRelease = IriTerm.prevalidated('http://schema.org/EPRelease');

  /// IRI for schemahttp:EUEnergyEfficiencyCategoryA
  ///
  /// Represents EU Energy Efficiency Class A as defined in EU energy labeling regulations.
  ///
  static const EUEnergyEfficiencyCategoryA = IriTerm.prevalidated(
    'http://schema.org/EUEnergyEfficiencyCategoryA',
  );

  /// IRI for schemahttp:EUEnergyEfficiencyCategoryA1Plus
  ///
  /// Represents EU Energy Efficiency Class A+ as defined in EU energy labeling regulations.
  ///
  static const EUEnergyEfficiencyCategoryA1Plus = IriTerm.prevalidated(
    'http://schema.org/EUEnergyEfficiencyCategoryA1Plus',
  );

  /// IRI for schemahttp:EUEnergyEfficiencyCategoryA2Plus
  ///
  /// Represents EU Energy Efficiency Class A++ as defined in EU energy labeling regulations.
  ///
  static const EUEnergyEfficiencyCategoryA2Plus = IriTerm.prevalidated(
    'http://schema.org/EUEnergyEfficiencyCategoryA2Plus',
  );

  /// IRI for schemahttp:EUEnergyEfficiencyCategoryA3Plus
  ///
  /// Represents EU Energy Efficiency Class A+++ as defined in EU energy labeling regulations.
  ///
  static const EUEnergyEfficiencyCategoryA3Plus = IriTerm.prevalidated(
    'http://schema.org/EUEnergyEfficiencyCategoryA3Plus',
  );

  /// IRI for schemahttp:EUEnergyEfficiencyCategoryB
  ///
  /// Represents EU Energy Efficiency Class B as defined in EU energy labeling regulations.
  ///
  static const EUEnergyEfficiencyCategoryB = IriTerm.prevalidated(
    'http://schema.org/EUEnergyEfficiencyCategoryB',
  );

  /// IRI for schemahttp:EUEnergyEfficiencyCategoryC
  ///
  /// Represents EU Energy Efficiency Class C as defined in EU energy labeling regulations.
  ///
  static const EUEnergyEfficiencyCategoryC = IriTerm.prevalidated(
    'http://schema.org/EUEnergyEfficiencyCategoryC',
  );

  /// IRI for schemahttp:EUEnergyEfficiencyCategoryD
  ///
  /// Represents EU Energy Efficiency Class D as defined in EU energy labeling regulations.
  ///
  static const EUEnergyEfficiencyCategoryD = IriTerm.prevalidated(
    'http://schema.org/EUEnergyEfficiencyCategoryD',
  );

  /// IRI for schemahttp:EUEnergyEfficiencyCategoryE
  ///
  /// Represents EU Energy Efficiency Class E as defined in EU energy labeling regulations.
  ///
  static const EUEnergyEfficiencyCategoryE = IriTerm.prevalidated(
    'http://schema.org/EUEnergyEfficiencyCategoryE',
  );

  /// IRI for schemahttp:EUEnergyEfficiencyCategoryF
  ///
  /// Represents EU Energy Efficiency Class F as defined in EU energy labeling regulations.
  ///
  static const EUEnergyEfficiencyCategoryF = IriTerm.prevalidated(
    'http://schema.org/EUEnergyEfficiencyCategoryF',
  );

  /// IRI for schemahttp:EUEnergyEfficiencyCategoryG
  ///
  /// Represents EU Energy Efficiency Class G as defined in EU energy labeling regulations.
  ///
  static const EUEnergyEfficiencyCategoryG = IriTerm.prevalidated(
    'http://schema.org/EUEnergyEfficiencyCategoryG',
  );

  /// IRI for schemahttp:Ear
  ///
  /// Ear function assessment with clinical examination.
  ///
  static const Ear = IriTerm.prevalidated('http://schema.org/Ear');

  /// IRI for schemahttp:EditedOrCroppedContent
  ///
  /// Content coded 'edited or cropped content' in a {[MediaReview]}, considered in the context of how it was published or shared.
  ///
  /// For a {[VideoObject]} to be 'edited or cropped content': The video has been edited or rearranged. This category applies to time edits, including editing multiple videos together to alter the story being told or editing out large portions from a video.
  ///
  /// For an {[ImageObject]} to be 'edited or cropped content': Presenting a part of an image from a larger whole to mislead the viewer.
  ///
  /// For an {[ImageObject]} with embedded text to be 'edited or cropped content': Presenting a part of an image from a larger whole to mislead the viewer.
  ///
  /// For an {[AudioObject]} to be 'edited or cropped content': The audio has been edited or rearranged. This category applies to time edits, including editing multiple audio clips together to alter the story being told or editing out large portions from the recording.
  ///
  ///
  static const EditedOrCroppedContent = IriTerm.prevalidated(
    'http://schema.org/EditedOrCroppedContent',
  );

  /// IRI for schemahttp:EffectivenessHealthAspect
  ///
  /// Content about the effectiveness-related aspects of a health topic.
  ///
  static const EffectivenessHealthAspect = IriTerm.prevalidated(
    'http://schema.org/EffectivenessHealthAspect',
  );

  /// IRI for schemahttp:Emergency
  ///
  /// A specific branch of medical science that deals with the evaluation and initial treatment of medical conditions caused by trauma or sudden illness.
  ///
  static const Emergency = IriTerm.prevalidated('http://schema.org/Emergency');

  /// IRI for schemahttp:Endocrine
  ///
  /// A specific branch of medical science that pertains to diagnosis and treatment of disorders of endocrine glands and their secretions.
  ///
  static const Endocrine = IriTerm.prevalidated('http://schema.org/Endocrine');

  /// IRI for schemahttp:EnergyStarCertified
  ///
  /// Represents EnergyStar certification.
  ///
  static const EnergyStarCertified = IriTerm.prevalidated(
    'http://schema.org/EnergyStarCertified',
  );

  /// IRI for schemahttp:EnrollingByInvitation
  ///
  /// Enrolling participants by invitation only.
  ///
  static const EnrollingByInvitation = IriTerm.prevalidated(
    'http://schema.org/EnrollingByInvitation',
  );

  /// IRI for schemahttp:EventCancelled
  ///
  /// The event has been cancelled. If the event has multiple startDate values, all are assumed to be cancelled. Either startDate or previousStartDate may be used to specify the event's cancelled date(s).
  ///
  static const EventCancelled = IriTerm.prevalidated(
    'http://schema.org/EventCancelled',
  );

  /// IRI for schemahttp:EventMovedOnline
  ///
  /// Indicates that the event was changed to allow online participation. See {[eventAttendanceMode]} for specifics of whether it is now fully or partially online.
  ///
  static const EventMovedOnline = IriTerm.prevalidated(
    'http://schema.org/EventMovedOnline',
  );

  /// IRI for schemahttp:EventPostponed
  ///
  /// The event has been postponed and no new date has been set. The event's previousStartDate should be set.
  ///
  static const EventPostponed = IriTerm.prevalidated(
    'http://schema.org/EventPostponed',
  );

  /// IRI for schemahttp:EventRescheduled
  ///
  /// The event has been rescheduled. The event's previousStartDate should be set to the old date and the startDate should be set to the event's new date. (If the event has been rescheduled multiple times, the previousStartDate property may be repeated.)
  ///
  static const EventRescheduled = IriTerm.prevalidated(
    'http://schema.org/EventRescheduled',
  );

  /// IRI for schemahttp:EventScheduled
  ///
  /// The event is taking place or has taken place on the startDate as scheduled. Use of this value is optional, as it is assumed by default.
  ///
  static const EventScheduled = IriTerm.prevalidated(
    'http://schema.org/EventScheduled',
  );

  /// IRI for schemahttp:EvidenceLevelA
  ///
  /// Data derived from multiple randomized clinical trials or meta-analyses.
  ///
  static const EvidenceLevelA = IriTerm.prevalidated(
    'http://schema.org/EvidenceLevelA',
  );

  /// IRI for schemahttp:EvidenceLevelB
  ///
  /// Data derived from a single randomized trial, or nonrandomized studies.
  ///
  static const EvidenceLevelB = IriTerm.prevalidated(
    'http://schema.org/EvidenceLevelB',
  );

  /// IRI for schemahttp:EvidenceLevelC
  ///
  /// Only consensus opinion of experts, case studies, or standard-of-care.
  ///
  static const EvidenceLevelC = IriTerm.prevalidated(
    'http://schema.org/EvidenceLevelC',
  );

  /// IRI for schemahttp:ExampleMeasurementMethodEnum
  ///
  /// An example {[MeasurementMethodEnum]} (to remove when real enums are added).
  ///
  static const ExampleMeasurementMethodEnum = IriTerm.prevalidated(
    'http://schema.org/ExampleMeasurementMethodEnum',
  );

  /// IRI for schemahttp:ExchangeRefund
  ///
  /// Specifies that a refund can be done as an exchange for the same product.
  ///
  static const ExchangeRefund = IriTerm.prevalidated(
    'http://schema.org/ExchangeRefund',
  );

  /// IRI for schemahttp:Eye
  ///
  /// Eye or ophthalmological function assessment with clinical examination.
  ///
  static const Eye = IriTerm.prevalidated('http://schema.org/Eye');

  /// IRI for schemahttp:FDAcategoryA
  ///
  /// A designation by the US FDA signifying that adequate and well-controlled studies have failed to demonstrate a risk to the fetus in the first trimester of pregnancy (and there is no evidence of risk in later trimesters).
  ///
  static const FDAcategoryA = IriTerm.prevalidated(
    'http://schema.org/FDAcategoryA',
  );

  /// IRI for schemahttp:FDAcategoryB
  ///
  /// A designation by the US FDA signifying that animal reproduction studies have failed to demonstrate a risk to the fetus and there are no adequate and well-controlled studies in pregnant women.
  ///
  static const FDAcategoryB = IriTerm.prevalidated(
    'http://schema.org/FDAcategoryB',
  );

  /// IRI for schemahttp:FDAcategoryC
  ///
  /// A designation by the US FDA signifying that animal reproduction studies have shown an adverse effect on the fetus and there are no adequate and well-controlled studies in humans, but potential benefits may warrant use of the drug in pregnant women despite potential risks.
  ///
  static const FDAcategoryC = IriTerm.prevalidated(
    'http://schema.org/FDAcategoryC',
  );

  /// IRI for schemahttp:FDAcategoryD
  ///
  /// A designation by the US FDA signifying that there is positive evidence of human fetal risk based on adverse reaction data from investigational or marketing experience or studies in humans, but potential benefits may warrant use of the drug in pregnant women despite potential risks.
  ///
  static const FDAcategoryD = IriTerm.prevalidated(
    'http://schema.org/FDAcategoryD',
  );

  /// IRI for schemahttp:FDAcategoryX
  ///
  /// A designation by the US FDA signifying that studies in animals or humans have demonstrated fetal abnormalities and/or there is positive evidence of human fetal risk based on adverse reaction data from investigational or marketing experience, and the risks involved in use of the drug in pregnant women clearly outweigh potential benefits.
  ///
  static const FDAcategoryX = IriTerm.prevalidated(
    'http://schema.org/FDAcategoryX',
  );

  /// IRI for schemahttp:FDAnotEvaluated
  ///
  /// A designation that the drug in question has not been assigned a pregnancy category designation by the US FDA.
  ///
  static const FDAnotEvaluated = IriTerm.prevalidated(
    'http://schema.org/FDAnotEvaluated',
  );

  /// IRI for schemahttp:FailedActionStatus
  ///
  /// An action that failed to complete. The action's error property and the HTTP return code contain more information about the failure.
  ///
  static const FailedActionStatus = IriTerm.prevalidated(
    'http://schema.org/FailedActionStatus',
  );

  /// IRI for schemahttp:False
  ///
  /// The boolean value false.
  ///
  static const False = IriTerm.prevalidated('http://schema.org/False');

  /// IRI for schemahttp:Female
  ///
  /// The female gender.
  ///
  static const Female = IriTerm.prevalidated('http://schema.org/Female');

  /// IRI for schemahttp:Flexibility
  ///
  /// Physical activity that is engaged in to improve joint and muscle flexibility.
  ///
  static const Flexibility = IriTerm.prevalidated(
    'http://schema.org/Flexibility',
  );

  /// IRI for schemahttp:FourWheelDriveConfiguration
  ///
  /// Four-wheel drive is a transmission layout where the engine primarily drives two wheels with a part-time four-wheel drive capability.
  ///
  static const FourWheelDriveConfiguration = IriTerm.prevalidated(
    'http://schema.org/FourWheelDriveConfiguration',
  );

  /// IRI for schemahttp:FreeReturn
  ///
  /// Specifies that product returns are free of charge for the customer.
  ///
  static const FreeReturn = IriTerm.prevalidated(
    'http://schema.org/FreeReturn',
  );

  /// IRI for schemahttp:Friday
  ///
  /// The day of the week between Thursday and Saturday.
  ///
  static const Friday = IriTerm.prevalidated('http://schema.org/Friday');

  /// IRI for schemahttp:FrontWheelDriveConfiguration
  ///
  /// Front-wheel drive is a transmission layout where the engine drives the front wheels.
  ///
  static const FrontWheelDriveConfiguration = IriTerm.prevalidated(
    'http://schema.org/FrontWheelDriveConfiguration',
  );

  /// IRI for schemahttp:FulfillmentTypeCollectionPoint
  ///
  /// Fulfillment to a collection point location.
  ///
  static const FulfillmentTypeCollectionPoint = IriTerm.prevalidated(
    'http://schema.org/FulfillmentTypeCollectionPoint',
  );

  /// IRI for schemahttp:FulfillmentTypeDelivery
  ///
  /// Fulfillment to a customer selected address.
  ///
  static const FulfillmentTypeDelivery = IriTerm.prevalidated(
    'http://schema.org/FulfillmentTypeDelivery',
  );

  /// IRI for schemahttp:FulfillmentTypePickupDropoff
  ///
  /// Fulfillment through pick-up drop-off locations.
  ///
  static const FulfillmentTypePickupDropoff = IriTerm.prevalidated(
    'http://schema.org/FulfillmentTypePickupDropoff',
  );

  /// IRI for schemahttp:FulfillmentTypePickupInStore
  ///
  /// Fulfillment through pick-up in a store.
  ///
  static const FulfillmentTypePickupInStore = IriTerm.prevalidated(
    'http://schema.org/FulfillmentTypePickupInStore',
  );

  /// IRI for schemahttp:FulfillmentTypeScheduledDelivery
  ///
  /// Fulfillment to a customer selected address after scheduling with the customer.
  ///
  static const FulfillmentTypeScheduledDelivery = IriTerm.prevalidated(
    'http://schema.org/FulfillmentTypeScheduledDelivery',
  );

  /// IRI for schemahttp:FullGameAvailability
  ///
  /// Indicates full game availability.
  ///
  static const FullGameAvailability = IriTerm.prevalidated(
    'http://schema.org/FullGameAvailability',
  );

  /// IRI for schemahttp:FullRefund
  ///
  /// Specifies that a refund can be done in the full amount the customer paid for the product.
  ///
  static const FullRefund = IriTerm.prevalidated(
    'http://schema.org/FullRefund',
  );

  /// IRI for schemahttp:Fungus
  ///
  /// Pathogenic fungus.
  ///
  static const Fungus = IriTerm.prevalidated('http://schema.org/Fungus');

  /// IRI for schemahttp:Gastroenterologic
  ///
  /// A specific branch of medical science that pertains to diagnosis and treatment of disorders of digestive system.
  ///
  static const Gastroenterologic = IriTerm.prevalidated(
    'http://schema.org/Gastroenterologic',
  );

  /// IRI for schemahttp:GenericWebPlatform
  ///
  /// Represents the generic notion of the Web Platform. More specific codes include {[MobileWebPlatform]} and {[DesktopWebPlatform]}, as an incomplete list.
  ///
  static const GenericWebPlatform = IriTerm.prevalidated(
    'http://schema.org/GenericWebPlatform',
  );

  /// IRI for schemahttp:Genetic
  ///
  /// A specific branch of medical science that pertains to hereditary transmission and the variation of inherited characteristics and disorders.
  ///
  static const Genetic = IriTerm.prevalidated('http://schema.org/Genetic');

  /// IRI for schemahttp:Genitourinary
  ///
  /// Genitourinary system function assessment with clinical examination.
  ///
  static const Genitourinary = IriTerm.prevalidated(
    'http://schema.org/Genitourinary',
  );

  /// IRI for schemahttp:Geriatric
  ///
  /// A specific branch of medical science that is concerned with the diagnosis and treatment of diseases, debilities and provision of care to the aged.
  ///
  static const Geriatric = IriTerm.prevalidated('http://schema.org/Geriatric');

  /// IRI for schemahttp:GettingAccessHealthAspect
  ///
  /// Content that discusses practical and policy aspects for getting access to specific kinds of healthcare (e.g. distribution mechanisms for vaccines).
  ///
  static const GettingAccessHealthAspect = IriTerm.prevalidated(
    'http://schema.org/GettingAccessHealthAspect',
  );

  /// IRI for schemahttp:GlutenFreeDiet
  ///
  /// A diet exclusive of gluten.
  ///
  static const GlutenFreeDiet = IriTerm.prevalidated(
    'http://schema.org/GlutenFreeDiet',
  );

  /// IRI for schemahttp:GraphicNovel
  ///
  /// Book format: GraphicNovel. May represent a bound collection of ComicIssue instances.
  ///
  static const GraphicNovel = IriTerm.prevalidated(
    'http://schema.org/GraphicNovel',
  );

  /// IRI for schemahttp:GroupBoardingPolicy
  ///
  /// The airline boards by groups based on check-in time, priority, etc.
  ///
  static const GroupBoardingPolicy = IriTerm.prevalidated(
    'http://schema.org/GroupBoardingPolicy',
  );

  /// IRI for schemahttp:Gynecologic
  ///
  /// A specific branch of medical science that pertains to the health care of women, particularly in the diagnosis and treatment of disorders affecting the female reproductive system.
  ///
  static const Gynecologic = IriTerm.prevalidated(
    'http://schema.org/Gynecologic',
  );

  /// IRI for schemahttp:HalalDiet
  ///
  /// A diet conforming to Islamic dietary practices.
  ///
  static const HalalDiet = IriTerm.prevalidated('http://schema.org/HalalDiet');

  /// IRI for schemahttp:Hardcover
  ///
  /// Book format: Hardcover.
  ///
  static const Hardcover = IriTerm.prevalidated('http://schema.org/Hardcover');

  /// IRI for schemahttp:Head
  ///
  /// Head assessment with clinical examination.
  ///
  static const Head = IriTerm.prevalidated('http://schema.org/Head');

  /// IRI for schemahttp:HealthCare
  ///
  /// HealthCare: this is a benefit for health care.
  ///
  static const HealthCare = IriTerm.prevalidated(
    'http://schema.org/HealthCare',
  );

  /// IRI for schemahttp:HealthcareConsideration
  ///
  /// Item is a pharmaceutical (e.g., a prescription or OTC drug) or a restricted medical device.
  ///
  static const HealthcareConsideration = IriTerm.prevalidated(
    'http://schema.org/HealthcareConsideration',
  );

  /// IRI for schemahttp:HearingImpairedSupported
  ///
  /// Uses devices to support users with hearing impairments.
  ///
  static const HearingImpairedSupported = IriTerm.prevalidated(
    'http://schema.org/HearingImpairedSupported',
  );

  /// IRI for schemahttp:Hematologic
  ///
  /// A specific branch of medical science that pertains to diagnosis and treatment of disorders of blood and blood producing organs.
  ///
  static const Hematologic = IriTerm.prevalidated(
    'http://schema.org/Hematologic',
  );

  /// IRI for schemahttp:HinduDiet
  ///
  /// A diet conforming to Hindu dietary practices, in particular, beef-free.
  ///
  static const HinduDiet = IriTerm.prevalidated('http://schema.org/HinduDiet');

  /// IRI for schemahttp:Homeopathic
  ///
  /// A system of medicine based on the principle that a disease can be cured by a substance that produces similar symptoms in healthy people.
  ///
  static const Homeopathic = IriTerm.prevalidated(
    'http://schema.org/Homeopathic',
  );

  /// IRI for schemahttp:HowItWorksHealthAspect
  ///
  /// Content that discusses and explains how a particular health-related topic works, e.g. in terms of mechanisms and underlying science.
  ///
  static const HowItWorksHealthAspect = IriTerm.prevalidated(
    'http://schema.org/HowItWorksHealthAspect',
  );

  /// IRI for schemahttp:HowOrWhereHealthAspect
  ///
  /// Information about how or where to find a topic. Also may contain location data that can be used for where to look for help if the topic is observed.
  ///
  static const HowOrWhereHealthAspect = IriTerm.prevalidated(
    'http://schema.org/HowOrWhereHealthAspect',
  );

  /// IRI for schemahttp:IOSPlatform
  ///
  /// Represents the broad notion of iOS-based operating systems.
  ///
  static const IOSPlatform = IriTerm.prevalidated(
    'http://schema.org/IOSPlatform',
  );

  /// IRI for schemahttp:InForce
  ///
  /// Indicates that a legislation is in force.
  ///
  static const InForce = IriTerm.prevalidated('http://schema.org/InForce');

  /// IRI for schemahttp:InStock
  ///
  /// Indicates that the item is in stock.
  ///
  static const InStock = IriTerm.prevalidated('http://schema.org/InStock');

  /// IRI for schemahttp:InStoreOnly
  ///
  /// Indicates that the item is available only at physical locations.
  ///
  static const InStoreOnly = IriTerm.prevalidated(
    'http://schema.org/InStoreOnly',
  );

  /// IRI for schemahttp:InStorePrepay
  ///
  /// Payment in advance in some form of shop or kiosk for goods purchased online.
  ///
  static const InStorePrepay = IriTerm.prevalidated(
    'http://schema.org/InStorePrepay',
  );

  /// IRI for schemahttp:IncentiveQualifiedExpenseTypeGoodsOnly
  ///
  /// This incentive applies to goods only.
  ///
  static const IncentiveQualifiedExpenseTypeGoodsOnly = IriTerm.prevalidated(
    'http://schema.org/IncentiveQualifiedExpenseTypeGoodsOnly',
  );

  /// IRI for schemahttp:IncentiveQualifiedExpenseTypeGoodsOrServices
  ///
  /// This incentive can apply to either goods or services (or both).
  ///
  static const IncentiveQualifiedExpenseTypeGoodsOrServices =
      IriTerm.prevalidated(
        'http://schema.org/IncentiveQualifiedExpenseTypeGoodsOrServices',
      );

  /// IRI for schemahttp:IncentiveQualifiedExpenseTypeServicesOnly
  ///
  /// This incentive applies to services only.
  ///
  static const IncentiveQualifiedExpenseTypeServicesOnly = IriTerm.prevalidated(
    'http://schema.org/IncentiveQualifiedExpenseTypeServicesOnly',
  );

  /// IRI for schemahttp:IncentiveQualifiedExpenseTypeUtilityBill
  ///
  /// This incentive applies to utility bills.
  ///
  static const IncentiveQualifiedExpenseTypeUtilityBill = IriTerm.prevalidated(
    'http://schema.org/IncentiveQualifiedExpenseTypeUtilityBill',
  );

  /// IRI for schemahttp:IncentiveStatusActive
  ///
  /// This incentive is currently active.
  ///
  static const IncentiveStatusActive = IriTerm.prevalidated(
    'http://schema.org/IncentiveStatusActive',
  );

  /// IRI for schemahttp:IncentiveStatusInDevelopment
  ///
  /// This incentive is currently being developed, and may become active/retired in the future.
  ///
  static const IncentiveStatusInDevelopment = IriTerm.prevalidated(
    'http://schema.org/IncentiveStatusInDevelopment',
  );

  /// IRI for schemahttp:IncentiveStatusOnHold
  ///
  /// This incentive is currently active, but may not be accepting new applicants (e.g. max number of redemptions reached for a year)
  ///
  static const IncentiveStatusOnHold = IriTerm.prevalidated(
    'http://schema.org/IncentiveStatusOnHold',
  );

  /// IRI for schemahttp:IncentiveStatusRetired
  ///
  /// This incentive is not longer available.
  ///
  static const IncentiveStatusRetired = IriTerm.prevalidated(
    'http://schema.org/IncentiveStatusRetired',
  );

  /// IRI for schemahttp:IncentiveTypeLoan
  ///
  /// An incentive where the recipient can receive additional funding for the purchase/lease of the good/service, which must be paid back.
  ///
  static const IncentiveTypeLoan = IriTerm.prevalidated(
    'http://schema.org/IncentiveTypeLoan',
  );

  /// IRI for schemahttp:IncentiveTypeRebateOrSubsidy
  ///
  /// An incentive that reduces the purchase/lease cost of the good/service in question.
  ///
  static const IncentiveTypeRebateOrSubsidy = IriTerm.prevalidated(
    'http://schema.org/IncentiveTypeRebateOrSubsidy',
  );

  /// IRI for schemahttp:IncentiveTypeTaxCredit
  ///
  /// An incentive that directly reduces the amount of tax owed by the recipient.
  ///
  static const IncentiveTypeTaxCredit = IriTerm.prevalidated(
    'http://schema.org/IncentiveTypeTaxCredit',
  );

  /// IRI for schemahttp:IncentiveTypeTaxDeduction
  ///
  /// An incentive that reduces the recipient's amount of taxable income.
  ///
  static const IncentiveTypeTaxDeduction = IriTerm.prevalidated(
    'http://schema.org/IncentiveTypeTaxDeduction',
  );

  /// IRI for schemahttp:IncentiveTypeTaxWaiver
  ///
  /// An incentive that reduces/exempts the recipient from taxation applicable to the incentivized good/service (e.g. luxury taxes, registration taxes, circulation tax).
  ///
  static const IncentiveTypeTaxWaiver = IriTerm.prevalidated(
    'http://schema.org/IncentiveTypeTaxWaiver',
  );

  /// IRI for schemahttp:Infectious
  ///
  /// Something in medical science that pertains to infectious diseases, i.e. caused by bacterial, viral, fungal or parasitic infections.
  ///
  static const Infectious = IriTerm.prevalidated(
    'http://schema.org/Infectious',
  );

  /// IRI for schemahttp:IngredientsHealthAspect
  ///
  /// Content discussing ingredients-related aspects of a health topic.
  ///
  static const IngredientsHealthAspect = IriTerm.prevalidated(
    'http://schema.org/IngredientsHealthAspect',
  );

  /// IRI for schemahttp:Installment
  ///
  /// Represents the installment pricing component of the total price for an offered product.
  ///
  static const Installment = IriTerm.prevalidated(
    'http://schema.org/Installment',
  );

  /// IRI for schemahttp:InternationalTrial
  ///
  /// An international trial.
  ///
  static const InternationalTrial = IriTerm.prevalidated(
    'http://schema.org/InternationalTrial',
  );

  /// IRI for schemahttp:InvoicePrice
  ///
  /// Represents the invoice price of an offered product.
  ///
  static const InvoicePrice = IriTerm.prevalidated(
    'http://schema.org/InvoicePrice',
  );

  /// IRI for schemahttp:ItemListOrderAscending
  ///
  /// An ItemList ordered with lower values listed first.
  ///
  static const ItemListOrderAscending = IriTerm.prevalidated(
    'http://schema.org/ItemListOrderAscending',
  );

  /// IRI for schemahttp:ItemListOrderDescending
  ///
  /// An ItemList ordered with higher values listed first.
  ///
  static const ItemListOrderDescending = IriTerm.prevalidated(
    'http://schema.org/ItemListOrderDescending',
  );

  /// IRI for schemahttp:ItemListUnordered
  ///
  /// An ItemList ordered with no explicit order.
  ///
  static const ItemListUnordered = IriTerm.prevalidated(
    'http://schema.org/ItemListUnordered',
  );

  /// IRI for schemahttp:KeepProduct
  ///
  /// Specifies that the consumer can keep the product, even when receiving a refund or store credit.
  ///
  static const KeepProduct = IriTerm.prevalidated(
    'http://schema.org/KeepProduct',
  );

  /// IRI for schemahttp:KosherDiet
  ///
  /// A diet conforming to Jewish dietary practices.
  ///
  static const KosherDiet = IriTerm.prevalidated(
    'http://schema.org/KosherDiet',
  );

  /// IRI for schemahttp:LaboratoryScience
  ///
  /// A medical science pertaining to chemical, hematological, immunologic, microscopic, or bacteriological diagnostic analyses or research.
  ///
  static const LaboratoryScience = IriTerm.prevalidated(
    'http://schema.org/LaboratoryScience',
  );

  /// IRI for schemahttp:LaserDiscFormat
  ///
  /// LaserDiscFormat.
  ///
  static const LaserDiscFormat = IriTerm.prevalidated(
    'http://schema.org/LaserDiscFormat',
  );

  /// IRI for schemahttp:LeftHandDriving
  ///
  /// The steering position is on the left side of the vehicle (viewed from the main direction of driving).
  ///
  static const LeftHandDriving = IriTerm.prevalidated(
    'http://schema.org/LeftHandDriving',
  );

  /// IRI for schemahttp:LeisureTimeActivity
  ///
  /// Any physical activity engaged in for recreational purposes. Examples may include ballroom dancing, roller skating, canoeing, fishing, etc.
  ///
  static const LeisureTimeActivity = IriTerm.prevalidated(
    'http://schema.org/LeisureTimeActivity',
  );

  /// IRI for schemahttp:LimitedAvailability
  ///
  /// Indicates that the item has limited availability.
  ///
  static const LimitedAvailability = IriTerm.prevalidated(
    'http://schema.org/LimitedAvailability',
  );

  /// IRI for schemahttp:LimitedByGuaranteeCharity
  ///
  /// LimitedByGuaranteeCharity: Non-profit type referring to a charitable company that is limited by guarantee (UK).
  ///
  static const LimitedByGuaranteeCharity = IriTerm.prevalidated(
    'http://schema.org/LimitedByGuaranteeCharity',
  );

  /// IRI for schemahttp:ListPrice
  ///
  /// Represents the list price of an offered product. Typically the same as the [MSRP](http://schema.org/MSRP).
  ///
  static const ListPrice = IriTerm.prevalidated('http://schema.org/ListPrice');

  /// IRI for schemahttp:LiveAlbum
  ///
  /// LiveAlbum.
  ///
  static const LiveAlbum = IriTerm.prevalidated('http://schema.org/LiveAlbum');

  /// IRI for schemahttp:LivingWithHealthAspect
  ///
  /// Information about coping or life related to the topic.
  ///
  static const LivingWithHealthAspect = IriTerm.prevalidated(
    'http://schema.org/LivingWithHealthAspect',
  );

  /// IRI for schemahttp:LockerDelivery
  ///
  /// A DeliveryMethod in which an item is made available via locker.
  ///
  static const LockerDelivery = IriTerm.prevalidated(
    'http://schema.org/LockerDelivery',
  );

  /// IRI for schemahttp:Longitudinal
  ///
  /// Unlike cross-sectional studies, longitudinal studies track the same people, and therefore the differences observed in those people are less likely to be the result of cultural differences across generations. Longitudinal studies are also used in medicine to uncover predictors of certain diseases.
  ///
  static const Longitudinal = IriTerm.prevalidated(
    'http://schema.org/Longitudinal',
  );

  /// IRI for schemahttp:LowCalorieDiet
  ///
  /// A diet focused on reduced calorie intake.
  ///
  static const LowCalorieDiet = IriTerm.prevalidated(
    'http://schema.org/LowCalorieDiet',
  );

  /// IRI for schemahttp:LowFatDiet
  ///
  /// A diet focused on reduced fat and cholesterol intake.
  ///
  static const LowFatDiet = IriTerm.prevalidated(
    'http://schema.org/LowFatDiet',
  );

  /// IRI for schemahttp:LowLactoseDiet
  ///
  /// A diet appropriate for people with lactose intolerance.
  ///
  static const LowLactoseDiet = IriTerm.prevalidated(
    'http://schema.org/LowLactoseDiet',
  );

  /// IRI for schemahttp:LowSaltDiet
  ///
  /// A diet focused on reduced sodium intake.
  ///
  static const LowSaltDiet = IriTerm.prevalidated(
    'http://schema.org/LowSaltDiet',
  );

  /// IRI for schemahttp:Lung
  ///
  /// Lung and respiratory system clinical examination.
  ///
  static const Lung = IriTerm.prevalidated('http://schema.org/Lung');

  /// IRI for schemahttp:MRI
  ///
  /// Magnetic resonance imaging.
  ///
  static const MRI = IriTerm.prevalidated('http://schema.org/MRI');

  /// IRI for schemahttp:MSRP
  ///
  /// Represents the manufacturer suggested retail price ("MSRP") of an offered product.
  ///
  static const MSRP = IriTerm.prevalidated('http://schema.org/MSRP');

  /// IRI for schemahttp:MadeToOrder
  ///
  /// Indicates that the item is made to order (custom made).
  ///
  static const MadeToOrder = IriTerm.prevalidated(
    'http://schema.org/MadeToOrder',
  );

  /// IRI for schemahttp:Male
  ///
  /// The male gender.
  ///
  static const Male = IriTerm.prevalidated('http://schema.org/Male');

  /// IRI for schemahttp:MayTreatHealthAspect
  ///
  /// Related topics may be treated by a Topic.
  ///
  static const MayTreatHealthAspect = IriTerm.prevalidated(
    'http://schema.org/MayTreatHealthAspect',
  );

  /// IRI for schemahttp:MedicalResearcher
  ///
  /// Medical researchers.
  ///
  static const MedicalResearcher = IriTerm.prevalidated(
    'http://schema.org/MedicalResearcher',
  );

  /// IRI for schemahttp:MerchantReturnFiniteReturnWindow
  ///
  /// Specifies that there is a finite window for product returns.
  ///
  static const MerchantReturnFiniteReturnWindow = IriTerm.prevalidated(
    'http://schema.org/MerchantReturnFiniteReturnWindow',
  );

  /// IRI for schemahttp:MerchantReturnNotPermitted
  ///
  /// Specifies that product returns are not permitted.
  ///
  static const MerchantReturnNotPermitted = IriTerm.prevalidated(
    'http://schema.org/MerchantReturnNotPermitted',
  );

  /// IRI for schemahttp:MerchantReturnUnlimitedWindow
  ///
  /// Specifies that there is an unlimited window for product returns.
  ///
  static const MerchantReturnUnlimitedWindow = IriTerm.prevalidated(
    'http://schema.org/MerchantReturnUnlimitedWindow',
  );

  /// IRI for schemahttp:MerchantReturnUnspecified
  ///
  /// Specifies that a product return policy is not provided.
  ///
  static const MerchantReturnUnspecified = IriTerm.prevalidated(
    'http://schema.org/MerchantReturnUnspecified',
  );

  /// IRI for schemahttp:Midwifery
  ///
  /// A nurse-like health profession that deals with pregnancy, childbirth, and the postpartum period (including care of the newborn), besides sexual and reproductive health of women throughout their lives.
  ///
  static const Midwifery = IriTerm.prevalidated('http://schema.org/Midwifery');

  /// IRI for schemahttp:MinimumAdvertisedPrice
  ///
  /// Represents the minimum advertised price ("MAP") (as dictated by the manufacturer) of an offered product.
  ///
  static const MinimumAdvertisedPrice = IriTerm.prevalidated(
    'http://schema.org/MinimumAdvertisedPrice',
  );

  /// IRI for schemahttp:MinorHumanEditsDigitalSource
  ///
  /// Content coded as '<a href="https://cv.iptc.org/newscodes/digitalsourcetype/minorHumanEdits">minor human edits</a>' using the IPTC <a href="https://cv.iptc.org/newscodes/digitalsourcetype/">digital source type</a> vocabulary.
  ///
  static const MinorHumanEditsDigitalSource = IriTerm.prevalidated(
    'http://schema.org/MinorHumanEditsDigitalSource',
  );

  /// IRI for schemahttp:MisconceptionsHealthAspect
  ///
  /// Content about common misconceptions and myths that are related to a topic.
  ///
  static const MisconceptionsHealthAspect = IriTerm.prevalidated(
    'http://schema.org/MisconceptionsHealthAspect',
  );

  /// IRI for schemahttp:MixedEventAttendanceMode
  ///
  /// MixedEventAttendanceMode - an event that is conducted as a combination of both offline and online modes.
  ///
  static const MixedEventAttendanceMode = IriTerm.prevalidated(
    'http://schema.org/MixedEventAttendanceMode',
  );

  /// IRI for schemahttp:MixtapeAlbum
  ///
  /// MixtapeAlbum.
  ///
  static const MixtapeAlbum = IriTerm.prevalidated(
    'http://schema.org/MixtapeAlbum',
  );

  /// IRI for schemahttp:MobileWebPlatform
  ///
  /// Represents the broad notion of 'mobile' browsers as a Web Platform.
  ///
  static const MobileWebPlatform = IriTerm.prevalidated(
    'http://schema.org/MobileWebPlatform',
  );

  /// IRI for schemahttp:Monday
  ///
  /// The day of the week between Sunday and Tuesday.
  ///
  static const Monday = IriTerm.prevalidated('http://schema.org/Monday');

  /// IRI for schemahttp:MultiCenterTrial
  ///
  /// A trial that takes place at multiple centers.
  ///
  static const MultiCenterTrial = IriTerm.prevalidated(
    'http://schema.org/MultiCenterTrial',
  );

  /// IRI for schemahttp:MultiFrameComputationalCaptureDigitalSource
  ///
  /// Content coded as '<a href="https://cv.iptc.org/newscodes/digitalsourcetype/algorithmicMedia">algorithmic media</a>' using the IPTC <a href="https://cv.iptc.org/newscodes/digitalsourcetype/">digital source type</a> vocabulary.
  ///
  static const MultiFrameComputationalCaptureDigitalSource =
      IriTerm.prevalidated(
        'http://schema.org/MultiFrameComputationalCaptureDigitalSource',
      );

  /// IRI for schemahttp:MultiPlayer
  ///
  /// Play mode: MultiPlayer. Requiring or allowing multiple human players to play simultaneously.
  ///
  static const MultiPlayer = IriTerm.prevalidated(
    'http://schema.org/MultiPlayer',
  );

  /// IRI for schemahttp:MulticellularParasite
  ///
  /// Multicellular parasite that causes an infection.
  ///
  static const MulticellularParasite = IriTerm.prevalidated(
    'http://schema.org/MulticellularParasite',
  );

  /// IRI for schemahttp:Musculoskeletal
  ///
  /// A specific branch of medical science that pertains to diagnosis and treatment of disorders of muscles, ligaments and skeletal system.
  ///
  static const Musculoskeletal = IriTerm.prevalidated(
    'http://schema.org/Musculoskeletal',
  );

  /// IRI for schemahttp:MusculoskeletalExam
  ///
  /// Musculoskeletal system clinical examination.
  ///
  static const MusculoskeletalExam = IriTerm.prevalidated(
    'http://schema.org/MusculoskeletalExam',
  );

  /// IRI for schemahttp:NarcoticConsideration
  ///
  /// Item is a narcotic as defined by the [1961 UN convention](https://www.incb.org/incb/en/narcotic-drugs/Yellowlist/yellow-list.html), for example marijuana or heroin.
  ///
  static const NarcoticConsideration = IriTerm.prevalidated(
    'http://schema.org/NarcoticConsideration',
  );

  /// IRI for schemahttp:Neck
  ///
  /// Neck assessment with clinical examination.
  ///
  static const Neck = IriTerm.prevalidated('http://schema.org/Neck');

  /// IRI for schemahttp:NegativeFilmDigitalSource
  ///
  /// Content coded as '<a href="https://cv.iptc.org/newscodes/digitalsourcetype/negativeFilm">negative film</a></a>' using the IPTC <a href="https://cv.iptc.org/newscodes/digitalsourcetype/">digital source type</a> vocabulary.
  ///
  static const NegativeFilmDigitalSource = IriTerm.prevalidated(
    'http://schema.org/NegativeFilmDigitalSource',
  );

  /// IRI for schemahttp:Neuro
  ///
  /// Neurological system clinical examination.
  ///
  static const Neuro = IriTerm.prevalidated('http://schema.org/Neuro');

  /// IRI for schemahttp:Neurologic
  ///
  /// A specific branch of medical science that studies the nerves and nervous system and its respective disease states.
  ///
  static const Neurologic = IriTerm.prevalidated(
    'http://schema.org/Neurologic',
  );

  /// IRI for schemahttp:NewCondition
  ///
  /// Indicates that the item is new.
  ///
  static const NewCondition = IriTerm.prevalidated(
    'http://schema.org/NewCondition',
  );

  /// IRI for schemahttp:NoninvasiveProcedure
  ///
  /// A type of medical procedure that involves noninvasive techniques.
  ///
  static const NoninvasiveProcedure = IriTerm.prevalidated(
    'http://schema.org/NoninvasiveProcedure',
  );

  /// IRI for schemahttp:Nonprofit501a
  ///
  /// Nonprofit501a: Non-profit type referring to Farmers‚Äô Cooperative Associations.
  ///
  static const Nonprofit501a = IriTerm.prevalidated(
    'http://schema.org/Nonprofit501a',
  );

  /// IRI for schemahttp:Nonprofit501c1
  ///
  /// Nonprofit501c1: Non-profit type referring to Corporations Organized Under Act of Congress, including Federal Credit Unions and National Farm Loan Associations.
  ///
  static const Nonprofit501c1 = IriTerm.prevalidated(
    'http://schema.org/Nonprofit501c1',
  );

  /// IRI for schemahttp:Nonprofit501c10
  ///
  /// Nonprofit501c10: Non-profit type referring to Domestic Fraternal Societies and Associations.
  ///
  static const Nonprofit501c10 = IriTerm.prevalidated(
    'http://schema.org/Nonprofit501c10',
  );

  /// IRI for schemahttp:Nonprofit501c11
  ///
  /// Nonprofit501c11: Non-profit type referring to Teachers' Retirement Fund Associations.
  ///
  static const Nonprofit501c11 = IriTerm.prevalidated(
    'http://schema.org/Nonprofit501c11',
  );

  /// IRI for schemahttp:Nonprofit501c12
  ///
  /// Nonprofit501c12: Non-profit type referring to Benevolent Life Insurance Associations, Mutual Ditch or Irrigation Companies, Mutual or Cooperative Telephone Companies.
  ///
  static const Nonprofit501c12 = IriTerm.prevalidated(
    'http://schema.org/Nonprofit501c12',
  );

  /// IRI for schemahttp:Nonprofit501c13
  ///
  /// Nonprofit501c13: Non-profit type referring to Cemetery Companies.
  ///
  static const Nonprofit501c13 = IriTerm.prevalidated(
    'http://schema.org/Nonprofit501c13',
  );

  /// IRI for schemahttp:Nonprofit501c14
  ///
  /// Nonprofit501c14: Non-profit type referring to State-Chartered Credit Unions, Mutual Reserve Funds.
  ///
  static const Nonprofit501c14 = IriTerm.prevalidated(
    'http://schema.org/Nonprofit501c14',
  );

  /// IRI for schemahttp:Nonprofit501c15
  ///
  /// Nonprofit501c15: Non-profit type referring to Mutual Insurance Companies or Associations.
  ///
  static const Nonprofit501c15 = IriTerm.prevalidated(
    'http://schema.org/Nonprofit501c15',
  );

  /// IRI for schemahttp:Nonprofit501c16
  ///
  /// Nonprofit501c16: Non-profit type referring to Cooperative Organizations to Finance Crop Operations.
  ///
  static const Nonprofit501c16 = IriTerm.prevalidated(
    'http://schema.org/Nonprofit501c16',
  );

  /// IRI for schemahttp:Nonprofit501c17
  ///
  /// Nonprofit501c17: Non-profit type referring to Supplemental Unemployment Benefit Trusts.
  ///
  static const Nonprofit501c17 = IriTerm.prevalidated(
    'http://schema.org/Nonprofit501c17',
  );

  /// IRI for schemahttp:Nonprofit501c18
  ///
  /// Nonprofit501c18: Non-profit type referring to Employee Funded Pension Trust (created before 25 June 1959).
  ///
  static const Nonprofit501c18 = IriTerm.prevalidated(
    'http://schema.org/Nonprofit501c18',
  );

  /// IRI for schemahttp:Nonprofit501c19
  ///
  /// Nonprofit501c19: Non-profit type referring to Post or Organization of Past or Present Members of the Armed Forces.
  ///
  static const Nonprofit501c19 = IriTerm.prevalidated(
    'http://schema.org/Nonprofit501c19',
  );

  /// IRI for schemahttp:Nonprofit501c2
  ///
  /// Nonprofit501c2: Non-profit type referring to Title-holding Corporations for Exempt Organizations.
  ///
  static const Nonprofit501c2 = IriTerm.prevalidated(
    'http://schema.org/Nonprofit501c2',
  );

  /// IRI for schemahttp:Nonprofit501c20
  ///
  /// Nonprofit501c20: Non-profit type referring to Group Legal Services Plan Organizations.
  ///
  static const Nonprofit501c20 = IriTerm.prevalidated(
    'http://schema.org/Nonprofit501c20',
  );

  /// IRI for schemahttp:Nonprofit501c21
  ///
  /// Nonprofit501c21: Non-profit type referring to Black Lung Benefit Trusts.
  ///
  static const Nonprofit501c21 = IriTerm.prevalidated(
    'http://schema.org/Nonprofit501c21',
  );

  /// IRI for schemahttp:Nonprofit501c22
  ///
  /// Nonprofit501c22: Non-profit type referring to Withdrawal Liability Payment Funds.
  ///
  static const Nonprofit501c22 = IriTerm.prevalidated(
    'http://schema.org/Nonprofit501c22',
  );

  /// IRI for schemahttp:Nonprofit501c23
  ///
  /// Nonprofit501c23: Non-profit type referring to Veterans Organizations.
  ///
  static const Nonprofit501c23 = IriTerm.prevalidated(
    'http://schema.org/Nonprofit501c23',
  );

  /// IRI for schemahttp:Nonprofit501c24
  ///
  /// Nonprofit501c24: Non-profit type referring to Section 4049 ERISA Trusts.
  ///
  static const Nonprofit501c24 = IriTerm.prevalidated(
    'http://schema.org/Nonprofit501c24',
  );

  /// IRI for schemahttp:Nonprofit501c25
  ///
  /// Nonprofit501c25: Non-profit type referring to Real Property Title-Holding Corporations or Trusts with Multiple Parents.
  ///
  static const Nonprofit501c25 = IriTerm.prevalidated(
    'http://schema.org/Nonprofit501c25',
  );

  /// IRI for schemahttp:Nonprofit501c26
  ///
  /// Nonprofit501c26: Non-profit type referring to State-Sponsored Organizations Providing Health Coverage for High-Risk Individuals.
  ///
  static const Nonprofit501c26 = IriTerm.prevalidated(
    'http://schema.org/Nonprofit501c26',
  );

  /// IRI for schemahttp:Nonprofit501c27
  ///
  /// Nonprofit501c27: Non-profit type referring to State-Sponsored Workers' Compensation Reinsurance Organizations.
  ///
  static const Nonprofit501c27 = IriTerm.prevalidated(
    'http://schema.org/Nonprofit501c27',
  );

  /// IRI for schemahttp:Nonprofit501c28
  ///
  /// Nonprofit501c28: Non-profit type referring to National Railroad Retirement Investment Trusts.
  ///
  static const Nonprofit501c28 = IriTerm.prevalidated(
    'http://schema.org/Nonprofit501c28',
  );

  /// IRI for schemahttp:Nonprofit501c3
  ///
  /// Nonprofit501c3: Non-profit type referring to Religious, Educational, Charitable, Scientific, Literary, Testing for Public Safety, Fostering National or International Amateur Sports Competition, or Prevention of Cruelty to Children or Animals Organizations.
  ///
  static const Nonprofit501c3 = IriTerm.prevalidated(
    'http://schema.org/Nonprofit501c3',
  );

  /// IRI for schemahttp:Nonprofit501c4
  ///
  /// Nonprofit501c4: Non-profit type referring to Civic Leagues, Social Welfare Organizations, and Local Associations of Employees.
  ///
  static const Nonprofit501c4 = IriTerm.prevalidated(
    'http://schema.org/Nonprofit501c4',
  );

  /// IRI for schemahttp:Nonprofit501c5
  ///
  /// Nonprofit501c5: Non-profit type referring to Labor, Agricultural and Horticultural Organizations.
  ///
  static const Nonprofit501c5 = IriTerm.prevalidated(
    'http://schema.org/Nonprofit501c5',
  );

  /// IRI for schemahttp:Nonprofit501c6
  ///
  /// Nonprofit501c6: Non-profit type referring to Business Leagues, Chambers of Commerce, Real Estate Boards.
  ///
  static const Nonprofit501c6 = IriTerm.prevalidated(
    'http://schema.org/Nonprofit501c6',
  );

  /// IRI for schemahttp:Nonprofit501c7
  ///
  /// Nonprofit501c7: Non-profit type referring to Social and Recreational Clubs.
  ///
  static const Nonprofit501c7 = IriTerm.prevalidated(
    'http://schema.org/Nonprofit501c7',
  );

  /// IRI for schemahttp:Nonprofit501c8
  ///
  /// Nonprofit501c8: Non-profit type referring to Fraternal Beneficiary Societies and Associations.
  ///
  static const Nonprofit501c8 = IriTerm.prevalidated(
    'http://schema.org/Nonprofit501c8',
  );

  /// IRI for schemahttp:Nonprofit501c9
  ///
  /// Nonprofit501c9: Non-profit type referring to Voluntary Employee Beneficiary Associations.
  ///
  static const Nonprofit501c9 = IriTerm.prevalidated(
    'http://schema.org/Nonprofit501c9',
  );

  /// IRI for schemahttp:Nonprofit501d
  ///
  /// Nonprofit501d: Non-profit type referring to Religious and Apostolic Associations.
  ///
  static const Nonprofit501d = IriTerm.prevalidated(
    'http://schema.org/Nonprofit501d',
  );

  /// IRI for schemahttp:Nonprofit501e
  ///
  /// Nonprofit501e: Non-profit type referring to Cooperative Hospital Service Organizations.
  ///
  static const Nonprofit501e = IriTerm.prevalidated(
    'http://schema.org/Nonprofit501e',
  );

  /// IRI for schemahttp:Nonprofit501f
  ///
  /// Nonprofit501f: Non-profit type referring to Cooperative Service Organizations.
  ///
  static const Nonprofit501f = IriTerm.prevalidated(
    'http://schema.org/Nonprofit501f',
  );

  /// IRI for schemahttp:Nonprofit501k
  ///
  /// Nonprofit501k: Non-profit type referring to Child Care Organizations.
  ///
  static const Nonprofit501k = IriTerm.prevalidated(
    'http://schema.org/Nonprofit501k',
  );

  /// IRI for schemahttp:Nonprofit501n
  ///
  /// Nonprofit501n: Non-profit type referring to Charitable Risk Pools.
  ///
  static const Nonprofit501n = IriTerm.prevalidated(
    'http://schema.org/Nonprofit501n',
  );

  /// IRI for schemahttp:Nonprofit501q
  ///
  /// Nonprofit501q: Non-profit type referring to Credit Counseling Organizations.
  ///
  static const Nonprofit501q = IriTerm.prevalidated(
    'http://schema.org/Nonprofit501q',
  );

  /// IRI for schemahttp:Nonprofit527
  ///
  /// Nonprofit527: Non-profit type referring to political organizations.
  ///
  static const Nonprofit527 = IriTerm.prevalidated(
    'http://schema.org/Nonprofit527',
  );

  /// IRI for schemahttp:NonprofitANBI
  ///
  /// NonprofitANBI: Non-profit type referring to a Public Benefit Organization (NL).
  ///
  static const NonprofitANBI = IriTerm.prevalidated(
    'http://schema.org/NonprofitANBI',
  );

  /// IRI for schemahttp:NonprofitSBBI
  ///
  /// NonprofitSBBI: Non-profit type referring to a Social Interest Promoting Institution (NL).
  ///
  static const NonprofitSBBI = IriTerm.prevalidated(
    'http://schema.org/NonprofitSBBI',
  );

  /// IRI for schemahttp:Nose
  ///
  /// Nose function assessment with clinical examination.
  ///
  static const Nose = IriTerm.prevalidated('http://schema.org/Nose');

  /// IRI for schemahttp:NotInForce
  ///
  /// Indicates that a legislation is currently not in force.
  ///
  static const NotInForce = IriTerm.prevalidated(
    'http://schema.org/NotInForce',
  );

  /// IRI for schemahttp:NotYetRecruiting
  ///
  /// Not yet recruiting.
  ///
  static const NotYetRecruiting = IriTerm.prevalidated(
    'http://schema.org/NotYetRecruiting',
  );

  /// IRI for schemahttp:Nursing
  ///
  /// A health profession of a person formally educated and trained in the care of the sick or infirm person.
  ///
  static const Nursing = IriTerm.prevalidated('http://schema.org/Nursing');

  /// IRI for schemahttp:OTC
  ///
  /// The character of a medical substance, typically a medicine, of being available over the counter or not.
  ///
  static const OTC = IriTerm.prevalidated('http://schema.org/OTC');

  /// IRI for schemahttp:Observational
  ///
  /// An observational study design.
  ///
  static const Observational = IriTerm.prevalidated(
    'http://schema.org/Observational',
  );

  /// IRI for schemahttp:Obstetric
  ///
  /// A specific branch of medical science that specializes in the care of women during the prenatal and postnatal care and with the delivery of the child.
  ///
  static const Obstetric = IriTerm.prevalidated('http://schema.org/Obstetric');

  /// IRI for schemahttp:OccupationalActivity
  ///
  /// Any physical activity engaged in for job-related purposes. Examples may include waiting tables, maid service, carrying a mailbag, picking fruits or vegetables, construction work, etc.
  ///
  static const OccupationalActivity = IriTerm.prevalidated(
    'http://schema.org/OccupationalActivity',
  );

  /// IRI for schemahttp:OfficialLegalValue
  ///
  /// All the documents published by an official publisher should have at least the legal value level "OfficialLegalValue". This indicates that the document was published by an organisation with the public task of making it available (e.g. a consolidated version of a EU directive published by the EU Office of Publications).
  ///
  static const OfficialLegalValue = IriTerm.prevalidated(
    'http://schema.org/OfficialLegalValue',
  );

  /// IRI for schemahttp:OfflineEventAttendanceMode
  ///
  /// OfflineEventAttendanceMode - an event that is primarily conducted offline.
  ///
  static const OfflineEventAttendanceMode = IriTerm.prevalidated(
    'http://schema.org/OfflineEventAttendanceMode',
  );

  /// IRI for schemahttp:OfflinePermanently
  ///
  /// Game server status: OfflinePermanently. Server is offline and not available.
  ///
  static const OfflinePermanently = IriTerm.prevalidated(
    'http://schema.org/OfflinePermanently',
  );

  /// IRI for schemahttp:OfflineTemporarily
  ///
  /// Game server status: OfflineTemporarily. Server is offline now but it can be online soon.
  ///
  static const OfflineTemporarily = IriTerm.prevalidated(
    'http://schema.org/OfflineTemporarily',
  );

  /// IRI for schemahttp:OnSitePickup
  ///
  /// A DeliveryMethod in which an item is collected on site, e.g. in a store or at a box office.
  ///
  static const OnSitePickup = IriTerm.prevalidated(
    'http://schema.org/OnSitePickup',
  );

  /// IRI for schemahttp:Oncologic
  ///
  /// A specific branch of medical science that deals with benign and malignant tumors, including the study of their development, diagnosis, treatment and prevention.
  ///
  static const Oncologic = IriTerm.prevalidated('http://schema.org/Oncologic');

  /// IRI for schemahttp:OneTimePayments
  ///
  /// OneTimePayments: this is a benefit for one-time payments for individuals.
  ///
  static const OneTimePayments = IriTerm.prevalidated(
    'http://schema.org/OneTimePayments',
  );

  /// IRI for schemahttp:Online
  ///
  /// Game server status: Online. Server is available.
  ///
  static const Online = IriTerm.prevalidated('http://schema.org/Online');

  /// IRI for schemahttp:OnlineEventAttendanceMode
  ///
  /// OnlineEventAttendanceMode - an event that is primarily conducted online.
  ///
  static const OnlineEventAttendanceMode = IriTerm.prevalidated(
    'http://schema.org/OnlineEventAttendanceMode',
  );

  /// IRI for schemahttp:OnlineFull
  ///
  /// Game server status: OnlineFull. Server is online but unavailable. The maximum number of players has reached.
  ///
  static const OnlineFull = IriTerm.prevalidated(
    'http://schema.org/OnlineFull',
  );

  /// IRI for schemahttp:OnlineOnly
  ///
  /// Indicates that the item is available only online.
  ///
  static const OnlineOnly = IriTerm.prevalidated(
    'http://schema.org/OnlineOnly',
  );

  /// IRI for schemahttp:OpenTrial
  ///
  /// A trial design in which the researcher knows the full details of the treatment, and so does the patient.
  ///
  static const OpenTrial = IriTerm.prevalidated('http://schema.org/OpenTrial');

  /// IRI for schemahttp:Optometric
  ///
  /// The science or practice of testing visual acuity and prescribing corrective lenses.
  ///
  static const Optometric = IriTerm.prevalidated(
    'http://schema.org/Optometric',
  );

  /// IRI for schemahttp:OrderCancelled
  ///
  /// OrderStatus representing cancellation of an order.
  ///
  static const OrderCancelled = IriTerm.prevalidated(
    'http://schema.org/OrderCancelled',
  );

  /// IRI for schemahttp:OrderDelivered
  ///
  /// OrderStatus representing successful delivery of an order.
  ///
  static const OrderDelivered = IriTerm.prevalidated(
    'http://schema.org/OrderDelivered',
  );

  /// IRI for schemahttp:OrderInTransit
  ///
  /// OrderStatus representing that an order is in transit.
  ///
  static const OrderInTransit = IriTerm.prevalidated(
    'http://schema.org/OrderInTransit',
  );

  /// IRI for schemahttp:OrderPaymentDue
  ///
  /// OrderStatus representing that payment is due on an order.
  ///
  static const OrderPaymentDue = IriTerm.prevalidated(
    'http://schema.org/OrderPaymentDue',
  );

  /// IRI for schemahttp:OrderPickupAvailable
  ///
  /// OrderStatus representing availability of an order for pickup.
  ///
  static const OrderPickupAvailable = IriTerm.prevalidated(
    'http://schema.org/OrderPickupAvailable',
  );

  /// IRI for schemahttp:OrderProblem
  ///
  /// OrderStatus representing that there is a problem with the order.
  ///
  static const OrderProblem = IriTerm.prevalidated(
    'http://schema.org/OrderProblem',
  );

  /// IRI for schemahttp:OrderProcessing
  ///
  /// OrderStatus representing that an order is being processed.
  ///
  static const OrderProcessing = IriTerm.prevalidated(
    'http://schema.org/OrderProcessing',
  );

  /// IRI for schemahttp:OrderReturned
  ///
  /// OrderStatus representing that an order has been returned.
  ///
  static const OrderReturned = IriTerm.prevalidated(
    'http://schema.org/OrderReturned',
  );

  /// IRI for schemahttp:OriginalMediaContent
  ///
  /// Content coded 'as original media content' in a {[MediaReview]}, considered in the context of how it was published or shared.
  ///
  /// For a {[VideoObject]} to be 'original': No evidence the footage has been misleadingly altered or manipulated, though it may contain false or misleading claims.
  ///
  /// For an {[ImageObject]} to be 'original': No evidence the image has been misleadingly altered or manipulated, though it may still contain false or misleading claims.
  ///
  /// For an {[ImageObject]} with embedded text to be 'original': No evidence the image has been misleadingly altered or manipulated, though it may still contain false or misleading claims.
  ///
  /// For an {[AudioObject]} to be 'original': No evidence the audio has been misleadingly altered or manipulated, though it may contain false or misleading claims.
  ///
  ///
  static const OriginalMediaContent = IriTerm.prevalidated(
    'http://schema.org/OriginalMediaContent',
  );

  /// IRI for schemahttp:OriginalShippingFees
  ///
  /// Specifies that the customer must pay the original shipping costs when returning a product.
  ///
  static const OriginalShippingFees = IriTerm.prevalidated(
    'http://schema.org/OriginalShippingFees',
  );

  /// IRI for schemahttp:Osteopathic
  ///
  /// A system of medicine focused on promoting the body's innate ability to heal itself.
  ///
  static const Osteopathic = IriTerm.prevalidated(
    'http://schema.org/Osteopathic',
  );

  /// IRI for schemahttp:Otolaryngologic
  ///
  /// A specific branch of medical science that is concerned with the ear, nose and throat and their respective disease states.
  ///
  static const Otolaryngologic = IriTerm.prevalidated(
    'http://schema.org/Otolaryngologic',
  );

  /// IRI for schemahttp:OutOfStock
  ///
  /// Indicates that the item is out of stock.
  ///
  static const OutOfStock = IriTerm.prevalidated(
    'http://schema.org/OutOfStock',
  );

  /// IRI for schemahttp:OverviewHealthAspect
  ///
  /// Overview of the content. Contains a summarized view of the topic with the most relevant information for an introduction.
  ///
  static const OverviewHealthAspect = IriTerm.prevalidated(
    'http://schema.org/OverviewHealthAspect',
  );

  /// IRI for schemahttp:PET
  ///
  /// Positron emission tomography imaging.
  ///
  static const PET = IriTerm.prevalidated('http://schema.org/PET');

  /// IRI for schemahttp:PaidLeave
  ///
  /// PaidLeave: this is a benefit for paid leave.
  ///
  static const PaidLeave = IriTerm.prevalidated('http://schema.org/PaidLeave');

  /// IRI for schemahttp:Paperback
  ///
  /// Book format: Paperback.
  ///
  static const Paperback = IriTerm.prevalidated('http://schema.org/Paperback');

  /// IRI for schemahttp:ParcelService
  ///
  /// A private parcel service as the delivery mode available for a certain offer.\n\nCommonly used values:\n\n* http://purl.org/goodrelations/v1#DHL\n* http://purl.org/goodrelations/v1#FederalExpress\n* http://purl.org/goodrelations/v1#UPS
  ///
  ///
  static const ParcelService = IriTerm.prevalidated(
    'http://schema.org/ParcelService',
  );

  /// IRI for schemahttp:ParentalSupport
  ///
  /// ParentalSupport: this is a benefit for parental support.
  ///
  static const ParentalSupport = IriTerm.prevalidated(
    'http://schema.org/ParentalSupport',
  );

  /// IRI for schemahttp:ParkingMap
  ///
  /// A parking map.
  ///
  static const ParkingMap = IriTerm.prevalidated(
    'http://schema.org/ParkingMap',
  );

  /// IRI for schemahttp:PartiallyInForce
  ///
  /// Indicates that parts of the legislation are in force, and parts are not.
  ///
  static const PartiallyInForce = IriTerm.prevalidated(
    'http://schema.org/PartiallyInForce',
  );

  /// IRI for schemahttp:Pathology
  ///
  /// A specific branch of medical science that is concerned with the study of the cause, origin and nature of a disease state, including its consequences as a result of manifestation of the disease. In clinical care, the term is used to designate a branch of medicine using laboratory tests to diagnose and determine the prognostic significance of illness.
  ///
  static const Pathology = IriTerm.prevalidated('http://schema.org/Pathology');

  /// IRI for schemahttp:PatientExperienceHealthAspect
  ///
  /// Content about the real life experience of patients or people that have lived a similar experience about the topic. May be forums, topics, Q-and-A and related material.
  ///
  static const PatientExperienceHealthAspect = IriTerm.prevalidated(
    'http://schema.org/PatientExperienceHealthAspect',
  );

  /// IRI for schemahttp:PaymentAutomaticallyApplied
  ///
  /// An automatic payment system is in place and will be used.
  ///
  static const PaymentAutomaticallyApplied = IriTerm.prevalidated(
    'http://schema.org/PaymentAutomaticallyApplied',
  );

  /// IRI for schemahttp:PaymentComplete
  ///
  /// The payment has been received and processed.
  ///
  static const PaymentComplete = IriTerm.prevalidated(
    'http://schema.org/PaymentComplete',
  );

  /// IRI for schemahttp:PaymentDeclined
  ///
  /// The payee received the payment, but it was declined for some reason.
  ///
  static const PaymentDeclined = IriTerm.prevalidated(
    'http://schema.org/PaymentDeclined',
  );

  /// IRI for schemahttp:PaymentDue
  ///
  /// The payment is due, but still within an acceptable time to be received.
  ///
  static const PaymentDue = IriTerm.prevalidated(
    'http://schema.org/PaymentDue',
  );

  /// IRI for schemahttp:PaymentPastDue
  ///
  /// The payment is due and considered late.
  ///
  static const PaymentPastDue = IriTerm.prevalidated(
    'http://schema.org/PaymentPastDue',
  );

  /// IRI for schemahttp:Pediatric
  ///
  /// A specific branch of medical science that specializes in the care of infants, children and adolescents.
  ///
  static const Pediatric = IriTerm.prevalidated('http://schema.org/Pediatric');

  /// IRI for schemahttp:PercutaneousProcedure
  ///
  /// A type of medical procedure that involves percutaneous techniques, where access to organs or tissue is achieved via needle-puncture of the skin. For example, catheter-based procedures like stent delivery.
  ///
  static const PercutaneousProcedure = IriTerm.prevalidated(
    'http://schema.org/PercutaneousProcedure',
  );

  /// IRI for schemahttp:PharmacySpecialty
  ///
  /// The practice or art and science of preparing and dispensing drugs and medicines.
  ///
  static const PharmacySpecialty = IriTerm.prevalidated(
    'http://schema.org/PharmacySpecialty',
  );

  /// IRI for schemahttp:PhoneCarrierPayment
  ///
  /// Payment by billing via the phone carrier.
  ///
  static const PhoneCarrierPayment = IriTerm.prevalidated(
    'http://schema.org/PhoneCarrierPayment',
  );

  /// IRI for schemahttp:Physiotherapy
  ///
  /// The practice of treatment of disease, injury, or deformity by physical methods such as massage, heat treatment, and exercise rather than by drugs or surgery.
  ///
  static const Physiotherapy = IriTerm.prevalidated(
    'http://schema.org/Physiotherapy',
  );

  /// IRI for schemahttp:PlaceboControlledTrial
  ///
  /// A placebo-controlled trial design.
  ///
  static const PlaceboControlledTrial = IriTerm.prevalidated(
    'http://schema.org/PlaceboControlledTrial',
  );

  /// IRI for schemahttp:PlasticSurgery
  ///
  /// A specific branch of medical science that pertains to therapeutic or cosmetic repair or re-formation of missing, injured or malformed tissues or body parts by manual and instrumental means.
  ///
  static const PlasticSurgery = IriTerm.prevalidated(
    'http://schema.org/PlasticSurgery',
  );

  /// IRI for schemahttp:Podiatric
  ///
  /// Podiatry is the care of the human foot, especially the diagnosis and treatment of foot disorders.
  ///
  static const Podiatric = IriTerm.prevalidated('http://schema.org/Podiatric');

  /// IRI for schemahttp:PositiveFilmDigitalSource
  ///
  /// Content coded as '<a href="https://cv.iptc.org/newscodes/digitalsourcetype/positiveFilm">positive film</a>' using the IPTC <a href="https://cv.iptc.org/newscodes/digitalsourcetype/">digital source type</a> vocabulary.
  ///
  static const PositiveFilmDigitalSource = IriTerm.prevalidated(
    'http://schema.org/PositiveFilmDigitalSource',
  );

  /// IRI for schemahttp:PotentialActionStatus
  ///
  /// A description of an action that is supported.
  ///
  static const PotentialActionStatus = IriTerm.prevalidated(
    'http://schema.org/PotentialActionStatus',
  );

  /// IRI for schemahttp:PreOrder
  ///
  /// Indicates that the item is available for pre-order.
  ///
  static const PreOrder = IriTerm.prevalidated('http://schema.org/PreOrder');

  /// IRI for schemahttp:PreSale
  ///
  /// Indicates that the item is available for ordering and delivery before general availability.
  ///
  static const PreSale = IriTerm.prevalidated('http://schema.org/PreSale');

  /// IRI for schemahttp:PregnancyHealthAspect
  ///
  /// Content discussing pregnancy-related aspects of a health topic.
  ///
  static const PregnancyHealthAspect = IriTerm.prevalidated(
    'http://schema.org/PregnancyHealthAspect',
  );

  /// IRI for schemahttp:PrescriptionOnly
  ///
  /// Available by prescription only.
  ///
  static const PrescriptionOnly = IriTerm.prevalidated(
    'http://schema.org/PrescriptionOnly',
  );

  /// IRI for schemahttp:PreventionHealthAspect
  ///
  /// Information about actions or measures that can be taken to avoid getting the topic or reaching a critical situation related to the topic.
  ///
  static const PreventionHealthAspect = IriTerm.prevalidated(
    'http://schema.org/PreventionHealthAspect',
  );

  /// IRI for schemahttp:PrimaryCare
  ///
  /// The medical care by a physician, or other health-care professional, who is the patient's first contact with the health-care system and who may recommend a specialist if necessary.
  ///
  static const PrimaryCare = IriTerm.prevalidated(
    'http://schema.org/PrimaryCare',
  );

  /// IRI for schemahttp:PrintDigitalSource
  ///
  /// Content coded as '<a href="https://cv.iptc.org/newscodes/digitalsourcetype/print">print</a>' using the IPTC <a href="https://cv.iptc.org/newscodes/digitalsourcetype/">digital source type</a> vocabulary.
  ///
  static const PrintDigitalSource = IriTerm.prevalidated(
    'http://schema.org/PrintDigitalSource',
  );

  /// IRI for schemahttp:Prion
  ///
  /// A prion is an infectious agent composed of protein in a misfolded form.
  ///
  static const Prion = IriTerm.prevalidated('http://schema.org/Prion');

  /// IRI for schemahttp:PrognosisHealthAspect
  ///
  /// Typical progression and happenings of life course of the topic.
  ///
  static const PrognosisHealthAspect = IriTerm.prevalidated(
    'http://schema.org/PrognosisHealthAspect',
  );

  /// IRI for schemahttp:Protozoa
  ///
  /// Single-celled organism that causes an infection.
  ///
  static const Protozoa = IriTerm.prevalidated('http://schema.org/Protozoa');

  /// IRI for schemahttp:Psychiatric
  ///
  /// A specific branch of medical science that is concerned with the study, treatment, and prevention of mental illness, using both medical and psychological therapies.
  ///
  static const Psychiatric = IriTerm.prevalidated(
    'http://schema.org/Psychiatric',
  );

  /// IRI for schemahttp:PublicHealth
  ///
  /// Branch of medicine that pertains to the health services to improve and protect community health, especially epidemiology, sanitation, immunization, and preventive medicine.
  ///
  static const PublicHealth = IriTerm.prevalidated(
    'http://schema.org/PublicHealth',
  );

  /// IRI for schemahttp:PublicHolidays
  ///
  /// This stands for any day that is a public holiday; it is a placeholder for all official public holidays in some particular location. While not technically a "day of the week", it can be used with {[OpeningHoursSpecification]}. In the context of an opening hours specification it can be used to indicate opening hours on public holidays, overriding general opening hours for the day of the week on which a public holiday occurs.
  ///
  static const PublicHolidays = IriTerm.prevalidated(
    'http://schema.org/PublicHolidays',
  );

  /// IRI for schemahttp:Pulmonary
  ///
  /// A specific branch of medical science that pertains to the study of the respiratory system and its respective disease states.
  ///
  static const Pulmonary = IriTerm.prevalidated('http://schema.org/Pulmonary');

  /// IRI for schemahttp:PurchaseTypeLease
  ///
  /// This is a lease of an item.
  ///
  static const PurchaseTypeLease = IriTerm.prevalidated(
    'http://schema.org/PurchaseTypeLease',
  );

  /// IRI for schemahttp:PurchaseTypeNewPurchase
  ///
  /// This is a purchase of a new item.
  ///
  static const PurchaseTypeNewPurchase = IriTerm.prevalidated(
    'http://schema.org/PurchaseTypeNewPurchase',
  );

  /// IRI for schemahttp:PurchaseTypeTradeIn
  ///
  /// This is a trade-in for an item.
  ///
  static const PurchaseTypeTradeIn = IriTerm.prevalidated(
    'http://schema.org/PurchaseTypeTradeIn',
  );

  /// IRI for schemahttp:PurchaseTypeUsedPurchase
  ///
  /// This is a purchase of a used item.
  ///
  static const PurchaseTypeUsedPurchase = IriTerm.prevalidated(
    'http://schema.org/PurchaseTypeUsedPurchase',
  );

  /// IRI for schemahttp:Radiography
  ///
  /// Radiography is an imaging technique that uses electromagnetic radiation other than visible light, especially X-rays, to view the internal structure of a non-uniformly composed and opaque object such as the human body.
  ///
  static const Radiography = IriTerm.prevalidated(
    'http://schema.org/Radiography',
  );

  /// IRI for schemahttp:RandomizedTrial
  ///
  /// A randomized trial design.
  ///
  static const RandomizedTrial = IriTerm.prevalidated(
    'http://schema.org/RandomizedTrial',
  );

  /// IRI for schemahttp:ReadPermission
  ///
  /// Permission to read or view the document.
  ///
  static const ReadPermission = IriTerm.prevalidated(
    'http://schema.org/ReadPermission',
  );

  /// IRI for schemahttp:RearWheelDriveConfiguration
  ///
  /// Real-wheel drive is a transmission layout where the engine drives the rear wheels.
  ///
  static const RearWheelDriveConfiguration = IriTerm.prevalidated(
    'http://schema.org/RearWheelDriveConfiguration',
  );

  /// IRI for schemahttp:Recruiting
  ///
  /// Recruiting participants.
  ///
  static const Recruiting = IriTerm.prevalidated(
    'http://schema.org/Recruiting',
  );

  /// IRI for schemahttp:ReducedRelevanceForChildrenConsideration
  ///
  /// A general code for cases where relevance to children is reduced, e.g. adult education, mortgages, retirement-related products, etc.
  ///
  static const ReducedRelevanceForChildrenConsideration = IriTerm.prevalidated(
    'http://schema.org/ReducedRelevanceForChildrenConsideration',
  );

  /// IRI for schemahttp:RefurbishedCondition
  ///
  /// Indicates that the item is refurbished.
  ///
  static const RefurbishedCondition = IriTerm.prevalidated(
    'http://schema.org/RefurbishedCondition',
  );

  /// IRI for schemahttp:Registry
  ///
  /// A registry-based study design.
  ///
  static const Registry = IriTerm.prevalidated('http://schema.org/Registry');

  /// IRI for schemahttp:RegularPrice
  ///
  /// Represents the regular price of an offered product. This is usually the advertised price before a temporary sale. Once the sale period ends the advertised price will go back to the regular price.
  ///
  static const RegularPrice = IriTerm.prevalidated(
    'http://schema.org/RegularPrice',
  );

  /// IRI for schemahttp:ReimbursementCap
  ///
  /// The drug's cost represents the maximum reimbursement paid by an insurer for the drug.
  ///
  static const ReimbursementCap = IriTerm.prevalidated(
    'http://schema.org/ReimbursementCap',
  );

  /// IRI for schemahttp:RelatedTopicsHealthAspect
  ///
  /// Other prominent or relevant topics tied to the main topic.
  ///
  static const RelatedTopicsHealthAspect = IriTerm.prevalidated(
    'http://schema.org/RelatedTopicsHealthAspect',
  );

  /// IRI for schemahttp:RemixAlbum
  ///
  /// RemixAlbum.
  ///
  static const RemixAlbum = IriTerm.prevalidated(
    'http://schema.org/RemixAlbum',
  );

  /// IRI for schemahttp:Renal
  ///
  /// A specific branch of medical science that pertains to the study of the kidneys and its respective disease states.
  ///
  static const Renal = IriTerm.prevalidated('http://schema.org/Renal');

  /// IRI for schemahttp:RentalVehicleUsage
  ///
  /// Indicates the usage of the vehicle as a rental car.
  ///
  static const RentalVehicleUsage = IriTerm.prevalidated(
    'http://schema.org/RentalVehicleUsage',
  );

  /// IRI for schemahttp:ReservationCancelled
  ///
  /// The status for a previously confirmed reservation that is now cancelled.
  ///
  static const ReservationCancelled = IriTerm.prevalidated(
    'http://schema.org/ReservationCancelled',
  );

  /// IRI for schemahttp:ReservationConfirmed
  ///
  /// The status of a confirmed reservation.
  ///
  static const ReservationConfirmed = IriTerm.prevalidated(
    'http://schema.org/ReservationConfirmed',
  );

  /// IRI for schemahttp:ReservationHold
  ///
  /// The status of a reservation on hold pending an update like credit card number or flight changes.
  ///
  static const ReservationHold = IriTerm.prevalidated(
    'http://schema.org/ReservationHold',
  );

  /// IRI for schemahttp:ReservationPending
  ///
  /// The status of a reservation when a request has been sent, but not confirmed.
  ///
  static const ReservationPending = IriTerm.prevalidated(
    'http://schema.org/ReservationPending',
  );

  /// IRI for schemahttp:Reserved
  ///
  /// Indicates that the item is reserved and therefore not available.
  ///
  static const Reserved = IriTerm.prevalidated('http://schema.org/Reserved');

  /// IRI for schemahttp:RespiratoryTherapy
  ///
  /// The therapy that is concerned with the maintenance or improvement of respiratory function (as in patients with pulmonary disease).
  ///
  static const RespiratoryTherapy = IriTerm.prevalidated(
    'http://schema.org/RespiratoryTherapy',
  );

  /// IRI for schemahttp:RestockingFees
  ///
  /// Specifies that the customer must pay a restocking fee when returning a product.
  ///
  static const RestockingFees = IriTerm.prevalidated(
    'http://schema.org/RestockingFees',
  );

  /// IRI for schemahttp:ResultsAvailable
  ///
  /// Results are available.
  ///
  static const ResultsAvailable = IriTerm.prevalidated(
    'http://schema.org/ResultsAvailable',
  );

  /// IRI for schemahttp:ResultsNotAvailable
  ///
  /// Results are not available.
  ///
  static const ResultsNotAvailable = IriTerm.prevalidated(
    'http://schema.org/ResultsNotAvailable',
  );

  /// IRI for schemahttp:Retail
  ///
  /// The drug's cost represents the retail cost of the drug.
  ///
  static const Retail = IriTerm.prevalidated('http://schema.org/Retail');

  /// IRI for schemahttp:ReturnAtKiosk
  ///
  /// Specifies that product returns must be made at a kiosk.
  ///
  static const ReturnAtKiosk = IriTerm.prevalidated(
    'http://schema.org/ReturnAtKiosk',
  );

  /// IRI for schemahttp:ReturnByMail
  ///
  /// Specifies that product returns must be done by mail.
  ///
  static const ReturnByMail = IriTerm.prevalidated(
    'http://schema.org/ReturnByMail',
  );

  /// IRI for schemahttp:ReturnFeesCustomerResponsibility
  ///
  /// Specifies that product returns must be paid for, and are the responsibility of, the customer.
  ///
  static const ReturnFeesCustomerResponsibility = IriTerm.prevalidated(
    'http://schema.org/ReturnFeesCustomerResponsibility',
  );

  /// IRI for schemahttp:ReturnInStore
  ///
  /// Specifies that product returns must be made in a store.
  ///
  static const ReturnInStore = IriTerm.prevalidated(
    'http://schema.org/ReturnInStore',
  );

  /// IRI for schemahttp:ReturnLabelCustomerResponsibility
  ///
  /// Indicated that creating a return label is the responsibility of the customer.
  ///
  static const ReturnLabelCustomerResponsibility = IriTerm.prevalidated(
    'http://schema.org/ReturnLabelCustomerResponsibility',
  );

  /// IRI for schemahttp:ReturnLabelDownloadAndPrint
  ///
  /// Indicated that a return label must be downloaded and printed by the customer.
  ///
  static const ReturnLabelDownloadAndPrint = IriTerm.prevalidated(
    'http://schema.org/ReturnLabelDownloadAndPrint',
  );

  /// IRI for schemahttp:ReturnLabelInBox
  ///
  /// Specifies that a return label will be provided by the seller in the shipping box.
  ///
  static const ReturnLabelInBox = IriTerm.prevalidated(
    'http://schema.org/ReturnLabelInBox',
  );

  /// IRI for schemahttp:ReturnShippingFees
  ///
  /// Specifies that the customer must pay the return shipping costs when returning a product.
  ///
  static const ReturnShippingFees = IriTerm.prevalidated(
    'http://schema.org/ReturnShippingFees',
  );

  /// IRI for schemahttp:Rheumatologic
  ///
  /// A specific branch of medical science that deals with the study and treatment of rheumatic, autoimmune or joint diseases.
  ///
  static const Rheumatologic = IriTerm.prevalidated(
    'http://schema.org/Rheumatologic',
  );

  /// IRI for schemahttp:RightHandDriving
  ///
  /// The steering position is on the right side of the vehicle (viewed from the main direction of driving).
  ///
  static const RightHandDriving = IriTerm.prevalidated(
    'http://schema.org/RightHandDriving',
  );

  /// IRI for schemahttp:RisksOrComplicationsHealthAspect
  ///
  /// Information about the risk factors and possible complications that may follow a topic.
  ///
  static const RisksOrComplicationsHealthAspect = IriTerm.prevalidated(
    'http://schema.org/RisksOrComplicationsHealthAspect',
  );

  /// IRI for schemahttp:RsvpResponseMaybe
  ///
  /// The invitee may or may not attend.
  ///
  static const RsvpResponseMaybe = IriTerm.prevalidated(
    'http://schema.org/RsvpResponseMaybe',
  );

  /// IRI for schemahttp:RsvpResponseNo
  ///
  /// The invitee will not attend.
  ///
  static const RsvpResponseNo = IriTerm.prevalidated(
    'http://schema.org/RsvpResponseNo',
  );

  /// IRI for schemahttp:RsvpResponseYes
  ///
  /// The invitee will attend.
  ///
  static const RsvpResponseYes = IriTerm.prevalidated(
    'http://schema.org/RsvpResponseYes',
  );

  /// IRI for schemahttp:SRP
  ///
  /// Represents the suggested retail price ("SRP") of an offered product.
  ///
  static const SRP = IriTerm.prevalidated('http://schema.org/SRP');

  /// IRI for schemahttp:SafetyHealthAspect
  ///
  /// Content about the safety-related aspects of a health topic.
  ///
  static const SafetyHealthAspect = IriTerm.prevalidated(
    'http://schema.org/SafetyHealthAspect',
  );

  /// IRI for schemahttp:SalePrice
  ///
  /// Represents a sale price (usually active for a limited period) of an offered product.
  ///
  static const SalePrice = IriTerm.prevalidated('http://schema.org/SalePrice');

  /// IRI for schemahttp:SatireOrParodyContent
  ///
  /// Content coded 'satire or parody content' in a {[MediaReview]}, considered in the context of how it was published or shared.
  ///
  /// For a {[VideoObject]} to be 'satire or parody content': A video that was created as political or humorous commentary and is presented in that context. (Reshares of satire/parody content that do not include relevant context are more likely to fall under the ‚Äúmissing context‚Äù rating.)
  ///
  /// For an {[ImageObject]} to be 'satire or parody content': An image that was created as political or humorous commentary and is presented in that context. (Reshares of satire/parody content that do not include relevant context are more likely to fall under the ‚Äúmissing context‚Äù rating.)
  ///
  /// For an {[ImageObject]} with embedded text to be 'satire or parody content': An image that was created as political or humorous commentary and is presented in that context. (Reshares of satire/parody content that do not include relevant context are more likely to fall under the ‚Äúmissing context‚Äù rating.)
  ///
  /// For an {[AudioObject]} to be 'satire or parody content': Audio that was created as political or humorous commentary and is presented in that context. (Reshares of satire/parody content that do not include relevant context are more likely to fall under the ‚Äúmissing context‚Äù rating.)
  ///
  ///
  static const SatireOrParodyContent = IriTerm.prevalidated(
    'http://schema.org/SatireOrParodyContent',
  );

  /// IRI for schemahttp:Saturday
  ///
  /// The day of the week between Friday and Sunday.
  ///
  static const Saturday = IriTerm.prevalidated('http://schema.org/Saturday');

  /// IRI for schemahttp:ScreenCaptureDigitalSource
  ///
  /// Content coded as '<a href="https://cv.iptc.org/newscodes/digitalsourcetype/algorithmicMedia">algorithmic media</a>' using the IPTC <a href="https://cv.iptc.org/newscodes/digitalsourcetype/">digital source type</a> vocabulary.
  ///
  static const ScreenCaptureDigitalSource = IriTerm.prevalidated(
    'http://schema.org/ScreenCaptureDigitalSource',
  );

  /// IRI for schemahttp:ScreeningHealthAspect
  ///
  /// Content about how to screen or further filter a topic.
  ///
  static const ScreeningHealthAspect = IriTerm.prevalidated(
    'http://schema.org/ScreeningHealthAspect',
  );

  /// IRI for schemahttp:SeatingMap
  ///
  /// A seating map.
  ///
  static const SeatingMap = IriTerm.prevalidated(
    'http://schema.org/SeatingMap',
  );

  /// IRI for schemahttp:SeeDoctorHealthAspect
  ///
  /// Information about questions that may be asked, when to see a professional, measures before seeing a doctor or content about the first consultation.
  ///
  static const SeeDoctorHealthAspect = IriTerm.prevalidated(
    'http://schema.org/SeeDoctorHealthAspect',
  );

  /// IRI for schemahttp:SelfCareHealthAspect
  ///
  /// Self care actions or measures that can be taken to sooth, health or avoid a topic. This may be carried at home and can be carried/managed by the person itself.
  ///
  static const SelfCareHealthAspect = IriTerm.prevalidated(
    'http://schema.org/SelfCareHealthAspect',
  );

  /// IRI for schemahttp:SexualContentConsideration
  ///
  /// The item contains sexually oriented content such as nudity, suggestive or explicit material, or related online services, or is intended to enhance sexual activity. Examples: Erotic videos or magazine, sexual enhancement devices, sex toys.
  ///
  static const SexualContentConsideration = IriTerm.prevalidated(
    'http://schema.org/SexualContentConsideration',
  );

  /// IRI for schemahttp:SideEffectsHealthAspect
  ///
  /// Side effects that can be observed from the usage of the topic.
  ///
  static const SideEffectsHealthAspect = IriTerm.prevalidated(
    'http://schema.org/SideEffectsHealthAspect',
  );

  /// IRI for schemahttp:SingleBlindedTrial
  ///
  /// A trial design in which the researcher knows which treatment the patient was randomly assigned to but the patient does not.
  ///
  static const SingleBlindedTrial = IriTerm.prevalidated(
    'http://schema.org/SingleBlindedTrial',
  );

  /// IRI for schemahttp:SingleCenterTrial
  ///
  /// A trial that takes place at a single center.
  ///
  static const SingleCenterTrial = IriTerm.prevalidated(
    'http://schema.org/SingleCenterTrial',
  );

  /// IRI for schemahttp:SinglePlayer
  ///
  /// Play mode: SinglePlayer. Which is played by a lone player.
  ///
  static const SinglePlayer = IriTerm.prevalidated(
    'http://schema.org/SinglePlayer',
  );

  /// IRI for schemahttp:SingleRelease
  ///
  /// SingleRelease.
  ///
  static const SingleRelease = IriTerm.prevalidated(
    'http://schema.org/SingleRelease',
  );

  /// IRI for schemahttp:SizeSystemImperial
  ///
  /// Imperial size system.
  ///
  static const SizeSystemImperial = IriTerm.prevalidated(
    'http://schema.org/SizeSystemImperial',
  );

  /// IRI for schemahttp:SizeSystemMetric
  ///
  /// Metric size system.
  ///
  static const SizeSystemMetric = IriTerm.prevalidated(
    'http://schema.org/SizeSystemMetric',
  );

  /// IRI for schemahttp:Skin
  ///
  /// Skin assessment with clinical examination.
  ///
  static const Skin = IriTerm.prevalidated('http://schema.org/Skin');

  /// IRI for schemahttp:SoldOut
  ///
  /// Indicates that the item has sold out.
  ///
  static const SoldOut = IriTerm.prevalidated('http://schema.org/SoldOut');

  /// IRI for schemahttp:SoundtrackAlbum
  ///
  /// SoundtrackAlbum.
  ///
  static const SoundtrackAlbum = IriTerm.prevalidated(
    'http://schema.org/SoundtrackAlbum',
  );

  /// IRI for schemahttp:SpeechPathology
  ///
  /// The scientific study and treatment of defects, disorders, and malfunctions of speech and voice, as stuttering, lisping, or lalling, and of language disturbances, as aphasia or delayed language acquisition.
  ///
  static const SpeechPathology = IriTerm.prevalidated(
    'http://schema.org/SpeechPathology',
  );

  /// IRI for schemahttp:SpokenWordAlbum
  ///
  /// SpokenWordAlbum.
  ///
  static const SpokenWordAlbum = IriTerm.prevalidated(
    'http://schema.org/SpokenWordAlbum',
  );

  /// IRI for schemahttp:StagedContent
  ///
  /// Content coded 'staged content' in a {[MediaReview]}, considered in the context of how it was published or shared.
  ///
  /// For a {[VideoObject]} to be 'staged content': A video that has been created using actors or similarly contrived.
  ///
  /// For an {[ImageObject]} to be 'staged content': An image that was created using actors or similarly contrived, such as a screenshot of a fake tweet.
  ///
  /// For an {[ImageObject]} with embedded text to be 'staged content': An image that was created using actors or similarly contrived, such as a screenshot of a fake tweet.
  ///
  /// For an {[AudioObject]} to be 'staged content': Audio that has been created using actors or similarly contrived.
  ///
  ///
  static const StagedContent = IriTerm.prevalidated(
    'http://schema.org/StagedContent',
  );

  /// IRI for schemahttp:StagesHealthAspect
  ///
  /// Stages that can be observed from a topic.
  ///
  static const StagesHealthAspect = IriTerm.prevalidated(
    'http://schema.org/StagesHealthAspect',
  );

  /// IRI for schemahttp:StoreCreditRefund
  ///
  /// Specifies that the customer receives a store credit as refund when returning a product.
  ///
  static const StoreCreditRefund = IriTerm.prevalidated(
    'http://schema.org/StoreCreditRefund',
  );

  /// IRI for schemahttp:StrengthTraining
  ///
  /// Physical activity that is engaged in to improve muscle and bone strength. Also referred to as resistance training.
  ///
  static const StrengthTraining = IriTerm.prevalidated(
    'http://schema.org/StrengthTraining',
  );

  /// IRI for schemahttp:StrikethroughPrice
  ///
  /// Represents the strikethrough price (the previous advertised price) of an offered product.
  ///
  static const StrikethroughPrice = IriTerm.prevalidated(
    'http://schema.org/StrikethroughPrice',
  );

  /// IRI for schemahttp:StudioAlbum
  ///
  /// StudioAlbum.
  ///
  static const StudioAlbum = IriTerm.prevalidated(
    'http://schema.org/StudioAlbum',
  );

  /// IRI for schemahttp:Subscription
  ///
  /// Represents the subscription pricing component of the total price for an offered product.
  ///
  static const Subscription = IriTerm.prevalidated(
    'http://schema.org/Subscription',
  );

  /// IRI for schemahttp:Sunday
  ///
  /// The day of the week between Saturday and Monday.
  ///
  static const Sunday = IriTerm.prevalidated('http://schema.org/Sunday');

  /// IRI for schemahttp:Surgical
  ///
  /// A specific branch of medical science that pertains to treating diseases, injuries and deformities by manual and instrumental means.
  ///
  static const Surgical = IriTerm.prevalidated('http://schema.org/Surgical');

  /// IRI for schemahttp:Suspended
  ///
  /// Suspended.
  ///
  static const Suspended = IriTerm.prevalidated('http://schema.org/Suspended');

  /// IRI for schemahttp:SymptomsHealthAspect
  ///
  /// Symptoms or related symptoms of a Topic.
  ///
  static const SymptomsHealthAspect = IriTerm.prevalidated(
    'http://schema.org/SymptomsHealthAspect',
  );

  /// IRI for schemahttp:TaxiVehicleUsage
  ///
  /// Indicates the usage of the car as a taxi.
  ///
  static const TaxiVehicleUsage = IriTerm.prevalidated(
    'http://schema.org/TaxiVehicleUsage',
  );

  /// IRI for schemahttp:Terminated
  ///
  /// Terminated.
  ///
  static const Terminated = IriTerm.prevalidated(
    'http://schema.org/Terminated',
  );

  /// IRI for schemahttp:Therapeutic
  ///
  /// A medical device used for therapeutic purposes.
  ///
  static const Therapeutic = IriTerm.prevalidated(
    'http://schema.org/Therapeutic',
  );

  /// IRI for schemahttp:Throat
  ///
  /// Throat assessment with  clinical examination.
  ///
  static const Throat = IriTerm.prevalidated('http://schema.org/Throat');

  /// IRI for schemahttp:Thursday
  ///
  /// The day of the week between Wednesday and Friday.
  ///
  static const Thursday = IriTerm.prevalidated('http://schema.org/Thursday');

  /// IRI for schemahttp:TierBenefitLoyaltyPoints
  ///
  /// Benefit of the tier is earning of loyalty points.
  ///
  static const TierBenefitLoyaltyPoints = IriTerm.prevalidated(
    'http://schema.org/TierBenefitLoyaltyPoints',
  );

  /// IRI for schemahttp:TierBenefitLoyaltyPrice
  ///
  /// Benefit of the tier is a members-only price.
  ///
  static const TierBenefitLoyaltyPrice = IriTerm.prevalidated(
    'http://schema.org/TierBenefitLoyaltyPrice',
  );

  /// IRI for schemahttp:TierBenefitLoyaltyReturns
  ///
  /// Benefit of the tier is members-only returns, for example free unlimited returns.
  ///
  static const TierBenefitLoyaltyReturns = IriTerm.prevalidated(
    'http://schema.org/TierBenefitLoyaltyReturns',
  );

  /// IRI for schemahttp:TierBenefitLoyaltyShipping
  ///
  /// Benefit of the tier is a members-only shipping price or speed (for example free shipping or 1-day shipping).
  ///
  static const TierBenefitLoyaltyShipping = IriTerm.prevalidated(
    'http://schema.org/TierBenefitLoyaltyShipping',
  );

  /// IRI for schemahttp:TobaccoNicotineConsideration
  ///
  /// Item contains tobacco and/or nicotine, for example cigars, cigarettes, chewing tobacco, e-cigarettes, or hookahs.
  ///
  static const TobaccoNicotineConsideration = IriTerm.prevalidated(
    'http://schema.org/TobaccoNicotineConsideration',
  );

  /// IRI for schemahttp:TollFree
  ///
  /// The associated telephone number is toll free.
  ///
  static const TollFree = IriTerm.prevalidated('http://schema.org/TollFree');

  /// IRI for schemahttp:Toxicologic
  ///
  /// A specific branch of medical science that is concerned with poisons, their nature, effects and detection and involved in the treatment of poisoning.
  ///
  static const Toxicologic = IriTerm.prevalidated(
    'http://schema.org/Toxicologic',
  );

  /// IRI for schemahttp:TraditionalChinese
  ///
  /// A system of medicine based on common theoretical concepts that originated in China and evolved over thousands of years, that uses herbs, acupuncture, exercise, massage, dietary therapy, and other methods to treat a wide range of conditions.
  ///
  static const TraditionalChinese = IriTerm.prevalidated(
    'http://schema.org/TraditionalChinese',
  );

  /// IRI for schemahttp:TrainedAlgorithmicMediaDigitalSource
  ///
  /// Content coded as '<a href="https://cv.iptc.org/newscodes/digitalsourcetype/trainedAlgorithmicMedia">trained algorithmic media</a>' using the IPTC <a href="https://cv.iptc.org/newscodes/digitalsourcetype/">digital source type</a> vocabulary.
  ///
  static const TrainedAlgorithmicMediaDigitalSource = IriTerm.prevalidated(
    'http://schema.org/TrainedAlgorithmicMediaDigitalSource',
  );

  /// IRI for schemahttp:TransformedContent
  ///
  /// Content coded 'transformed content' in a {[MediaReview]}, considered in the context of how it was published or shared.
  ///
  /// For a {[VideoObject]} to be 'transformed content':  or all of the video has been manipulated to transform the footage itself. This category includes using tools like the Adobe Suite to change the speed of the video, add or remove visual elements or dub audio. Deepfakes are also a subset of transformation.
  ///
  /// For an {[ImageObject]} to be 'transformed content': Adding or deleting visual elements to give the image a different meaning with the intention to mislead.
  ///
  /// For an {[ImageObject]} with embedded text to be 'transformed content': Adding or deleting visual elements to give the image a different meaning with the intention to mislead.
  ///
  /// For an {[AudioObject]} to be 'transformed content': Part or all of the audio has been manipulated to alter the words or sounds, or the audio has been synthetically generated, such as to create a sound-alike voice.
  ///
  ///
  static const TransformedContent = IriTerm.prevalidated(
    'http://schema.org/TransformedContent',
  );

  /// IRI for schemahttp:TransitMap
  ///
  /// A transit map.
  ///
  static const TransitMap = IriTerm.prevalidated(
    'http://schema.org/TransitMap',
  );

  /// IRI for schemahttp:TreatmentsHealthAspect
  ///
  /// Treatments or related therapies for a Topic.
  ///
  static const TreatmentsHealthAspect = IriTerm.prevalidated(
    'http://schema.org/TreatmentsHealthAspect',
  );

  /// IRI for schemahttp:TripleBlindedTrial
  ///
  /// A trial design in which neither the researcher, the person administering the therapy nor the patient knows the details of the treatment the patient was randomly assigned to.
  ///
  static const TripleBlindedTrial = IriTerm.prevalidated(
    'http://schema.org/TripleBlindedTrial',
  );

  /// IRI for schemahttp:True
  ///
  /// The boolean value true.
  ///
  static const True = IriTerm.prevalidated('http://schema.org/True');

  /// IRI for schemahttp:Tuesday
  ///
  /// The day of the week between Monday and Wednesday.
  ///
  static const Tuesday = IriTerm.prevalidated('http://schema.org/Tuesday');

  /// IRI for schemahttp:TypesHealthAspect
  ///
  /// Categorization and other types related to a topic.
  ///
  static const TypesHealthAspect = IriTerm.prevalidated(
    'http://schema.org/TypesHealthAspect',
  );

  /// IRI for schemahttp:UKTrust
  ///
  /// UKTrust: Non-profit type referring to a UK trust.
  ///
  static const UKTrust = IriTerm.prevalidated('http://schema.org/UKTrust');

  /// IRI for schemahttp:Ultrasound
  ///
  /// Ultrasound imaging.
  ///
  static const Ultrasound = IriTerm.prevalidated(
    'http://schema.org/Ultrasound',
  );

  /// IRI for schemahttp:UnclassifiedAdultConsideration
  ///
  /// The item is suitable only for adults, without indicating why. Due to widespread use of "adult" as a euphemism for "sexual", many such items are likely suited also for the SexualContentConsideration code.
  ///
  static const UnclassifiedAdultConsideration = IriTerm.prevalidated(
    'http://schema.org/UnclassifiedAdultConsideration',
  );

  /// IRI for schemahttp:UnemploymentSupport
  ///
  /// UnemploymentSupport: this is a benefit for unemployment support.
  ///
  static const UnemploymentSupport = IriTerm.prevalidated(
    'http://schema.org/UnemploymentSupport',
  );

  /// IRI for schemahttp:UnincorporatedAssociationCharity
  ///
  /// UnincorporatedAssociationCharity: Non-profit type referring to a charitable company that is not incorporated (UK).
  ///
  static const UnincorporatedAssociationCharity = IriTerm.prevalidated(
    'http://schema.org/UnincorporatedAssociationCharity',
  );

  /// IRI for schemahttp:UnofficialLegalValue
  ///
  /// Indicates that a document has no particular or special standing (e.g. a republication of a law by a private publisher).
  ///
  static const UnofficialLegalValue = IriTerm.prevalidated(
    'http://schema.org/UnofficialLegalValue',
  );

  /// IRI for schemahttp:Urologic
  ///
  /// A specific branch of medical science that is concerned with the diagnosis and treatment of diseases pertaining to the urinary tract and the urogenital system.
  ///
  static const Urologic = IriTerm.prevalidated('http://schema.org/Urologic');

  /// IRI for schemahttp:UsageOrScheduleHealthAspect
  ///
  /// Content about how, when, frequency and dosage of a topic.
  ///
  static const UsageOrScheduleHealthAspect = IriTerm.prevalidated(
    'http://schema.org/UsageOrScheduleHealthAspect',
  );

  /// IRI for schemahttp:UsedCondition
  ///
  /// Indicates that the item is used.
  ///
  static const UsedCondition = IriTerm.prevalidated(
    'http://schema.org/UsedCondition',
  );

  /// IRI for schemahttp:VeganDiet
  ///
  /// A diet exclusive of all animal products.
  ///
  static const VeganDiet = IriTerm.prevalidated('http://schema.org/VeganDiet');

  /// IRI for schemahttp:VegetarianDiet
  ///
  /// A diet exclusive of animal meat.
  ///
  static const VegetarianDiet = IriTerm.prevalidated(
    'http://schema.org/VegetarianDiet',
  );

  /// IRI for schemahttp:VenueMap
  ///
  /// A venue map (e.g. for malls, auditoriums, museums, etc.).
  ///
  static const VenueMap = IriTerm.prevalidated('http://schema.org/VenueMap');

  /// IRI for schemahttp:VinylFormat
  ///
  /// VinylFormat.
  ///
  static const VinylFormat = IriTerm.prevalidated(
    'http://schema.org/VinylFormat',
  );

  /// IRI for schemahttp:ViolenceConsideration
  ///
  /// Item shows or promotes violence.
  ///
  static const ViolenceConsideration = IriTerm.prevalidated(
    'http://schema.org/ViolenceConsideration',
  );

  /// IRI for schemahttp:VirtualRecordingDigitalSource
  ///
  /// Content coded as '<a href="https://cv.iptc.org/newscodes/digitalsourcetype/virtualRecording">virtual recording</a>' using the IPTC <a href="https://cv.iptc.org/newscodes/digitalsourcetype/">digital source type</a> vocabulary.
  ///
  static const VirtualRecordingDigitalSource = IriTerm.prevalidated(
    'http://schema.org/VirtualRecordingDigitalSource',
  );

  /// IRI for schemahttp:Virus
  ///
  /// Pathogenic virus that causes viral infection.
  ///
  static const Virus = IriTerm.prevalidated('http://schema.org/Virus');

  /// IRI for schemahttp:WeaponConsideration
  ///
  /// The item is intended to induce bodily harm, for example guns, mace, combat knives, brass knuckles, nail or other bombs, and spears.
  ///
  static const WeaponConsideration = IriTerm.prevalidated(
    'http://schema.org/WeaponConsideration',
  );

  /// IRI for schemahttp:WearableMeasurementBack
  ///
  /// Measurement of the back section, for example of a jacket.
  ///
  static const WearableMeasurementBack = IriTerm.prevalidated(
    'http://schema.org/WearableMeasurementBack',
  );

  /// IRI for schemahttp:WearableMeasurementChestOrBust
  ///
  /// Measurement of the chest/bust section, for example of a suit.
  ///
  static const WearableMeasurementChestOrBust = IriTerm.prevalidated(
    'http://schema.org/WearableMeasurementChestOrBust',
  );

  /// IRI for schemahttp:WearableMeasurementCollar
  ///
  /// Measurement of the collar, for example of a shirt.
  ///
  static const WearableMeasurementCollar = IriTerm.prevalidated(
    'http://schema.org/WearableMeasurementCollar',
  );

  /// IRI for schemahttp:WearableMeasurementCup
  ///
  /// Measurement of the cup, for example of a bra.
  ///
  static const WearableMeasurementCup = IriTerm.prevalidated(
    'http://schema.org/WearableMeasurementCup',
  );

  /// IRI for schemahttp:WearableMeasurementHeight
  ///
  /// Measurement of the height, for example the heel height of a shoe.
  ///
  static const WearableMeasurementHeight = IriTerm.prevalidated(
    'http://schema.org/WearableMeasurementHeight',
  );

  /// IRI for schemahttp:WearableMeasurementHips
  ///
  /// Measurement of the hip section, for example of a skirt.
  ///
  static const WearableMeasurementHips = IriTerm.prevalidated(
    'http://schema.org/WearableMeasurementHips',
  );

  /// IRI for schemahttp:WearableMeasurementInseam
  ///
  /// Measurement of the inseam, for example of pants.
  ///
  static const WearableMeasurementInseam = IriTerm.prevalidated(
    'http://schema.org/WearableMeasurementInseam',
  );

  /// IRI for schemahttp:WearableMeasurementLength
  ///
  /// Represents the length, for example of a dress.
  ///
  static const WearableMeasurementLength = IriTerm.prevalidated(
    'http://schema.org/WearableMeasurementLength',
  );

  /// IRI for schemahttp:WearableMeasurementOutsideLeg
  ///
  /// Measurement of the outside leg, for example of pants.
  ///
  static const WearableMeasurementOutsideLeg = IriTerm.prevalidated(
    'http://schema.org/WearableMeasurementOutsideLeg',
  );

  /// IRI for schemahttp:WearableMeasurementSleeve
  ///
  /// Measurement of the sleeve length, for example of a shirt.
  ///
  static const WearableMeasurementSleeve = IriTerm.prevalidated(
    'http://schema.org/WearableMeasurementSleeve',
  );

  /// IRI for schemahttp:WearableMeasurementWaist
  ///
  /// Measurement of the waist section, for example of pants.
  ///
  static const WearableMeasurementWaist = IriTerm.prevalidated(
    'http://schema.org/WearableMeasurementWaist',
  );

  /// IRI for schemahttp:WearableMeasurementWidth
  ///
  /// Measurement of the width, for example of shoes.
  ///
  static const WearableMeasurementWidth = IriTerm.prevalidated(
    'http://schema.org/WearableMeasurementWidth',
  );

  /// IRI for schemahttp:WearableSizeGroupBig
  ///
  /// Size group "Big" for wearables.
  ///
  static const WearableSizeGroupBig = IriTerm.prevalidated(
    'http://schema.org/WearableSizeGroupBig',
  );

  /// IRI for schemahttp:WearableSizeGroupBoys
  ///
  /// Size group "Boys" for wearables.
  ///
  static const WearableSizeGroupBoys = IriTerm.prevalidated(
    'http://schema.org/WearableSizeGroupBoys',
  );

  /// IRI for schemahttp:WearableSizeGroupExtraShort
  ///
  /// Size group "Extra Short" for wearables.
  ///
  static const WearableSizeGroupExtraShort = IriTerm.prevalidated(
    'http://schema.org/WearableSizeGroupExtraShort',
  );

  /// IRI for schemahttp:WearableSizeGroupExtraTall
  ///
  /// Size group "Extra Tall" for wearables.
  ///
  static const WearableSizeGroupExtraTall = IriTerm.prevalidated(
    'http://schema.org/WearableSizeGroupExtraTall',
  );

  /// IRI for schemahttp:WearableSizeGroupGirls
  ///
  /// Size group "Girls" for wearables.
  ///
  static const WearableSizeGroupGirls = IriTerm.prevalidated(
    'http://schema.org/WearableSizeGroupGirls',
  );

  /// IRI for schemahttp:WearableSizeGroupHusky
  ///
  /// Size group "Husky" (or "Stocky") for wearables.
  ///
  static const WearableSizeGroupHusky = IriTerm.prevalidated(
    'http://schema.org/WearableSizeGroupHusky',
  );

  /// IRI for schemahttp:WearableSizeGroupInfants
  ///
  /// Size group "Infants" for wearables.
  ///
  static const WearableSizeGroupInfants = IriTerm.prevalidated(
    'http://schema.org/WearableSizeGroupInfants',
  );

  /// IRI for schemahttp:WearableSizeGroupJuniors
  ///
  /// Size group "Juniors" for wearables.
  ///
  static const WearableSizeGroupJuniors = IriTerm.prevalidated(
    'http://schema.org/WearableSizeGroupJuniors',
  );

  /// IRI for schemahttp:WearableSizeGroupMaternity
  ///
  /// Size group "Maternity" for wearables.
  ///
  static const WearableSizeGroupMaternity = IriTerm.prevalidated(
    'http://schema.org/WearableSizeGroupMaternity',
  );

  /// IRI for schemahttp:WearableSizeGroupMens
  ///
  /// Size group "Mens" for wearables.
  ///
  static const WearableSizeGroupMens = IriTerm.prevalidated(
    'http://schema.org/WearableSizeGroupMens',
  );

  /// IRI for schemahttp:WearableSizeGroupMisses
  ///
  /// Size group "Misses" (also known as "Missy") for wearables.
  ///
  static const WearableSizeGroupMisses = IriTerm.prevalidated(
    'http://schema.org/WearableSizeGroupMisses',
  );

  /// IRI for schemahttp:WearableSizeGroupPetite
  ///
  /// Size group "Petite" for wearables.
  ///
  static const WearableSizeGroupPetite = IriTerm.prevalidated(
    'http://schema.org/WearableSizeGroupPetite',
  );

  /// IRI for schemahttp:WearableSizeGroupPlus
  ///
  /// Size group "Plus" for wearables.
  ///
  static const WearableSizeGroupPlus = IriTerm.prevalidated(
    'http://schema.org/WearableSizeGroupPlus',
  );

  /// IRI for schemahttp:WearableSizeGroupRegular
  ///
  /// Size group "Regular" for wearables.
  ///
  static const WearableSizeGroupRegular = IriTerm.prevalidated(
    'http://schema.org/WearableSizeGroupRegular',
  );

  /// IRI for schemahttp:WearableSizeGroupShort
  ///
  /// Size group "Short" for wearables.
  ///
  static const WearableSizeGroupShort = IriTerm.prevalidated(
    'http://schema.org/WearableSizeGroupShort',
  );

  /// IRI for schemahttp:WearableSizeGroupTall
  ///
  /// Size group "Tall" for wearables.
  ///
  static const WearableSizeGroupTall = IriTerm.prevalidated(
    'http://schema.org/WearableSizeGroupTall',
  );

  /// IRI for schemahttp:WearableSizeGroupWomens
  ///
  /// Size group "Womens" for wearables.
  ///
  static const WearableSizeGroupWomens = IriTerm.prevalidated(
    'http://schema.org/WearableSizeGroupWomens',
  );

  /// IRI for schemahttp:WearableSizeSystemAU
  ///
  /// Australian size system for wearables.
  ///
  static const WearableSizeSystemAU = IriTerm.prevalidated(
    'http://schema.org/WearableSizeSystemAU',
  );

  /// IRI for schemahttp:WearableSizeSystemBR
  ///
  /// Brazilian size system for wearables.
  ///
  static const WearableSizeSystemBR = IriTerm.prevalidated(
    'http://schema.org/WearableSizeSystemBR',
  );

  /// IRI for schemahttp:WearableSizeSystemCN
  ///
  /// Chinese size system for wearables.
  ///
  static const WearableSizeSystemCN = IriTerm.prevalidated(
    'http://schema.org/WearableSizeSystemCN',
  );

  /// IRI for schemahttp:WearableSizeSystemContinental
  ///
  /// Continental size system for wearables.
  ///
  static const WearableSizeSystemContinental = IriTerm.prevalidated(
    'http://schema.org/WearableSizeSystemContinental',
  );

  /// IRI for schemahttp:WearableSizeSystemDE
  ///
  /// German size system for wearables.
  ///
  static const WearableSizeSystemDE = IriTerm.prevalidated(
    'http://schema.org/WearableSizeSystemDE',
  );

  /// IRI for schemahttp:WearableSizeSystemEN13402
  ///
  /// EN 13402 (joint European standard for size labelling of clothes).
  ///
  static const WearableSizeSystemEN13402 = IriTerm.prevalidated(
    'http://schema.org/WearableSizeSystemEN13402',
  );

  /// IRI for schemahttp:WearableSizeSystemEurope
  ///
  /// European size system for wearables.
  ///
  static const WearableSizeSystemEurope = IriTerm.prevalidated(
    'http://schema.org/WearableSizeSystemEurope',
  );

  /// IRI for schemahttp:WearableSizeSystemFR
  ///
  /// French size system for wearables.
  ///
  static const WearableSizeSystemFR = IriTerm.prevalidated(
    'http://schema.org/WearableSizeSystemFR',
  );

  /// IRI for schemahttp:WearableSizeSystemGS1
  ///
  /// GS1 (formerly NRF) size system for wearables.
  ///
  static const WearableSizeSystemGS1 = IriTerm.prevalidated(
    'http://schema.org/WearableSizeSystemGS1',
  );

  /// IRI for schemahttp:WearableSizeSystemIT
  ///
  /// Italian size system for wearables.
  ///
  static const WearableSizeSystemIT = IriTerm.prevalidated(
    'http://schema.org/WearableSizeSystemIT',
  );

  /// IRI for schemahttp:WearableSizeSystemJP
  ///
  /// Japanese size system for wearables.
  ///
  static const WearableSizeSystemJP = IriTerm.prevalidated(
    'http://schema.org/WearableSizeSystemJP',
  );

  /// IRI for schemahttp:WearableSizeSystemMX
  ///
  /// Mexican size system for wearables.
  ///
  static const WearableSizeSystemMX = IriTerm.prevalidated(
    'http://schema.org/WearableSizeSystemMX',
  );

  /// IRI for schemahttp:WearableSizeSystemUK
  ///
  /// United Kingdom size system for wearables.
  ///
  static const WearableSizeSystemUK = IriTerm.prevalidated(
    'http://schema.org/WearableSizeSystemUK',
  );

  /// IRI for schemahttp:WearableSizeSystemUS
  ///
  /// United States size system for wearables.
  ///
  static const WearableSizeSystemUS = IriTerm.prevalidated(
    'http://schema.org/WearableSizeSystemUS',
  );

  /// IRI for schemahttp:Wednesday
  ///
  /// The day of the week between Tuesday and Thursday.
  ///
  static const Wednesday = IriTerm.prevalidated('http://schema.org/Wednesday');

  /// IRI for schemahttp:WesternConventional
  ///
  /// The conventional Western system of medicine, that aims to apply the best available evidence gained from the scientific method to clinical decision making. Also known as conventional or Western medicine.
  ///
  static const WesternConventional = IriTerm.prevalidated(
    'http://schema.org/WesternConventional',
  );

  /// IRI for schemahttp:Wholesale
  ///
  /// The drug's cost represents the wholesale acquisition cost of the drug.
  ///
  static const Wholesale = IriTerm.prevalidated('http://schema.org/Wholesale');

  /// IRI for schemahttp:Withdrawn
  ///
  /// Withdrawn.
  ///
  static const Withdrawn = IriTerm.prevalidated('http://schema.org/Withdrawn');

  /// IRI for schemahttp:WritePermission
  ///
  /// Permission to write or edit the document.
  ///
  static const WritePermission = IriTerm.prevalidated(
    'http://schema.org/WritePermission',
  );

  /// IRI for schemahttp:XRay
  ///
  /// X-ray imaging.
  ///
  static const XRay = IriTerm.prevalidated('http://schema.org/XRay');

  /// IRI for schemahttp:ZoneBoardingPolicy
  ///
  /// The airline boards by zones of the plane.
  ///
  static const ZoneBoardingPolicy = IriTerm.prevalidated(
    'http://schema.org/ZoneBoardingPolicy',
  );

  /// IRI for schemahttp:Dermatology
  ///
  /// A specific branch of medical science that pertains to diagnosis and treatment of disorders of skin.
  ///
  static const Dermatology = IriTerm.prevalidated(
    'http://schema.org/Dermatology',
  );

  /// IRI for schemahttp:docs_collab_STI_Accommodation_Ontology
  ///
  ///
  ///
  static const docs_collab_STI_Accommodation_Ontology = IriTerm.prevalidated(
    'http://schema.org/docs/collab/STI_Accommodation_Ontology',
  );

  /// IRI for schemahttp:docs_collab_ActionCollabClass
  ///
  ///
  ///
  static const docs_collab_ActionCollabClass = IriTerm.prevalidated(
    'http://schema.org/docs/collab/ActionCollabClass',
  );

  /// IRI for schemahttp:docs_collab_TP
  ///
  ///
  ///
  static const docs_collab_TP = IriTerm.prevalidated(
    'http://schema.org/docs/collab/TP',
  );

  /// IRI for schemahttp:docs_collab_LRMIClass
  ///
  ///
  ///
  static const docs_collab_LRMIClass = IriTerm.prevalidated(
    'http://schema.org/docs/collab/LRMIClass',
  );

  /// IRI for schemahttp:docs_collab_QAStackExchange
  ///
  ///
  ///
  static const docs_collab_QAStackExchange = IriTerm.prevalidated(
    'http://schema.org/docs/collab/QAStackExchange',
  );

  /// IRI for schemahttp:docs_collab_rNews
  ///
  ///
  ///
  static const docs_collab_rNews = IriTerm.prevalidated(
    'http://schema.org/docs/collab/rNews',
  );

  /// IRI for schemahttp:docs_collab_FIBO
  ///
  ///
  ///
  static const docs_collab_FIBO = IriTerm.prevalidated(
    'http://schema.org/docs/collab/FIBO',
  );

  /// IRI for schemahttp:docs_collab_GoodRelationsClass
  ///
  ///
  ///
  static const docs_collab_GoodRelationsClass = IriTerm.prevalidated(
    'http://schema.org/docs/collab/GoodRelationsClass',
  );

  /// IRI for schemahttp:docs_collab_Automotive_Ontology_Working_Group
  ///
  ///
  ///
  static const docs_collab_Automotive_Ontology_Working_Group =
      IriTerm.prevalidated(
        'http://schema.org/docs/collab/Automotive_Ontology_Working_Group',
      );

  /// IRI for schemahttp:docs_collab_DatasetClass
  ///
  ///
  ///
  static const docs_collab_DatasetClass = IriTerm.prevalidated(
    'http://schema.org/docs/collab/DatasetClass',
  );

  /// IRI for schemahttp:docs_collab_FundInfoCollab
  ///
  ///
  ///
  static const docs_collab_FundInfoCollab = IriTerm.prevalidated(
    'http://schema.org/docs/collab/FundInfoCollab',
  );

  /// IRI for schemahttp:docs_collab_ELI
  ///
  ///
  ///
  static const docs_collab_ELI = IriTerm.prevalidated(
    'http://schema.org/docs/collab/ELI',
  );

  /// IRI for schemahttp:docs_collab_WikiDoc
  ///
  ///
  ///
  static const docs_collab_WikiDoc = IriTerm.prevalidated(
    'http://schema.org/docs/collab/WikiDoc',
  );

  /// IRI for schemahttp:docs_collab_MBZ
  ///
  ///
  ///
  static const docs_collab_MBZ = IriTerm.prevalidated(
    'http://schema.org/docs/collab/MBZ',
  );

  /// IRI for schemahttp:docs_collab_GoodRelationsTerms
  ///
  ///
  ///
  static const docs_collab_GoodRelationsTerms = IriTerm.prevalidated(
    'http://schema.org/docs/collab/GoodRelationsTerms',
  );

  /// IRI for schemahttp:docs_collab_bibex
  ///
  ///
  ///
  static const docs_collab_bibex = IriTerm.prevalidated(
    'http://schema.org/docs/collab/bibex',
  );

  /// IRI for schemahttp:docs_collab_IIT_CNR_it
  ///
  ///
  ///
  static const docs_collab_IIT_CNR_it = IriTerm.prevalidated(
    'http://schema.org/docs/collab/IIT-CNR.it',
  );

  /// IRI for schemahttp:docs_collab_Tourism
  ///
  ///
  ///
  static const docs_collab_Tourism = IriTerm.prevalidated(
    'http://schema.org/docs/collab/Tourism',
  );

  /// IRI for schemahttp:DeliveryTimeSettings
  ///
  ///
  ///
  static const DeliveryTimeSettings = IriTerm.prevalidated(
    'http://schema.org/DeliveryTimeSettings',
  );

  /// IRI for schemahttp:docs_collab_GLEIF
  ///
  ///
  ///
  static const docs_collab_GLEIF = IriTerm.prevalidated(
    'http://schema.org/docs/collab/GLEIF',
  );

  /// IRI for schemahttp:abridged [Expects: http://schema.org/Boolean]
  ///
  /// Indicates whether the book is an abridged edition.
  ///
  /// Can be used on: http://schema.org/Book
  ///
  static const abridged = IriTerm.prevalidated('http://schema.org/abridged');

  /// IRI for schemahttp:abstract_ [Expects: http://schema.org/Text]
  ///
  /// An abstract is a short description that summarizes a {[CreativeWork]}.
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const abstract_ = IriTerm.prevalidated('http://schema.org/abstract');

  /// IRI for schemahttp:accelerationTime [Expects: http://schema.org/QuantitativeValue]
  ///
  /// The time needed to accelerate the vehicle from a given start velocity to a given target velocity.\n\nTypical unit code(s): SEC for seconds\n\n* Note: There are unfortunately no standard unit codes for seconds/0..100 km/h or seconds/0..60 mph. Simply use "SEC" for seconds and indicate the velocities in the {[name]} of the {[QuantitativeValue]}, or use {[valueReference]} with a {[QuantitativeValue]} of 0..60 mph or 0..100 km/h to specify the reference speeds.
  ///
  /// Can be used on: http://schema.org/Vehicle
  ///
  static const accelerationTime = IriTerm.prevalidated(
    'http://schema.org/accelerationTime',
  );

  /// IRI for schemahttp:acceptedAnswer [Expects: http://schema.org/Answer, http://schema.org/ItemList]
  ///
  /// The answer(s) that has been accepted as best, typically on a Question/Answer site. Sites vary in their selection mechanisms, e.g. drawing on community opinion and/or the view of the Question author.
  ///
  /// Can be used on: http://schema.org/Question
  ///
  static const acceptedAnswer = IriTerm.prevalidated(
    'http://schema.org/acceptedAnswer',
  );

  /// IRI for schemahttp:acceptedOffer [Expects: http://schema.org/Offer]
  ///
  /// The offer(s) -- e.g., product, quantity and price combinations -- included in the order.
  ///
  /// Can be used on: http://schema.org/Order
  ///
  static const acceptedOffer = IriTerm.prevalidated(
    'http://schema.org/acceptedOffer',
  );

  /// IRI for schemahttp:acceptedPaymentMethod [Expects: http://schema.org/LoanOrCredit, http://schema.org/PaymentMethod, http://schema.org/Text]
  ///
  /// The payment method(s) that are accepted in general by an organization, or for some specific demand or offer.
  ///
  /// Can be used on: http://schema.org/Demand, http://schema.org/Offer, http://schema.org/Organization
  ///
  static const acceptedPaymentMethod = IriTerm.prevalidated(
    'http://schema.org/acceptedPaymentMethod',
  );

  /// IRI for schemahttp:acceptsReservations [Expects: http://schema.org/Boolean, http://schema.org/Text, http://schema.org/URL]
  ///
  /// Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
  ///
  /// Can be used on: http://schema.org/FoodEstablishment
  ///
  static const acceptsReservations = IriTerm.prevalidated(
    'http://schema.org/acceptsReservations',
  );

  /// IRI for schemahttp:accessCode [Expects: http://schema.org/Text]
  ///
  /// Password, PIN, or access code needed for delivery (e.g. from a locker).
  ///
  /// Can be used on: http://schema.org/DeliveryEvent
  ///
  static const accessCode = IriTerm.prevalidated(
    'http://schema.org/accessCode',
  );

  /// IRI for schemahttp:accessMode [Expects: http://schema.org/Text]
  ///
  /// The human sensory perceptual system or cognitive faculty through which a person may process or perceive information. Values should be drawn from the [approved vocabulary](https://www.w3.org/2021/a11y-discov-vocab/latest/#accessMode-vocabulary).
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const accessMode = IriTerm.prevalidated(
    'http://schema.org/accessMode',
  );

  /// IRI for schemahttp:accessModeSufficient [Expects: http://schema.org/ItemList]
  ///
  /// A list of single or combined accessModes that are sufficient to understand all the intellectual content of a resource. Values should be drawn from the [approved vocabulary](https://www.w3.org/2021/a11y-discov-vocab/latest/#accessModeSufficient-vocabulary).
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const accessModeSufficient = IriTerm.prevalidated(
    'http://schema.org/accessModeSufficient',
  );

  /// IRI for schemahttp:accessibilityAPI [Expects: http://schema.org/Text]
  ///
  /// Indicates that the resource is compatible with the referenced accessibility API. Values should be drawn from the [approved vocabulary](https://www.w3.org/2021/a11y-discov-vocab/latest/#accessibilityAPI-vocabulary).
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const accessibilityAPI = IriTerm.prevalidated(
    'http://schema.org/accessibilityAPI',
  );

  /// IRI for schemahttp:accessibilityControl [Expects: http://schema.org/Text]
  ///
  /// Identifies input methods that are sufficient to fully control the described resource. Values should be drawn from the [approved vocabulary](https://www.w3.org/2021/a11y-discov-vocab/latest/#accessibilityControl-vocabulary).
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const accessibilityControl = IriTerm.prevalidated(
    'http://schema.org/accessibilityControl',
  );

  /// IRI for schemahttp:accessibilityFeature [Expects: http://schema.org/Text]
  ///
  /// Content features of the resource, such as accessible media, alternatives and supported enhancements for accessibility. Values should be drawn from the [approved vocabulary](https://www.w3.org/2021/a11y-discov-vocab/latest/#accessibilityFeature-vocabulary).
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const accessibilityFeature = IriTerm.prevalidated(
    'http://schema.org/accessibilityFeature',
  );

  /// IRI for schemahttp:accessibilityHazard [Expects: http://schema.org/Text]
  ///
  /// A characteristic of the described resource that is physiologically dangerous to some users. Related to WCAG 2.0 guideline 2.3. Values should be drawn from the [approved vocabulary](https://www.w3.org/2021/a11y-discov-vocab/latest/#accessibilityHazard-vocabulary).
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const accessibilityHazard = IriTerm.prevalidated(
    'http://schema.org/accessibilityHazard',
  );

  /// IRI for schemahttp:accessibilitySummary [Expects: http://schema.org/Text]
  ///
  /// A human-readable summary of specific accessibility features or deficiencies, consistent with the other accessibility metadata but expressing subtleties such as "short descriptions are present but long descriptions will be needed for non-visual users" or "short descriptions are present and no long descriptions are needed".
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const accessibilitySummary = IriTerm.prevalidated(
    'http://schema.org/accessibilitySummary',
  );

  /// IRI for schemahttp:accommodationCategory [Expects: http://schema.org/Text]
  ///
  /// Category of an {[Accommodation]}, following real estate conventions, e.g. RESO (see [PropertySubType](https://ddwiki.reso.org/display/DDW17/PropertySubType+Field), and [PropertyType](https://ddwiki.reso.org/display/DDW17/PropertyType+Field) fields  for suggested values).
  ///
  /// Can be used on: http://schema.org/Accommodation
  ///
  static const accommodationCategory = IriTerm.prevalidated(
    'http://schema.org/accommodationCategory',
  );

  /// IRI for schemahttp:accommodationFloorPlan [Expects: http://schema.org/FloorPlan]
  ///
  /// A floorplan of some {[Accommodation]}.
  ///
  /// Can be used on: http://schema.org/Accommodation, http://schema.org/Residence
  ///
  static const accommodationFloorPlan = IriTerm.prevalidated(
    'http://schema.org/accommodationFloorPlan',
  );

  /// IRI for schemahttp:accountId [Expects: http://schema.org/Text]
  ///
  /// The identifier for the account the payment will be applied to.
  ///
  /// Can be used on: http://schema.org/Invoice
  ///
  static const accountId = IriTerm.prevalidated('http://schema.org/accountId');

  /// IRI for schemahttp:accountMinimumInflow [Expects: http://schema.org/MonetaryAmount]
  ///
  /// A minimum amount that has to be paid in every month.
  ///
  /// Can be used on: http://schema.org/BankAccount
  ///
  static const accountMinimumInflow = IriTerm.prevalidated(
    'http://schema.org/accountMinimumInflow',
  );

  /// IRI for schemahttp:accountOverdraftLimit [Expects: http://schema.org/MonetaryAmount]
  ///
  /// An overdraft is an extension of credit from a lending institution when an account reaches zero. An overdraft allows the individual to continue withdrawing money even if the account has no funds in it. Basically the bank allows people to borrow a set amount of money.
  ///
  /// Can be used on: http://schema.org/BankAccount
  ///
  static const accountOverdraftLimit = IriTerm.prevalidated(
    'http://schema.org/accountOverdraftLimit',
  );

  /// IRI for schemahttp:accountablePerson [Expects: http://schema.org/Person]
  ///
  /// Specifies the Person that is legally accountable for the CreativeWork.
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const accountablePerson = IriTerm.prevalidated(
    'http://schema.org/accountablePerson',
  );

  /// IRI for schemahttp:acquireLicensePage [Expects: http://schema.org/CreativeWork, http://schema.org/URL]
  ///
  /// Indicates a page documenting how licenses can be purchased or otherwise acquired, for the current item.
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const acquireLicensePage = IriTerm.prevalidated(
    'http://schema.org/acquireLicensePage',
  );

  /// IRI for schemahttp:acquiredFrom [Expects: http://schema.org/Organization, http://schema.org/Person]
  ///
  /// The organization or person from which the product was acquired.
  ///
  /// Can be used on: http://schema.org/OwnershipInfo
  ///
  static const acquiredFrom = IriTerm.prevalidated(
    'http://schema.org/acquiredFrom',
  );

  /// IRI for schemahttp:acrissCode [Expects: http://schema.org/Text]
  ///
  /// The ACRISS Car Classification Code is a code used by many car rental companies, for classifying vehicles. ACRISS stands for Association of Car Rental Industry Systems and Standards.
  ///
  /// Can be used on: http://schema.org/BusOrCoach, http://schema.org/Car
  ///
  static const acrissCode = IriTerm.prevalidated(
    'http://schema.org/acrissCode',
  );

  /// IRI for schemahttp:actionAccessibilityRequirement [Expects: http://schema.org/ActionAccessSpecification]
  ///
  /// A set of requirements that must be fulfilled in order to perform an Action. If more than one value is specified, fulfilling one set of requirements will allow the Action to be performed.
  ///
  /// Can be used on: http://schema.org/ConsumeAction
  ///
  static const actionAccessibilityRequirement = IriTerm.prevalidated(
    'http://schema.org/actionAccessibilityRequirement',
  );

  /// IRI for schemahttp:actionPlatform [Expects: http://schema.org/DigitalPlatformEnumeration, http://schema.org/Text, http://schema.org/URL]
  ///
  /// The high level platform(s) where the Action can be performed for the given URL. To specify a specific application or operating system instance, use actionApplication.
  ///
  /// Can be used on: http://schema.org/EntryPoint
  ///
  static const actionPlatform = IriTerm.prevalidated(
    'http://schema.org/actionPlatform',
  );

  /// IRI for schemahttp:actionProcess [Expects: http://schema.org/HowTo]
  ///
  /// Description of the process by which the action was performed.
  ///
  /// Can be used on: http://schema.org/Action
  ///
  static const actionProcess = IriTerm.prevalidated(
    'http://schema.org/actionProcess',
  );

  /// IRI for schemahttp:actionStatus [Expects: http://schema.org/ActionStatusType]
  ///
  /// Indicates the current disposition of the Action.
  ///
  /// Can be used on: http://schema.org/Action
  ///
  static const actionStatus = IriTerm.prevalidated(
    'http://schema.org/actionStatus',
  );

  /// IRI for schemahttp:actionableFeedbackPolicy [Expects: http://schema.org/CreativeWork, http://schema.org/URL]
  ///
  /// For a {[NewsMediaOrganization]} or other news-related {[Organization]}, a statement about public engagement activities (for news media, the newsroom‚Äôs), including involving the public - digitally or otherwise -- in coverage decisions, reporting and activities after publication.
  ///
  /// Can be used on: http://schema.org/NewsMediaOrganization, http://schema.org/Organization
  ///
  static const actionableFeedbackPolicy = IriTerm.prevalidated(
    'http://schema.org/actionableFeedbackPolicy',
  );

  /// IRI for schemahttp:activeIngredient [Expects: http://schema.org/Text]
  ///
  /// An active ingredient, typically chemical compounds and/or biologic substances.
  ///
  /// Can be used on: http://schema.org/DietarySupplement, http://schema.org/Drug, http://schema.org/DrugStrength, http://schema.org/Substance
  ///
  static const activeIngredient = IriTerm.prevalidated(
    'http://schema.org/activeIngredient',
  );

  /// IRI for schemahttp:activityDuration [Expects: http://schema.org/Duration, http://schema.org/QuantitativeValue]
  ///
  /// Length of time to engage in the activity.
  ///
  /// Can be used on: http://schema.org/ExercisePlan
  ///
  static const activityDuration = IriTerm.prevalidated(
    'http://schema.org/activityDuration',
  );

  /// IRI for schemahttp:activityFrequency [Expects: http://schema.org/QuantitativeValue, http://schema.org/Text]
  ///
  /// How often one should engage in the activity.
  ///
  /// Can be used on: http://schema.org/ExercisePlan
  ///
  static const activityFrequency = IriTerm.prevalidated(
    'http://schema.org/activityFrequency',
  );

  /// IRI for schemahttp:actors [Expects: http://schema.org/Person]
  ///
  /// An actor, e.g. in TV, radio, movie, video games etc. Actors can be associated with individual items or with a series, episode, clip.
  ///
  /// Can be used on: http://schema.org/Clip, http://schema.org/Episode, http://schema.org/Movie, http://schema.org/MovieSeries, http://schema.org/RadioSeries, http://schema.org/TVSeries, http://schema.org/VideoGame, http://schema.org/VideoGameSeries, http://schema.org/VideoObject
  ///
  static const actors = IriTerm.prevalidated('http://schema.org/actors');

  /// IRI for schemahttp:addOn [Expects: http://schema.org/Offer]
  ///
  /// An additional offer that can only be obtained in combination with the first base offer (e.g. supplements and extensions that are available for a surcharge).
  ///
  /// Can be used on: http://schema.org/Offer
  ///
  static const addOn = IriTerm.prevalidated('http://schema.org/addOn');

  /// IRI for schemahttp:additionalName [Expects: http://schema.org/Text]
  ///
  /// An additional name for a Person, can be used for a middle name.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const additionalName = IriTerm.prevalidated(
    'http://schema.org/additionalName',
  );

  /// IRI for schemahttp:additionalNumberOfGuests [Expects: http://schema.org/Number]
  ///
  /// If responding yes, the number of guests who will attend in addition to the invitee.
  ///
  /// Can be used on: http://schema.org/RsvpAction
  ///
  static const additionalNumberOfGuests = IriTerm.prevalidated(
    'http://schema.org/additionalNumberOfGuests',
  );

  /// IRI for schemahttp:additionalProperty [Expects: http://schema.org/PropertyValue]
  ///
  /// A property-value pair representing an additional characteristic of the entity, e.g. a product feature or another characteristic for which there is no matching property in schema.org.\n\nNote: Publishers should be aware that applications designed to use specific schema.org properties (e.g. http://schema.org/width, http://schema.org/color, http://schema.org/gtin13, ...) will typically expect such data to be provided using those properties, rather than using the generic property/value mechanism.
  ///
  ///
  /// Can be used on: http://schema.org/MerchantReturnPolicy, http://schema.org/Offer, http://schema.org/Place, http://schema.org/Product, http://schema.org/QualitativeValue, http://schema.org/QuantitativeValue
  ///
  static const additionalProperty = IriTerm.prevalidated(
    'http://schema.org/additionalProperty',
  );

  /// IRI for schemahttp:additionalType [Expects: http://schema.org/Text, http://schema.org/URL]
  ///
  /// An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. Typically the value is a URI-identified RDF class, and in this case corresponds to the
  /// use of rdf:type in RDF. Text values can be used sparingly, for cases where useful information can be added without their being an appropriate schema to reference. In the case of text values, the class label should follow the schema.org <a href="http://schema.org/docs/styleguide.html">style guide</a>.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const additionalType = IriTerm.prevalidated(
    'http://schema.org/additionalType',
  );

  /// IRI for schemahttp:additionalVariable [Expects: http://schema.org/Text]
  ///
  /// Any additional component of the exercise prescription that may need to be articulated to the patient. This may include the order of exercises, the number of repetitions of movement, quantitative distance, progressions over time, etc.
  ///
  /// Can be used on: http://schema.org/ExercisePlan
  ///
  static const additionalVariable = IriTerm.prevalidated(
    'http://schema.org/additionalVariable',
  );

  /// IRI for schemahttp:address [Expects: http://schema.org/PostalAddress, http://schema.org/Text]
  ///
  /// Physical address of the item.
  ///
  /// Can be used on: http://schema.org/GeoCoordinates, http://schema.org/GeoShape, http://schema.org/Organization, http://schema.org/Person, http://schema.org/Place
  ///
  static const address = IriTerm.prevalidated('http://schema.org/address');

  /// IRI for schemahttp:addressCountry [Expects: http://schema.org/Country, http://schema.org/Text]
  ///
  /// The country. Recommended to be in 2-letter [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1) format, for example "US". For backward compatibility, a 3-letter [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) country code such as "SGP" or a full country name such as "Singapore" can also be used.
  ///
  /// Can be used on: http://schema.org/DefinedRegion, http://schema.org/GeoCoordinates, http://schema.org/GeoShape, http://schema.org/PostalAddress
  ///
  static const addressCountry = IriTerm.prevalidated(
    'http://schema.org/addressCountry',
  );

  /// IRI for schemahttp:addressLocality [Expects: http://schema.org/Text]
  ///
  /// The locality in which the street address is, and which is in the region. For example, Mountain View.
  ///
  /// Can be used on: http://schema.org/PostalAddress
  ///
  static const addressLocality = IriTerm.prevalidated(
    'http://schema.org/addressLocality',
  );

  /// IRI for schemahttp:addressRegion [Expects: http://schema.org/Text]
  ///
  /// The region in which the locality is, and which is in the country. For example, California or another appropriate first-level [Administrative division](https://en.wikipedia.org/wiki/List_of_administrative_divisions_by_country).
  ///
  /// Can be used on: http://schema.org/DefinedRegion, http://schema.org/PostalAddress
  ///
  static const addressRegion = IriTerm.prevalidated(
    'http://schema.org/addressRegion',
  );

  /// IRI for schemahttp:administrationRoute [Expects: http://schema.org/Text]
  ///
  /// A route by which this drug may be administered, e.g. 'oral'.
  ///
  /// Can be used on: http://schema.org/Drug
  ///
  static const administrationRoute = IriTerm.prevalidated(
    'http://schema.org/administrationRoute',
  );

  /// IRI for schemahttp:advanceBookingRequirement [Expects: http://schema.org/QuantitativeValue]
  ///
  /// The amount of time that is required between accepting the offer and the actual usage of the resource or service.
  ///
  /// Can be used on: http://schema.org/Demand, http://schema.org/Offer
  ///
  static const advanceBookingRequirement = IriTerm.prevalidated(
    'http://schema.org/advanceBookingRequirement',
  );

  /// IRI for schemahttp:adverseOutcome [Expects: http://schema.org/MedicalEntity]
  ///
  /// A possible complication and/or side effect of this therapy. If it is known that an adverse outcome is serious (resulting in death, disability, or permanent damage; requiring hospitalization; or otherwise life-threatening or requiring immediate medical attention), tag it as a seriousAdverseOutcome instead.
  ///
  /// Can be used on: http://schema.org/MedicalDevice, http://schema.org/TherapeuticProcedure
  ///
  static const adverseOutcome = IriTerm.prevalidated(
    'http://schema.org/adverseOutcome',
  );

  /// IRI for schemahttp:affectedBy [Expects: http://schema.org/Drug]
  ///
  /// Drugs that affect the test's results.
  ///
  /// Can be used on: http://schema.org/MedicalTest
  ///
  static const affectedBy = IriTerm.prevalidated(
    'http://schema.org/affectedBy',
  );

  /// IRI for schemahttp:affiliation [Expects: http://schema.org/Organization]
  ///
  /// An organization that this person is affiliated with. For example, a school/university, a club, or a team.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const affiliation = IriTerm.prevalidated(
    'http://schema.org/affiliation',
  );

  /// IRI for schemahttp:afterMedia [Expects: http://schema.org/MediaObject, http://schema.org/URL]
  ///
  /// A media object representing the circumstances after performing this direction.
  ///
  /// Can be used on: http://schema.org/HowToDirection
  ///
  static const afterMedia = IriTerm.prevalidated(
    'http://schema.org/afterMedia',
  );

  /// IRI for schemahttp:agent [Expects: http://schema.org/Organization, http://schema.org/Person]
  ///
  /// The direct performer or driver of the action (animate or inanimate). E.g. *John* wrote a book.
  ///
  /// Can be used on: http://schema.org/Action
  ///
  static const agent = IriTerm.prevalidated('http://schema.org/agent');

  /// IRI for schemahttp:agentInteractionStatistic [Expects: http://schema.org/InteractionCounter]
  ///
  /// The number of completed interactions for this entity, in a particular role (the 'agent'), in a particular action (indicated in the statistic), and in a particular context (i.e. interactionService).
  ///
  /// Can be used on: http://schema.org/Organization, http://schema.org/Person
  ///
  static const agentInteractionStatistic = IriTerm.prevalidated(
    'http://schema.org/agentInteractionStatistic',
  );

  /// IRI for schemahttp:aggregateElement [Expects: http://schema.org/Thing]
  ///
  /// Indicates a prototype of the elements in the list that is used to hold aggregate information (ratings, offers, etc.).
  ///
  /// Can be used on: http://schema.org/ItemList
  ///
  static const aggregateElement = IriTerm.prevalidated(
    'http://schema.org/aggregateElement',
  );

  /// IRI for schemahttp:aggregateRating [Expects: http://schema.org/AggregateRating]
  ///
  /// The overall rating, based on a collection of reviews or ratings, of the item.
  ///
  /// Can be used on: http://schema.org/Brand, http://schema.org/CreativeWork, http://schema.org/Event, http://schema.org/Offer, http://schema.org/Organization, http://schema.org/Place, http://schema.org/Product, http://schema.org/Service
  ///
  static const aggregateRating = IriTerm.prevalidated(
    'http://schema.org/aggregateRating',
  );

  /// IRI for schemahttp:aircraft [Expects: http://schema.org/Text, http://schema.org/Vehicle]
  ///
  /// The kind of aircraft (e.g., "Boeing 747").
  ///
  /// Can be used on: http://schema.org/Flight
  ///
  static const aircraft = IriTerm.prevalidated('http://schema.org/aircraft');

  /// IRI for schemahttp:albumProductionType [Expects: http://schema.org/MusicAlbumProductionType]
  ///
  /// Classification of the album by its type of content: soundtrack, live album, studio album, etc.
  ///
  /// Can be used on: http://schema.org/MusicAlbum
  ///
  static const albumProductionType = IriTerm.prevalidated(
    'http://schema.org/albumProductionType',
  );

  /// IRI for schemahttp:albumReleaseType [Expects: http://schema.org/MusicAlbumReleaseType]
  ///
  /// The kind of release which this album is: single, EP or album.
  ///
  /// Can be used on: http://schema.org/MusicAlbum
  ///
  static const albumReleaseType = IriTerm.prevalidated(
    'http://schema.org/albumReleaseType',
  );

  /// IRI for schemahttp:albums [Expects: http://schema.org/MusicAlbum]
  ///
  /// A collection of music albums.
  ///
  /// Can be used on: http://schema.org/MusicGroup
  ///
  static const albums = IriTerm.prevalidated('http://schema.org/albums');

  /// IRI for schemahttp:alcoholWarning [Expects: http://schema.org/Text]
  ///
  /// Any precaution, guidance, contraindication, etc. related to consumption of alcohol while taking this drug.
  ///
  /// Can be used on: http://schema.org/Drug
  ///
  static const alcoholWarning = IriTerm.prevalidated(
    'http://schema.org/alcoholWarning',
  );

  /// IRI for schemahttp:algorithm [Expects: http://schema.org/Text]
  ///
  /// The algorithm or rules to follow to compute the score.
  ///
  /// Can be used on: http://schema.org/MedicalRiskScore
  ///
  static const algorithm = IriTerm.prevalidated('http://schema.org/algorithm');

  /// IRI for schemahttp:alignmentType [Expects: http://schema.org/Text]
  ///
  /// A category of alignment between the learning resource and the framework node. Recommended values include: 'requires', 'textComplexity', 'readingLevel', and 'educationalSubject'.
  ///
  /// Can be used on: http://schema.org/AlignmentObject
  ///
  static const alignmentType = IriTerm.prevalidated(
    'http://schema.org/alignmentType',
  );

  /// IRI for schemahttp:alternativeHeadline [Expects: http://schema.org/Text]
  ///
  /// A secondary title of the CreativeWork.
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const alternativeHeadline = IriTerm.prevalidated(
    'http://schema.org/alternativeHeadline',
  );

  /// IRI for schemahttp:alternativeOf [Expects: http://schema.org/Gene]
  ///
  /// Another gene which is a variation of this one.
  ///
  /// Can be used on: http://schema.org/Gene
  ///
  static const alternativeOf = IriTerm.prevalidated(
    'http://schema.org/alternativeOf',
  );

  /// IRI for schemahttp:amenityFeature [Expects: http://schema.org/LocationFeatureSpecification]
  ///
  /// An amenity feature (e.g. a characteristic or service) of the Accommodation. This generic property does not make a statement about whether the feature is included in an offer for the main accommodation or available at extra costs.
  ///
  /// Can be used on: http://schema.org/Accommodation, http://schema.org/FloorPlan, http://schema.org/LodgingBusiness, http://schema.org/Place
  ///
  static const amenityFeature = IriTerm.prevalidated(
    'http://schema.org/amenityFeature',
  );

  /// IRI for schemahttp:amount [Expects: http://schema.org/MonetaryAmount, http://schema.org/Number]
  ///
  /// The amount of money.
  ///
  /// Can be used on: http://schema.org/DatedMoneySpecification, http://schema.org/InvestmentOrDeposit, http://schema.org/LoanOrCredit, http://schema.org/MonetaryGrant, http://schema.org/MoneyTransfer
  ///
  static const amount = IriTerm.prevalidated('http://schema.org/amount');

  /// IRI for schemahttp:amountOfThisGood [Expects: http://schema.org/Number]
  ///
  /// The quantity of the goods included in the offer.
  ///
  /// Can be used on: http://schema.org/TypeAndQuantityNode
  ///
  static const amountOfThisGood = IriTerm.prevalidated(
    'http://schema.org/amountOfThisGood',
  );

  /// IRI for schemahttp:announcementLocation [Expects: http://schema.org/CivicStructure, http://schema.org/LocalBusiness]
  ///
  /// Indicates a specific {[CivicStructure]} or {[LocalBusiness]} associated with the SpecialAnnouncement. For example, a specific testing facility or business with special opening hours. For a larger geographic region like a quarantine of an entire region, use {[spatialCoverage]}.
  ///
  /// Can be used on: http://schema.org/SpecialAnnouncement
  ///
  static const announcementLocation = IriTerm.prevalidated(
    'http://schema.org/announcementLocation',
  );

  /// IRI for schemahttp:annualPercentageRate [Expects: http://schema.org/Number, http://schema.org/QuantitativeValue]
  ///
  /// The annual rate that is charged for borrowing (or made by investing), expressed as a single percentage number that represents the actual yearly cost of funds over the term of a loan. This includes any fees or additional costs associated with the transaction.
  ///
  /// Can be used on: http://schema.org/FinancialProduct
  ///
  static const annualPercentageRate = IriTerm.prevalidated(
    'http://schema.org/annualPercentageRate',
  );

  /// IRI for schemahttp:answerCount [Expects: http://schema.org/Integer]
  ///
  /// The number of answers this question has received.
  ///
  /// Can be used on: http://schema.org/Question
  ///
  static const answerCount = IriTerm.prevalidated(
    'http://schema.org/answerCount',
  );

  /// IRI for schemahttp:answerExplanation [Expects: http://schema.org/Comment, http://schema.org/WebContent]
  ///
  /// A step-by-step or full explanation about Answer. Can outline how this Answer was achieved or contain more broad clarification or statement about it.
  ///
  /// Can be used on: http://schema.org/Answer
  ///
  static const answerExplanation = IriTerm.prevalidated(
    'http://schema.org/answerExplanation',
  );

  /// IRI for schemahttp:antagonist [Expects: http://schema.org/Muscle]
  ///
  /// The muscle whose action counteracts the specified muscle.
  ///
  /// Can be used on: http://schema.org/Muscle
  ///
  static const antagonist = IriTerm.prevalidated(
    'http://schema.org/antagonist',
  );

  /// IRI for schemahttp:appearance [Expects: http://schema.org/CreativeWork]
  ///
  /// Indicates an occurrence of a {[Claim]} in some {[CreativeWork]}.
  ///
  /// Can be used on: http://schema.org/Claim
  ///
  static const appearance = IriTerm.prevalidated(
    'http://schema.org/appearance',
  );

  /// IRI for schemahttp:applicableCountry [Expects: http://schema.org/Country, http://schema.org/Text]
  ///
  /// A country where a particular merchant return policy applies to, for example the two-letter ISO 3166-1 alpha-2 country code.
  ///
  /// Can be used on: http://schema.org/MerchantReturnPolicy
  ///
  static const applicableCountry = IriTerm.prevalidated(
    'http://schema.org/applicableCountry',
  );

  /// IRI for schemahttp:applicableLocation [Expects: http://schema.org/AdministrativeArea]
  ///
  /// The location in which the status applies.
  ///
  /// Can be used on: http://schema.org/DrugCost, http://schema.org/DrugLegalStatus
  ///
  static const applicableLocation = IriTerm.prevalidated(
    'http://schema.org/applicableLocation',
  );

  /// IRI for schemahttp:applicantLocationRequirements [Expects: http://schema.org/AdministrativeArea]
  ///
  /// The location(s) applicants can apply from. This is usually used for telecommuting jobs where the applicant does not need to be in a physical office. Note: This should not be used for citizenship or work visa requirements.
  ///
  /// Can be used on: http://schema.org/JobPosting
  ///
  static const applicantLocationRequirements = IriTerm.prevalidated(
    'http://schema.org/applicantLocationRequirements',
  );

  /// IRI for schemahttp:application [Expects: http://schema.org/SoftwareApplication]
  ///
  /// An application that can complete the request.
  ///
  /// Can be used on: http://schema.org/EntryPoint
  ///
  static const application = IriTerm.prevalidated(
    'http://schema.org/application',
  );

  /// IRI for schemahttp:applicationCategory [Expects: http://schema.org/Text, http://schema.org/URL]
  ///
  /// Type of software application, e.g. 'Game, Multimedia'.
  ///
  /// Can be used on: http://schema.org/SoftwareApplication
  ///
  static const applicationCategory = IriTerm.prevalidated(
    'http://schema.org/applicationCategory',
  );

  /// IRI for schemahttp:applicationContact [Expects: http://schema.org/ContactPoint]
  ///
  /// Contact details for further information relevant to this job posting.
  ///
  /// Can be used on: http://schema.org/JobPosting
  ///
  static const applicationContact = IriTerm.prevalidated(
    'http://schema.org/applicationContact',
  );

  /// IRI for schemahttp:applicationDeadline [Expects: http://schema.org/Date, http://schema.org/Text]
  ///
  /// The date on which the program stops collecting applications for the next enrollment cycle. Flexible application deadlines (for example, a program with rolling admissions) can be described in a textual string, rather than as a DateTime.
  ///
  /// Can be used on: http://schema.org/EducationalOccupationalProgram
  ///
  static const applicationDeadline = IriTerm.prevalidated(
    'http://schema.org/applicationDeadline',
  );

  /// IRI for schemahttp:applicationStartDate [Expects: http://schema.org/Date]
  ///
  /// The date at which the program begins collecting applications for the next enrollment cycle.
  ///
  /// Can be used on: http://schema.org/EducationalOccupationalProgram
  ///
  static const applicationStartDate = IriTerm.prevalidated(
    'http://schema.org/applicationStartDate',
  );

  /// IRI for schemahttp:applicationSubCategory [Expects: http://schema.org/Text, http://schema.org/URL]
  ///
  /// Subcategory of the application, e.g. 'Arcade Game'.
  ///
  /// Can be used on: http://schema.org/SoftwareApplication
  ///
  static const applicationSubCategory = IriTerm.prevalidated(
    'http://schema.org/applicationSubCategory',
  );

  /// IRI for schemahttp:applicationSuite [Expects: http://schema.org/Text]
  ///
  /// The name of the application suite to which the application belongs (e.g. Excel belongs to Office).
  ///
  /// Can be used on: http://schema.org/SoftwareApplication
  ///
  static const applicationSuite = IriTerm.prevalidated(
    'http://schema.org/applicationSuite',
  );

  /// IRI for schemahttp:appliesToDeliveryMethod [Expects: http://schema.org/DeliveryMethod]
  ///
  /// The delivery method(s) to which the delivery charge or payment charge specification applies.
  ///
  /// Can be used on: http://schema.org/DeliveryChargeSpecification, http://schema.org/PaymentChargeSpecification
  ///
  static const appliesToDeliveryMethod = IriTerm.prevalidated(
    'http://schema.org/appliesToDeliveryMethod',
  );

  /// IRI for schemahttp:appliesToPaymentMethod [Expects: http://schema.org/PaymentMethod]
  ///
  /// The payment method(s) to which the payment charge specification applies.
  ///
  /// Can be used on: http://schema.org/PaymentChargeSpecification
  ///
  static const appliesToPaymentMethod = IriTerm.prevalidated(
    'http://schema.org/appliesToPaymentMethod',
  );

  /// IRI for schemahttp:archivedAt [Expects: http://schema.org/URL, http://schema.org/WebPage]
  ///
  /// Indicates a page or other link involved in archival of a {[CreativeWork]}. In the case of {[MediaReview]}, the items in a {[MediaReviewItem]} may often become inaccessible, but be archived by archival, journalistic, activist, or law enforcement organizations. In such cases, the referenced page may not directly publish the content.
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const archivedAt = IriTerm.prevalidated(
    'http://schema.org/archivedAt',
  );

  /// IRI for schemahttp:area [Expects: http://schema.org/Place]
  ///
  /// The area within which users can expect to reach the broadcast service.
  ///
  /// Can be used on: http://schema.org/BroadcastService
  ///
  static const area = IriTerm.prevalidated('http://schema.org/area');

  /// IRI for schemahttp:arrivalAirport [Expects: http://schema.org/Airport]
  ///
  /// The airport where the flight terminates.
  ///
  /// Can be used on: http://schema.org/Flight
  ///
  static const arrivalAirport = IriTerm.prevalidated(
    'http://schema.org/arrivalAirport',
  );

  /// IRI for schemahttp:arrivalBoatTerminal [Expects: http://schema.org/BoatTerminal]
  ///
  /// The terminal or port from which the boat arrives.
  ///
  /// Can be used on: http://schema.org/BoatTrip
  ///
  static const arrivalBoatTerminal = IriTerm.prevalidated(
    'http://schema.org/arrivalBoatTerminal',
  );

  /// IRI for schemahttp:arrivalBusStop [Expects: http://schema.org/BusStation, http://schema.org/BusStop]
  ///
  /// The stop or station from which the bus arrives.
  ///
  /// Can be used on: http://schema.org/BusTrip
  ///
  static const arrivalBusStop = IriTerm.prevalidated(
    'http://schema.org/arrivalBusStop',
  );

  /// IRI for schemahttp:arrivalGate [Expects: http://schema.org/Text]
  ///
  /// Identifier of the flight's arrival gate.
  ///
  /// Can be used on: http://schema.org/Flight
  ///
  static const arrivalGate = IriTerm.prevalidated(
    'http://schema.org/arrivalGate',
  );

  /// IRI for schemahttp:arrivalPlatform [Expects: http://schema.org/Text]
  ///
  /// The platform where the train arrives.
  ///
  /// Can be used on: http://schema.org/TrainTrip
  ///
  static const arrivalPlatform = IriTerm.prevalidated(
    'http://schema.org/arrivalPlatform',
  );

  /// IRI for schemahttp:arrivalStation [Expects: http://schema.org/TrainStation]
  ///
  /// The station where the train trip ends.
  ///
  /// Can be used on: http://schema.org/TrainTrip
  ///
  static const arrivalStation = IriTerm.prevalidated(
    'http://schema.org/arrivalStation',
  );

  /// IRI for schemahttp:arrivalTerminal [Expects: http://schema.org/Text]
  ///
  /// Identifier of the flight's arrival terminal.
  ///
  /// Can be used on: http://schema.org/Flight
  ///
  static const arrivalTerminal = IriTerm.prevalidated(
    'http://schema.org/arrivalTerminal',
  );

  /// IRI for schemahttp:arrivalTime [Expects: http://schema.org/DateTime, http://schema.org/Time]
  ///
  /// The expected arrival time.
  ///
  /// Can be used on: http://schema.org/Trip
  ///
  static const arrivalTime = IriTerm.prevalidated(
    'http://schema.org/arrivalTime',
  );

  /// IRI for schemahttp:artEdition [Expects: http://schema.org/Integer, http://schema.org/Text]
  ///
  /// The number of copies when multiple copies of a piece of artwork are produced - e.g. for a limited edition of 20 prints, 'artEdition' refers to the total number of copies (in this example "20").
  ///
  /// Can be used on: http://schema.org/VisualArtwork
  ///
  static const artEdition = IriTerm.prevalidated(
    'http://schema.org/artEdition',
  );

  /// IRI for schemahttp:artMedium [Expects: http://schema.org/Text, http://schema.org/URL]
  ///
  /// The material used. (E.g. Oil, Watercolour, Acrylic, Linoprint, Marble, Cyanotype, Digital, Lithograph, DryPoint, Intaglio, Pastel, Woodcut, Pencil, Mixed Media, etc.)
  ///
  /// Can be used on: http://schema.org/VisualArtwork
  ///
  static const artMedium = IriTerm.prevalidated('http://schema.org/artMedium');

  /// IRI for schemahttp:artform [Expects: http://schema.org/Text, http://schema.org/URL]
  ///
  /// e.g. Painting, Drawing, Sculpture, Print, Photograph, Assemblage, Collage, etc.
  ///
  /// Can be used on: http://schema.org/VisualArtwork
  ///
  static const artform = IriTerm.prevalidated('http://schema.org/artform');

  /// IRI for schemahttp:articleBody [Expects: http://schema.org/Text]
  ///
  /// The actual body of the article.
  ///
  /// Can be used on: http://schema.org/Article
  ///
  static const articleBody = IriTerm.prevalidated(
    'http://schema.org/articleBody',
  );

  /// IRI for schemahttp:articleSection [Expects: http://schema.org/Text]
  ///
  /// Articles may belong to one or more 'sections' in a magazine or newspaper, such as Sports, Lifestyle, etc.
  ///
  /// Can be used on: http://schema.org/Article
  ///
  static const articleSection = IriTerm.prevalidated(
    'http://schema.org/articleSection',
  );

  /// IRI for schemahttp:artist [Expects: http://schema.org/Person]
  ///
  /// The primary artist for a work
  /// in a medium other than pencils or digital line art--for example, if the
  /// primary artwork is done in watercolors or digital paints.
  ///
  /// Can be used on: http://schema.org/ComicIssue, http://schema.org/ComicStory, http://schema.org/VisualArtwork
  ///
  static const artist = IriTerm.prevalidated('http://schema.org/artist');

  /// IRI for schemahttp:asin [Expects: http://schema.org/Text, http://schema.org/URL]
  ///
  /// An Amazon Standard Identification Number (ASIN) is a 10-character alphanumeric unique identifier assigned by Amazon.com and its partners for product identification within the Amazon organization (summary from [Wikipedia](https://en.wikipedia.org/wiki/Amazon_Standard_Identification_Number)'s article).
  ///
  /// Note also that this is a definition for how to include ASINs in Schema.org data, and not a definition of ASINs in general - see documentation from Amazon for authoritative details.
  /// ASINs are most commonly encoded as text strings, but the [asin] property supports URL/URI as potential values too.
  ///
  /// Can be used on: http://schema.org/Demand, http://schema.org/Offer, http://schema.org/Product
  ///
  static const asin = IriTerm.prevalidated('http://schema.org/asin');

  /// IRI for schemahttp:aspect [Expects: http://schema.org/Text]
  ///
  /// An aspect of medical practice that is considered on the page, such as 'diagnosis', 'treatment', 'causes', 'prognosis', 'etiology', 'epidemiology', etc.
  ///
  /// Can be used on: http://schema.org/MedicalWebPage
  ///
  static const aspect = IriTerm.prevalidated('http://schema.org/aspect');

  /// IRI for schemahttp:assembly [Expects: http://schema.org/Text]
  ///
  /// Library file name, e.g., mscorlib.dll, system.web.dll.
  ///
  /// Can be used on: http://schema.org/APIReference
  ///
  static const assembly = IriTerm.prevalidated('http://schema.org/assembly');

  /// IRI for schemahttp:assemblyVersion [Expects: http://schema.org/Text]
  ///
  /// Associated product/technology version. E.g., .NET Framework 4.5.
  ///
  /// Can be used on: http://schema.org/APIReference
  ///
  static const assemblyVersion = IriTerm.prevalidated(
    'http://schema.org/assemblyVersion',
  );

  /// IRI for schemahttp:assesses [Expects: http://schema.org/DefinedTerm, http://schema.org/Text]
  ///
  /// The item being described is intended to assess the competency or learning outcome defined by the referenced term.
  ///
  /// Can be used on: http://schema.org/CreativeWork, http://schema.org/EducationEvent, http://schema.org/LearningResource
  ///
  static const assesses = IriTerm.prevalidated('http://schema.org/assesses');

  /// IRI for schemahttp:associatedAnatomy [Expects: http://schema.org/AnatomicalStructure, http://schema.org/AnatomicalSystem, http://schema.org/SuperficialAnatomy]
  ///
  /// The anatomy of the underlying organ system or structures associated with this entity.
  ///
  /// Can be used on: http://schema.org/MedicalCondition, http://schema.org/PhysicalActivity
  ///
  static const associatedAnatomy = IriTerm.prevalidated(
    'http://schema.org/associatedAnatomy',
  );

  /// IRI for schemahttp:associatedArticle [Expects: http://schema.org/NewsArticle]
  ///
  /// A NewsArticle associated with the Media Object.
  ///
  /// Can be used on: http://schema.org/MediaObject
  ///
  static const associatedArticle = IriTerm.prevalidated(
    'http://schema.org/associatedArticle',
  );

  /// IRI for schemahttp:associatedClaimReview [Expects: http://schema.org/Review]
  ///
  /// An associated {[ClaimReview]}, related by specific common content, topic or claim. The expectation is that this property would be most typically used in cases where a single activity is conducting both claim reviews and media reviews, in which case {[relatedMediaReview]} would commonly be used on a {[ClaimReview]}, while {[relatedClaimReview]} would be used on {[MediaReview]}.
  ///
  /// Can be used on: http://schema.org/Review
  ///
  static const associatedClaimReview = IriTerm.prevalidated(
    'http://schema.org/associatedClaimReview',
  );

  /// IRI for schemahttp:associatedDisease [Expects: http://schema.org/MedicalCondition, http://schema.org/PropertyValue, http://schema.org/URL]
  ///
  /// Disease associated to this BioChemEntity. Such disease can be a MedicalCondition or a URL. If you want to add an evidence supporting the association, please use PropertyValue.
  ///
  /// Can be used on: http://schema.org/BioChemEntity
  ///
  static const associatedDisease = IriTerm.prevalidated(
    'http://schema.org/associatedDisease',
  );

  /// IRI for schemahttp:associatedMedia [Expects: http://schema.org/MediaObject]
  ///
  /// A media object that encodes this CreativeWork. This property is a synonym for encoding.
  ///
  /// Can be used on: http://schema.org/CreativeWork, http://schema.org/HyperToc, http://schema.org/HyperTocEntry
  ///
  static const associatedMedia = IriTerm.prevalidated(
    'http://schema.org/associatedMedia',
  );

  /// IRI for schemahttp:associatedMediaReview [Expects: http://schema.org/Review]
  ///
  /// An associated {[MediaReview]}, related by specific common content, topic or claim. The expectation is that this property would be most typically used in cases where a single activity is conducting both claim reviews and media reviews, in which case {[relatedMediaReview]} would commonly be used on a {[ClaimReview]}, while {[relatedClaimReview]} would be used on {[MediaReview]}.
  ///
  /// Can be used on: http://schema.org/Review
  ///
  static const associatedMediaReview = IriTerm.prevalidated(
    'http://schema.org/associatedMediaReview',
  );

  /// IRI for schemahttp:associatedPathophysiology [Expects: http://schema.org/Text]
  ///
  /// If applicable, a description of the pathophysiology associated with the anatomical system, including potential abnormal changes in the mechanical, physical, and biochemical functions of the system.
  ///
  /// Can be used on: http://schema.org/AnatomicalStructure, http://schema.org/AnatomicalSystem, http://schema.org/SuperficialAnatomy
  ///
  static const associatedPathophysiology = IriTerm.prevalidated(
    'http://schema.org/associatedPathophysiology',
  );

  /// IRI for schemahttp:athlete [Expects: http://schema.org/Person]
  ///
  /// A person that acts as performing member of a sports team; a player as opposed to a coach.
  ///
  /// Can be used on: http://schema.org/SportsTeam
  ///
  static const athlete = IriTerm.prevalidated('http://schema.org/athlete');

  /// IRI for schemahttp:attendees [Expects: http://schema.org/Organization, http://schema.org/Person]
  ///
  /// A person attending the event.
  ///
  /// Can be used on: http://schema.org/Event
  ///
  static const attendees = IriTerm.prevalidated('http://schema.org/attendees');

  /// IRI for schemahttp:audienceType [Expects: http://schema.org/Text]
  ///
  /// The target group associated with a given audience (e.g. veterans, car owners, musicians, etc.).
  ///
  /// Can be used on: http://schema.org/Audience
  ///
  static const audienceType = IriTerm.prevalidated(
    'http://schema.org/audienceType',
  );

  /// IRI for schemahttp:audio [Expects: http://schema.org/AudioObject, http://schema.org/Clip, http://schema.org/MusicRecording]
  ///
  /// An embedded audio object.
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const audio = IriTerm.prevalidated('http://schema.org/audio');

  /// IRI for schemahttp:auditDate [Expects: http://schema.org/Date, http://schema.org/DateTime]
  ///
  /// Date when a certification was last audited. See also  [gs1:certificationAuditDate](https://www.gs1.org/voc/certificationAuditDate).
  ///
  /// Can be used on: http://schema.org/Certification
  ///
  static const auditDate = IriTerm.prevalidated('http://schema.org/auditDate');

  /// IRI for schemahttp:authenticator [Expects: http://schema.org/Organization]
  ///
  /// The Organization responsible for authenticating the user's subscription. For example, many media apps require a cable/satellite provider to authenticate your subscription before playing media.
  ///
  /// Can be used on: http://schema.org/MediaSubscription
  ///
  static const authenticator = IriTerm.prevalidated(
    'http://schema.org/authenticator',
  );

  /// IRI for schemahttp:author [Expects: http://schema.org/Organization, http://schema.org/Person]
  ///
  /// The author of this content or rating. Please note that author is special in that HTML 5 provides a special mechanism for indicating authorship via the rel tag. That is equivalent to this and may be used interchangeably.
  ///
  /// Can be used on: http://schema.org/CreativeWork, http://schema.org/Rating
  ///
  static const author = IriTerm.prevalidated('http://schema.org/author');

  /// IRI for schemahttp:availability [Expects: http://schema.org/ItemAvailability]
  ///
  /// The availability of this item&#x2014;for example In stock, Out of stock, Pre-order, etc.
  ///
  /// Can be used on: http://schema.org/Demand, http://schema.org/Offer
  ///
  static const availability = IriTerm.prevalidated(
    'http://schema.org/availability',
  );

  /// IRI for schemahttp:availabilityEnds [Expects: http://schema.org/Date, http://schema.org/DateTime, http://schema.org/Time]
  ///
  /// The end of the availability of the product or service included in the offer.
  ///
  /// Can be used on: http://schema.org/ActionAccessSpecification, http://schema.org/Demand, http://schema.org/Offer
  ///
  static const availabilityEnds = IriTerm.prevalidated(
    'http://schema.org/availabilityEnds',
  );

  /// IRI for schemahttp:availabilityStarts [Expects: http://schema.org/Date, http://schema.org/DateTime, http://schema.org/Time]
  ///
  /// The beginning of the availability of the product or service included in the offer.
  ///
  /// Can be used on: http://schema.org/ActionAccessSpecification, http://schema.org/Demand, http://schema.org/Offer
  ///
  static const availabilityStarts = IriTerm.prevalidated(
    'http://schema.org/availabilityStarts',
  );

  /// IRI for schemahttp:availableAtOrFrom [Expects: http://schema.org/Place]
  ///
  /// The place(s) from which the offer can be obtained (e.g. store locations).
  ///
  /// Can be used on: http://schema.org/Demand, http://schema.org/Offer
  ///
  static const availableAtOrFrom = IriTerm.prevalidated(
    'http://schema.org/availableAtOrFrom',
  );

  /// IRI for schemahttp:availableChannel [Expects: http://schema.org/ServiceChannel]
  ///
  /// A means of accessing the service (e.g. a phone bank, a web site, a location, etc.).
  ///
  /// Can be used on: http://schema.org/Service
  ///
  static const availableChannel = IriTerm.prevalidated(
    'http://schema.org/availableChannel',
  );

  /// IRI for schemahttp:availableDeliveryMethod [Expects: http://schema.org/DeliveryMethod]
  ///
  /// The delivery method(s) available for this offer.
  ///
  /// Can be used on: http://schema.org/Demand, http://schema.org/Offer
  ///
  static const availableDeliveryMethod = IriTerm.prevalidated(
    'http://schema.org/availableDeliveryMethod',
  );

  /// IRI for schemahttp:availableFrom [Expects: http://schema.org/DateTime]
  ///
  /// When the item is available for pickup from the store, locker, etc.
  ///
  /// Can be used on: http://schema.org/DeliveryEvent
  ///
  static const availableFrom = IriTerm.prevalidated(
    'http://schema.org/availableFrom',
  );

  /// IRI for schemahttp:availableIn [Expects: http://schema.org/AdministrativeArea]
  ///
  /// The location in which the strength is available.
  ///
  /// Can be used on: http://schema.org/DrugStrength
  ///
  static const availableIn = IriTerm.prevalidated(
    'http://schema.org/availableIn',
  );

  /// IRI for schemahttp:availableLanguage [Expects: http://schema.org/Language, http://schema.org/Text]
  ///
  /// A language someone may use with or at the item, service or place. Please use one of the language codes from the [IETF BCP 47 standard](http://tools.ietf.org/html/bcp47). See also {[inLanguage]}.
  ///
  /// Can be used on: http://schema.org/ContactPoint, http://schema.org/Course, http://schema.org/LodgingBusiness, http://schema.org/ServiceChannel, http://schema.org/TouristAttraction
  ///
  static const availableLanguage = IriTerm.prevalidated(
    'http://schema.org/availableLanguage',
  );

  /// IRI for schemahttp:availableService [Expects: http://schema.org/MedicalProcedure, http://schema.org/MedicalTest, http://schema.org/MedicalTherapy]
  ///
  /// A medical service available from this provider.
  ///
  /// Can be used on: http://schema.org/Hospital, http://schema.org/MedicalClinic, http://schema.org/Physician
  ///
  static const availableService = IriTerm.prevalidated(
    'http://schema.org/availableService',
  );

  /// IRI for schemahttp:availableStrength [Expects: http://schema.org/DrugStrength]
  ///
  /// An available dosage strength for the drug.
  ///
  /// Can be used on: http://schema.org/Drug
  ///
  static const availableStrength = IriTerm.prevalidated(
    'http://schema.org/availableStrength',
  );

  /// IRI for schemahttp:availableTest [Expects: http://schema.org/MedicalTest]
  ///
  /// A diagnostic test or procedure offered by this lab.
  ///
  /// Can be used on: http://schema.org/DiagnosticLab
  ///
  static const availableTest = IriTerm.prevalidated(
    'http://schema.org/availableTest',
  );

  /// IRI for schemahttp:availableThrough [Expects: http://schema.org/DateTime]
  ///
  /// After this date, the item will no longer be available for pickup.
  ///
  /// Can be used on: http://schema.org/DeliveryEvent
  ///
  static const availableThrough = IriTerm.prevalidated(
    'http://schema.org/availableThrough',
  );

  /// IRI for schemahttp:awards [Expects: http://schema.org/Text]
  ///
  /// Awards won by or for this item.
  ///
  /// Can be used on: http://schema.org/CreativeWork, http://schema.org/Organization, http://schema.org/Person, http://schema.org/Product
  ///
  static const awards = IriTerm.prevalidated('http://schema.org/awards');

  /// IRI for schemahttp:awayTeam [Expects: http://schema.org/Person, http://schema.org/SportsTeam]
  ///
  /// The away team in a sports event.
  ///
  /// Can be used on: http://schema.org/SportsEvent
  ///
  static const awayTeam = IriTerm.prevalidated('http://schema.org/awayTeam');

  /// IRI for schemahttp:backstory [Expects: http://schema.org/CreativeWork, http://schema.org/Text]
  ///
  /// For an {[Article]}, typically a {[NewsArticle]}, the backstory property provides a textual summary giving a brief explanation of why and how an article was created. In a journalistic setting this could include information about reporting process, methods, interviews, data sources, etc.
  ///
  /// Can be used on: http://schema.org/Article
  ///
  static const backstory = IriTerm.prevalidated('http://schema.org/backstory');

  /// IRI for schemahttp:bankAccountType [Expects: http://schema.org/Text, http://schema.org/URL]
  ///
  /// The type of a bank account.
  ///
  /// Can be used on: http://schema.org/BankAccount
  ///
  static const bankAccountType = IriTerm.prevalidated(
    'http://schema.org/bankAccountType',
  );

  /// IRI for schemahttp:baseSalary [Expects: http://schema.org/MonetaryAmount, http://schema.org/Number, http://schema.org/PriceSpecification]
  ///
  /// The base salary of the job or of an employee in an EmployeeRole.
  ///
  /// Can be used on: http://schema.org/EmployeeRole, http://schema.org/JobPosting
  ///
  static const baseSalary = IriTerm.prevalidated(
    'http://schema.org/baseSalary',
  );

  /// IRI for schemahttp:bccRecipient [Expects: http://schema.org/ContactPoint, http://schema.org/Organization, http://schema.org/Person]
  ///
  /// A sub property of recipient. The recipient blind copied on a message.
  ///
  /// Can be used on: http://schema.org/Message
  ///
  static const bccRecipient = IriTerm.prevalidated(
    'http://schema.org/bccRecipient',
  );

  /// IRI for schemahttp:bed [Expects: http://schema.org/BedDetails, http://schema.org/BedType, http://schema.org/Text]
  ///
  /// The type of bed or beds included in the accommodation. For the single case of just one bed of a certain type, you use bed directly with a text.
  /// If you want to indicate the quantity of a certain kind of bed, use an instance of BedDetails. For more detailed information, use the amenityFeature property.
  ///
  /// Can be used on: http://schema.org/Accommodation, http://schema.org/HotelRoom, http://schema.org/Suite
  ///
  static const bed = IriTerm.prevalidated('http://schema.org/bed');

  /// IRI for schemahttp:beforeMedia [Expects: http://schema.org/MediaObject, http://schema.org/URL]
  ///
  /// A media object representing the circumstances before performing this direction.
  ///
  /// Can be used on: http://schema.org/HowToDirection
  ///
  static const beforeMedia = IriTerm.prevalidated(
    'http://schema.org/beforeMedia',
  );

  /// IRI for schemahttp:beneficiaryBank [Expects: http://schema.org/BankOrCreditUnion, http://schema.org/Text]
  ///
  /// A bank or bank‚Äôs branch, financial institution or international financial institution operating the beneficiary‚Äôs bank account or releasing funds for the beneficiary.
  ///
  /// Can be used on: http://schema.org/MoneyTransfer
  ///
  static const beneficiaryBank = IriTerm.prevalidated(
    'http://schema.org/beneficiaryBank',
  );

  /// IRI for schemahttp:benefits [Expects: http://schema.org/Text]
  ///
  /// Description of benefits associated with the job.
  ///
  /// Can be used on: http://schema.org/JobPosting
  ///
  static const benefits = IriTerm.prevalidated('http://schema.org/benefits');

  /// IRI for schemahttp:benefitsSummaryUrl [Expects: http://schema.org/URL]
  ///
  /// The URL that goes directly to the summary of benefits and coverage for the specific standard plan or plan variation.
  ///
  /// Can be used on: http://schema.org/HealthInsurancePlan
  ///
  static const benefitsSummaryUrl = IriTerm.prevalidated(
    'http://schema.org/benefitsSummaryUrl',
  );

  /// IRI for schemahttp:bestRating [Expects: http://schema.org/Number, http://schema.org/Text]
  ///
  /// The highest value allowed in this rating system.
  ///
  /// Can be used on: http://schema.org/Rating
  ///
  static const bestRating = IriTerm.prevalidated(
    'http://schema.org/bestRating',
  );

  /// IRI for schemahttp:billingAddress [Expects: http://schema.org/PostalAddress]
  ///
  /// The billing address for the order.
  ///
  /// Can be used on: http://schema.org/Order
  ///
  static const billingAddress = IriTerm.prevalidated(
    'http://schema.org/billingAddress',
  );

  /// IRI for schemahttp:billingDuration [Expects: http://schema.org/Duration, http://schema.org/Number, http://schema.org/QuantitativeValue]
  ///
  /// Specifies for how long this price (or price component) will be billed. Can be used, for example, to model the contractual duration of a subscription or payment plan. Type can be either a Duration or a Number (in which case the unit of measurement, for example month, is specified by the unitCode property).
  ///
  /// Can be used on: http://schema.org/UnitPriceSpecification
  ///
  static const billingDuration = IriTerm.prevalidated(
    'http://schema.org/billingDuration',
  );

  /// IRI for schemahttp:billingIncrement [Expects: http://schema.org/Number]
  ///
  /// This property specifies the minimal quantity and rounding increment that will be the basis for the billing. The unit of measurement is specified by the unitCode property.
  ///
  /// Can be used on: http://schema.org/UnitPriceSpecification
  ///
  static const billingIncrement = IriTerm.prevalidated(
    'http://schema.org/billingIncrement',
  );

  /// IRI for schemahttp:billingPeriod [Expects: http://schema.org/Duration]
  ///
  /// The time interval used to compute the invoice.
  ///
  /// Can be used on: http://schema.org/Invoice
  ///
  static const billingPeriod = IriTerm.prevalidated(
    'http://schema.org/billingPeriod',
  );

  /// IRI for schemahttp:billingStart [Expects: http://schema.org/Number]
  ///
  /// Specifies after how much time this price (or price component) becomes valid and billing starts. Can be used, for example, to model a price increase after the first year of a subscription. The unit of measurement is specified by the unitCode property.
  ///
  /// Can be used on: http://schema.org/UnitPriceSpecification
  ///
  static const billingStart = IriTerm.prevalidated(
    'http://schema.org/billingStart',
  );

  /// IRI for schemahttp:bioChemInteraction [Expects: http://schema.org/BioChemEntity]
  ///
  /// A BioChemEntity that is known to interact with this item.
  ///
  /// Can be used on: http://schema.org/BioChemEntity
  ///
  static const bioChemInteraction = IriTerm.prevalidated(
    'http://schema.org/bioChemInteraction',
  );

  /// IRI for schemahttp:bioChemSimilarity [Expects: http://schema.org/BioChemEntity]
  ///
  /// A similar BioChemEntity, e.g., obtained by fingerprint similarity algorithms.
  ///
  /// Can be used on: http://schema.org/BioChemEntity
  ///
  static const bioChemSimilarity = IriTerm.prevalidated(
    'http://schema.org/bioChemSimilarity',
  );

  /// IRI for schemahttp:biologicalRole [Expects: http://schema.org/DefinedTerm]
  ///
  /// A role played by the BioChemEntity within a biological context.
  ///
  /// Can be used on: http://schema.org/BioChemEntity
  ///
  static const biologicalRole = IriTerm.prevalidated(
    'http://schema.org/biologicalRole',
  );

  /// IRI for schemahttp:biomechnicalClass [Expects: http://schema.org/Text]
  ///
  /// The biomechanical properties of the bone.
  ///
  /// Can be used on: http://schema.org/Joint
  ///
  static const biomechnicalClass = IriTerm.prevalidated(
    'http://schema.org/biomechnicalClass',
  );

  /// IRI for schemahttp:birthDate [Expects: http://schema.org/Date]
  ///
  /// Date of birth.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const birthDate = IriTerm.prevalidated('http://schema.org/birthDate');

  /// IRI for schemahttp:birthPlace [Expects: http://schema.org/Place]
  ///
  /// The place where the person was born.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const birthPlace = IriTerm.prevalidated(
    'http://schema.org/birthPlace',
  );

  /// IRI for schemahttp:bitrate [Expects: http://schema.org/Text]
  ///
  /// The bitrate of the media object.
  ///
  /// Can be used on: http://schema.org/MediaObject
  ///
  static const bitrate = IriTerm.prevalidated('http://schema.org/bitrate');

  /// IRI for schemahttp:blogPosts [Expects: http://schema.org/BlogPosting]
  ///
  /// Indicates a post that is part of a {[Blog]}. Note that historically, what we term a "Blog" was once known as a "weblog", and that what we term a "BlogPosting" is now often colloquially referred to as a "blog".
  ///
  /// Can be used on: http://schema.org/Blog
  ///
  static const blogPosts = IriTerm.prevalidated('http://schema.org/blogPosts');

  /// IRI for schemahttp:bloodSupply [Expects: http://schema.org/Vessel]
  ///
  /// The blood vessel that carries blood from the heart to the muscle.
  ///
  /// Can be used on: http://schema.org/Muscle
  ///
  static const bloodSupply = IriTerm.prevalidated(
    'http://schema.org/bloodSupply',
  );

  /// IRI for schemahttp:boardingGroup [Expects: http://schema.org/Text]
  ///
  /// The airline-specific indicator of boarding order / preference.
  ///
  /// Can be used on: http://schema.org/FlightReservation
  ///
  static const boardingGroup = IriTerm.prevalidated(
    'http://schema.org/boardingGroup',
  );

  /// IRI for schemahttp:boardingPolicy [Expects: http://schema.org/BoardingPolicyType]
  ///
  /// The type of boarding policy used by the airline (e.g. zone-based or group-based).
  ///
  /// Can be used on: http://schema.org/Airline, http://schema.org/Flight
  ///
  static const boardingPolicy = IriTerm.prevalidated(
    'http://schema.org/boardingPolicy',
  );

  /// IRI for schemahttp:bodyLocation [Expects: http://schema.org/Text]
  ///
  /// Location in the body of the anatomical structure.
  ///
  /// Can be used on: http://schema.org/AnatomicalStructure, http://schema.org/MedicalProcedure
  ///
  static const bodyLocation = IriTerm.prevalidated(
    'http://schema.org/bodyLocation',
  );

  /// IRI for schemahttp:bodyType [Expects: http://schema.org/QualitativeValue, http://schema.org/Text, http://schema.org/URL]
  ///
  /// Indicates the design and body style of the vehicle (e.g. station wagon, hatchback, etc.).
  ///
  /// Can be used on: http://schema.org/Vehicle
  ///
  static const bodyType = IriTerm.prevalidated('http://schema.org/bodyType');

  /// IRI for schemahttp:bookEdition [Expects: http://schema.org/Text]
  ///
  /// The edition of the book.
  ///
  /// Can be used on: http://schema.org/Book
  ///
  static const bookEdition = IriTerm.prevalidated(
    'http://schema.org/bookEdition',
  );

  /// IRI for schemahttp:bookFormat [Expects: http://schema.org/BookFormatType]
  ///
  /// The format of the book.
  ///
  /// Can be used on: http://schema.org/Book
  ///
  static const bookFormat = IriTerm.prevalidated(
    'http://schema.org/bookFormat',
  );

  /// IRI for schemahttp:bookingAgent [Expects: http://schema.org/Organization, http://schema.org/Person]
  ///
  /// 'bookingAgent' is an out-dated term indicating a 'broker' that serves as a booking agent.
  ///
  /// Can be used on: http://schema.org/Reservation
  ///
  static const bookingAgent = IriTerm.prevalidated(
    'http://schema.org/bookingAgent',
  );

  /// IRI for schemahttp:bookingTime [Expects: http://schema.org/DateTime]
  ///
  /// The date and time the reservation was booked.
  ///
  /// Can be used on: http://schema.org/Reservation
  ///
  static const bookingTime = IriTerm.prevalidated(
    'http://schema.org/bookingTime',
  );

  /// IRI for schemahttp:borrower [Expects: http://schema.org/Person]
  ///
  /// A sub property of participant. The person that borrows the object being lent.
  ///
  /// Can be used on: http://schema.org/LendAction
  ///
  static const borrower = IriTerm.prevalidated('http://schema.org/borrower');

  /// IRI for schemahttp:box [Expects: http://schema.org/Text]
  ///
  /// A box is the area enclosed by the rectangle formed by two points. The first point is the lower corner, the second point is the upper corner. A box is expressed as two points separated by a space character.
  ///
  /// Can be used on: http://schema.org/GeoShape
  ///
  static const box = IriTerm.prevalidated('http://schema.org/box');

  /// IRI for schemahttp:branch [Expects: http://schema.org/AnatomicalStructure]
  ///
  /// The branches that delineate from the nerve bundle. Not to be confused with {[branchOf]}.
  ///
  /// Can be used on: http://schema.org/Nerve
  ///
  static const branch = IriTerm.prevalidated('http://schema.org/branch');

  /// IRI for schemahttp:branchCode [Expects: http://schema.org/Text]
  ///
  /// A short textual code (also called "store code") that uniquely identifies a place of business. The code is typically assigned by the parentOrganization and used in structured URLs.\n\nFor example, in the URL http://www.starbucks.co.uk/store-locator/etc/detail/3047 the code "3047" is a branchCode for a particular branch.
  ///
  ///
  /// Can be used on: http://schema.org/Place
  ///
  static const branchCode = IriTerm.prevalidated(
    'http://schema.org/branchCode',
  );

  /// IRI for schemahttp:branchOf [Expects: http://schema.org/Organization]
  ///
  /// The larger organization that this local business is a branch of, if any. Not to be confused with (anatomical) {[branch]}.
  ///
  /// Can be used on: http://schema.org/LocalBusiness
  ///
  static const branchOf = IriTerm.prevalidated('http://schema.org/branchOf');

  /// IRI for schemahttp:brand [Expects: http://schema.org/Brand, http://schema.org/Organization]
  ///
  /// The brand(s) associated with a product or service, or the brand(s) maintained by an organization or business person.
  ///
  /// Can be used on: http://schema.org/Organization, http://schema.org/Person, http://schema.org/Product, http://schema.org/Service
  ///
  static const brand = IriTerm.prevalidated('http://schema.org/brand');

  /// IRI for schemahttp:breadcrumb [Expects: http://schema.org/BreadcrumbList, http://schema.org/Text]
  ///
  /// A set of links that can help a user understand and navigate a website hierarchy.
  ///
  /// Can be used on: http://schema.org/WebPage
  ///
  static const breadcrumb = IriTerm.prevalidated(
    'http://schema.org/breadcrumb',
  );

  /// IRI for schemahttp:breastfeedingWarning [Expects: http://schema.org/Text]
  ///
  /// Any precaution, guidance, contraindication, etc. related to this drug's use by breastfeeding mothers.
  ///
  /// Can be used on: http://schema.org/Drug
  ///
  static const breastfeedingWarning = IriTerm.prevalidated(
    'http://schema.org/breastfeedingWarning',
  );

  /// IRI for schemahttp:broadcastAffiliateOf [Expects: http://schema.org/Organization]
  ///
  /// The media network(s) whose content is broadcast on this station.
  ///
  /// Can be used on: http://schema.org/BroadcastService
  ///
  static const broadcastAffiliateOf = IriTerm.prevalidated(
    'http://schema.org/broadcastAffiliateOf',
  );

  /// IRI for schemahttp:broadcastChannelId [Expects: http://schema.org/Text]
  ///
  /// The unique address by which the BroadcastService can be identified in a provider lineup. In US, this is typically a number.
  ///
  /// Can be used on: http://schema.org/BroadcastChannel
  ///
  static const broadcastChannelId = IriTerm.prevalidated(
    'http://schema.org/broadcastChannelId',
  );

  /// IRI for schemahttp:broadcastDisplayName [Expects: http://schema.org/Text]
  ///
  /// The name displayed in the channel guide. For many US affiliates, it is the network name.
  ///
  /// Can be used on: http://schema.org/BroadcastService
  ///
  static const broadcastDisplayName = IriTerm.prevalidated(
    'http://schema.org/broadcastDisplayName',
  );

  /// IRI for schemahttp:broadcastFrequency [Expects: http://schema.org/BroadcastFrequencySpecification, http://schema.org/Text]
  ///
  /// The frequency used for over-the-air broadcasts. Numeric values or simple ranges, e.g. 87-99. In addition a shortcut idiom is supported for frequencies of AM and FM radio channels, e.g. "87 FM".
  ///
  /// Can be used on: http://schema.org/BroadcastChannel, http://schema.org/BroadcastService
  ///
  static const broadcastFrequency = IriTerm.prevalidated(
    'http://schema.org/broadcastFrequency',
  );

  /// IRI for schemahttp:broadcastFrequencyValue [Expects: http://schema.org/Number, http://schema.org/QuantitativeValue]
  ///
  /// The frequency in MHz for a particular broadcast.
  ///
  /// Can be used on: http://schema.org/BroadcastFrequencySpecification
  ///
  static const broadcastFrequencyValue = IriTerm.prevalidated(
    'http://schema.org/broadcastFrequencyValue',
  );

  /// IRI for schemahttp:broadcastOfEvent [Expects: http://schema.org/Event]
  ///
  /// The event being broadcast such as a sporting event or awards ceremony.
  ///
  /// Can be used on: http://schema.org/BroadcastEvent
  ///
  static const broadcastOfEvent = IriTerm.prevalidated(
    'http://schema.org/broadcastOfEvent',
  );

  /// IRI for schemahttp:broadcastServiceTier [Expects: http://schema.org/Text]
  ///
  /// The type of service required to have access to the channel (e.g. Standard or Premium).
  ///
  /// Can be used on: http://schema.org/BroadcastChannel
  ///
  static const broadcastServiceTier = IriTerm.prevalidated(
    'http://schema.org/broadcastServiceTier',
  );

  /// IRI for schemahttp:broadcastSignalModulation [Expects: http://schema.org/QualitativeValue, http://schema.org/Text]
  ///
  /// The modulation (e.g. FM, AM, etc) used by a particular broadcast service.
  ///
  /// Can be used on: http://schema.org/BroadcastFrequencySpecification
  ///
  static const broadcastSignalModulation = IriTerm.prevalidated(
    'http://schema.org/broadcastSignalModulation',
  );

  /// IRI for schemahttp:broadcastSubChannel [Expects: http://schema.org/Text]
  ///
  /// The subchannel used for the broadcast.
  ///
  /// Can be used on: http://schema.org/BroadcastFrequencySpecification
  ///
  static const broadcastSubChannel = IriTerm.prevalidated(
    'http://schema.org/broadcastSubChannel',
  );

  /// IRI for schemahttp:broadcastTimezone [Expects: http://schema.org/Text]
  ///
  /// The timezone in [ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601) for which the service bases its broadcasts.
  ///
  /// Can be used on: http://schema.org/BroadcastService
  ///
  static const broadcastTimezone = IriTerm.prevalidated(
    'http://schema.org/broadcastTimezone',
  );

  /// IRI for schemahttp:broadcaster [Expects: http://schema.org/Organization]
  ///
  /// The organization owning or operating the broadcast service.
  ///
  /// Can be used on: http://schema.org/BroadcastService
  ///
  static const broadcaster = IriTerm.prevalidated(
    'http://schema.org/broadcaster',
  );

  /// IRI for schemahttp:browserRequirements [Expects: http://schema.org/Text]
  ///
  /// Specifies browser requirements in human-readable text. For example, 'requires HTML5 support'.
  ///
  /// Can be used on: http://schema.org/WebApplication
  ///
  static const browserRequirements = IriTerm.prevalidated(
    'http://schema.org/browserRequirements',
  );

  /// IRI for schemahttp:busName [Expects: http://schema.org/Text]
  ///
  /// The name of the bus (e.g. Bolt Express).
  ///
  /// Can be used on: http://schema.org/BusTrip
  ///
  static const busName = IriTerm.prevalidated('http://schema.org/busName');

  /// IRI for schemahttp:busNumber [Expects: http://schema.org/Text]
  ///
  /// The unique identifier for the bus.
  ///
  /// Can be used on: http://schema.org/BusTrip
  ///
  static const busNumber = IriTerm.prevalidated('http://schema.org/busNumber');

  /// IRI for schemahttp:businessDays [Expects: http://schema.org/DayOfWeek, http://schema.org/OpeningHoursSpecification]
  ///
  /// Days of the week when the merchant typically operates, indicated via opening hours markup.
  ///
  /// Can be used on: http://schema.org/ServicePeriod, http://schema.org/ShippingDeliveryTime
  ///
  static const businessDays = IriTerm.prevalidated(
    'http://schema.org/businessDays',
  );

  /// IRI for schemahttp:businessFunction [Expects: http://schema.org/BusinessFunction]
  ///
  /// The business function (e.g. sell, lease, repair, dispose) of the offer or component of a bundle (TypeAndQuantityNode). The default is http://purl.org/goodrelations/v1#Sell.
  ///
  /// Can be used on: http://schema.org/Demand, http://schema.org/Offer, http://schema.org/TypeAndQuantityNode
  ///
  static const businessFunction = IriTerm.prevalidated(
    'http://schema.org/businessFunction',
  );

  /// IRI for schemahttp:buyer [Expects: http://schema.org/Organization, http://schema.org/Person]
  ///
  /// A sub property of participant. The participant/person/organization that bought the object.
  ///
  /// Can be used on: http://schema.org/SellAction
  ///
  static const buyer = IriTerm.prevalidated('http://schema.org/buyer');

  /// IRI for schemahttp:byArtist [Expects: http://schema.org/MusicGroup, http://schema.org/Person]
  ///
  /// The artist that performed this album or recording.
  ///
  /// Can be used on: http://schema.org/MusicAlbum, http://schema.org/MusicRecording
  ///
  static const byArtist = IriTerm.prevalidated('http://schema.org/byArtist');

  /// IRI for schemahttp:byDay [Expects: http://schema.org/DayOfWeek, http://schema.org/Text]
  ///
  /// Defines the day(s) of the week on which a recurring {[Event]} takes place. May be specified using either {[DayOfWeek]}, or alternatively {[Text]} conforming to iCal's syntax for byDay recurrence rules.
  ///
  /// Can be used on: http://schema.org/Schedule
  ///
  static const byDay = IriTerm.prevalidated('http://schema.org/byDay');

  /// IRI for schemahttp:byMonth [Expects: http://schema.org/Integer]
  ///
  /// Defines the month(s) of the year on which a recurring {[Event]} takes place. Specified as an {[Integer]} between 1-12. January is 1.
  ///
  /// Can be used on: http://schema.org/Schedule
  ///
  static const byMonth = IriTerm.prevalidated('http://schema.org/byMonth');

  /// IRI for schemahttp:byMonthDay [Expects: http://schema.org/Integer]
  ///
  /// Defines the day(s) of the month on which a recurring {[Event]} takes place. Specified as an {[Integer]} between 1-31.
  ///
  /// Can be used on: http://schema.org/Schedule
  ///
  static const byMonthDay = IriTerm.prevalidated(
    'http://schema.org/byMonthDay',
  );

  /// IRI for schemahttp:byMonthWeek [Expects: http://schema.org/Integer]
  ///
  /// Defines the week(s) of the month on which a recurring Event takes place. Specified as an Integer between 1-5. For clarity, byMonthWeek is best used in conjunction with byDay to indicate concepts like the first and third Mondays of a month.
  ///
  /// Can be used on: http://schema.org/Schedule
  ///
  static const byMonthWeek = IriTerm.prevalidated(
    'http://schema.org/byMonthWeek',
  );

  /// IRI for schemahttp:callSign [Expects: http://schema.org/Text]
  ///
  /// A [callsign](https://en.wikipedia.org/wiki/Call_sign), as used in broadcasting and radio communications to identify people, radio and TV stations, or vehicles.
  ///
  /// Can be used on: http://schema.org/BroadcastService, http://schema.org/Person, http://schema.org/Vehicle
  ///
  static const callSign = IriTerm.prevalidated('http://schema.org/callSign');

  /// IRI for schemahttp:calories [Expects: http://schema.org/Energy]
  ///
  /// The number of calories.
  ///
  /// Can be used on: http://schema.org/NutritionInformation
  ///
  static const calories = IriTerm.prevalidated('http://schema.org/calories');

  /// IRI for schemahttp:candidate [Expects: http://schema.org/Person]
  ///
  /// A sub property of object. The candidate subject of this action.
  ///
  /// Can be used on: http://schema.org/VoteAction
  ///
  static const candidate = IriTerm.prevalidated('http://schema.org/candidate');

  /// IRI for schemahttp:carbohydrateContent [Expects: http://schema.org/Mass]
  ///
  /// The number of grams of carbohydrates.
  ///
  /// Can be used on: http://schema.org/NutritionInformation
  ///
  static const carbohydrateContent = IriTerm.prevalidated(
    'http://schema.org/carbohydrateContent',
  );

  /// IRI for schemahttp:cargoVolume [Expects: http://schema.org/QuantitativeValue]
  ///
  /// The available volume for cargo or luggage. For automobiles, this is usually the trunk volume.\n\nTypical unit code(s): LTR for liters, FTQ for cubic foot/feet\n\nNote: You can use {[minValue]} and {[maxValue]} to indicate ranges.
  ///
  /// Can be used on: http://schema.org/Vehicle
  ///
  static const cargoVolume = IriTerm.prevalidated(
    'http://schema.org/cargoVolume',
  );

  /// IRI for schemahttp:carrier [Expects: http://schema.org/Organization]
  ///
  /// 'carrier' is an out-dated term indicating the 'provider' for parcel delivery and flights.
  ///
  /// Can be used on: http://schema.org/Flight, http://schema.org/ParcelDelivery
  ///
  static const carrier = IriTerm.prevalidated('http://schema.org/carrier');

  /// IRI for schemahttp:carrierRequirements [Expects: http://schema.org/Text]
  ///
  /// Specifies specific carrier(s) requirements for the application (e.g. an application may only work on a specific carrier network).
  ///
  /// Can be used on: http://schema.org/MobileApplication
  ///
  static const carrierRequirements = IriTerm.prevalidated(
    'http://schema.org/carrierRequirements',
  );

  /// IRI for schemahttp:cashBack [Expects: http://schema.org/Boolean, http://schema.org/Number]
  ///
  /// A cardholder benefit that pays the cardholder a small percentage of their net expenditures.
  ///
  /// Can be used on: http://schema.org/PaymentCard
  ///
  static const cashBack = IriTerm.prevalidated('http://schema.org/cashBack');

  /// IRI for schemahttp:catalog [Expects: http://schema.org/DataCatalog]
  ///
  /// A data catalog which contains this dataset.
  ///
  /// Can be used on: http://schema.org/Dataset
  ///
  static const catalog = IriTerm.prevalidated('http://schema.org/catalog');

  /// IRI for schemahttp:catalogNumber [Expects: http://schema.org/Text]
  ///
  /// The catalog number for the release.
  ///
  /// Can be used on: http://schema.org/MusicRelease
  ///
  static const catalogNumber = IriTerm.prevalidated(
    'http://schema.org/catalogNumber',
  );

  /// IRI for schemahttp:causeOf [Expects: http://schema.org/MedicalEntity]
  ///
  /// The condition, complication, symptom, sign, etc. caused.
  ///
  /// Can be used on: http://schema.org/MedicalCause
  ///
  static const causeOf = IriTerm.prevalidated('http://schema.org/causeOf');

  /// IRI for schemahttp:ccRecipient [Expects: http://schema.org/ContactPoint, http://schema.org/Organization, http://schema.org/Person]
  ///
  /// A sub property of recipient. The recipient copied on a message.
  ///
  /// Can be used on: http://schema.org/Message
  ///
  static const ccRecipient = IriTerm.prevalidated(
    'http://schema.org/ccRecipient',
  );

  /// IRI for schemahttp:certificationIdentification [Expects: http://schema.org/DefinedTerm, http://schema.org/Text]
  ///
  /// Identifier of a certification instance (as registered with an independent certification body). Typically this identifier can be used to consult and verify the certification instance. See also [gs1:certificationIdentification](https://www.gs1.org/voc/certificationIdentification).
  ///
  /// Can be used on: http://schema.org/Certification
  ///
  static const certificationIdentification = IriTerm.prevalidated(
    'http://schema.org/certificationIdentification',
  );

  /// IRI for schemahttp:certificationRating [Expects: http://schema.org/Rating]
  ///
  /// Rating of a certification instance (as defined by an independent certification body). Typically this rating can be used to rate the level to which the requirements of the certification instance are fulfilled. See also [gs1:certificationValue](https://www.gs1.org/voc/certificationValue).
  ///
  /// Can be used on: http://schema.org/Certification
  ///
  static const certificationRating = IriTerm.prevalidated(
    'http://schema.org/certificationRating',
  );

  /// IRI for schemahttp:certificationStatus [Expects: http://schema.org/CertificationStatusEnumeration]
  ///
  /// Indicates the current status of a certification: active or inactive. See also  [gs1:certificationStatus](https://www.gs1.org/voc/certificationStatus).
  ///
  /// Can be used on: http://schema.org/Certification
  ///
  static const certificationStatus = IriTerm.prevalidated(
    'http://schema.org/certificationStatus',
  );

  /// IRI for schemahttp:character [Expects: http://schema.org/Person]
  ///
  /// Fictional person connected with a creative work.
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const character = IriTerm.prevalidated('http://schema.org/character');

  /// IRI for schemahttp:characterAttribute [Expects: http://schema.org/Thing]
  ///
  /// A piece of data that represents a particular aspect of a fictional character (skill, power, character points, advantage, disadvantage).
  ///
  /// Can be used on: http://schema.org/Game, http://schema.org/VideoGameSeries
  ///
  static const characterAttribute = IriTerm.prevalidated(
    'http://schema.org/characterAttribute',
  );

  /// IRI for schemahttp:characterName [Expects: http://schema.org/Text]
  ///
  /// The name of a character played in some acting or performing role, i.e. in a PerformanceRole.
  ///
  /// Can be used on: http://schema.org/PerformanceRole
  ///
  static const characterName = IriTerm.prevalidated(
    'http://schema.org/characterName',
  );

  /// IRI for schemahttp:cheatCode [Expects: http://schema.org/CreativeWork]
  ///
  /// Cheat codes to the game.
  ///
  /// Can be used on: http://schema.org/VideoGame, http://schema.org/VideoGameSeries
  ///
  static const cheatCode = IriTerm.prevalidated('http://schema.org/cheatCode');

  /// IRI for schemahttp:checkinTime [Expects: http://schema.org/DateTime, http://schema.org/Time]
  ///
  /// The earliest someone may check into a lodging establishment.
  ///
  /// Can be used on: http://schema.org/LodgingBusiness, http://schema.org/LodgingReservation
  ///
  static const checkinTime = IriTerm.prevalidated(
    'http://schema.org/checkinTime',
  );

  /// IRI for schemahttp:checkoutPageURLTemplate [Expects: http://schema.org/Text]
  ///
  /// A URL template (RFC 6570) for a checkout page for an offer. This approach allows merchants to specify a URL for online checkout of the offered product, by interpolating parameters such as the logged in user ID, product ID, quantity, discount code etc. Parameter naming and standardization are not specified here.
  ///
  /// Can be used on: http://schema.org/Offer
  ///
  static const checkoutPageURLTemplate = IriTerm.prevalidated(
    'http://schema.org/checkoutPageURLTemplate',
  );

  /// IRI for schemahttp:checkoutTime [Expects: http://schema.org/DateTime, http://schema.org/Time]
  ///
  /// The latest someone may check out of a lodging establishment.
  ///
  /// Can be used on: http://schema.org/LodgingBusiness, http://schema.org/LodgingReservation
  ///
  static const checkoutTime = IriTerm.prevalidated(
    'http://schema.org/checkoutTime',
  );

  /// IRI for schemahttp:chemicalComposition [Expects: http://schema.org/Text]
  ///
  /// The chemical composition describes the identity and relative ratio of the chemical elements that make up the substance.
  ///
  /// Can be used on: http://schema.org/ChemicalSubstance
  ///
  static const chemicalComposition = IriTerm.prevalidated(
    'http://schema.org/chemicalComposition',
  );

  /// IRI for schemahttp:chemicalRole [Expects: http://schema.org/DefinedTerm]
  ///
  /// A role played by the BioChemEntity within a chemical context.
  ///
  /// Can be used on: http://schema.org/ChemicalSubstance, http://schema.org/MolecularEntity
  ///
  static const chemicalRole = IriTerm.prevalidated(
    'http://schema.org/chemicalRole',
  );

  /// IRI for schemahttp:childMaxAge [Expects: http://schema.org/Number]
  ///
  /// Maximal age of the child.
  ///
  /// Can be used on: http://schema.org/ParentAudience
  ///
  static const childMaxAge = IriTerm.prevalidated(
    'http://schema.org/childMaxAge',
  );

  /// IRI for schemahttp:childMinAge [Expects: http://schema.org/Number]
  ///
  /// Minimal age of the child.
  ///
  /// Can be used on: http://schema.org/ParentAudience
  ///
  static const childMinAge = IriTerm.prevalidated(
    'http://schema.org/childMinAge',
  );

  /// IRI for schemahttp:children [Expects: http://schema.org/Person]
  ///
  /// A child of the person.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const children = IriTerm.prevalidated('http://schema.org/children');

  /// IRI for schemahttp:cholesterolContent [Expects: http://schema.org/Mass]
  ///
  /// The number of milligrams of cholesterol.
  ///
  /// Can be used on: http://schema.org/NutritionInformation
  ///
  static const cholesterolContent = IriTerm.prevalidated(
    'http://schema.org/cholesterolContent',
  );

  /// IRI for schemahttp:circle [Expects: http://schema.org/Text]
  ///
  /// A circle is the circular region of a specified radius centered at a specified latitude and longitude. A circle is expressed as a pair followed by a radius in meters.
  ///
  /// Can be used on: http://schema.org/GeoShape
  ///
  static const circle = IriTerm.prevalidated('http://schema.org/circle');

  /// IRI for schemahttp:citation [Expects: http://schema.org/CreativeWork, http://schema.org/Text]
  ///
  /// A citation or reference to another creative work, such as another publication, web page, scholarly article, etc.
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const citation = IriTerm.prevalidated('http://schema.org/citation');

  /// IRI for schemahttp:claimInterpreter [Expects: http://schema.org/Organization, http://schema.org/Person]
  ///
  /// For a {[Claim]} interpreted from {[MediaObject]} content, the {[interpretedAsClaim]} property can be used to indicate a claim contained, implied or refined from the content of a {[MediaObject]}.
  ///
  /// Can be used on: http://schema.org/Claim
  ///
  static const claimInterpreter = IriTerm.prevalidated(
    'http://schema.org/claimInterpreter',
  );

  /// IRI for schemahttp:claimReviewed [Expects: http://schema.org/Text]
  ///
  /// A short summary of the specific claims reviewed in a ClaimReview.
  ///
  /// Can be used on: http://schema.org/ClaimReview
  ///
  static const claimReviewed = IriTerm.prevalidated(
    'http://schema.org/claimReviewed',
  );

  /// IRI for schemahttp:clincalPharmacology [Expects: http://schema.org/Text]
  ///
  /// Description of the absorption and elimination of drugs, including their concentration (pharmacokinetics, pK) and biological effects (pharmacodynamics, pD).
  ///
  /// Can be used on: http://schema.org/Drug
  ///
  static const clincalPharmacology = IriTerm.prevalidated(
    'http://schema.org/clincalPharmacology',
  );

  /// IRI for schemahttp:clipNumber [Expects: http://schema.org/Integer, http://schema.org/Text]
  ///
  /// Position of the clip within an ordered group of clips.
  ///
  /// Can be used on: http://schema.org/Clip
  ///
  static const clipNumber = IriTerm.prevalidated(
    'http://schema.org/clipNumber',
  );

  /// IRI for schemahttp:closes [Expects: http://schema.org/Time]
  ///
  /// The closing hour of the place or service on the given day(s) of the week.
  ///
  /// Can be used on: http://schema.org/OpeningHoursSpecification
  ///
  static const closes = IriTerm.prevalidated('http://schema.org/closes');

  /// IRI for schemahttp:coach [Expects: http://schema.org/Person]
  ///
  /// A person that acts in a coaching role for a sports team.
  ///
  /// Can be used on: http://schema.org/SportsTeam
  ///
  static const coach = IriTerm.prevalidated('http://schema.org/coach');

  /// IRI for schemahttp:code [Expects: http://schema.org/MedicalCode]
  ///
  /// A medical code for the entity, taken from a controlled vocabulary or ontology such as ICD-9, DiseasesDB, MeSH, SNOMED-CT, RxNorm, etc.
  ///
  /// Can be used on: http://schema.org/MedicalEntity
  ///
  static const code = IriTerm.prevalidated('http://schema.org/code');

  /// IRI for schemahttp:codeRepository [Expects: http://schema.org/URL]
  ///
  /// Link to the repository where the un-compiled, human readable code and related code is located (SVN, GitHub, CodePlex).
  ///
  /// Can be used on: http://schema.org/SoftwareSourceCode
  ///
  static const codeRepository = IriTerm.prevalidated(
    'http://schema.org/codeRepository',
  );

  /// IRI for schemahttp:codeValue [Expects: http://schema.org/Text]
  ///
  /// A short textual code that uniquely identifies the value.
  ///
  /// Can be used on: http://schema.org/CategoryCode, http://schema.org/MedicalCode
  ///
  static const codeValue = IriTerm.prevalidated('http://schema.org/codeValue');

  /// IRI for schemahttp:codingSystem [Expects: http://schema.org/Text]
  ///
  /// The coding system, e.g. 'ICD-10'.
  ///
  /// Can be used on: http://schema.org/MedicalCode
  ///
  static const codingSystem = IriTerm.prevalidated(
    'http://schema.org/codingSystem',
  );

  /// IRI for schemahttp:colleagues [Expects: http://schema.org/Person]
  ///
  /// A colleague of the person.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const colleagues = IriTerm.prevalidated(
    'http://schema.org/colleagues',
  );

  /// IRI for schemahttp:collection [Expects: http://schema.org/Thing]
  ///
  /// A sub property of object. The collection target of the action.
  ///
  /// Can be used on: http://schema.org/UpdateAction
  ///
  static const collection = IriTerm.prevalidated(
    'http://schema.org/collection',
  );

  /// IRI for schemahttp:collectionSize [Expects: http://schema.org/Integer]
  ///
  /// The number of items in the {[Collection]}.
  ///
  /// Can be used on: http://schema.org/Collection
  ///
  static const collectionSize = IriTerm.prevalidated(
    'http://schema.org/collectionSize',
  );

  /// IRI for schemahttp:color [Expects: http://schema.org/Text]
  ///
  /// The color of the product.
  ///
  /// Can be used on: http://schema.org/Product
  ///
  static const color = IriTerm.prevalidated('http://schema.org/color');

  /// IRI for schemahttp:colorSwatch [Expects: http://schema.org/ImageObject, http://schema.org/URL]
  ///
  /// A color swatch image, visualizing the color of a {[Product]}. Should match the textual description specified in the {[color]} property. This can be a URL or a fully described ImageObject.
  ///
  /// Can be used on: http://schema.org/Product
  ///
  static const colorSwatch = IriTerm.prevalidated(
    'http://schema.org/colorSwatch',
  );

  /// IRI for schemahttp:colorist [Expects: http://schema.org/Person]
  ///
  /// The individual who adds color to inked drawings.
  ///
  /// Can be used on: http://schema.org/ComicIssue, http://schema.org/ComicStory, http://schema.org/VisualArtwork
  ///
  static const colorist = IriTerm.prevalidated('http://schema.org/colorist');

  /// IRI for schemahttp:comment [Expects: http://schema.org/Comment]
  ///
  /// Comments, typically from users.
  ///
  /// Can be used on: http://schema.org/CreativeWork, http://schema.org/RsvpAction
  ///
  static const comment = IriTerm.prevalidated('http://schema.org/comment');

  /// IRI for schemahttp:commentCount [Expects: http://schema.org/Integer]
  ///
  /// The number of comments this CreativeWork (e.g. Article, Question or Answer) has received. This is most applicable to works published in Web sites with commenting system; additional comments may exist elsewhere.
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const commentCount = IriTerm.prevalidated(
    'http://schema.org/commentCount',
  );

  /// IRI for schemahttp:commentText [Expects: http://schema.org/Text]
  ///
  /// The text of the UserComment.
  ///
  /// Can be used on: http://schema.org/UserComments
  ///
  static const commentText = IriTerm.prevalidated(
    'http://schema.org/commentText',
  );

  /// IRI for schemahttp:commentTime [Expects: http://schema.org/Date, http://schema.org/DateTime]
  ///
  /// The time at which the UserComment was made.
  ///
  /// Can be used on: http://schema.org/UserComments
  ///
  static const commentTime = IriTerm.prevalidated(
    'http://schema.org/commentTime',
  );

  /// IRI for schemahttp:competencyRequired [Expects: http://schema.org/DefinedTerm, http://schema.org/Text, http://schema.org/URL]
  ///
  /// Knowledge, skill, ability or personal attribute that must be demonstrated by a person or other entity in order to do something such as earn an Educational Occupational Credential or understand a LearningResource.
  ///
  /// Can be used on: http://schema.org/EducationalOccupationalCredential, http://schema.org/LearningResource
  ///
  static const competencyRequired = IriTerm.prevalidated(
    'http://schema.org/competencyRequired',
  );

  /// IRI for schemahttp:composer [Expects: http://schema.org/Organization, http://schema.org/Person]
  ///
  /// The person or organization who wrote a composition, or who is the composer of a work performed at some event.
  ///
  /// Can be used on: http://schema.org/Event, http://schema.org/MusicComposition
  ///
  static const composer = IriTerm.prevalidated('http://schema.org/composer');

  /// IRI for schemahttp:comprisedOf [Expects: http://schema.org/AnatomicalStructure, http://schema.org/AnatomicalSystem]
  ///
  /// Specifying something physically contained by something else. Typically used here for the underlying anatomical structures, such as organs, that comprise the anatomical system.
  ///
  /// Can be used on: http://schema.org/AnatomicalSystem
  ///
  static const comprisedOf = IriTerm.prevalidated(
    'http://schema.org/comprisedOf',
  );

  /// IRI for schemahttp:conditionsOfAccess [Expects: http://schema.org/Text]
  ///
  /// Conditions that affect the availability of, or method(s) of access to, an item. Typically used for real world items such as an {[ArchiveComponent]} held by an {[ArchiveOrganization]}. This property is not suitable for use as a general Web access control mechanism. It is expressed only in natural language.\n\nFor example "Available by appointment from the Reading Room" or "Accessible only from logged-in accounts ".
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const conditionsOfAccess = IriTerm.prevalidated(
    'http://schema.org/conditionsOfAccess',
  );

  /// IRI for schemahttp:confirmationNumber [Expects: http://schema.org/Text]
  ///
  /// A number that confirms the given order or payment has been received.
  ///
  /// Can be used on: http://schema.org/Invoice, http://schema.org/Order
  ///
  static const confirmationNumber = IriTerm.prevalidated(
    'http://schema.org/confirmationNumber',
  );

  /// IRI for schemahttp:connectedTo [Expects: http://schema.org/AnatomicalStructure]
  ///
  /// Other anatomical structures to which this structure is connected.
  ///
  /// Can be used on: http://schema.org/AnatomicalStructure
  ///
  static const connectedTo = IriTerm.prevalidated(
    'http://schema.org/connectedTo',
  );

  /// IRI for schemahttp:constraintProperty [Expects: http://schema.org/Property, http://schema.org/URL]
  ///
  /// Indicates a property used as a constraint. For example, in the definition of a {[StatisticalVariable]}. The value is a property, either from within Schema.org or from other compatible (e.g. RDF) systems such as DataCommons.org or Wikidata.org.
  ///
  /// Can be used on: http://schema.org/ConstraintNode
  ///
  static const constraintProperty = IriTerm.prevalidated(
    'http://schema.org/constraintProperty',
  );

  /// IRI for schemahttp:contactOption [Expects: http://schema.org/ContactPointOption]
  ///
  /// An option available on this contact point (e.g. a toll-free number or support for hearing-impaired callers).
  ///
  /// Can be used on: http://schema.org/ContactPoint
  ///
  static const contactOption = IriTerm.prevalidated(
    'http://schema.org/contactOption',
  );

  /// IRI for schemahttp:contactPoints [Expects: http://schema.org/ContactPoint]
  ///
  /// A contact point for a person or organization.
  ///
  /// Can be used on: http://schema.org/Organization, http://schema.org/Person
  ///
  static const contactPoints = IriTerm.prevalidated(
    'http://schema.org/contactPoints',
  );

  /// IRI for schemahttp:contactType [Expects: http://schema.org/Text]
  ///
  /// A person or organization can have different contact points, for different purposes. For example, a sales contact point, a PR contact point and so on. This property is used to specify the kind of contact point.
  ///
  /// Can be used on: http://schema.org/ContactPoint
  ///
  static const contactType = IriTerm.prevalidated(
    'http://schema.org/contactType',
  );

  /// IRI for schemahttp:contactlessPayment [Expects: http://schema.org/Boolean]
  ///
  /// A secure method for consumers to purchase products or services via debit, credit or smartcards by using RFID or NFC technology.
  ///
  /// Can be used on: http://schema.org/PaymentCard
  ///
  static const contactlessPayment = IriTerm.prevalidated(
    'http://schema.org/contactlessPayment',
  );

  /// IRI for schemahttp:containedIn [Expects: http://schema.org/Place]
  ///
  /// The basic containment relation between a place and one that contains it.
  ///
  /// Can be used on: http://schema.org/Place
  ///
  static const containedIn = IriTerm.prevalidated(
    'http://schema.org/containedIn',
  );

  /// IRI for schemahttp:contentRating [Expects: http://schema.org/Rating, http://schema.org/Text]
  ///
  /// Official rating of a piece of content&#x2014;for example, 'MPAA PG-13'.
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const contentRating = IriTerm.prevalidated(
    'http://schema.org/contentRating',
  );

  /// IRI for schemahttp:contentReferenceTime [Expects: http://schema.org/DateTime]
  ///
  /// The specific time described by a creative work, for works (e.g. articles, video objects etc.) that emphasise a particular moment within an Event.
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const contentReferenceTime = IriTerm.prevalidated(
    'http://schema.org/contentReferenceTime',
  );

  /// IRI for schemahttp:contentSize [Expects: http://schema.org/Text]
  ///
  /// File size in (mega/kilo)bytes.
  ///
  /// Can be used on: http://schema.org/MediaObject
  ///
  static const contentSize = IriTerm.prevalidated(
    'http://schema.org/contentSize',
  );

  /// IRI for schemahttp:contentType [Expects: http://schema.org/Text]
  ///
  /// The supported content type(s) for an EntryPoint response.
  ///
  /// Can be used on: http://schema.org/EntryPoint
  ///
  static const contentType = IriTerm.prevalidated(
    'http://schema.org/contentType',
  );

  /// IRI for schemahttp:contentUrl [Expects: http://schema.org/URL]
  ///
  /// Actual bytes of the media object, for example the image file or video file.
  ///
  /// Can be used on: http://schema.org/MediaObject
  ///
  static const contentUrl = IriTerm.prevalidated(
    'http://schema.org/contentUrl',
  );

  /// IRI for schemahttp:contraindication [Expects: http://schema.org/MedicalContraindication, http://schema.org/Text]
  ///
  /// A contraindication for this therapy.
  ///
  /// Can be used on: http://schema.org/MedicalDevice, http://schema.org/MedicalTherapy
  ///
  static const contraindication = IriTerm.prevalidated(
    'http://schema.org/contraindication',
  );

  /// IRI for schemahttp:contributor [Expects: http://schema.org/Organization, http://schema.org/Person]
  ///
  /// A secondary contributor to the CreativeWork or Event.
  ///
  /// Can be used on: http://schema.org/CreativeWork, http://schema.org/Event
  ///
  static const contributor = IriTerm.prevalidated(
    'http://schema.org/contributor',
  );

  /// IRI for schemahttp:cookTime [Expects: http://schema.org/Duration]
  ///
  /// The time it takes to actually cook the dish, in [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601).
  ///
  /// Can be used on: http://schema.org/Recipe
  ///
  static const cookTime = IriTerm.prevalidated('http://schema.org/cookTime');

  /// IRI for schemahttp:cookingMethod [Expects: http://schema.org/Text]
  ///
  /// The method of cooking, such as Frying, Steaming, ...
  ///
  /// Can be used on: http://schema.org/Recipe
  ///
  static const cookingMethod = IriTerm.prevalidated(
    'http://schema.org/cookingMethod',
  );

  /// IRI for schemahttp:copyrightHolder [Expects: http://schema.org/Organization, http://schema.org/Person]
  ///
  /// The party holding the legal copyright to the CreativeWork.
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const copyrightHolder = IriTerm.prevalidated(
    'http://schema.org/copyrightHolder',
  );

  /// IRI for schemahttp:copyrightNotice [Expects: http://schema.org/Text]
  ///
  /// Text of a notice appropriate for describing the copyright aspects of this Creative Work, ideally indicating the owner of the copyright for the Work.
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const copyrightNotice = IriTerm.prevalidated(
    'http://schema.org/copyrightNotice',
  );

  /// IRI for schemahttp:copyrightYear [Expects: http://schema.org/Number]
  ///
  /// The year during which the claimed copyright for the CreativeWork was first asserted.
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const copyrightYear = IriTerm.prevalidated(
    'http://schema.org/copyrightYear',
  );

  /// IRI for schemahttp:correction [Expects: http://schema.org/CorrectionComment, http://schema.org/Text, http://schema.org/URL]
  ///
  /// Indicates a correction to a {[CreativeWork]}, either via a {[CorrectionComment]}, textually or in another document.
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const correction = IriTerm.prevalidated(
    'http://schema.org/correction',
  );

  /// IRI for schemahttp:correctionsPolicy [Expects: http://schema.org/CreativeWork, http://schema.org/URL]
  ///
  /// For an {[Organization]} (e.g. {[NewsMediaOrganization]}), a statement describing (in news media, the newsroom‚Äôs) disclosure and correction policy for errors.
  ///
  /// Can be used on: http://schema.org/NewsMediaOrganization, http://schema.org/Organization
  ///
  static const correctionsPolicy = IriTerm.prevalidated(
    'http://schema.org/correctionsPolicy',
  );

  /// IRI for schemahttp:costCategory [Expects: http://schema.org/DrugCostCategory]
  ///
  /// The category of cost, such as wholesale, retail, reimbursement cap, etc.
  ///
  /// Can be used on: http://schema.org/DrugCost
  ///
  static const costCategory = IriTerm.prevalidated(
    'http://schema.org/costCategory',
  );

  /// IRI for schemahttp:costCurrency [Expects: http://schema.org/Text]
  ///
  /// The currency (in 3-letter) of the drug cost. See: http://en.wikipedia.org/wiki/ISO_4217.
  ///
  /// Can be used on: http://schema.org/DrugCost
  ///
  static const costCurrency = IriTerm.prevalidated(
    'http://schema.org/costCurrency',
  );

  /// IRI for schemahttp:costOrigin [Expects: http://schema.org/Text]
  ///
  /// Additional details to capture the origin of the cost data. For example, 'Medicare Part B'.
  ///
  /// Can be used on: http://schema.org/DrugCost
  ///
  static const costOrigin = IriTerm.prevalidated(
    'http://schema.org/costOrigin',
  );

  /// IRI for schemahttp:costPerUnit [Expects: http://schema.org/Number, http://schema.org/QualitativeValue, http://schema.org/Text]
  ///
  /// The cost per unit of the drug.
  ///
  /// Can be used on: http://schema.org/DrugCost
  ///
  static const costPerUnit = IriTerm.prevalidated(
    'http://schema.org/costPerUnit',
  );

  /// IRI for schemahttp:countriesNotSupported [Expects: http://schema.org/Text]
  ///
  /// Countries for which the application is not supported. You can also provide the two-letter ISO 3166-1 alpha-2 country code.
  ///
  /// Can be used on: http://schema.org/SoftwareApplication
  ///
  static const countriesNotSupported = IriTerm.prevalidated(
    'http://schema.org/countriesNotSupported',
  );

  /// IRI for schemahttp:countriesSupported [Expects: http://schema.org/Text]
  ///
  /// Countries for which the application is supported. You can also provide the two-letter ISO 3166-1 alpha-2 country code.
  ///
  /// Can be used on: http://schema.org/SoftwareApplication
  ///
  static const countriesSupported = IriTerm.prevalidated(
    'http://schema.org/countriesSupported',
  );

  /// IRI for schemahttp:countryOfAssembly [Expects: http://schema.org/Text]
  ///
  /// The place where the product was assembled.
  ///
  /// Can be used on: http://schema.org/Product
  ///
  static const countryOfAssembly = IriTerm.prevalidated(
    'http://schema.org/countryOfAssembly',
  );

  /// IRI for schemahttp:countryOfLastProcessing [Expects: http://schema.org/Text]
  ///
  /// The place where the item (typically {[Product]}) was last processed and tested before importation.
  ///
  /// Can be used on: http://schema.org/Product
  ///
  static const countryOfLastProcessing = IriTerm.prevalidated(
    'http://schema.org/countryOfLastProcessing',
  );

  /// IRI for schemahttp:countryOfOrigin [Expects: http://schema.org/Country]
  ///
  /// The country of origin of something, including products as well as creative  works such as movie and TV content.
  ///
  /// In the case of TV and movie, this would be the country of the principle offices of the production company or individual responsible for the movie. For other kinds of {[CreativeWork]} it is difficult to provide fully general guidance, and properties such as {[contentLocation]} and {[locationCreated]} may be more applicable.
  ///
  /// In the case of products, the country of origin of the product. The exact interpretation of this may vary by context and product type, and cannot be fully enumerated here.
  ///
  /// Can be used on: http://schema.org/CreativeWork, http://schema.org/Movie, http://schema.org/Product, http://schema.org/TVEpisode, http://schema.org/TVSeason, http://schema.org/TVSeries
  ///
  static const countryOfOrigin = IriTerm.prevalidated(
    'http://schema.org/countryOfOrigin',
  );

  /// IRI for schemahttp:course [Expects: http://schema.org/Place]
  ///
  /// A sub property of location. The course where this action was taken.
  ///
  /// Can be used on: http://schema.org/ExerciseAction
  ///
  static const course = IriTerm.prevalidated('http://schema.org/course');

  /// IRI for schemahttp:courseCode [Expects: http://schema.org/Text]
  ///
  /// The identifier for the {[Course]} used by the course {[provider]} (e.g. CS101 or 6.001).
  ///
  /// Can be used on: http://schema.org/Course
  ///
  static const courseCode = IriTerm.prevalidated(
    'http://schema.org/courseCode',
  );

  /// IRI for schemahttp:courseMode [Expects: http://schema.org/Text, http://schema.org/URL]
  ///
  /// The medium or means of delivery of the course instance or the mode of study, either as a text label (e.g. "online", "onsite" or "blended"; "synchronous" or "asynchronous"; "full-time" or "part-time") or as a URL reference to a term from a controlled vocabulary (e.g. https://ceds.ed.gov/element/001311#Asynchronous).
  ///
  /// Can be used on: http://schema.org/CourseInstance
  ///
  static const courseMode = IriTerm.prevalidated(
    'http://schema.org/courseMode',
  );

  /// IRI for schemahttp:coursePrerequisites [Expects: http://schema.org/AlignmentObject, http://schema.org/Course, http://schema.org/Text]
  ///
  /// Requirements for taking the Course. May be completion of another {[Course]} or a textual description like "permission of instructor". Requirements may be a pre-requisite competency, referenced using {[AlignmentObject]}.
  ///
  /// Can be used on: http://schema.org/Course
  ///
  static const coursePrerequisites = IriTerm.prevalidated(
    'http://schema.org/coursePrerequisites',
  );

  /// IRI for schemahttp:courseSchedule [Expects: http://schema.org/Schedule]
  ///
  /// Represents the length and pace of a course, expressed as a {[Schedule]}.
  ///
  /// Can be used on: http://schema.org/CourseInstance
  ///
  static const courseSchedule = IriTerm.prevalidated(
    'http://schema.org/courseSchedule',
  );

  /// IRI for schemahttp:courseWorkload [Expects: http://schema.org/Text]
  ///
  /// The amount of work expected of students taking the course, often provided as a figure per week or per month, and may be broken down by type. For example, "2 hours of lectures, 1 hour of lab work and 3 hours of independent study per week".
  ///
  /// Can be used on: http://schema.org/CourseInstance
  ///
  static const courseWorkload = IriTerm.prevalidated(
    'http://schema.org/courseWorkload',
  );

  /// IRI for schemahttp:coverageEndTime [Expects: http://schema.org/DateTime]
  ///
  /// The time when the live blog will stop covering the Event. Note that coverage may continue after the Event concludes.
  ///
  /// Can be used on: http://schema.org/LiveBlogPosting
  ///
  static const coverageEndTime = IriTerm.prevalidated(
    'http://schema.org/coverageEndTime',
  );

  /// IRI for schemahttp:coverageStartTime [Expects: http://schema.org/DateTime]
  ///
  /// The time when the live blog will begin covering the Event. Note that coverage may begin before the Event's start time. The LiveBlogPosting may also be created before coverage begins.
  ///
  /// Can be used on: http://schema.org/LiveBlogPosting
  ///
  static const coverageStartTime = IriTerm.prevalidated(
    'http://schema.org/coverageStartTime',
  );

  /// IRI for schemahttp:creativeWorkStatus [Expects: http://schema.org/DefinedTerm, http://schema.org/Text]
  ///
  /// The status of a creative work in terms of its stage in a lifecycle. Example terms include Incomplete, Draft, Published, Obsolete. Some organizations define a set of terms for the stages of their publication lifecycle.
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const creativeWorkStatus = IriTerm.prevalidated(
    'http://schema.org/creativeWorkStatus',
  );

  /// IRI for schemahttp:credentialCategory [Expects: http://schema.org/DefinedTerm, http://schema.org/Text, http://schema.org/URL]
  ///
  /// The category or type of credential being described, for example "degree‚Äù, ‚Äúcertificate‚Äù, ‚Äúbadge‚Äù, or more specific term.
  ///
  /// Can be used on: http://schema.org/EducationalOccupationalCredential
  ///
  static const credentialCategory = IriTerm.prevalidated(
    'http://schema.org/credentialCategory',
  );

  /// IRI for schemahttp:creditText [Expects: http://schema.org/Text]
  ///
  /// Text that can be used to credit person(s) and/or organization(s) associated with a published Creative Work.
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const creditText = IriTerm.prevalidated(
    'http://schema.org/creditText',
  );

  /// IRI for schemahttp:creditedTo [Expects: http://schema.org/Organization, http://schema.org/Person]
  ///
  /// The group the release is credited to if different than the byArtist. For example, Red and Blue is credited to "Stefani Germanotta Band", but by Lady Gaga.
  ///
  /// Can be used on: http://schema.org/MusicRelease
  ///
  static const creditedTo = IriTerm.prevalidated(
    'http://schema.org/creditedTo',
  );

  /// IRI for schemahttp:cssSelector [Expects: http://schema.org/CssSelectorType]
  ///
  /// A CSS selector, e.g. of a {[SpeakableSpecification]} or {[WebPageElement]}. In the latter case, multiple matches within a page can constitute a single conceptual "Web page element".
  ///
  /// Can be used on: http://schema.org/SpeakableSpecification, http://schema.org/WebPageElement
  ///
  static const cssSelector = IriTerm.prevalidated(
    'http://schema.org/cssSelector',
  );

  /// IRI for schemahttp:currenciesAccepted [Expects: http://schema.org/Text]
  ///
  /// The currency accepted.\n\nUse standard formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217), e.g. "USD"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies, e.g. "BTC"; well known names for [Local Exchange Trading Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system) (LETS) and other currency types, e.g. "Ithaca HOUR".
  ///
  /// Can be used on: http://schema.org/LocalBusiness
  ///
  static const currenciesAccepted = IriTerm.prevalidated(
    'http://schema.org/currenciesAccepted',
  );

  /// IRI for schemahttp:currency [Expects: http://schema.org/Text]
  ///
  /// The currency in which the monetary amount is expressed.\n\nUse standard formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217), e.g. "USD"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies, e.g. "BTC"; well known names for [Local Exchange Trading Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system) (LETS) and other currency types, e.g. "Ithaca HOUR".
  ///
  /// Can be used on: http://schema.org/DatedMoneySpecification, http://schema.org/ExchangeRateSpecification, http://schema.org/LoanOrCredit, http://schema.org/MonetaryAmount, http://schema.org/MonetaryAmountDistribution
  ///
  static const currency = IriTerm.prevalidated('http://schema.org/currency');

  /// IRI for schemahttp:currentExchangeRate [Expects: http://schema.org/UnitPriceSpecification]
  ///
  /// The current price of a currency.
  ///
  /// Can be used on: http://schema.org/ExchangeRateSpecification
  ///
  static const currentExchangeRate = IriTerm.prevalidated(
    'http://schema.org/currentExchangeRate',
  );

  /// IRI for schemahttp:customer [Expects: http://schema.org/Organization, http://schema.org/Person]
  ///
  /// Party placing the order or paying the invoice.
  ///
  /// Can be used on: http://schema.org/Invoice, http://schema.org/Order
  ///
  static const customer = IriTerm.prevalidated('http://schema.org/customer');

  /// IRI for schemahttp:customerRemorseReturnFees [Expects: http://schema.org/ReturnFeesEnumeration]
  ///
  /// The type of return fees if the product is returned due to customer remorse.
  ///
  /// Can be used on: http://schema.org/MerchantReturnPolicy
  ///
  static const customerRemorseReturnFees = IriTerm.prevalidated(
    'http://schema.org/customerRemorseReturnFees',
  );

  /// IRI for schemahttp:customerRemorseReturnLabelSource [Expects: http://schema.org/ReturnLabelSourceEnumeration]
  ///
  /// The method (from an enumeration) by which the customer obtains a return shipping label for a product returned due to customer remorse.
  ///
  /// Can be used on: http://schema.org/MerchantReturnPolicy
  ///
  static const customerRemorseReturnLabelSource = IriTerm.prevalidated(
    'http://schema.org/customerRemorseReturnLabelSource',
  );

  /// IRI for schemahttp:customerRemorseReturnShippingFeesAmount [Expects: http://schema.org/MonetaryAmount]
  ///
  /// The amount of shipping costs if a product is returned due to customer remorse. Applicable when property {[customerRemorseReturnFees]} equals {[ReturnShippingFees]}.
  ///
  /// Can be used on: http://schema.org/MerchantReturnPolicy
  ///
  static const customerRemorseReturnShippingFeesAmount = IriTerm.prevalidated(
    'http://schema.org/customerRemorseReturnShippingFeesAmount',
  );

  /// IRI for schemahttp:cutoffTime [Expects: http://schema.org/Time]
  ///
  /// Order cutoff time allows merchants to describe the time after which they will no longer process orders received on that day. For orders processed after cutoff time, one day gets added to the delivery time estimate. This property is expected to be most typically used via the {[ShippingRateSettings]} publication pattern. The time is indicated using the ISO-8601 Time format, e.g. "23:30:00-05:00" would represent 6:30 pm Eastern Standard Time (EST) which is 5 hours behind Coordinated Universal Time (UTC).
  ///
  /// Can be used on: http://schema.org/ServicePeriod, http://schema.org/ShippingDeliveryTime
  ///
  static const cutoffTime = IriTerm.prevalidated(
    'http://schema.org/cutoffTime',
  );

  /// IRI for schemahttp:cvdCollectionDate [Expects: http://schema.org/DateTime, http://schema.org/Text]
  ///
  /// collectiondate - Date for which patient counts are reported.
  ///
  /// Can be used on: http://schema.org/CDCPMDRecord
  ///
  static const cvdCollectionDate = IriTerm.prevalidated(
    'http://schema.org/cvdCollectionDate',
  );

  /// IRI for schemahttp:cvdFacilityCounty [Expects: http://schema.org/Text]
  ///
  /// Name of the County of the NHSN facility that this data record applies to. Use {[cvdFacilityId]} to identify the facility. To provide other details, {[healthcareReportingData]} can be used on a {[Hospital]} entry.
  ///
  /// Can be used on: http://schema.org/CDCPMDRecord
  ///
  static const cvdFacilityCounty = IriTerm.prevalidated(
    'http://schema.org/cvdFacilityCounty',
  );

  /// IRI for schemahttp:cvdFacilityId [Expects: http://schema.org/Text]
  ///
  /// Identifier of the NHSN facility that this data record applies to. Use {[cvdFacilityCounty]} to indicate the county. To provide other details, {[healthcareReportingData]} can be used on a {[Hospital]} entry.
  ///
  /// Can be used on: http://schema.org/CDCPMDRecord
  ///
  static const cvdFacilityId = IriTerm.prevalidated(
    'http://schema.org/cvdFacilityId',
  );

  /// IRI for schemahttp:cvdNumBeds [Expects: http://schema.org/Number]
  ///
  /// numbeds - HOSPITAL INPATIENT BEDS: Inpatient beds, including all staffed, licensed, and overflow (surge) beds used for inpatients.
  ///
  /// Can be used on: http://schema.org/CDCPMDRecord
  ///
  static const cvdNumBeds = IriTerm.prevalidated(
    'http://schema.org/cvdNumBeds',
  );

  /// IRI for schemahttp:cvdNumBedsOcc [Expects: http://schema.org/Number]
  ///
  /// numbedsocc - HOSPITAL INPATIENT BED OCCUPANCY: Total number of staffed inpatient beds that are occupied.
  ///
  /// Can be used on: http://schema.org/CDCPMDRecord
  ///
  static const cvdNumBedsOcc = IriTerm.prevalidated(
    'http://schema.org/cvdNumBedsOcc',
  );

  /// IRI for schemahttp:cvdNumC19Died [Expects: http://schema.org/Number]
  ///
  /// numc19died - DEATHS: Patients with suspected or confirmed COVID-19 who died in the hospital, ED, or any overflow location.
  ///
  /// Can be used on: http://schema.org/CDCPMDRecord
  ///
  static const cvdNumC19Died = IriTerm.prevalidated(
    'http://schema.org/cvdNumC19Died',
  );

  /// IRI for schemahttp:cvdNumC19HOPats [Expects: http://schema.org/Number]
  ///
  /// numc19hopats - HOSPITAL ONSET: Patients hospitalized in an NHSN inpatient care location with onset of suspected or confirmed COVID-19 14 or more days after hospitalization.
  ///
  /// Can be used on: http://schema.org/CDCPMDRecord
  ///
  static const cvdNumC19HOPats = IriTerm.prevalidated(
    'http://schema.org/cvdNumC19HOPats',
  );

  /// IRI for schemahttp:cvdNumC19HospPats [Expects: http://schema.org/Number]
  ///
  /// numc19hosppats - HOSPITALIZED: Patients currently hospitalized in an inpatient care location who have suspected or confirmed COVID-19.
  ///
  /// Can be used on: http://schema.org/CDCPMDRecord
  ///
  static const cvdNumC19HospPats = IriTerm.prevalidated(
    'http://schema.org/cvdNumC19HospPats',
  );

  /// IRI for schemahttp:cvdNumC19MechVentPats [Expects: http://schema.org/Number]
  ///
  /// numc19mechventpats - HOSPITALIZED and VENTILATED: Patients hospitalized in an NHSN inpatient care location who have suspected or confirmed COVID-19 and are on a mechanical ventilator.
  ///
  /// Can be used on: http://schema.org/CDCPMDRecord
  ///
  static const cvdNumC19MechVentPats = IriTerm.prevalidated(
    'http://schema.org/cvdNumC19MechVentPats',
  );

  /// IRI for schemahttp:cvdNumC19OFMechVentPats [Expects: http://schema.org/Number]
  ///
  /// numc19ofmechventpats - ED/OVERFLOW and VENTILATED: Patients with suspected or confirmed COVID-19 who are in the ED or any overflow location awaiting an inpatient bed and on a mechanical ventilator.
  ///
  /// Can be used on: http://schema.org/CDCPMDRecord
  ///
  static const cvdNumC19OFMechVentPats = IriTerm.prevalidated(
    'http://schema.org/cvdNumC19OFMechVentPats',
  );

  /// IRI for schemahttp:cvdNumC19OverflowPats [Expects: http://schema.org/Number]
  ///
  /// numc19overflowpats - ED/OVERFLOW: Patients with suspected or confirmed COVID-19 who are in the ED or any overflow location awaiting an inpatient bed.
  ///
  /// Can be used on: http://schema.org/CDCPMDRecord
  ///
  static const cvdNumC19OverflowPats = IriTerm.prevalidated(
    'http://schema.org/cvdNumC19OverflowPats',
  );

  /// IRI for schemahttp:cvdNumICUBeds [Expects: http://schema.org/Number]
  ///
  /// numicubeds - ICU BEDS: Total number of staffed inpatient intensive care unit (ICU) beds.
  ///
  /// Can be used on: http://schema.org/CDCPMDRecord
  ///
  static const cvdNumICUBeds = IriTerm.prevalidated(
    'http://schema.org/cvdNumICUBeds',
  );

  /// IRI for schemahttp:cvdNumICUBedsOcc [Expects: http://schema.org/Number]
  ///
  /// numicubedsocc - ICU BED OCCUPANCY: Total number of staffed inpatient ICU beds that are occupied.
  ///
  /// Can be used on: http://schema.org/CDCPMDRecord
  ///
  static const cvdNumICUBedsOcc = IriTerm.prevalidated(
    'http://schema.org/cvdNumICUBedsOcc',
  );

  /// IRI for schemahttp:cvdNumTotBeds [Expects: http://schema.org/Number]
  ///
  /// numtotbeds - ALL HOSPITAL BEDS: Total number of all inpatient and outpatient beds, including all staffed, ICU, licensed, and overflow (surge) beds used for inpatients or outpatients.
  ///
  /// Can be used on: http://schema.org/CDCPMDRecord
  ///
  static const cvdNumTotBeds = IriTerm.prevalidated(
    'http://schema.org/cvdNumTotBeds',
  );

  /// IRI for schemahttp:cvdNumVent [Expects: http://schema.org/Number]
  ///
  /// numvent - MECHANICAL VENTILATORS: Total number of ventilators available.
  ///
  /// Can be used on: http://schema.org/CDCPMDRecord
  ///
  static const cvdNumVent = IriTerm.prevalidated(
    'http://schema.org/cvdNumVent',
  );

  /// IRI for schemahttp:cvdNumVentUse [Expects: http://schema.org/Number]
  ///
  /// numventuse - MECHANICAL VENTILATORS IN USE: Total number of ventilators in use.
  ///
  /// Can be used on: http://schema.org/CDCPMDRecord
  ///
  static const cvdNumVentUse = IriTerm.prevalidated(
    'http://schema.org/cvdNumVentUse',
  );

  /// IRI for schemahttp:dataFeedElement [Expects: http://schema.org/DataFeedItem, http://schema.org/Text, http://schema.org/Thing]
  ///
  /// An item within a data feed. Data feeds may have many elements.
  ///
  /// Can be used on: http://schema.org/DataFeed
  ///
  static const dataFeedElement = IriTerm.prevalidated(
    'http://schema.org/dataFeedElement',
  );

  /// IRI for schemahttp:datasetTimeInterval [Expects: http://schema.org/DateTime]
  ///
  /// The range of temporal applicability of a dataset, e.g. for a 2011 census dataset, the year 2011 (in ISO 8601 time interval format).
  ///
  /// Can be used on: http://schema.org/Dataset
  ///
  static const datasetTimeInterval = IriTerm.prevalidated(
    'http://schema.org/datasetTimeInterval',
  );

  /// IRI for schemahttp:dateDeleted [Expects: http://schema.org/Date, http://schema.org/DateTime]
  ///
  /// The datetime the item was removed from the DataFeed.
  ///
  /// Can be used on: http://schema.org/DataFeedItem
  ///
  static const dateDeleted = IriTerm.prevalidated(
    'http://schema.org/dateDeleted',
  );

  /// IRI for schemahttp:dateIssued [Expects: http://schema.org/Date, http://schema.org/DateTime]
  ///
  /// The date the ticket was issued.
  ///
  /// Can be used on: http://schema.org/Ticket
  ///
  static const dateIssued = IriTerm.prevalidated(
    'http://schema.org/dateIssued',
  );

  /// IRI for schemahttp:dateModified [Expects: http://schema.org/Date, http://schema.org/DateTime]
  ///
  /// The date on which the CreativeWork was most recently modified or when the item's entry was modified within a DataFeed.
  ///
  /// Can be used on: http://schema.org/CreativeWork, http://schema.org/DataFeedItem
  ///
  static const dateModified = IriTerm.prevalidated(
    'http://schema.org/dateModified',
  );

  /// IRI for schemahttp:datePosted [Expects: http://schema.org/Date, http://schema.org/DateTime]
  ///
  /// Publication date of an online listing.
  ///
  /// Can be used on: http://schema.org/CDCPMDRecord, http://schema.org/JobPosting, http://schema.org/RealEstateListing, http://schema.org/SpecialAnnouncement
  ///
  static const datePosted = IriTerm.prevalidated(
    'http://schema.org/datePosted',
  );

  /// IRI for schemahttp:datePublished [Expects: http://schema.org/Date, http://schema.org/DateTime]
  ///
  /// Date of first publication or broadcast. For example the date a {[CreativeWork]} was broadcast or a {[Certification]} was issued.
  ///
  /// Can be used on: http://schema.org/Certification, http://schema.org/CreativeWork
  ///
  static const datePublished = IriTerm.prevalidated(
    'http://schema.org/datePublished',
  );

  /// IRI for schemahttp:dateRead [Expects: http://schema.org/Date, http://schema.org/DateTime]
  ///
  /// The date/time at which the message has been read by the recipient if a single recipient exists.
  ///
  /// Can be used on: http://schema.org/Message
  ///
  static const dateRead = IriTerm.prevalidated('http://schema.org/dateRead');

  /// IRI for schemahttp:dateReceived [Expects: http://schema.org/DateTime]
  ///
  /// The date/time the message was received if a single recipient exists.
  ///
  /// Can be used on: http://schema.org/Message
  ///
  static const dateReceived = IriTerm.prevalidated(
    'http://schema.org/dateReceived',
  );

  /// IRI for schemahttp:dateSent [Expects: http://schema.org/DateTime]
  ///
  /// The date/time at which the message was sent.
  ///
  /// Can be used on: http://schema.org/Message
  ///
  static const dateSent = IriTerm.prevalidated('http://schema.org/dateSent');

  /// IRI for schemahttp:dateVehicleFirstRegistered [Expects: http://schema.org/Date]
  ///
  /// The date of the first registration of the vehicle with the respective public authorities.
  ///
  /// Can be used on: http://schema.org/Vehicle
  ///
  static const dateVehicleFirstRegistered = IriTerm.prevalidated(
    'http://schema.org/dateVehicleFirstRegistered',
  );

  /// IRI for schemahttp:dateline [Expects: http://schema.org/Text]
  ///
  /// A [dateline](https://en.wikipedia.org/wiki/Dateline) is a brief piece of text included in news articles that describes where and when the story was written or filed though the date is often omitted. Sometimes only a placename is provided.
  ///
  /// Structured representations of dateline-related information can also be expressed more explicitly using {[locationCreated]} (which represents where a work was created, e.g. where a news report was written).  For location depicted or described in the content, use {[contentLocation]}.
  ///
  /// Dateline summaries are oriented more towards human readers than towards automated processing, and can vary substantially. Some examples: "BEIRUT, Lebanon, June 2.", "Paris, France", "December 19, 2017 11:43AM Reporting from Washington", "Beijing/Moscow", "QUEZON CITY, Philippines".
  ///
  ///
  /// Can be used on: http://schema.org/NewsArticle
  ///
  static const dateline = IriTerm.prevalidated('http://schema.org/dateline');

  /// IRI for schemahttp:dayOfWeek [Expects: http://schema.org/DayOfWeek]
  ///
  /// The day of the week for which these opening hours are valid.
  ///
  /// Can be used on: http://schema.org/EducationalOccupationalProgram, http://schema.org/OpeningHoursSpecification
  ///
  static const dayOfWeek = IriTerm.prevalidated('http://schema.org/dayOfWeek');

  /// IRI for schemahttp:deathDate [Expects: http://schema.org/Date]
  ///
  /// Date of death.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const deathDate = IriTerm.prevalidated('http://schema.org/deathDate');

  /// IRI for schemahttp:deathPlace [Expects: http://schema.org/Place]
  ///
  /// The place where the person died.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const deathPlace = IriTerm.prevalidated(
    'http://schema.org/deathPlace',
  );

  /// IRI for schemahttp:defaultValue [Expects: http://schema.org/Text, http://schema.org/Thing]
  ///
  /// The default value of the input.  For properties that expect a literal, the default is a literal value, for properties that expect an object, it's an ID reference to one of the current values.
  ///
  /// Can be used on: http://schema.org/PropertyValueSpecification
  ///
  static const defaultValue = IriTerm.prevalidated(
    'http://schema.org/defaultValue',
  );

  /// IRI for schemahttp:deliveryAddress [Expects: http://schema.org/PostalAddress]
  ///
  /// Destination address.
  ///
  /// Can be used on: http://schema.org/ParcelDelivery
  ///
  static const deliveryAddress = IriTerm.prevalidated(
    'http://schema.org/deliveryAddress',
  );

  /// IRI for schemahttp:deliveryLeadTime [Expects: http://schema.org/QuantitativeValue]
  ///
  /// The typical delay between the receipt of the order and the goods either leaving the warehouse or being prepared for pickup, in case the delivery method is on site pickup.
  ///
  /// Can be used on: http://schema.org/Demand, http://schema.org/Offer
  ///
  static const deliveryLeadTime = IriTerm.prevalidated(
    'http://schema.org/deliveryLeadTime',
  );

  /// IRI for schemahttp:deliveryMethod [Expects: http://schema.org/DeliveryMethod]
  ///
  /// A sub property of instrument. The method of delivery.
  ///
  /// Can be used on: http://schema.org/OrderAction, http://schema.org/ReceiveAction, http://schema.org/SendAction, http://schema.org/TrackAction
  ///
  static const deliveryMethod = IriTerm.prevalidated(
    'http://schema.org/deliveryMethod',
  );

  /// IRI for schemahttp:deliveryStatus [Expects: http://schema.org/DeliveryEvent]
  ///
  /// New entry added as the package passes through each leg of its journey (from shipment to final delivery).
  ///
  /// Can be used on: http://schema.org/ParcelDelivery
  ///
  static const deliveryStatus = IriTerm.prevalidated(
    'http://schema.org/deliveryStatus',
  );

  /// IRI for schemahttp:deliveryTime [Expects: http://schema.org/ShippingDeliveryTime]
  ///
  /// The total delay between the receipt of the order and the goods reaching the final customer.
  ///
  /// Can be used on: http://schema.org/DeliveryTimeSettings, http://schema.org/OfferShippingDetails
  ///
  static const deliveryTime = IriTerm.prevalidated(
    'http://schema.org/deliveryTime',
  );

  /// IRI for schemahttp:department [Expects: http://schema.org/Organization]
  ///
  /// A relationship between an organization and a department of that organization, also described as an organization (allowing different urls, logos, opening hours). For example: a store with a pharmacy, or a bakery with a cafe.
  ///
  /// Can be used on: http://schema.org/Organization
  ///
  static const department = IriTerm.prevalidated(
    'http://schema.org/department',
  );

  /// IRI for schemahttp:departureAirport [Expects: http://schema.org/Airport]
  ///
  /// The airport where the flight originates.
  ///
  /// Can be used on: http://schema.org/Flight
  ///
  static const departureAirport = IriTerm.prevalidated(
    'http://schema.org/departureAirport',
  );

  /// IRI for schemahttp:departureBoatTerminal [Expects: http://schema.org/BoatTerminal]
  ///
  /// The terminal or port from which the boat departs.
  ///
  /// Can be used on: http://schema.org/BoatTrip
  ///
  static const departureBoatTerminal = IriTerm.prevalidated(
    'http://schema.org/departureBoatTerminal',
  );

  /// IRI for schemahttp:departureBusStop [Expects: http://schema.org/BusStation, http://schema.org/BusStop]
  ///
  /// The stop or station from which the bus departs.
  ///
  /// Can be used on: http://schema.org/BusTrip
  ///
  static const departureBusStop = IriTerm.prevalidated(
    'http://schema.org/departureBusStop',
  );

  /// IRI for schemahttp:departureGate [Expects: http://schema.org/Text]
  ///
  /// Identifier of the flight's departure gate.
  ///
  /// Can be used on: http://schema.org/Flight
  ///
  static const departureGate = IriTerm.prevalidated(
    'http://schema.org/departureGate',
  );

  /// IRI for schemahttp:departurePlatform [Expects: http://schema.org/Text]
  ///
  /// The platform from which the train departs.
  ///
  /// Can be used on: http://schema.org/TrainTrip
  ///
  static const departurePlatform = IriTerm.prevalidated(
    'http://schema.org/departurePlatform',
  );

  /// IRI for schemahttp:departureStation [Expects: http://schema.org/TrainStation]
  ///
  /// The station from which the train departs.
  ///
  /// Can be used on: http://schema.org/TrainTrip
  ///
  static const departureStation = IriTerm.prevalidated(
    'http://schema.org/departureStation',
  );

  /// IRI for schemahttp:departureTerminal [Expects: http://schema.org/Text]
  ///
  /// Identifier of the flight's departure terminal.
  ///
  /// Can be used on: http://schema.org/Flight
  ///
  static const departureTerminal = IriTerm.prevalidated(
    'http://schema.org/departureTerminal',
  );

  /// IRI for schemahttp:departureTime [Expects: http://schema.org/DateTime, http://schema.org/Time]
  ///
  /// The expected departure time.
  ///
  /// Can be used on: http://schema.org/Trip
  ///
  static const departureTime = IriTerm.prevalidated(
    'http://schema.org/departureTime',
  );

  /// IRI for schemahttp:dependencies [Expects: http://schema.org/Text]
  ///
  /// Prerequisites needed to fulfill steps in article.
  ///
  /// Can be used on: http://schema.org/TechArticle
  ///
  static const dependencies = IriTerm.prevalidated(
    'http://schema.org/dependencies',
  );

  /// IRI for schemahttp:depth [Expects: http://schema.org/Distance, http://schema.org/QuantitativeValue]
  ///
  /// The depth of the item.
  ///
  /// Can be used on: http://schema.org/OfferShippingDetails, http://schema.org/Product, http://schema.org/ShippingConditions, http://schema.org/VisualArtwork
  ///
  static const depth = IriTerm.prevalidated('http://schema.org/depth');

  /// IRI for schemahttp:device [Expects: http://schema.org/Text]
  ///
  /// Device required to run the application. Used in cases where a specific make/model is required to run the application.
  ///
  /// Can be used on: http://schema.org/SoftwareApplication
  ///
  static const device = IriTerm.prevalidated('http://schema.org/device');

  /// IRI for schemahttp:diagnosis [Expects: http://schema.org/MedicalCondition]
  ///
  /// One or more alternative conditions considered in the differential diagnosis process as output of a diagnosis process.
  ///
  /// Can be used on: http://schema.org/DDxElement, http://schema.org/Patient
  ///
  static const diagnosis = IriTerm.prevalidated('http://schema.org/diagnosis');

  /// IRI for schemahttp:diagram [Expects: http://schema.org/ImageObject]
  ///
  /// An image containing a diagram that illustrates the structure and/or its component substructures and/or connections with other structures.
  ///
  /// Can be used on: http://schema.org/AnatomicalStructure
  ///
  static const diagram = IriTerm.prevalidated('http://schema.org/diagram');

  /// IRI for schemahttp:diet [Expects: http://schema.org/Diet]
  ///
  /// A sub property of instrument. The diet used in this action.
  ///
  /// Can be used on: http://schema.org/ExerciseAction
  ///
  static const diet = IriTerm.prevalidated('http://schema.org/diet');

  /// IRI for schemahttp:dietFeatures [Expects: http://schema.org/Text]
  ///
  /// Nutritional information specific to the dietary plan. May include dietary recommendations on what foods to avoid, what foods to consume, and specific alterations/deviations from the USDA or other regulatory body's approved dietary guidelines.
  ///
  /// Can be used on: http://schema.org/Diet
  ///
  static const dietFeatures = IriTerm.prevalidated(
    'http://schema.org/dietFeatures',
  );

  /// IRI for schemahttp:differentialDiagnosis [Expects: http://schema.org/DDxElement]
  ///
  /// One of a set of differential diagnoses for the condition. Specifically, a closely-related or competing diagnosis typically considered later in the cognitive process whereby this medical condition is distinguished from others most likely responsible for a similar collection of signs and symptoms to reach the most parsimonious diagnosis or diagnoses in a patient.
  ///
  /// Can be used on: http://schema.org/MedicalCondition
  ///
  static const differentialDiagnosis = IriTerm.prevalidated(
    'http://schema.org/differentialDiagnosis',
  );

  /// IRI for schemahttp:digitalSourceType [Expects: http://schema.org/IPTCDigitalSourceEnumeration]
  ///
  /// Indicates an IPTCDigitalSourceEnumeration code indicating the nature of the digital source(s) for some {[CreativeWork]}.
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const digitalSourceType = IriTerm.prevalidated(
    'http://schema.org/digitalSourceType',
  );

  /// IRI for schemahttp:directApply [Expects: http://schema.org/Boolean]
  ///
  /// Indicates whether an {[url]} that is associated with a {[JobPosting]} enables direct application for the job, via the posting website. A job posting is considered to have directApply of {[True]} if an application process for the specified job can be directly initiated via the url(s) given (noting that e.g. multiple internet domains might nevertheless be involved at an implementation level). A value of {[False]} is appropriate if there is no clear path to applying directly online for the specified job, navigating directly from the JobPosting url(s) supplied.
  ///
  /// Can be used on: http://schema.org/JobPosting
  ///
  static const directApply = IriTerm.prevalidated(
    'http://schema.org/directApply',
  );

  /// IRI for schemahttp:directors [Expects: http://schema.org/Person]
  ///
  /// A director of e.g. TV, radio, movie, video games etc. content. Directors can be associated with individual items or with a series, episode, clip.
  ///
  /// Can be used on: http://schema.org/Clip, http://schema.org/Episode, http://schema.org/Movie, http://schema.org/MovieSeries, http://schema.org/RadioSeries, http://schema.org/TVSeries, http://schema.org/VideoGame, http://schema.org/VideoGameSeries, http://schema.org/VideoObject
  ///
  static const directors = IriTerm.prevalidated('http://schema.org/directors');

  /// IRI for schemahttp:disambiguatingDescription [Expects: http://schema.org/Text]
  ///
  /// A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const disambiguatingDescription = IriTerm.prevalidated(
    'http://schema.org/disambiguatingDescription',
  );

  /// IRI for schemahttp:discount [Expects: http://schema.org/Number, http://schema.org/Text]
  ///
  /// Any discount applied (to an Order).
  ///
  /// Can be used on: http://schema.org/Order
  ///
  static const discount = IriTerm.prevalidated('http://schema.org/discount');

  /// IRI for schemahttp:discountCode [Expects: http://schema.org/Text]
  ///
  /// Code used to redeem a discount.
  ///
  /// Can be used on: http://schema.org/Order
  ///
  static const discountCode = IriTerm.prevalidated(
    'http://schema.org/discountCode',
  );

  /// IRI for schemahttp:discountCurrency [Expects: http://schema.org/Text]
  ///
  /// The currency of the discount.\n\nUse standard formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217), e.g. "USD"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies, e.g. "BTC"; well known names for [Local Exchange Trading Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system) (LETS) and other currency types, e.g. "Ithaca HOUR".
  ///
  /// Can be used on: http://schema.org/Order
  ///
  static const discountCurrency = IriTerm.prevalidated(
    'http://schema.org/discountCurrency',
  );

  /// IRI for schemahttp:discusses [Expects: http://schema.org/CreativeWork]
  ///
  /// Specifies the CreativeWork associated with the UserComment.
  ///
  /// Can be used on: http://schema.org/UserComments
  ///
  static const discusses = IriTerm.prevalidated('http://schema.org/discusses');

  /// IRI for schemahttp:discussionUrl [Expects: http://schema.org/URL]
  ///
  /// A link to the page containing the comments of the CreativeWork.
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const discussionUrl = IriTerm.prevalidated(
    'http://schema.org/discussionUrl',
  );

  /// IRI for schemahttp:diseasePreventionInfo [Expects: http://schema.org/URL, http://schema.org/WebContent]
  ///
  /// Information about disease prevention.
  ///
  /// Can be used on: http://schema.org/SpecialAnnouncement
  ///
  static const diseasePreventionInfo = IriTerm.prevalidated(
    'http://schema.org/diseasePreventionInfo',
  );

  /// IRI for schemahttp:diseaseSpreadStatistics [Expects: http://schema.org/Dataset, http://schema.org/Observation, http://schema.org/URL, http://schema.org/WebContent]
  ///
  /// Statistical information about the spread of a disease, either as {[WebContent]}, or
  /// described directly as a {[Dataset]}, or the specific {[Observation]}s in the dataset. When a {[WebContent]} URL is
  /// provided, the page indicated might also contain more such markup.
  ///
  /// Can be used on: http://schema.org/SpecialAnnouncement
  ///
  static const diseaseSpreadStatistics = IriTerm.prevalidated(
    'http://schema.org/diseaseSpreadStatistics',
  );

  /// IRI for schemahttp:dissolutionDate [Expects: http://schema.org/Date]
  ///
  /// The date that this organization was dissolved.
  ///
  /// Can be used on: http://schema.org/Organization
  ///
  static const dissolutionDate = IriTerm.prevalidated(
    'http://schema.org/dissolutionDate',
  );

  /// IRI for schemahttp:distance [Expects: http://schema.org/Distance]
  ///
  /// The distance travelled, e.g. exercising or travelling.
  ///
  /// Can be used on: http://schema.org/ExerciseAction, http://schema.org/TravelAction
  ///
  static const distance = IriTerm.prevalidated('http://schema.org/distance');

  /// IRI for schemahttp:distinguishingSign [Expects: http://schema.org/MedicalSignOrSymptom]
  ///
  /// One of a set of signs and symptoms that can be used to distinguish this diagnosis from others in the differential diagnosis.
  ///
  /// Can be used on: http://schema.org/DDxElement
  ///
  static const distinguishingSign = IriTerm.prevalidated(
    'http://schema.org/distinguishingSign',
  );

  /// IRI for schemahttp:distribution [Expects: http://schema.org/DataDownload]
  ///
  /// A downloadable form of this dataset, at a specific location, in a specific format. This property can be repeated if different variations are available. There is no expectation that different downloadable distributions must contain exactly equivalent information (see also [DCAT](https://www.w3.org/TR/vocab-dcat-3/#Class:Distribution) on this point). Different distributions might include or exclude different subsets of the entire dataset, for example.
  ///
  /// Can be used on: http://schema.org/Dataset
  ///
  static const distribution = IriTerm.prevalidated(
    'http://schema.org/distribution',
  );

  /// IRI for schemahttp:diversityPolicy [Expects: http://schema.org/CreativeWork, http://schema.org/URL]
  ///
  /// Statement on diversity policy by an {[Organization]} e.g. a {[NewsMediaOrganization]}. For a {[NewsMediaOrganization]}, a statement describing the newsroom‚Äôs diversity policy on both staffing and sources, typically providing staffing data.
  ///
  /// Can be used on: http://schema.org/NewsMediaOrganization, http://schema.org/Organization
  ///
  static const diversityPolicy = IriTerm.prevalidated(
    'http://schema.org/diversityPolicy',
  );

  /// IRI for schemahttp:diversityStaffingReport [Expects: http://schema.org/Article, http://schema.org/URL]
  ///
  /// For an {[Organization]} (often but not necessarily a {[NewsMediaOrganization]}), a report on staffing diversity issues. In a news context this might be for example ASNE or RTDNA (US) reports, or self-reported.
  ///
  /// Can be used on: http://schema.org/NewsMediaOrganization, http://schema.org/Organization
  ///
  static const diversityStaffingReport = IriTerm.prevalidated(
    'http://schema.org/diversityStaffingReport',
  );

  /// IRI for schemahttp:documentation [Expects: http://schema.org/CreativeWork, http://schema.org/URL]
  ///
  /// Further documentation describing the Web API in more detail.
  ///
  /// Can be used on: http://schema.org/WebAPI
  ///
  static const documentation = IriTerm.prevalidated(
    'http://schema.org/documentation',
  );

  /// IRI for schemahttp:doesNotShip [Expects: http://schema.org/Boolean]
  ///
  /// Indicates when shipping to a particular {[shippingDestination]} is not available.
  ///
  /// Can be used on: http://schema.org/OfferShippingDetails, http://schema.org/ShippingConditions, http://schema.org/ShippingRateSettings
  ///
  static const doesNotShip = IriTerm.prevalidated(
    'http://schema.org/doesNotShip',
  );

  /// IRI for schemahttp:domainIncludes [Expects: http://schema.org/Class]
  ///
  /// Relates a property to a class that is (one of) the type(s) the property is expected to be used on.
  ///
  /// Can be used on: http://schema.org/Property
  ///
  static const domainIncludes = IriTerm.prevalidated(
    'http://schema.org/domainIncludes',
  );

  /// IRI for schemahttp:domiciledMortgage [Expects: http://schema.org/Boolean]
  ///
  /// Whether borrower is a resident of the jurisdiction where the property is located.
  ///
  /// Can be used on: http://schema.org/MortgageLoan
  ///
  static const domiciledMortgage = IriTerm.prevalidated(
    'http://schema.org/domiciledMortgage',
  );

  /// IRI for schemahttp:doorTime [Expects: http://schema.org/DateTime, http://schema.org/Time]
  ///
  /// The time admission will commence.
  ///
  /// Can be used on: http://schema.org/Event
  ///
  static const doorTime = IriTerm.prevalidated('http://schema.org/doorTime');

  /// IRI for schemahttp:dosageForm [Expects: http://schema.org/Text]
  ///
  /// A dosage form in which this drug/supplement is available, e.g. 'tablet', 'suspension', 'injection'.
  ///
  /// Can be used on: http://schema.org/Drug
  ///
  static const dosageForm = IriTerm.prevalidated(
    'http://schema.org/dosageForm',
  );

  /// IRI for schemahttp:doseSchedule [Expects: http://schema.org/DoseSchedule]
  ///
  /// A dosing schedule for the drug for a given population, either observed, recommended, or maximum dose based on the type used.
  ///
  /// Can be used on: http://schema.org/Drug, http://schema.org/TherapeuticProcedure
  ///
  static const doseSchedule = IriTerm.prevalidated(
    'http://schema.org/doseSchedule',
  );

  /// IRI for schemahttp:doseUnit [Expects: http://schema.org/Text]
  ///
  /// The unit of the dose, e.g. 'mg'.
  ///
  /// Can be used on: http://schema.org/DoseSchedule
  ///
  static const doseUnit = IriTerm.prevalidated('http://schema.org/doseUnit');

  /// IRI for schemahttp:doseValue [Expects: http://schema.org/Number, http://schema.org/QualitativeValue]
  ///
  /// The value of the dose, e.g. 500.
  ///
  /// Can be used on: http://schema.org/DoseSchedule
  ///
  static const doseValue = IriTerm.prevalidated('http://schema.org/doseValue');

  /// IRI for schemahttp:downPayment [Expects: http://schema.org/MonetaryAmount, http://schema.org/Number]
  ///
  /// a type of payment made in cash during the onset of the purchase of an expensive good/service. The payment typically represents only a percentage of the full purchase price.
  ///
  /// Can be used on: http://schema.org/RepaymentSpecification
  ///
  static const downPayment = IriTerm.prevalidated(
    'http://schema.org/downPayment',
  );

  /// IRI for schemahttp:downloadUrl [Expects: http://schema.org/URL]
  ///
  /// If the file can be downloaded, URL to download the binary.
  ///
  /// Can be used on: http://schema.org/SoftwareApplication
  ///
  static const downloadUrl = IriTerm.prevalidated(
    'http://schema.org/downloadUrl',
  );

  /// IRI for schemahttp:downvoteCount [Expects: http://schema.org/Integer]
  ///
  /// The number of downvotes this question, answer or comment has received from the community.
  ///
  /// Can be used on: http://schema.org/Comment
  ///
  static const downvoteCount = IriTerm.prevalidated(
    'http://schema.org/downvoteCount',
  );

  /// IRI for schemahttp:drainsTo [Expects: http://schema.org/Vessel]
  ///
  /// The vasculature that the vein drains into.
  ///
  /// Can be used on: http://schema.org/Vein
  ///
  static const drainsTo = IriTerm.prevalidated('http://schema.org/drainsTo');

  /// IRI for schemahttp:driveWheelConfiguration [Expects: http://schema.org/DriveWheelConfigurationValue, http://schema.org/Text]
  ///
  /// The drive wheel configuration, i.e. which roadwheels will receive torque from the vehicle's engine via the drivetrain.
  ///
  /// Can be used on: http://schema.org/Vehicle
  ///
  static const driveWheelConfiguration = IriTerm.prevalidated(
    'http://schema.org/driveWheelConfiguration',
  );

  /// IRI for schemahttp:dropoffLocation [Expects: http://schema.org/Place]
  ///
  /// Where a rental car can be dropped off.
  ///
  /// Can be used on: http://schema.org/RentalCarReservation
  ///
  static const dropoffLocation = IriTerm.prevalidated(
    'http://schema.org/dropoffLocation',
  );

  /// IRI for schemahttp:dropoffTime [Expects: http://schema.org/DateTime]
  ///
  /// When a rental car can be dropped off.
  ///
  /// Can be used on: http://schema.org/RentalCarReservation
  ///
  static const dropoffTime = IriTerm.prevalidated(
    'http://schema.org/dropoffTime',
  );

  /// IRI for schemahttp:drug [Expects: http://schema.org/Drug]
  ///
  /// Specifying a drug or medicine used in a medication procedure.
  ///
  /// Can be used on: http://schema.org/DrugClass, http://schema.org/MedicalCondition, http://schema.org/Patient, http://schema.org/TherapeuticProcedure
  ///
  static const drug = IriTerm.prevalidated('http://schema.org/drug');

  /// IRI for schemahttp:drugClass [Expects: http://schema.org/DrugClass]
  ///
  /// The class of drug this belongs to (e.g., statins).
  ///
  /// Can be used on: http://schema.org/Drug
  ///
  static const drugClass = IriTerm.prevalidated('http://schema.org/drugClass');

  /// IRI for schemahttp:drugUnit [Expects: http://schema.org/Text]
  ///
  /// The unit in which the drug is measured, e.g. '5 mg tablet'.
  ///
  /// Can be used on: http://schema.org/Drug, http://schema.org/DrugCost
  ///
  static const drugUnit = IriTerm.prevalidated('http://schema.org/drugUnit');

  /// IRI for schemahttp:duns [Expects: http://schema.org/Text]
  ///
  /// The Dun & Bradstreet DUNS number for identifying an organization or business person.
  ///
  /// Can be used on: http://schema.org/Organization, http://schema.org/Person
  ///
  static const duns = IriTerm.prevalidated('http://schema.org/duns');

  /// IRI for schemahttp:duplicateTherapy [Expects: http://schema.org/MedicalTherapy]
  ///
  /// A therapy that duplicates or overlaps this one.
  ///
  /// Can be used on: http://schema.org/MedicalTherapy
  ///
  static const duplicateTherapy = IriTerm.prevalidated(
    'http://schema.org/duplicateTherapy',
  );

  /// IRI for schemahttp:durationOfWarranty [Expects: http://schema.org/QuantitativeValue]
  ///
  /// The duration of the warranty promise. Common unitCode values are ANN for year, MON for months, or DAY for days.
  ///
  /// Can be used on: http://schema.org/WarrantyPromise
  ///
  static const durationOfWarranty = IriTerm.prevalidated(
    'http://schema.org/durationOfWarranty',
  );

  /// IRI for schemahttp:duringMedia [Expects: http://schema.org/MediaObject, http://schema.org/URL]
  ///
  /// A media object representing the circumstances while performing this direction.
  ///
  /// Can be used on: http://schema.org/HowToDirection
  ///
  static const duringMedia = IriTerm.prevalidated(
    'http://schema.org/duringMedia',
  );

  /// IRI for schemahttp:earlyPrepaymentPenalty [Expects: http://schema.org/MonetaryAmount]
  ///
  /// The amount to be paid as a penalty in the event of early payment of the loan.
  ///
  /// Can be used on: http://schema.org/RepaymentSpecification
  ///
  static const earlyPrepaymentPenalty = IriTerm.prevalidated(
    'http://schema.org/earlyPrepaymentPenalty',
  );

  /// IRI for schemahttp:editEIDR [Expects: http://schema.org/Text, http://schema.org/URL]
  ///
  /// An [EIDR](https://eidr.org/) (Entertainment Identifier Registry) {[identifier]} representing a specific edit / edition for a work of film or television.
  ///
  /// For example, the motion picture known as "Ghostbusters" whose {[titleEIDR]} is "10.5240/7EC7-228A-510A-053E-CBB8-J" has several edits, e.g. "10.5240/1F2A-E1C5-680A-14C6-E76B-I" and "10.5240/8A35-3BEE-6497-5D12-9E4F-3".
  ///
  /// Since schema.org types like {[Movie]} and {[TVEpisode]} can be used for both works and their multiple expressions, it is possible to use {[titleEIDR]} alone (for a general description), or alongside {[editEIDR]} for a more edit-specific description.
  ///
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const editEIDR = IriTerm.prevalidated('http://schema.org/editEIDR');

  /// IRI for schemahttp:editor [Expects: http://schema.org/Person]
  ///
  /// Specifies the Person who edited the CreativeWork.
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const editor = IriTerm.prevalidated('http://schema.org/editor');

  /// IRI for schemahttp:eduQuestionType [Expects: http://schema.org/Text]
  ///
  /// For questions that are part of learning resources (e.g. Quiz), eduQuestionType indicates the format of question being given. Example: "Multiple choice", "Open ended", "Flashcard".
  ///
  /// Can be used on: http://schema.org/Question, http://schema.org/SolveMathAction
  ///
  static const eduQuestionType = IriTerm.prevalidated(
    'http://schema.org/eduQuestionType',
  );

  /// IRI for schemahttp:educationRequirements [Expects: http://schema.org/EducationalOccupationalCredential, http://schema.org/Text]
  ///
  /// Educational background needed for the position or Occupation.
  ///
  /// Can be used on: http://schema.org/JobPosting, http://schema.org/Occupation
  ///
  static const educationRequirements = IriTerm.prevalidated(
    'http://schema.org/educationRequirements',
  );

  /// IRI for schemahttp:educationalAlignment [Expects: http://schema.org/AlignmentObject]
  ///
  /// An alignment to an established educational framework.
  ///
  /// This property should not be used where the nature of the alignment can be described using a simple property, for example to express that a resource {[teaches]} or {[assesses]} a competency.
  ///
  /// Can be used on: http://schema.org/CreativeWork, http://schema.org/LearningResource
  ///
  static const educationalAlignment = IriTerm.prevalidated(
    'http://schema.org/educationalAlignment',
  );

  /// IRI for schemahttp:educationalCredentialAwarded [Expects: http://schema.org/EducationalOccupationalCredential, http://schema.org/Text, http://schema.org/URL]
  ///
  /// A description of the qualification, award, certificate, diploma or other educational credential awarded as a consequence of successful completion of this course or program.
  ///
  /// Can be used on: http://schema.org/Course, http://schema.org/EducationalOccupationalProgram
  ///
  static const educationalCredentialAwarded = IriTerm.prevalidated(
    'http://schema.org/educationalCredentialAwarded',
  );

  /// IRI for schemahttp:educationalFramework [Expects: http://schema.org/Text]
  ///
  /// The framework to which the resource being described is aligned.
  ///
  /// Can be used on: http://schema.org/AlignmentObject
  ///
  static const educationalFramework = IriTerm.prevalidated(
    'http://schema.org/educationalFramework',
  );

  /// IRI for schemahttp:educationalLevel [Expects: http://schema.org/DefinedTerm, http://schema.org/Text, http://schema.org/URL]
  ///
  /// The level in terms of progression through an educational or training context. Examples of educational levels include 'beginner', 'intermediate' or 'advanced', and formal sets of level indicators.
  ///
  /// Can be used on: http://schema.org/CreativeWork, http://schema.org/EducationEvent, http://schema.org/EducationalOccupationalCredential, http://schema.org/LearningResource
  ///
  static const educationalLevel = IriTerm.prevalidated(
    'http://schema.org/educationalLevel',
  );

  /// IRI for schemahttp:educationalProgramMode [Expects: http://schema.org/Text, http://schema.org/URL]
  ///
  /// Similar to courseMode, the medium or means of delivery of the program as a whole. The value may either be a text label (e.g. "online", "onsite" or "blended"; "synchronous" or "asynchronous"; "full-time" or "part-time") or a URL reference to a term from a controlled vocabulary (e.g. https://ceds.ed.gov/element/001311#Asynchronous ).
  ///
  /// Can be used on: http://schema.org/EducationalOccupationalProgram
  ///
  static const educationalProgramMode = IriTerm.prevalidated(
    'http://schema.org/educationalProgramMode',
  );

  /// IRI for schemahttp:educationalRole [Expects: http://schema.org/Text]
  ///
  /// An educationalRole of an EducationalAudience.
  ///
  /// Can be used on: http://schema.org/EducationalAudience
  ///
  static const educationalRole = IriTerm.prevalidated(
    'http://schema.org/educationalRole',
  );

  /// IRI for schemahttp:educationalUse [Expects: http://schema.org/DefinedTerm, http://schema.org/Text]
  ///
  /// The purpose of a work in the context of education; for example, 'assignment', 'group work'.
  ///
  /// Can be used on: http://schema.org/CreativeWork, http://schema.org/LearningResource
  ///
  static const educationalUse = IriTerm.prevalidated(
    'http://schema.org/educationalUse',
  );

  /// IRI for schemahttp:elevation [Expects: http://schema.org/Number, http://schema.org/Text]
  ///
  /// The elevation of a location ([WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System)). Values may be of the form 'NUMBER UNIT\_OF\_MEASUREMENT' (e.g., '1,000 m', '3,200 ft') while numbers alone should be assumed to be a value in meters.
  ///
  /// Can be used on: http://schema.org/GeoCoordinates, http://schema.org/GeoShape
  ///
  static const elevation = IriTerm.prevalidated('http://schema.org/elevation');

  /// IRI for schemahttp:eligibilityToWorkRequirement [Expects: http://schema.org/Text]
  ///
  /// The legal requirements such as citizenship, visa and other documentation required for an applicant to this job.
  ///
  /// Can be used on: http://schema.org/JobPosting
  ///
  static const eligibilityToWorkRequirement = IriTerm.prevalidated(
    'http://schema.org/eligibilityToWorkRequirement',
  );

  /// IRI for schemahttp:eligibleCustomerType [Expects: http://schema.org/BusinessEntityType]
  ///
  /// The type(s) of customers for which the given offer is valid.
  ///
  /// Can be used on: http://schema.org/Demand, http://schema.org/Offer
  ///
  static const eligibleCustomerType = IriTerm.prevalidated(
    'http://schema.org/eligibleCustomerType',
  );

  /// IRI for schemahttp:eligibleDuration [Expects: http://schema.org/QuantitativeValue]
  ///
  /// The duration for which the given offer is valid.
  ///
  /// Can be used on: http://schema.org/Demand, http://schema.org/Offer
  ///
  static const eligibleDuration = IriTerm.prevalidated(
    'http://schema.org/eligibleDuration',
  );

  /// IRI for schemahttp:eligibleQuantity [Expects: http://schema.org/QuantitativeValue]
  ///
  /// The interval and unit of measurement of ordering quantities for which the offer or price specification is valid. This allows e.g. specifying that a certain freight charge is valid only for a certain quantity.
  ///
  /// Can be used on: http://schema.org/Demand, http://schema.org/Offer, http://schema.org/PriceSpecification
  ///
  static const eligibleQuantity = IriTerm.prevalidated(
    'http://schema.org/eligibleQuantity',
  );

  /// IRI for schemahttp:eligibleRegion [Expects: http://schema.org/GeoShape, http://schema.org/Place, http://schema.org/Text]
  ///
  /// The ISO 3166-1 (ISO 3166-1 alpha-2) or ISO 3166-2 code, the place, or the GeoShape for the geo-political region(s) for which the offer or delivery charge specification is valid.\n\nSee also {[ineligibleRegion]}.
  ///
  ///
  /// Can be used on: http://schema.org/ActionAccessSpecification, http://schema.org/DeliveryChargeSpecification, http://schema.org/Demand, http://schema.org/Offer
  ///
  static const eligibleRegion = IriTerm.prevalidated(
    'http://schema.org/eligibleRegion',
  );

  /// IRI for schemahttp:eligibleTransactionVolume [Expects: http://schema.org/PriceSpecification]
  ///
  /// The transaction volume, in a monetary unit, for which the offer or price specification is valid, e.g. for indicating a minimal purchasing volume, to express free shipping above a certain order volume, or to limit the acceptance of credit cards to purchases to a certain minimal amount.
  ///
  /// Can be used on: http://schema.org/Demand, http://schema.org/Offer, http://schema.org/PriceSpecification
  ///
  static const eligibleTransactionVolume = IriTerm.prevalidated(
    'http://schema.org/eligibleTransactionVolume',
  );

  /// IRI for schemahttp:eligibleWithSupplier [Expects: http://schema.org/Organization]
  ///
  /// The supplier of the incentivized item/service for which the incentive is valid for such as a utility company, merchant, or contractor.
  ///
  /// Can be used on: http://schema.org/FinancialIncentive
  ///
  static const eligibleWithSupplier = IriTerm.prevalidated(
    'http://schema.org/eligibleWithSupplier',
  );

  /// IRI for schemahttp:email [Expects: http://schema.org/Text]
  ///
  /// Email address.
  ///
  /// Can be used on: http://schema.org/ContactPoint, http://schema.org/Organization, http://schema.org/Person
  ///
  static const email = IriTerm.prevalidated('http://schema.org/email');

  /// IRI for schemahttp:embedUrl [Expects: http://schema.org/URL]
  ///
  /// A URL pointing to a player for a specific video. In general, this is the information in the ```src``` element of an ```embed``` tag and should not be the same as the content of the ```loc``` tag.
  ///
  /// Can be used on: http://schema.org/MediaObject
  ///
  static const embedUrl = IriTerm.prevalidated('http://schema.org/embedUrl');

  /// IRI for schemahttp:embeddedTextCaption [Expects: http://schema.org/Text]
  ///
  /// Represents textual captioning from a {[MediaObject]}, e.g. text of a 'meme'.
  ///
  /// Can be used on: http://schema.org/AudioObject, http://schema.org/ImageObject, http://schema.org/VideoObject
  ///
  static const embeddedTextCaption = IriTerm.prevalidated(
    'http://schema.org/embeddedTextCaption',
  );

  /// IRI for schemahttp:emissionsCO2 [Expects: http://schema.org/Number]
  ///
  /// The CO2 emissions in g/km. When used in combination with a QuantitativeValue, put "g/km" into the unitText property of that value, since there is no UN/CEFACT Common Code for "g/km".
  ///
  /// Can be used on: http://schema.org/Vehicle
  ///
  static const emissionsCO2 = IriTerm.prevalidated(
    'http://schema.org/emissionsCO2',
  );

  /// IRI for schemahttp:employees [Expects: http://schema.org/Person]
  ///
  /// People working for this organization.
  ///
  /// Can be used on: http://schema.org/Organization
  ///
  static const employees = IriTerm.prevalidated('http://schema.org/employees');

  /// IRI for schemahttp:employerOverview [Expects: http://schema.org/Text]
  ///
  /// A description of the employer, career opportunities and work environment for this position.
  ///
  /// Can be used on: http://schema.org/JobPosting
  ///
  static const employerOverview = IriTerm.prevalidated(
    'http://schema.org/employerOverview',
  );

  /// IRI for schemahttp:employmentType [Expects: http://schema.org/Text]
  ///
  /// Type of employment (e.g. full-time, part-time, contract, temporary, seasonal, internship).
  ///
  /// Can be used on: http://schema.org/JobPosting
  ///
  static const employmentType = IriTerm.prevalidated(
    'http://schema.org/employmentType',
  );

  /// IRI for schemahttp:employmentUnit [Expects: http://schema.org/Organization]
  ///
  /// Indicates the department, unit and/or facility where the employee reports and/or in which the job is to be performed.
  ///
  /// Can be used on: http://schema.org/JobPosting
  ///
  static const employmentUnit = IriTerm.prevalidated(
    'http://schema.org/employmentUnit',
  );

  /// IRI for schemahttp:encodingType [Expects: http://schema.org/Text]
  ///
  /// The supported encoding type(s) for an EntryPoint request.
  ///
  /// Can be used on: http://schema.org/EntryPoint
  ///
  static const encodingType = IriTerm.prevalidated(
    'http://schema.org/encodingType',
  );

  /// IRI for schemahttp:encodings [Expects: http://schema.org/MediaObject]
  ///
  /// A media object that encodes this CreativeWork.
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const encodings = IriTerm.prevalidated('http://schema.org/encodings');

  /// IRI for schemahttp:endDate [Expects: http://schema.org/Date, http://schema.org/DateTime]
  ///
  /// The end date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).
  ///
  /// Can be used on: http://schema.org/CreativeWorkSeason, http://schema.org/CreativeWorkSeries, http://schema.org/DatedMoneySpecification, http://schema.org/EducationalOccupationalProgram, http://schema.org/Event, http://schema.org/MerchantReturnPolicySeasonalOverride, http://schema.org/Role, http://schema.org/Schedule
  ///
  static const endDate = IriTerm.prevalidated('http://schema.org/endDate');

  /// IRI for schemahttp:endOffset [Expects: http://schema.org/HyperTocEntry, http://schema.org/Number]
  ///
  /// The end time of the clip expressed as the number of seconds from the beginning of the work.
  ///
  /// Can be used on: http://schema.org/Clip
  ///
  static const endOffset = IriTerm.prevalidated('http://schema.org/endOffset');

  /// IRI for schemahttp:endTime [Expects: http://schema.org/DateTime, http://schema.org/Time]
  ///
  /// The endTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to end. For actions that span a period of time, when the action was performed. E.g. John wrote a book from January to *December*. For media, including audio and video, it's the time offset of the end of a clip within a larger file.\n\nNote that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions.
  ///
  /// Can be used on: http://schema.org/Action, http://schema.org/FoodEstablishmentReservation, http://schema.org/InteractionCounter, http://schema.org/MediaObject, http://schema.org/Schedule
  ///
  static const endTime = IriTerm.prevalidated('http://schema.org/endTime');

  /// IRI for schemahttp:endorsee [Expects: http://schema.org/Organization, http://schema.org/Person]
  ///
  /// A sub property of participant. The person/organization being supported.
  ///
  /// Can be used on: http://schema.org/EndorseAction
  ///
  static const endorsee = IriTerm.prevalidated('http://schema.org/endorsee');

  /// IRI for schemahttp:endorsers [Expects: http://schema.org/Organization, http://schema.org/Person]
  ///
  /// People or organizations that endorse the plan.
  ///
  /// Can be used on: http://schema.org/Diet
  ///
  static const endorsers = IriTerm.prevalidated('http://schema.org/endorsers');

  /// IRI for schemahttp:energyEfficiencyScaleMax [Expects: http://schema.org/EUEnergyEfficiencyEnumeration]
  ///
  /// Specifies the most energy efficient class on the regulated EU energy consumption scale for the product category a product belongs to. For example, energy consumption for televisions placed on the market after January 1, 2020 is scaled from D to A+++.
  ///
  /// Can be used on: http://schema.org/EnergyConsumptionDetails
  ///
  static const energyEfficiencyScaleMax = IriTerm.prevalidated(
    'http://schema.org/energyEfficiencyScaleMax',
  );

  /// IRI for schemahttp:energyEfficiencyScaleMin [Expects: http://schema.org/EUEnergyEfficiencyEnumeration]
  ///
  /// Specifies the least energy efficient class on the regulated EU energy consumption scale for the product category a product belongs to. For example, energy consumption for televisions placed on the market after January 1, 2020 is scaled from D to A+++.
  ///
  /// Can be used on: http://schema.org/EnergyConsumptionDetails
  ///
  static const energyEfficiencyScaleMin = IriTerm.prevalidated(
    'http://schema.org/energyEfficiencyScaleMin',
  );

  /// IRI for schemahttp:engineDisplacement [Expects: http://schema.org/QuantitativeValue]
  ///
  /// The volume swept by all of the pistons inside the cylinders of an internal combustion engine in a single movement. \n\nTypical unit code(s): CMQ for cubic centimeter, LTR for liters, INQ for cubic inches\n* Note 1: You can link to information about how the given value has been determined using the {[valueReference]} property.\n* Note 2: You can use {[minValue]} and {[maxValue]} to indicate ranges.
  ///
  /// Can be used on: http://schema.org/EngineSpecification
  ///
  static const engineDisplacement = IriTerm.prevalidated(
    'http://schema.org/engineDisplacement',
  );

  /// IRI for schemahttp:enginePower [Expects: http://schema.org/QuantitativeValue]
  ///
  /// The power of the vehicle's engine.
  /// Typical unit code(s): KWT for kilowatt, BHP for brake horsepower, N12 for metric horsepower (PS, with 1 PS = 735,49875 W)\n\n* Note 1: There are many different ways of measuring an engine's power. For an overview, see  [http://en.wikipedia.org/wiki/Horsepower#Engine\_power\_test\_codes](http://en.wikipedia.org/wiki/Horsepower#Engine_power_test_codes).\n* Note 2: You can link to information about how the given value has been determined using the {[valueReference]} property.\n* Note 3: You can use {[minValue]} and {[maxValue]} to indicate ranges.
  ///
  /// Can be used on: http://schema.org/EngineSpecification
  ///
  static const enginePower = IriTerm.prevalidated(
    'http://schema.org/enginePower',
  );

  /// IRI for schemahttp:engineType [Expects: http://schema.org/QualitativeValue, http://schema.org/Text, http://schema.org/URL]
  ///
  /// The type of engine or engines powering the vehicle.
  ///
  /// Can be used on: http://schema.org/EngineSpecification
  ///
  static const engineType = IriTerm.prevalidated(
    'http://schema.org/engineType',
  );

  /// IRI for schemahttp:entertainmentBusiness [Expects: http://schema.org/EntertainmentBusiness]
  ///
  /// A sub property of location. The entertainment business where the action occurred.
  ///
  /// Can be used on: http://schema.org/PerformAction
  ///
  static const entertainmentBusiness = IriTerm.prevalidated(
    'http://schema.org/entertainmentBusiness',
  );

  /// IRI for schemahttp:epidemiology [Expects: http://schema.org/Text]
  ///
  /// The characteristics of associated patients, such as age, gender, race etc.
  ///
  /// Can be used on: http://schema.org/MedicalCondition, http://schema.org/PhysicalActivity
  ///
  static const epidemiology = IriTerm.prevalidated(
    'http://schema.org/epidemiology',
  );

  /// IRI for schemahttp:episodeNumber [Expects: http://schema.org/Integer, http://schema.org/Text]
  ///
  /// Position of the episode within an ordered group of episodes.
  ///
  /// Can be used on: http://schema.org/Episode
  ///
  static const episodeNumber = IriTerm.prevalidated(
    'http://schema.org/episodeNumber',
  );

  /// IRI for schemahttp:episodes [Expects: http://schema.org/Episode]
  ///
  /// An episode of a TV/radio series or season.
  ///
  /// Can be used on: http://schema.org/CreativeWorkSeason, http://schema.org/RadioSeries, http://schema.org/TVSeries, http://schema.org/VideoGameSeries
  ///
  static const episodes = IriTerm.prevalidated('http://schema.org/episodes');

  /// IRI for schemahttp:equal [Expects: http://schema.org/QualitativeValue]
  ///
  /// This ordering relation for qualitative values indicates that the subject is equal to the object.
  ///
  /// Can be used on: http://schema.org/QualitativeValue
  ///
  static const equal = IriTerm.prevalidated('http://schema.org/equal');

  /// IRI for schemahttp:error [Expects: http://schema.org/Thing]
  ///
  /// For failed actions, more information on the cause of the failure.
  ///
  /// Can be used on: http://schema.org/Action
  ///
  static const error = IriTerm.prevalidated('http://schema.org/error');

  /// IRI for schemahttp:estimatedCost [Expects: http://schema.org/MonetaryAmount, http://schema.org/Text]
  ///
  /// The estimated cost of the supply or supplies consumed when performing instructions.
  ///
  /// Can be used on: http://schema.org/HowTo, http://schema.org/HowToSupply
  ///
  static const estimatedCost = IriTerm.prevalidated(
    'http://schema.org/estimatedCost',
  );

  /// IRI for schemahttp:estimatedFlightDuration [Expects: http://schema.org/Duration, http://schema.org/Text]
  ///
  /// The estimated time the flight will take.
  ///
  /// Can be used on: http://schema.org/Flight
  ///
  static const estimatedFlightDuration = IriTerm.prevalidated(
    'http://schema.org/estimatedFlightDuration',
  );

  /// IRI for schemahttp:estimatedSalary [Expects: http://schema.org/MonetaryAmount, http://schema.org/MonetaryAmountDistribution, http://schema.org/Number]
  ///
  /// An estimated salary for a job posting or occupation, based on a variety of variables including, but not limited to industry, job title, and location. Estimated salaries  are often computed by outside organizations rather than the hiring organization, who may not have committed to the estimated value.
  ///
  /// Can be used on: http://schema.org/JobPosting, http://schema.org/Occupation
  ///
  static const estimatedSalary = IriTerm.prevalidated(
    'http://schema.org/estimatedSalary',
  );

  /// IRI for schemahttp:estimatesRiskOf [Expects: http://schema.org/MedicalEntity]
  ///
  /// The condition, complication, or symptom whose risk is being estimated.
  ///
  /// Can be used on: http://schema.org/MedicalRiskEstimator
  ///
  static const estimatesRiskOf = IriTerm.prevalidated(
    'http://schema.org/estimatesRiskOf',
  );

  /// IRI for schemahttp:ethicsPolicy [Expects: http://schema.org/CreativeWork, http://schema.org/URL]
  ///
  /// Statement about ethics policy, e.g. of a {[NewsMediaOrganization]} regarding journalistic and publishing practices, or of a {[Restaurant]}, a page describing food source policies. In the case of a {[NewsMediaOrganization]}, an ethicsPolicy is typically a statement describing the personal, organizational, and corporate standards of behavior expected by the organization.
  ///
  /// Can be used on: http://schema.org/NewsMediaOrganization, http://schema.org/Organization
  ///
  static const ethicsPolicy = IriTerm.prevalidated(
    'http://schema.org/ethicsPolicy',
  );

  /// IRI for schemahttp:eventAttendanceMode [Expects: http://schema.org/EventAttendanceModeEnumeration]
  ///
  /// The eventAttendanceMode of an event indicates whether it occurs online, offline, or a mix.
  ///
  /// Can be used on: http://schema.org/Event
  ///
  static const eventAttendanceMode = IriTerm.prevalidated(
    'http://schema.org/eventAttendanceMode',
  );

  /// IRI for schemahttp:eventSchedule [Expects: http://schema.org/Schedule]
  ///
  /// Associates an {[Event]} with a {[Schedule]}. There are circumstances where it is preferable to share a schedule for a series of
  /// repeating events rather than data on the individual events themselves. For example, a website or application might prefer to publish a schedule for a weekly
  /// gym class rather than provide data on every event. A schedule could be processed by applications to add forthcoming events to a calendar. An {[Event]} that
  /// is associated with a {[Schedule]} using this property should not have {[startDate]} or {[endDate]} properties. These are instead defined within the associated
  /// {[Schedule]}, this avoids any ambiguity for clients using the data. The property might have repeated values to specify different schedules, e.g. for different months
  /// or seasons.
  ///
  /// Can be used on: http://schema.org/Event
  ///
  static const eventSchedule = IriTerm.prevalidated(
    'http://schema.org/eventSchedule',
  );

  /// IRI for schemahttp:eventStatus [Expects: http://schema.org/EventStatusType]
  ///
  /// An eventStatus of an event represents its status; particularly useful when an event is cancelled or rescheduled.
  ///
  /// Can be used on: http://schema.org/Event
  ///
  static const eventStatus = IriTerm.prevalidated(
    'http://schema.org/eventStatus',
  );

  /// IRI for schemahttp:events [Expects: http://schema.org/Event]
  ///
  /// Upcoming or past events associated with this place or organization.
  ///
  /// Can be used on: http://schema.org/Organization, http://schema.org/Place
  ///
  static const events = IriTerm.prevalidated('http://schema.org/events');

  /// IRI for schemahttp:evidenceLevel [Expects: http://schema.org/MedicalEvidenceLevel]
  ///
  /// Strength of evidence of the data used to formulate the guideline (enumerated).
  ///
  /// Can be used on: http://schema.org/MedicalGuideline
  ///
  static const evidenceLevel = IriTerm.prevalidated(
    'http://schema.org/evidenceLevel',
  );

  /// IRI for schemahttp:evidenceOrigin [Expects: http://schema.org/Text]
  ///
  /// Source of the data used to formulate the guidance, e.g. RCT, consensus opinion, etc.
  ///
  /// Can be used on: http://schema.org/MedicalGuideline
  ///
  static const evidenceOrigin = IriTerm.prevalidated(
    'http://schema.org/evidenceOrigin',
  );

  /// IRI for schemahttp:exceptDate [Expects: http://schema.org/Date, http://schema.org/DateTime]
  ///
  /// Defines a {[Date]} or {[DateTime]} during which a scheduled {[Event]} will not take place. The property allows exceptions to
  /// a {[Schedule]} to be specified. If an exception is specified as a {[DateTime]} then only the event that would have started at that specific date and time
  /// should be excluded from the schedule. If an exception is specified as a {[Date]} then any event that is scheduled for that 24 hour period should be
  /// excluded from the schedule. This allows a whole day to be excluded from the schedule without having to itemise every scheduled event.
  ///
  /// Can be used on: http://schema.org/Schedule
  ///
  static const exceptDate = IriTerm.prevalidated(
    'http://schema.org/exceptDate',
  );

  /// IRI for schemahttp:exchangeRateSpread [Expects: http://schema.org/MonetaryAmount, http://schema.org/Number]
  ///
  /// The difference between the price at which a broker or other intermediary buys and sells foreign currency.
  ///
  /// Can be used on: http://schema.org/ExchangeRateSpecification
  ///
  static const exchangeRateSpread = IriTerm.prevalidated(
    'http://schema.org/exchangeRateSpread',
  );

  /// IRI for schemahttp:exercisePlan [Expects: http://schema.org/ExercisePlan]
  ///
  /// A sub property of instrument. The exercise plan used on this action.
  ///
  /// Can be used on: http://schema.org/ExerciseAction
  ///
  static const exercisePlan = IriTerm.prevalidated(
    'http://schema.org/exercisePlan',
  );

  /// IRI for schemahttp:exerciseRelatedDiet [Expects: http://schema.org/Diet]
  ///
  /// A sub property of instrument. The diet used in this action.
  ///
  /// Can be used on: http://schema.org/ExerciseAction
  ///
  static const exerciseRelatedDiet = IriTerm.prevalidated(
    'http://schema.org/exerciseRelatedDiet',
  );

  /// IRI for schemahttp:exerciseType [Expects: http://schema.org/Text]
  ///
  /// Type(s) of exercise or activity, such as strength training, flexibility training, aerobics, cardiac rehabilitation, etc.
  ///
  /// Can be used on: http://schema.org/ExerciseAction, http://schema.org/ExercisePlan
  ///
  static const exerciseType = IriTerm.prevalidated(
    'http://schema.org/exerciseType',
  );

  /// IRI for schemahttp:exifData [Expects: http://schema.org/PropertyValue, http://schema.org/Text]
  ///
  /// exif data for this object.
  ///
  /// Can be used on: http://schema.org/ImageObject
  ///
  static const exifData = IriTerm.prevalidated('http://schema.org/exifData');

  /// IRI for schemahttp:expectedArrivalFrom [Expects: http://schema.org/Date, http://schema.org/DateTime]
  ///
  /// The earliest date the package may arrive.
  ///
  /// Can be used on: http://schema.org/ParcelDelivery
  ///
  static const expectedArrivalFrom = IriTerm.prevalidated(
    'http://schema.org/expectedArrivalFrom',
  );

  /// IRI for schemahttp:expectedArrivalUntil [Expects: http://schema.org/Date, http://schema.org/DateTime]
  ///
  /// The latest date the package may arrive.
  ///
  /// Can be used on: http://schema.org/ParcelDelivery
  ///
  static const expectedArrivalUntil = IriTerm.prevalidated(
    'http://schema.org/expectedArrivalUntil',
  );

  /// IRI for schemahttp:expectedPrognosis [Expects: http://schema.org/Text]
  ///
  /// The likely outcome in either the short term or long term of the medical condition.
  ///
  /// Can be used on: http://schema.org/MedicalCondition
  ///
  static const expectedPrognosis = IriTerm.prevalidated(
    'http://schema.org/expectedPrognosis',
  );

  /// IRI for schemahttp:expectsAcceptanceOf [Expects: http://schema.org/Offer]
  ///
  /// An Offer which must be accepted before the user can perform the Action. For example, the user may need to buy a movie before being able to watch it.
  ///
  /// Can be used on: http://schema.org/ActionAccessSpecification, http://schema.org/ConsumeAction, http://schema.org/MediaSubscription
  ///
  static const expectsAcceptanceOf = IriTerm.prevalidated(
    'http://schema.org/expectsAcceptanceOf',
  );

  /// IRI for schemahttp:experienceInPlaceOfEducation [Expects: http://schema.org/Boolean]
  ///
  /// Indicates whether a {[JobPosting]} will accept experience (as indicated by {[OccupationalExperienceRequirements]}) in place of its formal educational qualifications (as indicated by {[educationRequirements]}). If true, indicates that satisfying one of these requirements is sufficient.
  ///
  /// Can be used on: http://schema.org/JobPosting
  ///
  static const experienceInPlaceOfEducation = IriTerm.prevalidated(
    'http://schema.org/experienceInPlaceOfEducation',
  );

  /// IRI for schemahttp:experienceRequirements [Expects: http://schema.org/OccupationalExperienceRequirements, http://schema.org/Text]
  ///
  /// Description of skills and experience needed for the position or Occupation.
  ///
  /// Can be used on: http://schema.org/JobPosting, http://schema.org/Occupation
  ///
  static const experienceRequirements = IriTerm.prevalidated(
    'http://schema.org/experienceRequirements',
  );

  /// IRI for schemahttp:expertConsiderations [Expects: http://schema.org/Text]
  ///
  /// Medical expert advice related to the plan.
  ///
  /// Can be used on: http://schema.org/Diet
  ///
  static const expertConsiderations = IriTerm.prevalidated(
    'http://schema.org/expertConsiderations',
  );

  /// IRI for schemahttp:expires [Expects: http://schema.org/Date, http://schema.org/DateTime]
  ///
  /// Date the content expires and is no longer useful or available. For example a {[VideoObject]} or {[NewsArticle]} whose availability or relevance is time-limited, a {[ClaimReview]} fact check whose publisher wants to indicate that it may no longer be relevant (or helpful to highlight) after some date, or a {[Certification]} the validity has expired.
  ///
  /// Can be used on: http://schema.org/Certification, http://schema.org/CreativeWork
  ///
  static const expires = IriTerm.prevalidated('http://schema.org/expires');

  /// IRI for schemahttp:expressedIn [Expects: http://schema.org/AnatomicalStructure, http://schema.org/AnatomicalSystem, http://schema.org/BioChemEntity, http://schema.org/DefinedTerm]
  ///
  /// Tissue, organ, biological sample, etc in which activity of this gene has been observed experimentally. For example brain, digestive system.
  ///
  /// Can be used on: http://schema.org/Gene
  ///
  static const expressedIn = IriTerm.prevalidated(
    'http://schema.org/expressedIn',
  );

  /// IRI for schemahttp:extendedAddress [Expects: http://schema.org/Text]
  ///
  /// An address extension such as an apartment number, C/O or alternative name.
  ///
  /// Can be used on: http://schema.org/PostalAddress
  ///
  static const extendedAddress = IriTerm.prevalidated(
    'http://schema.org/extendedAddress',
  );

  /// IRI for schemahttp:familyName [Expects: http://schema.org/Text]
  ///
  /// Family name. In the U.S., the last name of a Person.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const familyName = IriTerm.prevalidated(
    'http://schema.org/familyName',
  );

  /// IRI for schemahttp:fatContent [Expects: http://schema.org/Mass]
  ///
  /// The number of grams of fat.
  ///
  /// Can be used on: http://schema.org/NutritionInformation
  ///
  static const fatContent = IriTerm.prevalidated(
    'http://schema.org/fatContent',
  );

  /// IRI for schemahttp:faxNumber [Expects: http://schema.org/Text]
  ///
  /// The fax number.
  ///
  /// Can be used on: http://schema.org/ContactPoint, http://schema.org/Organization, http://schema.org/Person, http://schema.org/Place
  ///
  static const faxNumber = IriTerm.prevalidated('http://schema.org/faxNumber');

  /// IRI for schemahttp:featureList [Expects: http://schema.org/Text, http://schema.org/URL]
  ///
  /// Features or modules provided by this application (and possibly required by other applications).
  ///
  /// Can be used on: http://schema.org/SoftwareApplication
  ///
  static const featureList = IriTerm.prevalidated(
    'http://schema.org/featureList',
  );

  /// IRI for schemahttp:feesAndCommissionsSpecification [Expects: http://schema.org/Text, http://schema.org/URL]
  ///
  /// Description of fees, commissions, and other terms applied either to a class of financial product, or by a financial service organization.
  ///
  /// Can be used on: http://schema.org/FinancialProduct, http://schema.org/FinancialService
  ///
  static const feesAndCommissionsSpecification = IriTerm.prevalidated(
    'http://schema.org/feesAndCommissionsSpecification',
  );

  /// IRI for schemahttp:fiberContent [Expects: http://schema.org/Mass]
  ///
  /// The number of grams of fiber.
  ///
  /// Can be used on: http://schema.org/NutritionInformation
  ///
  static const fiberContent = IriTerm.prevalidated(
    'http://schema.org/fiberContent',
  );

  /// IRI for schemahttp:fileFormat [Expects: http://schema.org/Text, http://schema.org/URL]
  ///
  /// Media type, typically MIME format (see [IANA site](http://www.iana.org/assignments/media-types/media-types.xhtml)) of the content, e.g. application/zip of a SoftwareApplication binary. In cases where a CreativeWork has several media type representations, 'encoding' can be used to indicate each MediaObject alongside particular fileFormat information. Unregistered or niche file formats can be indicated instead via the most appropriate URL, e.g. defining Web page or a Wikipedia entry.
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const fileFormat = IriTerm.prevalidated(
    'http://schema.org/fileFormat',
  );

  /// IRI for schemahttp:fileSize [Expects: http://schema.org/Text]
  ///
  /// Size of the application / package (e.g. 18MB). In the absence of a unit (MB, KB etc.), KB will be assumed.
  ///
  /// Can be used on: http://schema.org/SoftwareApplication
  ///
  static const fileSize = IriTerm.prevalidated('http://schema.org/fileSize');

  /// IRI for schemahttp:financialAidEligible [Expects: http://schema.org/DefinedTerm, http://schema.org/Text]
  ///
  /// A financial aid type or program which students may use to pay for tuition or fees associated with the program.
  ///
  /// Can be used on: http://schema.org/Course, http://schema.org/EducationalOccupationalProgram
  ///
  static const financialAidEligible = IriTerm.prevalidated(
    'http://schema.org/financialAidEligible',
  );

  /// IRI for schemahttp:firstAppearance [Expects: http://schema.org/CreativeWork]
  ///
  /// Indicates the first known occurrence of a {[Claim]} in some {[CreativeWork]}.
  ///
  /// Can be used on: http://schema.org/Claim
  ///
  static const firstAppearance = IriTerm.prevalidated(
    'http://schema.org/firstAppearance',
  );

  /// IRI for schemahttp:firstPerformance [Expects: http://schema.org/Event]
  ///
  /// The date and place the work was first performed.
  ///
  /// Can be used on: http://schema.org/MusicComposition
  ///
  static const firstPerformance = IriTerm.prevalidated(
    'http://schema.org/firstPerformance',
  );

  /// IRI for schemahttp:flightDistance [Expects: http://schema.org/Distance, http://schema.org/Text]
  ///
  /// The distance of the flight.
  ///
  /// Can be used on: http://schema.org/Flight
  ///
  static const flightDistance = IriTerm.prevalidated(
    'http://schema.org/flightDistance',
  );

  /// IRI for schemahttp:flightNumber [Expects: http://schema.org/Text]
  ///
  /// The unique identifier for a flight including the airline IATA code. For example, if describing United flight 110, where the IATA code for United is 'UA', the flightNumber is 'UA110'.
  ///
  /// Can be used on: http://schema.org/Flight
  ///
  static const flightNumber = IriTerm.prevalidated(
    'http://schema.org/flightNumber',
  );

  /// IRI for schemahttp:floorLevel [Expects: http://schema.org/Text]
  ///
  /// The floor level for an {[Accommodation]} in a multi-storey building. Since counting
  /// systems [vary internationally](https://en.wikipedia.org/wiki/Storey#Consecutive_number_floor_designations), the local system should be used where possible.
  ///
  /// Can be used on: http://schema.org/Accommodation
  ///
  static const floorLevel = IriTerm.prevalidated(
    'http://schema.org/floorLevel',
  );

  /// IRI for schemahttp:floorLimit [Expects: http://schema.org/MonetaryAmount]
  ///
  /// A floor limit is the amount of money above which credit card transactions must be authorized.
  ///
  /// Can be used on: http://schema.org/PaymentCard
  ///
  static const floorLimit = IriTerm.prevalidated(
    'http://schema.org/floorLimit',
  );

  /// IRI for schemahttp:floorSize [Expects: http://schema.org/QuantitativeValue]
  ///
  /// The size of the accommodation, e.g. in square meter or squarefoot.
  /// Typical unit code(s): MTK for square meter, FTK for square foot, or YDK for square yard.
  ///
  /// Can be used on: http://schema.org/Accommodation, http://schema.org/FloorPlan
  ///
  static const floorSize = IriTerm.prevalidated('http://schema.org/floorSize');

  /// IRI for schemahttp:followee [Expects: http://schema.org/Organization, http://schema.org/Person]
  ///
  /// A sub property of object. The person or organization being followed.
  ///
  /// Can be used on: http://schema.org/FollowAction
  ///
  static const followee = IriTerm.prevalidated('http://schema.org/followee');

  /// IRI for schemahttp:follows [Expects: http://schema.org/Person]
  ///
  /// The most generic uni-directional social relation.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const follows = IriTerm.prevalidated('http://schema.org/follows');

  /// IRI for schemahttp:followup [Expects: http://schema.org/Text]
  ///
  /// Typical or recommended followup care after the procedure is performed.
  ///
  /// Can be used on: http://schema.org/MedicalProcedure
  ///
  static const followup = IriTerm.prevalidated('http://schema.org/followup');

  /// IRI for schemahttp:foodEstablishment [Expects: http://schema.org/FoodEstablishment, http://schema.org/Place]
  ///
  /// A sub property of location. The specific food establishment where the action occurred.
  ///
  /// Can be used on: http://schema.org/CookAction
  ///
  static const foodEstablishment = IriTerm.prevalidated(
    'http://schema.org/foodEstablishment',
  );

  /// IRI for schemahttp:foodEvent [Expects: http://schema.org/FoodEvent]
  ///
  /// A sub property of location. The specific food event where the action occurred.
  ///
  /// Can be used on: http://schema.org/CookAction
  ///
  static const foodEvent = IriTerm.prevalidated('http://schema.org/foodEvent');

  /// IRI for schemahttp:foodWarning [Expects: http://schema.org/Text]
  ///
  /// Any precaution, guidance, contraindication, etc. related to consumption of specific foods while taking this drug.
  ///
  /// Can be used on: http://schema.org/Drug
  ///
  static const foodWarning = IriTerm.prevalidated(
    'http://schema.org/foodWarning',
  );

  /// IRI for schemahttp:founders [Expects: http://schema.org/Person]
  ///
  /// A person who founded this organization.
  ///
  /// Can be used on: http://schema.org/Organization
  ///
  static const founders = IriTerm.prevalidated('http://schema.org/founders');

  /// IRI for schemahttp:foundingDate [Expects: http://schema.org/Date]
  ///
  /// The date that this organization was founded.
  ///
  /// Can be used on: http://schema.org/Organization
  ///
  static const foundingDate = IriTerm.prevalidated(
    'http://schema.org/foundingDate',
  );

  /// IRI for schemahttp:foundingLocation [Expects: http://schema.org/Place]
  ///
  /// The place where the Organization was founded.
  ///
  /// Can be used on: http://schema.org/Organization
  ///
  static const foundingLocation = IriTerm.prevalidated(
    'http://schema.org/foundingLocation',
  );

  /// IRI for schemahttp:free [Expects: http://schema.org/Boolean]
  ///
  /// A flag to signal that the item, event, or place is accessible for free.
  ///
  /// Can be used on: http://schema.org/PublicationEvent
  ///
  static const free = IriTerm.prevalidated('http://schema.org/free');

  /// IRI for schemahttp:freeShippingThreshold [Expects: http://schema.org/DeliveryChargeSpecification, http://schema.org/MonetaryAmount]
  ///
  /// A monetary value above (or at) which the shipping rate becomes free. Intended to be used via an {[OfferShippingDetails]} with {[shippingSettingsLink]} matching this {[ShippingRateSettings]}.
  ///
  /// Can be used on: http://schema.org/ShippingRateSettings
  ///
  static const freeShippingThreshold = IriTerm.prevalidated(
    'http://schema.org/freeShippingThreshold',
  );

  /// IRI for schemahttp:fromLocation [Expects: http://schema.org/Place]
  ///
  /// A sub property of location. The original location of the object or the agent before the action.
  ///
  /// Can be used on: http://schema.org/ExerciseAction, http://schema.org/MoveAction, http://schema.org/TransferAction
  ///
  static const fromLocation = IriTerm.prevalidated(
    'http://schema.org/fromLocation',
  );

  /// IRI for schemahttp:fuelCapacity [Expects: http://schema.org/QuantitativeValue]
  ///
  /// The capacity of the fuel tank or in the case of electric cars, the battery. If there are multiple components for storage, this should indicate the total of all storage of the same type.\n\nTypical unit code(s): LTR for liters, GLL of US gallons, GLI for UK / imperial gallons, AMH for ampere-hours (for electrical vehicles).
  ///
  /// Can be used on: http://schema.org/Vehicle
  ///
  static const fuelCapacity = IriTerm.prevalidated(
    'http://schema.org/fuelCapacity',
  );

  /// IRI for schemahttp:fuelConsumption [Expects: http://schema.org/QuantitativeValue]
  ///
  /// The amount of fuel consumed for traveling a particular distance or temporal duration with the given vehicle (e.g. liters per 100 km).\n\n* Note 1: There are unfortunately no standard unit codes for liters per 100 km.  Use {[unitText]} to indicate the unit of measurement, e.g. L/100 km.\n* Note 2: There are two ways of indicating the fuel consumption, {[fuelConsumption]} (e.g. 8 liters per 100 km) and {[fuelEfficiency]} (e.g. 30 miles per gallon). They are reciprocal.\n* Note 3: Often, the absolute value is useful only when related to driving speed ("at 80 km/h") or usage pattern ("city traffic"). You can use {[valueReference]} to link the value for the fuel consumption to another value.
  ///
  /// Can be used on: http://schema.org/Vehicle
  ///
  static const fuelConsumption = IriTerm.prevalidated(
    'http://schema.org/fuelConsumption',
  );

  /// IRI for schemahttp:fuelEfficiency [Expects: http://schema.org/QuantitativeValue]
  ///
  /// The distance traveled per unit of fuel used; most commonly miles per gallon (mpg) or kilometers per liter (km/L).\n\n* Note 1: There are unfortunately no standard unit codes for miles per gallon or kilometers per liter. Use {[unitText]} to indicate the unit of measurement, e.g. mpg or km/L.\n* Note 2: There are two ways of indicating the fuel consumption, {[fuelConsumption]} (e.g. 8 liters per 100 km) and {[fuelEfficiency]} (e.g. 30 miles per gallon). They are reciprocal.\n* Note 3: Often, the absolute value is useful only when related to driving speed ("at 80 km/h") or usage pattern ("city traffic"). You can use {[valueReference]} to link the value for the fuel economy to another value.
  ///
  /// Can be used on: http://schema.org/Vehicle
  ///
  static const fuelEfficiency = IriTerm.prevalidated(
    'http://schema.org/fuelEfficiency',
  );

  /// IRI for schemahttp:fuelType [Expects: http://schema.org/QualitativeValue, http://schema.org/Text, http://schema.org/URL]
  ///
  /// The type of fuel suitable for the engine or engines of the vehicle. If the vehicle has only one engine, this property can be attached directly to the vehicle.
  ///
  /// Can be used on: http://schema.org/EngineSpecification, http://schema.org/Vehicle
  ///
  static const fuelType = IriTerm.prevalidated('http://schema.org/fuelType');

  /// IRI for schemahttp:fulfillmentType [Expects: http://schema.org/FulfillmentTypeEnumeration]
  ///
  /// Type of fulfillment applicable to the {[ShippingService]}.
  ///
  /// Can be used on: http://schema.org/ShippingService
  ///
  static const fulfillmentType = IriTerm.prevalidated(
    'http://schema.org/fulfillmentType',
  );

  /// IRI for schemahttp:functionalClass [Expects: http://schema.org/MedicalEntity, http://schema.org/Text]
  ///
  /// The degree of mobility the joint allows.
  ///
  /// Can be used on: http://schema.org/Joint
  ///
  static const functionalClass = IriTerm.prevalidated(
    'http://schema.org/functionalClass',
  );

  /// IRI for schemahttp:funder [Expects: http://schema.org/Organization, http://schema.org/Person]
  ///
  /// A person or organization that supports (sponsors) something through some kind of financial contribution.
  ///
  /// Can be used on: http://schema.org/CreativeWork, http://schema.org/Event, http://schema.org/Grant, http://schema.org/MonetaryGrant, http://schema.org/Organization, http://schema.org/Person
  ///
  static const funder = IriTerm.prevalidated('http://schema.org/funder');

  /// IRI for schemahttp:gameAvailabilityType [Expects: http://schema.org/GameAvailabilityEnumeration, http://schema.org/Text]
  ///
  /// Indicates the availability type of the game content associated with this action, such as whether it is a full version or a demo.
  ///
  /// Can be used on: http://schema.org/PlayGameAction
  ///
  static const gameAvailabilityType = IriTerm.prevalidated(
    'http://schema.org/gameAvailabilityType',
  );

  /// IRI for schemahttp:gameEdition [Expects: http://schema.org/Text]
  ///
  /// The edition of a video game.
  ///
  /// Can be used on: http://schema.org/VideoGame
  ///
  static const gameEdition = IriTerm.prevalidated(
    'http://schema.org/gameEdition',
  );

  /// IRI for schemahttp:gameItem [Expects: http://schema.org/Thing]
  ///
  /// An item is an object within the game world that can be collected by a player or, occasionally, a non-player character.
  ///
  /// Can be used on: http://schema.org/Game, http://schema.org/VideoGameSeries
  ///
  static const gameItem = IriTerm.prevalidated('http://schema.org/gameItem');

  /// IRI for schemahttp:gameLocation [Expects: http://schema.org/Place, http://schema.org/PostalAddress, http://schema.org/URL]
  ///
  /// Real or fictional location of the game (or part of game).
  ///
  /// Can be used on: http://schema.org/Game, http://schema.org/VideoGameSeries
  ///
  static const gameLocation = IriTerm.prevalidated(
    'http://schema.org/gameLocation',
  );

  /// IRI for schemahttp:gamePlatform [Expects: http://schema.org/Text, http://schema.org/Thing, http://schema.org/URL]
  ///
  /// The electronic systems used to play <a href="http://en.wikipedia.org/wiki/Category:Video_game_platforms">video games</a>.
  ///
  /// Can be used on: http://schema.org/VideoGame, http://schema.org/VideoGameSeries
  ///
  static const gamePlatform = IriTerm.prevalidated(
    'http://schema.org/gamePlatform',
  );

  /// IRI for schemahttp:gameTip [Expects: http://schema.org/CreativeWork]
  ///
  /// Links to tips, tactics, etc.
  ///
  /// Can be used on: http://schema.org/VideoGame
  ///
  static const gameTip = IriTerm.prevalidated('http://schema.org/gameTip');

  /// IRI for schemahttp:gender [Expects: http://schema.org/GenderType, http://schema.org/Text]
  ///
  /// Gender of something, typically a {[Person]}, but possibly also fictional characters, animals, etc. While http://schema.org/Male and http://schema.org/Female may be used, text strings are also acceptable for people who do not identify as a binary gender. The {[gender]} property can also be used in an extended sense to cover e.g. the gender of sports teams. As with the gender of individuals, we do not try to enumerate all possibilities. A mixed-gender {[SportsTeam]} can be indicated with a text value of "Mixed".
  ///
  /// Can be used on: http://schema.org/Person, http://schema.org/SportsTeam
  ///
  static const gender = IriTerm.prevalidated('http://schema.org/gender');

  /// IRI for schemahttp:geo [Expects: http://schema.org/GeoCoordinates, http://schema.org/GeoShape]
  ///
  /// The geo coordinates of the place.
  ///
  /// Can be used on: http://schema.org/Place
  ///
  static const geo = IriTerm.prevalidated('http://schema.org/geo');

  /// IRI for schemahttp:geoContains [Expects: http://schema.org/GeospatialGeometry, http://schema.org/Place]
  ///
  /// Represents a relationship between two geometries (or the places they represent), relating a containing geometry to a contained geometry. "a contains b iff no points of b lie in the exterior of a, and at least one point of the interior of b lies in the interior of a". As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
  ///
  /// Can be used on: http://schema.org/GeospatialGeometry, http://schema.org/Place
  ///
  static const geoContains = IriTerm.prevalidated(
    'http://schema.org/geoContains',
  );

  /// IRI for schemahttp:geoCoveredBy [Expects: http://schema.org/GeospatialGeometry, http://schema.org/Place]
  ///
  /// Represents a relationship between two geometries (or the places they represent), relating a geometry to another that covers it. As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
  ///
  /// Can be used on: http://schema.org/GeospatialGeometry, http://schema.org/Place
  ///
  static const geoCoveredBy = IriTerm.prevalidated(
    'http://schema.org/geoCoveredBy',
  );

  /// IRI for schemahttp:geoCovers [Expects: http://schema.org/GeospatialGeometry, http://schema.org/Place]
  ///
  /// Represents a relationship between two geometries (or the places they represent), relating a covering geometry to a covered geometry. "Every point of b is a point of (the interior or boundary of) a". As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
  ///
  /// Can be used on: http://schema.org/GeospatialGeometry, http://schema.org/Place
  ///
  static const geoCovers = IriTerm.prevalidated('http://schema.org/geoCovers');

  /// IRI for schemahttp:geoCrosses [Expects: http://schema.org/GeospatialGeometry, http://schema.org/Place]
  ///
  /// Represents a relationship between two geometries (or the places they represent), relating a geometry to another that crosses it: "a crosses b: they have some but not all interior points in common, and the dimension of the intersection is less than that of at least one of them". As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
  ///
  /// Can be used on: http://schema.org/GeospatialGeometry, http://schema.org/Place
  ///
  static const geoCrosses = IriTerm.prevalidated(
    'http://schema.org/geoCrosses',
  );

  /// IRI for schemahttp:geoDisjoint [Expects: http://schema.org/GeospatialGeometry, http://schema.org/Place]
  ///
  /// Represents spatial relations in which two geometries (or the places they represent) are topologically disjoint: "they have no point in common. They form a set of disconnected geometries." (A symmetric relationship, as defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).)
  ///
  /// Can be used on: http://schema.org/GeospatialGeometry, http://schema.org/Place
  ///
  static const geoDisjoint = IriTerm.prevalidated(
    'http://schema.org/geoDisjoint',
  );

  /// IRI for schemahttp:geoEquals [Expects: http://schema.org/GeospatialGeometry, http://schema.org/Place]
  ///
  /// Represents spatial relations in which two geometries (or the places they represent) are topologically equal, as defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM). "Two geometries are topologically equal if their interiors intersect and no part of the interior or boundary of one geometry intersects the exterior of the other" (a symmetric relationship).
  ///
  /// Can be used on: http://schema.org/GeospatialGeometry, http://schema.org/Place
  ///
  static const geoEquals = IriTerm.prevalidated('http://schema.org/geoEquals');

  /// IRI for schemahttp:geoIntersects [Expects: http://schema.org/GeospatialGeometry, http://schema.org/Place]
  ///
  /// Represents spatial relations in which two geometries (or the places they represent) have at least one point in common. As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
  ///
  /// Can be used on: http://schema.org/GeospatialGeometry, http://schema.org/Place
  ///
  static const geoIntersects = IriTerm.prevalidated(
    'http://schema.org/geoIntersects',
  );

  /// IRI for schemahttp:geoMidpoint [Expects: http://schema.org/GeoCoordinates]
  ///
  /// Indicates the GeoCoordinates at the centre of a GeoShape, e.g. GeoCircle.
  ///
  /// Can be used on: http://schema.org/GeoCircle
  ///
  static const geoMidpoint = IriTerm.prevalidated(
    'http://schema.org/geoMidpoint',
  );

  /// IRI for schemahttp:geoOverlaps [Expects: http://schema.org/GeospatialGeometry, http://schema.org/Place]
  ///
  /// Represents a relationship between two geometries (or the places they represent), relating a geometry to another that geospatially overlaps it, i.e. they have some but not all points in common. As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
  ///
  /// Can be used on: http://schema.org/GeospatialGeometry, http://schema.org/Place
  ///
  static const geoOverlaps = IriTerm.prevalidated(
    'http://schema.org/geoOverlaps',
  );

  /// IRI for schemahttp:geoRadius [Expects: http://schema.org/Distance, http://schema.org/Number, http://schema.org/Text]
  ///
  /// Indicates the approximate radius of a GeoCircle (metres unless indicated otherwise via Distance notation).
  ///
  /// Can be used on: http://schema.org/GeoCircle
  ///
  static const geoRadius = IriTerm.prevalidated('http://schema.org/geoRadius');

  /// IRI for schemahttp:geoTouches [Expects: http://schema.org/GeospatialGeometry, http://schema.org/Place]
  ///
  /// Represents spatial relations in which two geometries (or the places they represent) touch: "they have at least one boundary point in common, but no interior points." (A symmetric relationship, as defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).)
  ///
  /// Can be used on: http://schema.org/GeospatialGeometry, http://schema.org/Place
  ///
  static const geoTouches = IriTerm.prevalidated(
    'http://schema.org/geoTouches',
  );

  /// IRI for schemahttp:geoWithin [Expects: http://schema.org/GeospatialGeometry, http://schema.org/Place]
  ///
  /// Represents a relationship between two geometries (or the places they represent), relating a geometry to one that contains it, i.e. it is inside (i.e. within) its interior. As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
  ///
  /// Can be used on: http://schema.org/GeospatialGeometry, http://schema.org/Place
  ///
  static const geoWithin = IriTerm.prevalidated('http://schema.org/geoWithin');

  /// IRI for schemahttp:geographicArea [Expects: http://schema.org/AdministrativeArea]
  ///
  /// The geographic area associated with the audience.
  ///
  /// Can be used on: http://schema.org/Audience
  ///
  static const geographicArea = IriTerm.prevalidated(
    'http://schema.org/geographicArea',
  );

  /// IRI for schemahttp:gettingTestedInfo [Expects: http://schema.org/URL, http://schema.org/WebContent]
  ///
  /// Information about getting tested (for a {[MedicalCondition]}), e.g. in the context of a pandemic.
  ///
  /// Can be used on: http://schema.org/SpecialAnnouncement
  ///
  static const gettingTestedInfo = IriTerm.prevalidated(
    'http://schema.org/gettingTestedInfo',
  );

  /// IRI for schemahttp:givenName [Expects: http://schema.org/Text]
  ///
  /// Given name. In the U.S., the first name of a Person.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const givenName = IriTerm.prevalidated('http://schema.org/givenName');

  /// IRI for schemahttp:globalLocationNumber [Expects: http://schema.org/Text]
  ///
  /// The [Global Location Number](http://www.gs1.org/gln) (GLN, sometimes also referred to as International Location Number or ILN) of the respective organization, person, or place. The GLN is a 13-digit number used to identify parties and physical locations.
  ///
  /// Can be used on: http://schema.org/Organization, http://schema.org/Person, http://schema.org/Place
  ///
  static const globalLocationNumber = IriTerm.prevalidated(
    'http://schema.org/globalLocationNumber',
  );

  /// IRI for schemahttp:governmentBenefitsInfo [Expects: http://schema.org/GovernmentService]
  ///
  /// governmentBenefitsInfo provides information about government benefits associated with a SpecialAnnouncement.
  ///
  /// Can be used on: http://schema.org/SpecialAnnouncement
  ///
  static const governmentBenefitsInfo = IriTerm.prevalidated(
    'http://schema.org/governmentBenefitsInfo',
  );

  /// IRI for schemahttp:gracePeriod [Expects: http://schema.org/Duration]
  ///
  /// The period of time after any due date that the borrower has to fulfil its obligations before a default (failure to pay) is deemed to have occurred.
  ///
  /// Can be used on: http://schema.org/LoanOrCredit
  ///
  static const gracePeriod = IriTerm.prevalidated(
    'http://schema.org/gracePeriod',
  );

  /// IRI for schemahttp:grantee [Expects: http://schema.org/Audience, http://schema.org/ContactPoint, http://schema.org/Organization, http://schema.org/Person]
  ///
  /// The person, organization, contact point, or audience that has been granted this permission.
  ///
  /// Can be used on: http://schema.org/DigitalDocumentPermission
  ///
  static const grantee = IriTerm.prevalidated('http://schema.org/grantee');

  /// IRI for schemahttp:greater [Expects: http://schema.org/QualitativeValue]
  ///
  /// This ordering relation for qualitative values indicates that the subject is greater than the object.
  ///
  /// Can be used on: http://schema.org/QualitativeValue
  ///
  static const greater = IriTerm.prevalidated('http://schema.org/greater');

  /// IRI for schemahttp:greaterOrEqual [Expects: http://schema.org/QualitativeValue]
  ///
  /// This ordering relation for qualitative values indicates that the subject is greater than or equal to the object.
  ///
  /// Can be used on: http://schema.org/QualitativeValue
  ///
  static const greaterOrEqual = IriTerm.prevalidated(
    'http://schema.org/greaterOrEqual',
  );

  /// IRI for schemahttp:gtin12 [Expects: http://schema.org/Text]
  ///
  /// The GTIN-12 code of the product, or the product to which the offer refers. The GTIN-12 is the 12-digit GS1 Identification Key composed of a U.P.C. Company Prefix, Item Reference, and Check Digit used to identify trade items. See [GS1 GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) for more details.
  ///
  /// Can be used on: http://schema.org/Demand, http://schema.org/Offer, http://schema.org/Product
  ///
  static const gtin12 = IriTerm.prevalidated('http://schema.org/gtin12');

  /// IRI for schemahttp:gtin13 [Expects: http://schema.org/Text]
  ///
  /// The GTIN-13 code of the product, or the product to which the offer refers. This is equivalent to 13-digit ISBN codes and EAN UCC-13. Former 12-digit UPC codes can be converted into a GTIN-13 code by simply adding a preceding zero. See [GS1 GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) for more details.
  ///
  /// Can be used on: http://schema.org/Demand, http://schema.org/Offer, http://schema.org/Product
  ///
  static const gtin13 = IriTerm.prevalidated('http://schema.org/gtin13');

  /// IRI for schemahttp:gtin14 [Expects: http://schema.org/Text]
  ///
  /// The GTIN-14 code of the product, or the product to which the offer refers. See [GS1 GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) for more details.
  ///
  /// Can be used on: http://schema.org/Demand, http://schema.org/Offer, http://schema.org/Product
  ///
  static const gtin14 = IriTerm.prevalidated('http://schema.org/gtin14');

  /// IRI for schemahttp:gtin8 [Expects: http://schema.org/Text]
  ///
  /// The GTIN-8 code of the product, or the product to which the offer refers. This code is also known as EAN/UCC-8 or 8-digit EAN. See [GS1 GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) for more details.
  ///
  /// Can be used on: http://schema.org/Demand, http://schema.org/Offer, http://schema.org/Product
  ///
  static const gtin8 = IriTerm.prevalidated('http://schema.org/gtin8');

  /// IRI for schemahttp:guideline [Expects: http://schema.org/MedicalGuideline]
  ///
  /// A medical guideline related to this entity.
  ///
  /// Can be used on: http://schema.org/MedicalEntity
  ///
  static const guideline = IriTerm.prevalidated('http://schema.org/guideline');

  /// IRI for schemahttp:guidelineDate [Expects: http://schema.org/Date]
  ///
  /// Date on which this guideline's recommendation was made.
  ///
  /// Can be used on: http://schema.org/MedicalGuideline
  ///
  static const guidelineDate = IriTerm.prevalidated(
    'http://schema.org/guidelineDate',
  );

  /// IRI for schemahttp:guidelineSubject [Expects: http://schema.org/MedicalEntity]
  ///
  /// The medical conditions, treatments, etc. that are the subject of the guideline.
  ///
  /// Can be used on: http://schema.org/MedicalGuideline
  ///
  static const guidelineSubject = IriTerm.prevalidated(
    'http://schema.org/guidelineSubject',
  );

  /// IRI for schemahttp:handlingTime [Expects: http://schema.org/QuantitativeValue, http://schema.org/ServicePeriod]
  ///
  /// The typical delay between the receipt of the order and the goods either leaving the warehouse or being prepared for pickup, in case the delivery method is on site pickup.
  ///
  /// In the context of {[ShippingDeliveryTime]}, Typical properties: minValue, maxValue, unitCode (d for DAY).  This is by common convention assumed to mean business days (if a unitCode is used, coded as "d"), i.e. only counting days when the business normally operates.
  ///
  /// In the context of {[ShippingService]}, use the {[ServicePeriod]} format, that contains the same information in a structured form, with cut-off time, business days and duration.
  ///
  /// Can be used on: http://schema.org/ShippingDeliveryTime, http://schema.org/ShippingService
  ///
  static const handlingTime = IriTerm.prevalidated(
    'http://schema.org/handlingTime',
  );

  /// IRI for schemahttp:hasAdultConsideration [Expects: http://schema.org/AdultOrientedEnumeration]
  ///
  /// Used to tag an item to be intended or suitable for consumption or use by adults only.
  ///
  /// Can be used on: http://schema.org/Offer, http://schema.org/Product
  ///
  static const hasAdultConsideration = IriTerm.prevalidated(
    'http://schema.org/hasAdultConsideration',
  );

  /// IRI for schemahttp:hasBioPolymerSequence [Expects: http://schema.org/Text]
  ///
  /// A symbolic representation of a BioChemEntity. For example, a nucleotide sequence of a Gene or an amino acid sequence of a Protein.
  ///
  /// Can be used on: http://schema.org/Gene, http://schema.org/Protein
  ///
  static const hasBioPolymerSequence = IriTerm.prevalidated(
    'http://schema.org/hasBioPolymerSequence',
  );

  /// IRI for schemahttp:hasCategoryCode [Expects: http://schema.org/CategoryCode]
  ///
  /// A Category code contained in this code set.
  ///
  /// Can be used on: http://schema.org/CategoryCodeSet
  ///
  static const hasCategoryCode = IriTerm.prevalidated(
    'http://schema.org/hasCategoryCode',
  );

  /// IRI for schemahttp:hasCertification [Expects: http://schema.org/Certification]
  ///
  /// Certification information about a product, organization, service, place, or person.
  ///
  /// Can be used on: http://schema.org/Organization, http://schema.org/Person, http://schema.org/Place, http://schema.org/Product, http://schema.org/Service
  ///
  static const hasCertification = IriTerm.prevalidated(
    'http://schema.org/hasCertification',
  );

  /// IRI for schemahttp:hasCourse [Expects: http://schema.org/Course]
  ///
  /// A course or class that is one of the learning opportunities that constitute an educational / occupational program. No information is implied about whether the course is mandatory or optional; no guarantee is implied about whether the course will be available to everyone on the program.
  ///
  /// Can be used on: http://schema.org/EducationalOccupationalProgram
  ///
  static const hasCourse = IriTerm.prevalidated('http://schema.org/hasCourse');

  /// IRI for schemahttp:hasCourseInstance [Expects: http://schema.org/CourseInstance]
  ///
  /// An offering of the course at a specific time and place or through specific media or mode of study or to a specific section of students.
  ///
  /// Can be used on: http://schema.org/Course
  ///
  static const hasCourseInstance = IriTerm.prevalidated(
    'http://schema.org/hasCourseInstance',
  );

  /// IRI for schemahttp:hasCredential [Expects: http://schema.org/EducationalOccupationalCredential]
  ///
  /// A credential awarded to the Person or Organization.
  ///
  /// Can be used on: http://schema.org/Organization, http://schema.org/Person
  ///
  static const hasCredential = IriTerm.prevalidated(
    'http://schema.org/hasCredential',
  );

  /// IRI for schemahttp:hasDeliveryMethod [Expects: http://schema.org/DeliveryMethod]
  ///
  /// Method used for delivery or shipping.
  ///
  /// Can be used on: http://schema.org/DeliveryEvent, http://schema.org/ParcelDelivery
  ///
  static const hasDeliveryMethod = IriTerm.prevalidated(
    'http://schema.org/hasDeliveryMethod',
  );

  /// IRI for schemahttp:hasDigitalDocumentPermission [Expects: http://schema.org/DigitalDocumentPermission]
  ///
  /// A permission related to the access to this document (e.g. permission to read or write an electronic document). For a public document, specify a grantee with an Audience with audienceType equal to "public".
  ///
  /// Can be used on: http://schema.org/DigitalDocument
  ///
  static const hasDigitalDocumentPermission = IriTerm.prevalidated(
    'http://schema.org/hasDigitalDocumentPermission',
  );

  /// IRI for schemahttp:hasDriveThroughService [Expects: http://schema.org/Boolean]
  ///
  /// Indicates whether some facility (e.g. {[FoodEstablishment]}, {[CovidTestingFacility]}) offers a service that can be used by driving through in a car. In the case of {[CovidTestingFacility]} such facilities could potentially help with social distancing from other potentially-infected users.
  ///
  /// Can be used on: http://schema.org/Place
  ///
  static const hasDriveThroughService = IriTerm.prevalidated(
    'http://schema.org/hasDriveThroughService',
  );

  /// IRI for schemahttp:hasEnergyConsumptionDetails [Expects: http://schema.org/EnergyConsumptionDetails]
  ///
  /// Defines the energy efficiency Category (also known as "class" or "rating") for a product according to an international energy efficiency standard.
  ///
  /// Can be used on: http://schema.org/Product
  ///
  static const hasEnergyConsumptionDetails = IriTerm.prevalidated(
    'http://schema.org/hasEnergyConsumptionDetails',
  );

  /// IRI for schemahttp:hasEnergyEfficiencyCategory [Expects: http://schema.org/EnergyEfficiencyEnumeration]
  ///
  /// Defines the energy efficiency Category (which could be either a rating out of range of values or a yes/no certification) for a product according to an international energy efficiency standard.
  ///
  /// Can be used on: http://schema.org/EnergyConsumptionDetails
  ///
  static const hasEnergyEfficiencyCategory = IriTerm.prevalidated(
    'http://schema.org/hasEnergyEfficiencyCategory',
  );

  /// IRI for schemahttp:hasGS1DigitalLink [Expects: http://schema.org/URL]
  ///
  /// The <a href="https://www.gs1.org/standards/gs1-digital-link">GS1 digital link</a> associated with the object. This URL should conform to the particular requirements of digital links. The link should only contain the Application Identifiers (AIs) that are relevant for the entity being annotated, for instance a {[Product]} or an {[Organization]}, and for the correct granularity. In particular, for products:<ul><li>A Digital Link that contains a serial number (AI <code>21</code>) should only be present on instances of {[IndividualProduct]}</li><li>A Digital Link that contains a lot number (AI <code>10</code>) should be annotated as {[SomeProduct]} if only products from that lot are sold, or {[IndividualProduct]} if there is only a specific product.</li><li>A Digital Link that contains a global model number (AI <code>8013</code>)  should be attached to a {[Product]} or a {[ProductModel]}.</li></ul> Other item types should be adapted similarly.
  ///
  /// Can be used on: http://schema.org/Offer, http://schema.org/Organization, http://schema.org/Place, http://schema.org/Product
  ///
  static const hasGS1DigitalLink = IriTerm.prevalidated(
    'http://schema.org/hasGS1DigitalLink',
  );

  /// IRI for schemahttp:hasHealthAspect [Expects: http://schema.org/HealthAspectEnumeration]
  ///
  /// Indicates the aspect or aspects specifically addressed in some {[HealthTopicContent]}. For example, that the content is an overview, or that it talks about treatment, self-care, treatments or their side-effects.
  ///
  /// Can be used on: http://schema.org/HealthTopicContent
  ///
  static const hasHealthAspect = IriTerm.prevalidated(
    'http://schema.org/hasHealthAspect',
  );

  /// IRI for schemahttp:hasMeasurement [Expects: http://schema.org/QuantitativeValue]
  ///
  /// A measurement of an item, For example, the inseam of pants, the wheel size of a bicycle, the gauge of a screw, or the carbon footprint measured for certification by an authority. Usually an exact measurement, but can also be a range of measurements for adjustable products, for example belts and ski bindings.
  ///
  /// Can be used on: http://schema.org/Certification, http://schema.org/Offer, http://schema.org/Product, http://schema.org/SizeSpecification
  ///
  static const hasMeasurement = IriTerm.prevalidated(
    'http://schema.org/hasMeasurement',
  );

  /// IRI for schemahttp:hasMemberProgram [Expects: http://schema.org/MemberProgram]
  ///
  /// MemberProgram offered by an Organization, for example an eCommerce merchant or an airline.
  ///
  /// Can be used on: http://schema.org/Organization
  ///
  static const hasMemberProgram = IriTerm.prevalidated(
    'http://schema.org/hasMemberProgram',
  );

  /// IRI for schemahttp:hasMenuItem [Expects: http://schema.org/MenuItem]
  ///
  /// A food or drink item contained in a menu or menu section.
  ///
  /// Can be used on: http://schema.org/Menu, http://schema.org/MenuSection
  ///
  static const hasMenuItem = IriTerm.prevalidated(
    'http://schema.org/hasMenuItem',
  );

  /// IRI for schemahttp:hasMenuSection [Expects: http://schema.org/MenuSection]
  ///
  /// A subgrouping of the menu (by dishes, course, serving time period, etc.).
  ///
  /// Can be used on: http://schema.org/Menu, http://schema.org/MenuSection
  ///
  static const hasMenuSection = IriTerm.prevalidated(
    'http://schema.org/hasMenuSection',
  );

  /// IRI for schemahttp:hasMerchantReturnPolicy [Expects: http://schema.org/MerchantReturnPolicy]
  ///
  /// Specifies a MerchantReturnPolicy that may be applicable.
  ///
  /// Can be used on: http://schema.org/Offer, http://schema.org/Organization, http://schema.org/Product
  ///
  static const hasMerchantReturnPolicy = IriTerm.prevalidated(
    'http://schema.org/hasMerchantReturnPolicy',
  );

  /// IRI for schemahttp:hasMolecularFunction [Expects: http://schema.org/DefinedTerm, http://schema.org/PropertyValue, http://schema.org/URL]
  ///
  /// Molecular function performed by this BioChemEntity; please use PropertyValue if you want to include any evidence.
  ///
  /// Can be used on: http://schema.org/BioChemEntity
  ///
  static const hasMolecularFunction = IriTerm.prevalidated(
    'http://schema.org/hasMolecularFunction',
  );

  /// IRI for schemahttp:hasOccupation [Expects: http://schema.org/Occupation]
  ///
  /// The Person's occupation. For past professions, use Role for expressing dates.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const hasOccupation = IriTerm.prevalidated(
    'http://schema.org/hasOccupation',
  );

  /// IRI for schemahttp:hasOfferCatalog [Expects: http://schema.org/OfferCatalog]
  ///
  /// Indicates an OfferCatalog listing for this Organization, Person, or Service.
  ///
  /// Can be used on: http://schema.org/Organization, http://schema.org/Person, http://schema.org/Service
  ///
  static const hasOfferCatalog = IriTerm.prevalidated(
    'http://schema.org/hasOfferCatalog',
  );

  /// IRI for schemahttp:hasPOS [Expects: http://schema.org/Place]
  ///
  /// Points-of-Sales operated by the organization or person.
  ///
  /// Can be used on: http://schema.org/Organization, http://schema.org/Person
  ///
  static const hasPOS = IriTerm.prevalidated('http://schema.org/hasPOS');

  /// IRI for schemahttp:hasShippingService [Expects: http://schema.org/ShippingService]
  ///
  /// Specification of a shipping service offered by the organization.
  ///
  /// Can be used on: http://schema.org/OfferShippingDetails, http://schema.org/Organization
  ///
  static const hasShippingService = IriTerm.prevalidated(
    'http://schema.org/hasShippingService',
  );

  /// IRI for schemahttp:hasTierBenefit [Expects: http://schema.org/TierBenefitEnumeration]
  ///
  /// A member benefit for a particular tier of a loyalty program.
  ///
  /// Can be used on: http://schema.org/MemberProgramTier
  ///
  static const hasTierBenefit = IriTerm.prevalidated(
    'http://schema.org/hasTierBenefit',
  );

  /// IRI for schemahttp:hasTierRequirement [Expects: http://schema.org/CreditCard, http://schema.org/MonetaryAmount, http://schema.org/Text, http://schema.org/UnitPriceSpecification]
  ///
  /// A requirement for a user to join a membership tier, for example: a CreditCard if the tier requires sign up for a credit card, A UnitPriceSpecification if the user is required to pay a (periodic) fee, or a MonetaryAmount if the user needs to spend a minimum amount to join the tier. If a tier is free to join then this property does not need to be specified.
  ///
  /// Can be used on: http://schema.org/MemberProgramTier
  ///
  static const hasTierRequirement = IriTerm.prevalidated(
    'http://schema.org/hasTierRequirement',
  );

  /// IRI for schemahttp:headline [Expects: http://schema.org/Text]
  ///
  /// Headline of the article.
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const headline = IriTerm.prevalidated('http://schema.org/headline');

  /// IRI for schemahttp:healthCondition [Expects: http://schema.org/MedicalCondition]
  ///
  /// Specifying the health condition(s) of a patient, medical study, or other target audience.
  ///
  /// Can be used on: http://schema.org/MedicalStudy, http://schema.org/Patient, http://schema.org/PeopleAudience
  ///
  static const healthCondition = IriTerm.prevalidated(
    'http://schema.org/healthCondition',
  );

  /// IRI for schemahttp:healthPlanCoinsuranceOption [Expects: http://schema.org/Text]
  ///
  /// Whether the coinsurance applies before or after deductible, etc. TODO: Is this a closed set?
  ///
  /// Can be used on: http://schema.org/HealthPlanCostSharingSpecification
  ///
  static const healthPlanCoinsuranceOption = IriTerm.prevalidated(
    'http://schema.org/healthPlanCoinsuranceOption',
  );

  /// IRI for schemahttp:healthPlanCoinsuranceRate [Expects: http://schema.org/Number]
  ///
  /// The rate of coinsurance expressed as a number between 0.0 and 1.0.
  ///
  /// Can be used on: http://schema.org/HealthPlanCostSharingSpecification
  ///
  static const healthPlanCoinsuranceRate = IriTerm.prevalidated(
    'http://schema.org/healthPlanCoinsuranceRate',
  );

  /// IRI for schemahttp:healthPlanCopay [Expects: http://schema.org/PriceSpecification]
  ///
  /// The copay amount.
  ///
  /// Can be used on: http://schema.org/HealthPlanCostSharingSpecification
  ///
  static const healthPlanCopay = IriTerm.prevalidated(
    'http://schema.org/healthPlanCopay',
  );

  /// IRI for schemahttp:healthPlanCopayOption [Expects: http://schema.org/Text]
  ///
  /// Whether the copay is before or after deductible, etc. TODO: Is this a closed set?
  ///
  /// Can be used on: http://schema.org/HealthPlanCostSharingSpecification
  ///
  static const healthPlanCopayOption = IriTerm.prevalidated(
    'http://schema.org/healthPlanCopayOption',
  );

  /// IRI for schemahttp:healthPlanCostSharing [Expects: http://schema.org/Boolean]
  ///
  /// The costs to the patient for services under this network or formulary.
  ///
  /// Can be used on: http://schema.org/HealthPlanFormulary, http://schema.org/HealthPlanNetwork
  ///
  static const healthPlanCostSharing = IriTerm.prevalidated(
    'http://schema.org/healthPlanCostSharing',
  );

  /// IRI for schemahttp:healthPlanDrugOption [Expects: http://schema.org/Text]
  ///
  /// TODO.
  ///
  /// Can be used on: http://schema.org/HealthInsurancePlan
  ///
  static const healthPlanDrugOption = IriTerm.prevalidated(
    'http://schema.org/healthPlanDrugOption',
  );

  /// IRI for schemahttp:healthPlanDrugTier [Expects: http://schema.org/Text]
  ///
  /// The tier(s) of drugs offered by this formulary or insurance plan.
  ///
  /// Can be used on: http://schema.org/HealthInsurancePlan, http://schema.org/HealthPlanFormulary
  ///
  static const healthPlanDrugTier = IriTerm.prevalidated(
    'http://schema.org/healthPlanDrugTier',
  );

  /// IRI for schemahttp:healthPlanId [Expects: http://schema.org/Text]
  ///
  /// The 14-character, HIOS-generated Plan ID number. (Plan IDs must be unique, even across different markets.)
  ///
  /// Can be used on: http://schema.org/HealthInsurancePlan
  ///
  static const healthPlanId = IriTerm.prevalidated(
    'http://schema.org/healthPlanId',
  );

  /// IRI for schemahttp:healthPlanMarketingUrl [Expects: http://schema.org/URL]
  ///
  /// The URL that goes directly to the plan brochure for the specific standard plan or plan variation.
  ///
  /// Can be used on: http://schema.org/HealthInsurancePlan
  ///
  static const healthPlanMarketingUrl = IriTerm.prevalidated(
    'http://schema.org/healthPlanMarketingUrl',
  );

  /// IRI for schemahttp:healthPlanNetworkId [Expects: http://schema.org/Text]
  ///
  /// Name or unique ID of network. (Networks are often reused across different insurance plans.)
  ///
  /// Can be used on: http://schema.org/HealthPlanNetwork, http://schema.org/MedicalOrganization
  ///
  static const healthPlanNetworkId = IriTerm.prevalidated(
    'http://schema.org/healthPlanNetworkId',
  );

  /// IRI for schemahttp:healthPlanNetworkTier [Expects: http://schema.org/Text]
  ///
  /// The tier(s) for this network.
  ///
  /// Can be used on: http://schema.org/HealthPlanNetwork
  ///
  static const healthPlanNetworkTier = IriTerm.prevalidated(
    'http://schema.org/healthPlanNetworkTier',
  );

  /// IRI for schemahttp:healthPlanPharmacyCategory [Expects: http://schema.org/Text]
  ///
  /// The category or type of pharmacy associated with this cost sharing.
  ///
  /// Can be used on: http://schema.org/HealthPlanCostSharingSpecification
  ///
  static const healthPlanPharmacyCategory = IriTerm.prevalidated(
    'http://schema.org/healthPlanPharmacyCategory',
  );

  /// IRI for schemahttp:healthcareReportingData [Expects: http://schema.org/CDCPMDRecord, http://schema.org/Dataset]
  ///
  /// Indicates data describing a hospital, e.g. a CDC {[CDCPMDRecord]} or as some kind of {[Dataset]}.
  ///
  /// Can be used on: http://schema.org/Hospital
  ///
  static const healthcareReportingData = IriTerm.prevalidated(
    'http://schema.org/healthcareReportingData',
  );

  /// IRI for schemahttp:height [Expects: http://schema.org/Distance, http://schema.org/QuantitativeValue]
  ///
  /// The height of the item.
  ///
  /// Can be used on: http://schema.org/MediaObject, http://schema.org/OfferShippingDetails, http://schema.org/Person, http://schema.org/Product, http://schema.org/ShippingConditions, http://schema.org/VisualArtwork
  ///
  static const height = IriTerm.prevalidated('http://schema.org/height');

  /// IRI for schemahttp:highPrice [Expects: http://schema.org/Number, http://schema.org/Text]
  ///
  /// The highest price of all offers available.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  ///
  /// Can be used on: http://schema.org/AggregateOffer
  ///
  static const highPrice = IriTerm.prevalidated('http://schema.org/highPrice');

  /// IRI for schemahttp:hiringOrganization [Expects: http://schema.org/Organization, http://schema.org/Person]
  ///
  /// Organization or Person offering the job position.
  ///
  /// Can be used on: http://schema.org/JobPosting
  ///
  static const hiringOrganization = IriTerm.prevalidated(
    'http://schema.org/hiringOrganization',
  );

  /// IRI for schemahttp:homeLocation [Expects: http://schema.org/ContactPoint, http://schema.org/Place]
  ///
  /// A contact location for a person's residence.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const homeLocation = IriTerm.prevalidated(
    'http://schema.org/homeLocation',
  );

  /// IRI for schemahttp:homeTeam [Expects: http://schema.org/Person, http://schema.org/SportsTeam]
  ///
  /// The home team in a sports event.
  ///
  /// Can be used on: http://schema.org/SportsEvent
  ///
  static const homeTeam = IriTerm.prevalidated('http://schema.org/homeTeam');

  /// IRI for schemahttp:honorificPrefix [Expects: http://schema.org/Text]
  ///
  /// An honorific prefix preceding a Person's name such as Dr/Mrs/Mr.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const honorificPrefix = IriTerm.prevalidated(
    'http://schema.org/honorificPrefix',
  );

  /// IRI for schemahttp:honorificSuffix [Expects: http://schema.org/Text]
  ///
  /// An honorific suffix following a Person's name such as M.D./PhD/MSCSW.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const honorificSuffix = IriTerm.prevalidated(
    'http://schema.org/honorificSuffix',
  );

  /// IRI for schemahttp:hospitalAffiliation [Expects: http://schema.org/Hospital]
  ///
  /// A hospital with which the physician or office is affiliated.
  ///
  /// Can be used on: http://schema.org/Physician
  ///
  static const hospitalAffiliation = IriTerm.prevalidated(
    'http://schema.org/hospitalAffiliation',
  );

  /// IRI for schemahttp:hostingOrganization [Expects: http://schema.org/Organization]
  ///
  /// The Organization (airline, travelers' club, retailer, etc.) the membership is made with or which offers the  MemberProgram.
  ///
  /// Can be used on: http://schema.org/MemberProgram, http://schema.org/ProgramMembership
  ///
  static const hostingOrganization = IriTerm.prevalidated(
    'http://schema.org/hostingOrganization',
  );

  /// IRI for schemahttp:hoursAvailable [Expects: http://schema.org/OpeningHoursSpecification]
  ///
  /// The hours during which this service or contact is available.
  ///
  /// Can be used on: http://schema.org/ContactPoint, http://schema.org/LocationFeatureSpecification, http://schema.org/Service
  ///
  static const hoursAvailable = IriTerm.prevalidated(
    'http://schema.org/hoursAvailable',
  );

  /// IRI for schemahttp:howPerformed [Expects: http://schema.org/Text]
  ///
  /// How the procedure is performed.
  ///
  /// Can be used on: http://schema.org/MedicalProcedure
  ///
  static const howPerformed = IriTerm.prevalidated(
    'http://schema.org/howPerformed',
  );

  /// IRI for schemahttp:httpMethod [Expects: http://schema.org/Text]
  ///
  /// An HTTP method that specifies the appropriate HTTP method for a request to an HTTP EntryPoint. Values are capitalized strings as used in HTTP.
  ///
  /// Can be used on: http://schema.org/EntryPoint
  ///
  static const httpMethod = IriTerm.prevalidated(
    'http://schema.org/httpMethod',
  );

  /// IRI for schemahttp:iataCode [Expects: http://schema.org/Text]
  ///
  /// IATA identifier for an airline or airport.
  ///
  /// Can be used on: http://schema.org/Airline, http://schema.org/Airport
  ///
  static const iataCode = IriTerm.prevalidated('http://schema.org/iataCode');

  /// IRI for schemahttp:icaoCode [Expects: http://schema.org/Text]
  ///
  /// ICAO identifier for an airport.
  ///
  /// Can be used on: http://schema.org/Airport
  ///
  static const icaoCode = IriTerm.prevalidated('http://schema.org/icaoCode');

  /// IRI for schemahttp:identifyingExam [Expects: http://schema.org/PhysicalExam]
  ///
  /// A physical examination that can identify this sign.
  ///
  /// Can be used on: http://schema.org/MedicalSign
  ///
  static const identifyingExam = IriTerm.prevalidated(
    'http://schema.org/identifyingExam',
  );

  /// IRI for schemahttp:identifyingTest [Expects: http://schema.org/MedicalTest]
  ///
  /// A diagnostic test that can identify this sign.
  ///
  /// Can be used on: http://schema.org/MedicalSign
  ///
  static const identifyingTest = IriTerm.prevalidated(
    'http://schema.org/identifyingTest',
  );

  /// IRI for schemahttp:illustrator [Expects: http://schema.org/Person]
  ///
  /// The illustrator of the book.
  ///
  /// Can be used on: http://schema.org/Book
  ///
  static const illustrator = IriTerm.prevalidated(
    'http://schema.org/illustrator',
  );

  /// IRI for schemahttp:imagingTechnique [Expects: http://schema.org/MedicalImagingTechnique]
  ///
  /// Imaging technique used.
  ///
  /// Can be used on: http://schema.org/ImagingTest
  ///
  static const imagingTechnique = IriTerm.prevalidated(
    'http://schema.org/imagingTechnique',
  );

  /// IRI for schemahttp:inAlbum [Expects: http://schema.org/MusicAlbum]
  ///
  /// The album to which this recording belongs.
  ///
  /// Can be used on: http://schema.org/MusicRecording
  ///
  static const inAlbum = IriTerm.prevalidated('http://schema.org/inAlbum');

  /// IRI for schemahttp:inBroadcastLineup [Expects: http://schema.org/CableOrSatelliteService]
  ///
  /// The CableOrSatelliteService offering the channel.
  ///
  /// Can be used on: http://schema.org/BroadcastChannel
  ///
  static const inBroadcastLineup = IriTerm.prevalidated(
    'http://schema.org/inBroadcastLineup',
  );

  /// IRI for schemahttp:inChI [Expects: http://schema.org/Text]
  ///
  /// Non-proprietary identifier for molecular entity that can be used in printed and electronic data sources thus enabling easier linking of diverse data compilations.
  ///
  /// Can be used on: http://schema.org/MolecularEntity
  ///
  static const inChI = IriTerm.prevalidated('http://schema.org/inChI');

  /// IRI for schemahttp:inChIKey [Expects: http://schema.org/Text]
  ///
  /// InChIKey is a hashed version of the full InChI (using the SHA-256 algorithm).
  ///
  /// Can be used on: http://schema.org/MolecularEntity
  ///
  static const inChIKey = IriTerm.prevalidated('http://schema.org/inChIKey');

  /// IRI for schemahttp:inCodeSet [Expects: http://schema.org/CategoryCodeSet, http://schema.org/URL]
  ///
  /// A {[CategoryCodeSet]} that contains this category code.
  ///
  /// Can be used on: http://schema.org/CategoryCode
  ///
  static const inCodeSet = IriTerm.prevalidated('http://schema.org/inCodeSet');

  /// IRI for schemahttp:inPlaylist [Expects: http://schema.org/MusicPlaylist]
  ///
  /// The playlist to which this recording belongs.
  ///
  /// Can be used on: http://schema.org/MusicRecording
  ///
  static const inPlaylist = IriTerm.prevalidated(
    'http://schema.org/inPlaylist',
  );

  /// IRI for schemahttp:inProductGroupWithID [Expects: http://schema.org/Text]
  ///
  /// Indicates the {[productGroupID]} for a {[ProductGroup]} that this product {[isVariantOf]}.
  ///
  /// Can be used on: http://schema.org/Product
  ///
  static const inProductGroupWithID = IriTerm.prevalidated(
    'http://schema.org/inProductGroupWithID',
  );

  /// IRI for schemahttp:inStoreReturnsOffered [Expects: http://schema.org/Boolean]
  ///
  /// Are in-store returns offered? (For more advanced return methods use the {[returnMethod]} property.)
  ///
  /// Can be used on: http://schema.org/MerchantReturnPolicy
  ///
  static const inStoreReturnsOffered = IriTerm.prevalidated(
    'http://schema.org/inStoreReturnsOffered',
  );

  /// IRI for schemahttp:inSupportOf [Expects: http://schema.org/Text]
  ///
  /// Qualification, candidature, degree, application that Thesis supports.
  ///
  /// Can be used on: http://schema.org/Thesis
  ///
  static const inSupportOf = IriTerm.prevalidated(
    'http://schema.org/inSupportOf',
  );

  /// IRI for schemahttp:incentiveAmount [Expects: http://schema.org/LoanOrCredit, http://schema.org/QuantitativeValue, http://schema.org/UnitPriceSpecification]
  ///
  /// Describes the amount that can be redeemed from this incentive.
  ///
  /// <p>{[QuantitativeValue]}: Use this for incentives based on price (either raw amount or percentage-based). For a raw amount example, "You can claim $2,500 - $7,500 from the total cost of installation" would be represented as the following:</p>
  /// {
  /// "@type": "QuantitativeValue",
  /// ‚ÄúminValue‚Äù: 2500,
  /// ‚ÄúmaxValue‚Äù: 7500,
  /// "unitCode": "USD"
  /// }
  /// <p>{[QuantitivateValue]} can also be used for percentage amounts. In such cases, value is used to represent the incentive‚Äôs percentage, while maxValue represents a limit (if one exists) to that incentive. The unitCode should be 'P1' and the unitText should be '%', while valueReference should be used for holding the currency type. For example, "You can claim up to 30% of the total cost of installation, up to a maximum of $7,500" would be:</p>
  /// {
  /// "@type": "QuantitativeValue",
  /// "value": 30,
  /// "unitCode": "P1",
  /// "unitText": "%",
  /// ‚ÄúmaxValue‚Äù: 7500,
  /// ‚ÄúvalueReference‚Äù: ‚ÄúUSD‚Äù
  /// }
  /// <p>{[UnitPriceSpecification]}: Use this for incentives that are based on amounts rather than price. For example, a net metering rebate that pays $10/kWh, up to $1,000:</p>
  /// {
  /// "@type": "UnitPriceSpecification",
  /// "price": 10,
  /// "priceCurrency": "USD",
  /// "referenceQuantity": 1,
  /// "unitCode": "DO3",
  /// "unitText": "kw/h",
  /// "maxPrice": 1000,
  /// "description": "$10 / kwh up to $1000"
  /// }
  /// <p>{[LoanOrCredit]}: Use for incentives that are loan based. For example, a loan of $4,000 - $50,000 with a repayment term of 10 years, interest free would look like:</p>
  /// {
  /// "@type": "LoanOrCredit",
  /// "loanTerm": {
  /// "@type":"QuantitativeValue",
  /// "value":"10",
  /// "unitCode": "ANN"
  /// },
  /// "amount":[
  /// {
  /// "@type": "QuantitativeValue",
  /// "Name":"fixed interest rate",
  /// "value":"0",
  /// },
  /// ],
  /// "amount":[
  /// {
  /// "@type": "MonetaryAmount",
  /// "Name":"min loan amount",
  /// "value":"4000",
  /// "currency":"CAD"
  /// },
  /// {
  /// "@type": "MonetaryAmount",
  /// "Name":"max loan amount",
  /// "value":"50000",
  /// "currency":"CAD"
  /// }
  /// ],
  /// }
  ///
  /// In summary: <ul><li>Use {[QuantitativeValue]} for absolute/percentage-based incentives applied on the price of a good/service.</li>
  /// <li>Use {[UnitPriceSpecification]} for incentives based on a per-unit basis (e.g. net metering).</li>
  /// <li>Use {[LoanOrCredit]} for loans/credits.</li>
  /// </ul>.
  ///
  /// Can be used on: http://schema.org/FinancialIncentive
  ///
  static const incentiveAmount = IriTerm.prevalidated(
    'http://schema.org/incentiveAmount',
  );

  /// IRI for schemahttp:incentiveStatus [Expects: http://schema.org/IncentiveStatus]
  ///
  /// The status of the incentive (active, on hold, retired, etc.).
  ///
  /// Can be used on: http://schema.org/FinancialIncentive
  ///
  static const incentiveStatus = IriTerm.prevalidated(
    'http://schema.org/incentiveStatus',
  );

  /// IRI for schemahttp:incentiveType [Expects: http://schema.org/IncentiveType]
  ///
  /// The type of incentive offered (tax credit/rebate, tax deduction, tax waiver, subsidies, etc.).
  ///
  /// Can be used on: http://schema.org/FinancialIncentive
  ///
  static const incentiveType = IriTerm.prevalidated(
    'http://schema.org/incentiveType',
  );

  /// IRI for schemahttp:incentives [Expects: http://schema.org/Text]
  ///
  /// Description of bonus and commission compensation aspects of the job.
  ///
  /// Can be used on: http://schema.org/JobPosting
  ///
  static const incentives = IriTerm.prevalidated(
    'http://schema.org/incentives',
  );

  /// IRI for schemahttp:incentivizedItem [Expects: http://schema.org/DefinedTerm, http://schema.org/Product]
  ///
  /// The type or specific product(s) and/or service(s) being incentivized.
  /// <p>DefinedTermSets are used for product and service categories such as the United Nations Standard Products and Services Code:</p>
  /// {
  /// "@type": "DefinedTerm",
  /// "inDefinedTermSet": "https://www.unspsc.org/",
  /// "termCode": "261315XX",
  /// "name": "Photovoltaic module"
  /// }
  ///
  /// <p>For a specific product or service, use the Product type:</p>
  /// {
  /// "@type": "Product",
  /// "name": "Kenmore White 17" Microwave",
  /// }
  /// For multiple different incentivized items, use multiple {[DefinedTerm]} or {[Product]}.
  ///
  /// Can be used on: http://schema.org/FinancialIncentive
  ///
  static const incentivizedItem = IriTerm.prevalidated(
    'http://schema.org/incentivizedItem',
  );

  /// IRI for schemahttp:includedComposition [Expects: http://schema.org/MusicComposition]
  ///
  /// Smaller compositions included in this work (e.g. a movement in a symphony).
  ///
  /// Can be used on: http://schema.org/MusicComposition
  ///
  static const includedComposition = IriTerm.prevalidated(
    'http://schema.org/includedComposition',
  );

  /// IRI for schemahttp:includedDataCatalog [Expects: http://schema.org/DataCatalog]
  ///
  /// A data catalog which contains this dataset (this property was previously 'catalog', preferred name is now 'includedInDataCatalog').
  ///
  /// Can be used on: http://schema.org/Dataset
  ///
  static const includedDataCatalog = IriTerm.prevalidated(
    'http://schema.org/includedDataCatalog',
  );

  /// IRI for schemahttp:includedInHealthInsurancePlan [Expects: http://schema.org/HealthInsurancePlan]
  ///
  /// The insurance plans that cover this drug.
  ///
  /// Can be used on: http://schema.org/Drug
  ///
  static const includedInHealthInsurancePlan = IriTerm.prevalidated(
    'http://schema.org/includedInHealthInsurancePlan',
  );

  /// IRI for schemahttp:includedRiskFactor [Expects: http://schema.org/MedicalRiskFactor]
  ///
  /// A modifiable or non-modifiable risk factor included in the calculation, e.g. age, coexisting condition.
  ///
  /// Can be used on: http://schema.org/MedicalRiskEstimator
  ///
  static const includedRiskFactor = IriTerm.prevalidated(
    'http://schema.org/includedRiskFactor',
  );

  /// IRI for schemahttp:includesAttraction [Expects: http://schema.org/TouristAttraction]
  ///
  /// Attraction located at destination.
  ///
  /// Can be used on: http://schema.org/TouristDestination
  ///
  static const includesAttraction = IriTerm.prevalidated(
    'http://schema.org/includesAttraction',
  );

  /// IRI for schemahttp:includesHealthPlanFormulary [Expects: http://schema.org/HealthPlanFormulary]
  ///
  /// Formularies covered by this plan.
  ///
  /// Can be used on: http://schema.org/HealthInsurancePlan
  ///
  static const includesHealthPlanFormulary = IriTerm.prevalidated(
    'http://schema.org/includesHealthPlanFormulary',
  );

  /// IRI for schemahttp:includesHealthPlanNetwork [Expects: http://schema.org/HealthPlanNetwork]
  ///
  /// Networks covered by this plan.
  ///
  /// Can be used on: http://schema.org/HealthInsurancePlan
  ///
  static const includesHealthPlanNetwork = IriTerm.prevalidated(
    'http://schema.org/includesHealthPlanNetwork',
  );

  /// IRI for schemahttp:includesObject [Expects: http://schema.org/TypeAndQuantityNode]
  ///
  /// This links to a node or nodes indicating the exact quantity of the products included in  an {[Offer]} or {[ProductCollection]}.
  ///
  /// Can be used on: http://schema.org/Demand, http://schema.org/Offer, http://schema.org/ProductCollection
  ///
  static const includesObject = IriTerm.prevalidated(
    'http://schema.org/includesObject',
  );

  /// IRI for schemahttp:incomeLimit [Expects: http://schema.org/MonetaryAmount, http://schema.org/Text]
  ///
  /// Optional. Income limit for which the incentive is applicable for.
  ///
  /// <p>If MonetaryAmount is specified, this should be based on annualized income (e.g. if an incentive is limited to those making <$114,000 annually):</p>
  /// {
  /// "@type": "MonetaryAmount",
  /// "maxValue": 114000,
  /// "currency": "USD",
  /// }
  ///
  /// Use Text for incentives that are limited based on other criteria, for example if an incentive is only available to recipients making 120% of the median poverty income in their area.
  ///
  /// Can be used on: http://schema.org/FinancialIncentive
  ///
  static const incomeLimit = IriTerm.prevalidated(
    'http://schema.org/incomeLimit',
  );

  /// IRI for schemahttp:increasesRiskOf [Expects: http://schema.org/MedicalEntity]
  ///
  /// The condition, complication, etc. influenced by this factor.
  ///
  /// Can be used on: http://schema.org/MedicalRiskFactor
  ///
  static const increasesRiskOf = IriTerm.prevalidated(
    'http://schema.org/increasesRiskOf',
  );

  /// IRI for schemahttp:industry [Expects: http://schema.org/DefinedTerm, http://schema.org/Text]
  ///
  /// The industry associated with the job position.
  ///
  /// Can be used on: http://schema.org/JobPosting
  ///
  static const industry = IriTerm.prevalidated('http://schema.org/industry');

  /// IRI for schemahttp:ineligibleRegion [Expects: http://schema.org/GeoShape, http://schema.org/Place, http://schema.org/Text]
  ///
  /// The ISO 3166-1 (ISO 3166-1 alpha-2) or ISO 3166-2 code, the place, or the GeoShape for the geo-political region(s) for which the offer or delivery charge specification is not valid, e.g. a region where the transaction is not allowed.\n\nSee also {[eligibleRegion]}.
  ///
  ///
  /// Can be used on: http://schema.org/ActionAccessSpecification, http://schema.org/DeliveryChargeSpecification, http://schema.org/Demand, http://schema.org/MediaObject, http://schema.org/Offer
  ///
  static const ineligibleRegion = IriTerm.prevalidated(
    'http://schema.org/ineligibleRegion',
  );

  /// IRI for schemahttp:infectiousAgent [Expects: http://schema.org/Text]
  ///
  /// The actual infectious agent, such as a specific bacterium.
  ///
  /// Can be used on: http://schema.org/InfectiousDisease
  ///
  static const infectiousAgent = IriTerm.prevalidated(
    'http://schema.org/infectiousAgent',
  );

  /// IRI for schemahttp:infectiousAgentClass [Expects: http://schema.org/InfectiousAgentClass]
  ///
  /// The class of infectious agent (bacteria, prion, etc.) that causes the disease.
  ///
  /// Can be used on: http://schema.org/InfectiousDisease
  ///
  static const infectiousAgentClass = IriTerm.prevalidated(
    'http://schema.org/infectiousAgentClass',
  );

  /// IRI for schemahttp:ingredients [Expects: http://schema.org/Text]
  ///
  /// A single ingredient used in the recipe, e.g. sugar, flour or garlic.
  ///
  /// Can be used on: http://schema.org/Recipe
  ///
  static const ingredients = IriTerm.prevalidated(
    'http://schema.org/ingredients',
  );

  /// IRI for schemahttp:inker [Expects: http://schema.org/Person]
  ///
  /// The individual who traces over the pencil drawings in ink after pencils are complete.
  ///
  /// Can be used on: http://schema.org/ComicIssue, http://schema.org/ComicStory, http://schema.org/VisualArtwork
  ///
  static const inker = IriTerm.prevalidated('http://schema.org/inker');

  /// IRI for schemahttp:insertion [Expects: http://schema.org/AnatomicalStructure]
  ///
  /// The place of attachment of a muscle, or what the muscle moves.
  ///
  /// Can be used on: http://schema.org/Muscle
  ///
  static const insertion = IriTerm.prevalidated('http://schema.org/insertion');

  /// IRI for schemahttp:installUrl [Expects: http://schema.org/URL]
  ///
  /// URL at which the app may be installed, if different from the URL of the item.
  ///
  /// Can be used on: http://schema.org/SoftwareApplication
  ///
  static const installUrl = IriTerm.prevalidated(
    'http://schema.org/installUrl',
  );

  /// IRI for schemahttp:instructor [Expects: http://schema.org/Person]
  ///
  /// A person assigned to instruct or provide instructional assistance for the {[CourseInstance]}.
  ///
  /// Can be used on: http://schema.org/CourseInstance
  ///
  static const instructor = IriTerm.prevalidated(
    'http://schema.org/instructor',
  );

  /// IRI for schemahttp:intensity [Expects: http://schema.org/QuantitativeValue, http://schema.org/Text]
  ///
  /// Quantitative measure gauging the degree of force involved in the exercise, for example, heartbeats per minute. May include the velocity of the movement.
  ///
  /// Can be used on: http://schema.org/ExercisePlan
  ///
  static const intensity = IriTerm.prevalidated('http://schema.org/intensity');

  /// IRI for schemahttp:interactingDrug [Expects: http://schema.org/Drug]
  ///
  /// Another drug that is known to interact with this drug in a way that impacts the effect of this drug or causes a risk to the patient. Note: disease interactions are typically captured as contraindications.
  ///
  /// Can be used on: http://schema.org/Drug
  ///
  static const interactingDrug = IriTerm.prevalidated(
    'http://schema.org/interactingDrug',
  );

  /// IRI for schemahttp:interactionCount
  ///
  /// This property is deprecated, alongside the UserInteraction types on which it depended.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const interactionCount = IriTerm.prevalidated(
    'http://schema.org/interactionCount',
  );

  /// IRI for schemahttp:interactionService [Expects: http://schema.org/SoftwareApplication, http://schema.org/WebSite]
  ///
  /// The WebSite or SoftwareApplication where the interactions took place.
  ///
  /// Can be used on: http://schema.org/InteractionCounter
  ///
  static const interactionService = IriTerm.prevalidated(
    'http://schema.org/interactionService',
  );

  /// IRI for schemahttp:interactionType [Expects: http://schema.org/Action]
  ///
  /// The Action representing the type of interaction. For up votes, +1s, etc. use {[LikeAction]}. For down votes use {[DislikeAction]}. Otherwise, use the most specific Action.
  ///
  /// Can be used on: http://schema.org/InteractionCounter
  ///
  static const interactionType = IriTerm.prevalidated(
    'http://schema.org/interactionType',
  );

  /// IRI for schemahttp:interactivityType [Expects: http://schema.org/Text]
  ///
  /// The predominant mode of learning supported by the learning resource. Acceptable values are 'active', 'expositive', or 'mixed'.
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const interactivityType = IriTerm.prevalidated(
    'http://schema.org/interactivityType',
  );

  /// IRI for schemahttp:interestRate [Expects: http://schema.org/Number, http://schema.org/QuantitativeValue]
  ///
  /// The interest rate, charged or paid, applicable to the financial product. Note: This is different from the calculated annualPercentageRate.
  ///
  /// Can be used on: http://schema.org/FinancialProduct
  ///
  static const interestRate = IriTerm.prevalidated(
    'http://schema.org/interestRate',
  );

  /// IRI for schemahttp:interpretedAsClaim [Expects: http://schema.org/Claim]
  ///
  /// Used to indicate a specific claim contained, implied, translated or refined from the content of a {[MediaObject]} or other {[CreativeWork]}. The interpreting party can be indicated using {[claimInterpreter]}.
  ///
  /// Can be used on: http://schema.org/CreativeWork, http://schema.org/MediaObject
  ///
  static const interpretedAsClaim = IriTerm.prevalidated(
    'http://schema.org/interpretedAsClaim',
  );

  /// IRI for schemahttp:inventoryLevel [Expects: http://schema.org/QuantitativeValue]
  ///
  /// The current approximate inventory level for the item or items.
  ///
  /// Can be used on: http://schema.org/Demand, http://schema.org/Offer, http://schema.org/SomeProducts
  ///
  static const inventoryLevel = IriTerm.prevalidated(
    'http://schema.org/inventoryLevel',
  );

  /// IRI for schemahttp:inverseOf [Expects: http://schema.org/Property]
  ///
  /// Relates a property to a property that is its inverse. Inverse properties relate the same pairs of items to each other, but in reversed direction. For example, the 'alumni' and 'alumniOf' properties are inverseOf each other. Some properties don't have explicit inverses; in these situations RDFa and JSON-LD syntax for reverse properties can be used.
  ///
  /// Can be used on: http://schema.org/Property
  ///
  static const inverseOf = IriTerm.prevalidated('http://schema.org/inverseOf');

  /// IRI for schemahttp:isAcceptingNewPatients [Expects: http://schema.org/Boolean]
  ///
  /// Whether the provider is accepting new patients.
  ///
  /// Can be used on: http://schema.org/MedicalOrganization
  ///
  static const isAcceptingNewPatients = IriTerm.prevalidated(
    'http://schema.org/isAcceptingNewPatients',
  );

  /// IRI for schemahttp:isAccessoryOrSparePartFor [Expects: http://schema.org/Product]
  ///
  /// A pointer to another product (or multiple products) for which this product is an accessory or spare part.
  ///
  /// Can be used on: http://schema.org/Product
  ///
  static const isAccessoryOrSparePartFor = IriTerm.prevalidated(
    'http://schema.org/isAccessoryOrSparePartFor',
  );

  /// IRI for schemahttp:isAvailableGenerically [Expects: http://schema.org/Boolean]
  ///
  /// True if the drug is available in a generic form (regardless of name).
  ///
  /// Can be used on: http://schema.org/Drug
  ///
  static const isAvailableGenerically = IriTerm.prevalidated(
    'http://schema.org/isAvailableGenerically',
  );

  /// IRI for schemahttp:isBasedOnUrl [Expects: http://schema.org/CreativeWork, http://schema.org/Product, http://schema.org/URL]
  ///
  /// A resource that was used in the creation of this resource. This term can be repeated for multiple sources. For example, http://example.com/great-multiplication-intro.html.
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const isBasedOnUrl = IriTerm.prevalidated(
    'http://schema.org/isBasedOnUrl',
  );

  /// IRI for schemahttp:isConsumableFor [Expects: http://schema.org/Product]
  ///
  /// A pointer to another product (or multiple products) for which this product is a consumable.
  ///
  /// Can be used on: http://schema.org/Product
  ///
  static const isConsumableFor = IriTerm.prevalidated(
    'http://schema.org/isConsumableFor',
  );

  /// IRI for schemahttp:isFamilyFriendly [Expects: http://schema.org/Boolean]
  ///
  /// Indicates whether this content is family friendly.
  ///
  /// Can be used on: http://schema.org/CreativeWork, http://schema.org/Offer, http://schema.org/Product
  ///
  static const isFamilyFriendly = IriTerm.prevalidated(
    'http://schema.org/isFamilyFriendly',
  );

  /// IRI for schemahttp:isGift [Expects: http://schema.org/Boolean]
  ///
  /// Indicates whether the offer was accepted as a gift for someone other than the buyer.
  ///
  /// Can be used on: http://schema.org/Order
  ///
  static const isGift = IriTerm.prevalidated('http://schema.org/isGift');

  /// IRI for schemahttp:isInvolvedInBiologicalProcess [Expects: http://schema.org/DefinedTerm, http://schema.org/PropertyValue, http://schema.org/URL]
  ///
  /// Biological process this BioChemEntity is involved in; please use PropertyValue if you want to include any evidence.
  ///
  /// Can be used on: http://schema.org/BioChemEntity
  ///
  static const isInvolvedInBiologicalProcess = IriTerm.prevalidated(
    'http://schema.org/isInvolvedInBiologicalProcess',
  );

  /// IRI for schemahttp:isLiveBroadcast [Expects: http://schema.org/Boolean]
  ///
  /// True if the broadcast is of a live event.
  ///
  /// Can be used on: http://schema.org/BroadcastEvent
  ///
  static const isLiveBroadcast = IriTerm.prevalidated(
    'http://schema.org/isLiveBroadcast',
  );

  /// IRI for schemahttp:isLocatedInSubcellularLocation [Expects: http://schema.org/DefinedTerm, http://schema.org/PropertyValue, http://schema.org/URL]
  ///
  /// Subcellular location where this BioChemEntity is located; please use PropertyValue if you want to include any evidence.
  ///
  /// Can be used on: http://schema.org/BioChemEntity
  ///
  static const isLocatedInSubcellularLocation = IriTerm.prevalidated(
    'http://schema.org/isLocatedInSubcellularLocation',
  );

  /// IRI for schemahttp:isPlanForApartment [Expects: http://schema.org/Accommodation]
  ///
  /// Indicates some accommodation that this floor plan describes.
  ///
  /// Can be used on: http://schema.org/FloorPlan
  ///
  static const isPlanForApartment = IriTerm.prevalidated(
    'http://schema.org/isPlanForApartment',
  );

  /// IRI for schemahttp:isProprietary [Expects: http://schema.org/Boolean]
  ///
  /// True if this item's name is a proprietary/brand name (vs. generic name).
  ///
  /// Can be used on: http://schema.org/DietarySupplement, http://schema.org/Drug
  ///
  static const isProprietary = IriTerm.prevalidated(
    'http://schema.org/isProprietary',
  );

  /// IRI for schemahttp:isRelatedTo [Expects: http://schema.org/Product, http://schema.org/Service]
  ///
  /// A pointer to another, somehow related product (or multiple products).
  ///
  /// Can be used on: http://schema.org/Product, http://schema.org/Service
  ///
  static const isRelatedTo = IriTerm.prevalidated(
    'http://schema.org/isRelatedTo',
  );

  /// IRI for schemahttp:isResizable [Expects: http://schema.org/Boolean]
  ///
  /// Whether the 3DModel allows resizing. For example, room layout applications often do not allow 3DModel elements to be resized to reflect reality.
  ///
  /// Can be used on: http://schema.org/3DModel
  ///
  static const isResizable = IriTerm.prevalidated(
    'http://schema.org/isResizable',
  );

  /// IRI for schemahttp:isSimilarTo [Expects: http://schema.org/Product, http://schema.org/Service]
  ///
  /// A pointer to another, functionally similar product (or multiple products).
  ///
  /// Can be used on: http://schema.org/Product, http://schema.org/Service
  ///
  static const isSimilarTo = IriTerm.prevalidated(
    'http://schema.org/isSimilarTo',
  );

  /// IRI for schemahttp:isUnlabelledFallback [Expects: http://schema.org/Boolean]
  ///
  /// This can be marked 'true' to indicate that some published {[DeliveryTimeSettings]} or {[ShippingRateSettings]} are intended to apply to all {[OfferShippingDetails]} published by the same merchant, when referenced by a {[shippingSettingsLink]} in those settings. It is not meaningful to use a 'true' value for this property alongside a transitTimeLabel (for {[DeliveryTimeSettings]}) or shippingLabel (for {[ShippingRateSettings]}), since this property is for use with unlabelled settings.
  ///
  /// Can be used on: http://schema.org/DeliveryTimeSettings, http://schema.org/ShippingRateSettings
  ///
  static const isUnlabelledFallback = IriTerm.prevalidated(
    'http://schema.org/isUnlabelledFallback',
  );

  /// IRI for schemahttp:isbn [Expects: http://schema.org/Text]
  ///
  /// The ISBN of the book.
  ///
  /// Can be used on: http://schema.org/Book
  ///
  static const isbn = IriTerm.prevalidated('http://schema.org/isbn');

  /// IRI for schemahttp:isicV4 [Expects: http://schema.org/Text]
  ///
  /// The International Standard of Industrial Classification of All Economic Activities (ISIC), Revision 4 code for a particular organization, business person, or place.
  ///
  /// Can be used on: http://schema.org/Organization, http://schema.org/Person, http://schema.org/Place
  ///
  static const isicV4 = IriTerm.prevalidated('http://schema.org/isicV4');

  /// IRI for schemahttp:iso6523Code [Expects: http://schema.org/Text]
  ///
  /// An organization identifier as defined in [ISO 6523(-1)](https://en.wikipedia.org/wiki/ISO/IEC_6523). The identifier should be in the `XXXX:YYYYYY:ZZZ` or `XXXX:YYYYYY`format. Where `XXXX` is a 4 digit _ICD_ (International Code Designator), `YYYYYY` is an _OID_ (Organization Identifier) with all formatting characters (dots, dashes, spaces) removed with a maximal length of 35 characters, and `ZZZ` is an optional OPI (Organization Part Identifier) with a maximum length of 35 characters. The various components (ICD, OID, OPI) are joined with a colon character (ASCII `0x3a`). Note that many existing organization identifiers defined as attributes like [leiCode](http://schema.org/leiCode) (`0199`), [duns](http://schema.org/duns) (`0060`) or [GLN](http://schema.org/globalLocationNumber) (`0088`) can be expressed using ISO-6523. If possible, ISO-6523 codes should be preferred to populating [vatID](http://schema.org/vatID) or [taxID](http://schema.org/taxID), as ISO identifiers are less ambiguous.
  ///
  /// Can be used on: http://schema.org/Organization
  ///
  static const iso6523Code = IriTerm.prevalidated(
    'http://schema.org/iso6523Code',
  );

  /// IRI for schemahttp:isrcCode [Expects: http://schema.org/Text]
  ///
  /// The International Standard Recording Code for the recording.
  ///
  /// Can be used on: http://schema.org/MusicRecording
  ///
  static const isrcCode = IriTerm.prevalidated('http://schema.org/isrcCode');

  /// IRI for schemahttp:issn [Expects: http://schema.org/Text]
  ///
  /// The International Standard Serial Number (ISSN) that identifies this serial publication. You can repeat this property to identify different formats of, or the linking ISSN (ISSN-L) for, this serial publication.
  ///
  /// Can be used on: http://schema.org/Blog, http://schema.org/CreativeWorkSeries, http://schema.org/Dataset, http://schema.org/WebSite
  ///
  static const issn = IriTerm.prevalidated('http://schema.org/issn');

  /// IRI for schemahttp:issueNumber [Expects: http://schema.org/Integer, http://schema.org/Text]
  ///
  /// Identifies the issue of publication; for example, "iii" or "2".
  ///
  /// Can be used on: http://schema.org/PublicationIssue
  ///
  static const issueNumber = IriTerm.prevalidated(
    'http://schema.org/issueNumber',
  );

  /// IRI for schemahttp:issuedBy [Expects: http://schema.org/Organization]
  ///
  /// The organization issuing the item, for example a {[Permit]}, {[Ticket]}, or {[Certification]}.
  ///
  /// Can be used on: http://schema.org/Certification, http://schema.org/Permit, http://schema.org/Ticket
  ///
  static const issuedBy = IriTerm.prevalidated('http://schema.org/issuedBy');

  /// IRI for schemahttp:issuedThrough [Expects: http://schema.org/Service]
  ///
  /// The service through which the permit was granted.
  ///
  /// Can be used on: http://schema.org/Permit
  ///
  static const issuedThrough = IriTerm.prevalidated(
    'http://schema.org/issuedThrough',
  );

  /// IRI for schemahttp:iswcCode [Expects: http://schema.org/Text]
  ///
  /// The International Standard Musical Work Code for the composition.
  ///
  /// Can be used on: http://schema.org/MusicComposition
  ///
  static const iswcCode = IriTerm.prevalidated('http://schema.org/iswcCode');

  /// IRI for schemahttp:item [Expects: http://schema.org/Thing]
  ///
  /// An entity represented by an entry in a list or data feed (e.g. an 'artist' in a list of 'artists').
  ///
  /// Can be used on: http://schema.org/DataFeedItem, http://schema.org/ListItem
  ///
  static const item = IriTerm.prevalidated('http://schema.org/item');

  /// IRI for schemahttp:itemCondition [Expects: http://schema.org/OfferItemCondition]
  ///
  /// A predefined value from OfferItemCondition specifying the condition of the product or service, or the products or services included in the offer. Also used for product return policies to specify the condition of products accepted for returns.
  ///
  /// Can be used on: http://schema.org/Demand, http://schema.org/MerchantReturnPolicy, http://schema.org/Offer, http://schema.org/Product
  ///
  static const itemCondition = IriTerm.prevalidated(
    'http://schema.org/itemCondition',
  );

  /// IRI for schemahttp:itemDefectReturnFees [Expects: http://schema.org/ReturnFeesEnumeration]
  ///
  /// The type of return fees for returns of defect products.
  ///
  /// Can be used on: http://schema.org/MerchantReturnPolicy
  ///
  static const itemDefectReturnFees = IriTerm.prevalidated(
    'http://schema.org/itemDefectReturnFees',
  );

  /// IRI for schemahttp:itemDefectReturnLabelSource [Expects: http://schema.org/ReturnLabelSourceEnumeration]
  ///
  /// The method (from an enumeration) by which the customer obtains a return shipping label for a defect product.
  ///
  /// Can be used on: http://schema.org/MerchantReturnPolicy
  ///
  static const itemDefectReturnLabelSource = IriTerm.prevalidated(
    'http://schema.org/itemDefectReturnLabelSource',
  );

  /// IRI for schemahttp:itemDefectReturnShippingFeesAmount [Expects: http://schema.org/MonetaryAmount]
  ///
  /// Amount of shipping costs for defect product returns. Applicable when property {[itemDefectReturnFees]} equals {[ReturnShippingFees]}.
  ///
  /// Can be used on: http://schema.org/MerchantReturnPolicy
  ///
  static const itemDefectReturnShippingFeesAmount = IriTerm.prevalidated(
    'http://schema.org/itemDefectReturnShippingFeesAmount',
  );

  /// IRI for schemahttp:itemListElement [Expects: http://schema.org/ListItem, http://schema.org/Text, http://schema.org/Thing]
  ///
  /// For itemListElement values, you can use simple strings (e.g. "Peter", "Paul", "Mary"), existing entities, or use ListItem.\n\nText values are best if the elements in the list are plain strings. Existing entities are best for a simple, unordered list of existing things in your data. ListItem is used with ordered lists when you want to provide additional context about the element in that list or when the same item might be in different places in different lists.\n\nNote: The order of elements in your mark-up is not sufficient for indicating the order or elements.  Use ListItem with a 'position' property in such cases.
  ///
  /// Can be used on: http://schema.org/ItemList
  ///
  static const itemListElement = IriTerm.prevalidated(
    'http://schema.org/itemListElement',
  );

  /// IRI for schemahttp:itemListOrder [Expects: http://schema.org/ItemListOrderType, http://schema.org/Text]
  ///
  /// Type of ordering (e.g. Ascending, Descending, Unordered).
  ///
  /// Can be used on: http://schema.org/ItemList
  ///
  static const itemListOrder = IriTerm.prevalidated(
    'http://schema.org/itemListOrder',
  );

  /// IRI for schemahttp:itemLocation [Expects: http://schema.org/Place, http://schema.org/PostalAddress, http://schema.org/Text]
  ///
  /// Current location of the item.
  ///
  /// Can be used on: http://schema.org/ArchiveComponent
  ///
  static const itemLocation = IriTerm.prevalidated(
    'http://schema.org/itemLocation',
  );

  /// IRI for schemahttp:itemReviewed [Expects: http://schema.org/Thing]
  ///
  /// The item that is being reviewed/rated.
  ///
  /// Can be used on: http://schema.org/AggregateRating, http://schema.org/Review
  ///
  static const itemReviewed = IriTerm.prevalidated(
    'http://schema.org/itemReviewed',
  );

  /// IRI for schemahttp:itemShipped [Expects: http://schema.org/Product]
  ///
  /// Item(s) being shipped.
  ///
  /// Can be used on: http://schema.org/ParcelDelivery
  ///
  static const itemShipped = IriTerm.prevalidated(
    'http://schema.org/itemShipped',
  );

  /// IRI for schemahttp:itinerary [Expects: http://schema.org/ItemList, http://schema.org/Place]
  ///
  /// Destination(s) ( {[Place]} ) that make up a trip. For a trip where destination order is important use {[ItemList]} to specify that order (see examples).
  ///
  /// Can be used on: http://schema.org/Trip
  ///
  static const itinerary = IriTerm.prevalidated('http://schema.org/itinerary');

  /// IRI for schemahttp:iupacName [Expects: http://schema.org/Text]
  ///
  /// Systematic method of naming chemical compounds as recommended by the International Union of Pure and Applied Chemistry (IUPAC).
  ///
  /// Can be used on: http://schema.org/MolecularEntity
  ///
  static const iupacName = IriTerm.prevalidated('http://schema.org/iupacName');

  /// IRI for schemahttp:jobImmediateStart [Expects: http://schema.org/Boolean]
  ///
  /// An indicator as to whether a position is available for an immediate start.
  ///
  /// Can be used on: http://schema.org/JobPosting
  ///
  static const jobImmediateStart = IriTerm.prevalidated(
    'http://schema.org/jobImmediateStart',
  );

  /// IRI for schemahttp:jobLocation [Expects: http://schema.org/Place]
  ///
  /// A (typically single) geographic location associated with the job position.
  ///
  /// Can be used on: http://schema.org/JobPosting
  ///
  static const jobLocation = IriTerm.prevalidated(
    'http://schema.org/jobLocation',
  );

  /// IRI for schemahttp:jobLocationType [Expects: http://schema.org/Text]
  ///
  /// A description of the job location (e.g. TELECOMMUTE for telecommute jobs).
  ///
  /// Can be used on: http://schema.org/JobPosting
  ///
  static const jobLocationType = IriTerm.prevalidated(
    'http://schema.org/jobLocationType',
  );

  /// IRI for schemahttp:jobStartDate [Expects: http://schema.org/Date, http://schema.org/Text]
  ///
  /// The date on which a successful applicant for this job would be expected to start work. Choose a specific date in the future or use the jobImmediateStart property to indicate the position is to be filled as soon as possible.
  ///
  /// Can be used on: http://schema.org/JobPosting
  ///
  static const jobStartDate = IriTerm.prevalidated(
    'http://schema.org/jobStartDate',
  );

  /// IRI for schemahttp:jobTitle [Expects: http://schema.org/DefinedTerm, http://schema.org/Text]
  ///
  /// The job title of the person (for example, Financial Manager).
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const jobTitle = IriTerm.prevalidated('http://schema.org/jobTitle');

  /// IRI for schemahttp:keywords [Expects: http://schema.org/DefinedTerm, http://schema.org/Text, http://schema.org/URL]
  ///
  /// Keywords or tags used to describe some item. Multiple textual entries in a keywords list are typically delimited by commas, or by repeating the property.
  ///
  /// Can be used on: http://schema.org/CreativeWork, http://schema.org/Event, http://schema.org/Organization, http://schema.org/Place, http://schema.org/Product
  ///
  static const keywords = IriTerm.prevalidated('http://schema.org/keywords');

  /// IRI for schemahttp:knownVehicleDamages [Expects: http://schema.org/Text]
  ///
  /// A textual description of known damages, both repaired and unrepaired.
  ///
  /// Can be used on: http://schema.org/Vehicle
  ///
  static const knownVehicleDamages = IriTerm.prevalidated(
    'http://schema.org/knownVehicleDamages',
  );

  /// IRI for schemahttp:knows [Expects: http://schema.org/Person]
  ///
  /// The most generic bi-directional social/work relation.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const knows = IriTerm.prevalidated('http://schema.org/knows');

  /// IRI for schemahttp:knowsAbout [Expects: http://schema.org/Text, http://schema.org/Thing, http://schema.org/URL]
  ///
  /// Of a {[Person]}, and less typically of an {[Organization]}, to indicate a topic that is known about - suggesting possible expertise but not implying it. We do not distinguish skill levels here, or relate this to educational content, events, objectives or {[JobPosting]} descriptions.
  ///
  /// Can be used on: http://schema.org/Organization, http://schema.org/Person
  ///
  static const knowsAbout = IriTerm.prevalidated(
    'http://schema.org/knowsAbout',
  );

  /// IRI for schemahttp:knowsLanguage [Expects: http://schema.org/Language, http://schema.org/Text]
  ///
  /// Of a {[Person]}, and less typically of an {[Organization]}, to indicate a known language. We do not distinguish skill levels or reading/writing/speaking/signing here. Use language codes from the [IETF BCP 47 standard](http://tools.ietf.org/html/bcp47).
  ///
  /// Can be used on: http://schema.org/Organization, http://schema.org/Person
  ///
  static const knowsLanguage = IriTerm.prevalidated(
    'http://schema.org/knowsLanguage',
  );

  /// IRI for schemahttp:labelDetails [Expects: http://schema.org/URL]
  ///
  /// Link to the drug's label details.
  ///
  /// Can be used on: http://schema.org/Drug
  ///
  static const labelDetails = IriTerm.prevalidated(
    'http://schema.org/labelDetails',
  );

  /// IRI for schemahttp:landlord [Expects: http://schema.org/Organization, http://schema.org/Person]
  ///
  /// A sub property of participant. The owner of the real estate property.
  ///
  /// Can be used on: http://schema.org/RentAction
  ///
  static const landlord = IriTerm.prevalidated('http://schema.org/landlord');

  /// IRI for schemahttp:language [Expects: http://schema.org/Language]
  ///
  /// A sub property of instrument. The language used on this action.
  ///
  /// Can be used on: http://schema.org/CommunicateAction, http://schema.org/WriteAction
  ///
  static const language = IriTerm.prevalidated('http://schema.org/language');

  /// IRI for schemahttp:lastReviewed [Expects: http://schema.org/Date]
  ///
  /// Date on which the content on this web page was last reviewed for accuracy and/or completeness.
  ///
  /// Can be used on: http://schema.org/WebPage
  ///
  static const lastReviewed = IriTerm.prevalidated(
    'http://schema.org/lastReviewed',
  );

  /// IRI for schemahttp:latitude [Expects: http://schema.org/Number, http://schema.org/Text]
  ///
  /// The latitude of a location. For example ```37.42242``` ([WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System)).
  ///
  /// Can be used on: http://schema.org/GeoCoordinates, http://schema.org/Place
  ///
  static const latitude = IriTerm.prevalidated('http://schema.org/latitude');

  /// IRI for schemahttp:layoutImage [Expects: http://schema.org/ImageObject, http://schema.org/URL]
  ///
  /// A schematic image showing the floorplan layout.
  ///
  /// Can be used on: http://schema.org/FloorPlan
  ///
  static const layoutImage = IriTerm.prevalidated(
    'http://schema.org/layoutImage',
  );

  /// IRI for schemahttp:learningResourceType [Expects: http://schema.org/DefinedTerm, http://schema.org/Text]
  ///
  /// The predominant type or kind characterizing the learning resource. For example, 'presentation', 'handout'.
  ///
  /// Can be used on: http://schema.org/CreativeWork, http://schema.org/LearningResource
  ///
  static const learningResourceType = IriTerm.prevalidated(
    'http://schema.org/learningResourceType',
  );

  /// IRI for schemahttp:leaseLength [Expects: http://schema.org/Duration, http://schema.org/QuantitativeValue]
  ///
  /// Length of the lease for some {[Accommodation]}, either particular to some {[Offer]} or in some cases intrinsic to the property.
  ///
  /// Can be used on: http://schema.org/Accommodation, http://schema.org/Offer, http://schema.org/RealEstateListing
  ///
  static const leaseLength = IriTerm.prevalidated(
    'http://schema.org/leaseLength',
  );

  /// IRI for schemahttp:legalName [Expects: http://schema.org/Text]
  ///
  /// The official name of the organization, e.g. the registered company name.
  ///
  /// Can be used on: http://schema.org/Organization
  ///
  static const legalName = IriTerm.prevalidated('http://schema.org/legalName');

  /// IRI for schemahttp:legalStatus [Expects: http://schema.org/DrugLegalStatus, http://schema.org/MedicalEnumeration, http://schema.org/Text]
  ///
  /// The drug or supplement's legal status, including any controlled substance schedules that apply.
  ///
  /// Can be used on: http://schema.org/DietarySupplement, http://schema.org/Drug, http://schema.org/MedicalEntity
  ///
  static const legalStatus = IriTerm.prevalidated(
    'http://schema.org/legalStatus',
  );

  /// IRI for schemahttp:legislationAmends [Expects: http://schema.org/Legislation]
  ///
  /// Another legislation that this legislation amends, introducing legal changes.
  ///
  /// Can be used on: http://schema.org/Legislation
  ///
  static const legislationAmends = IriTerm.prevalidated(
    'http://schema.org/legislationAmends',
  );

  /// IRI for schemahttp:legislationCommences [Expects: http://schema.org/Legislation]
  ///
  /// Another legislation that this one sets into force.
  ///
  /// Can be used on: http://schema.org/Legislation
  ///
  static const legislationCommences = IriTerm.prevalidated(
    'http://schema.org/legislationCommences',
  );

  /// IRI for schemahttp:legislationConsolidates [Expects: http://schema.org/Legislation]
  ///
  /// Indicates another legislation taken into account in this consolidated legislation (which is usually the product of an editorial process that revises the legislation). This property should be used multiple times to refer to both the original version or the previous consolidated version, and to the legislations making the change.
  ///
  /// Can be used on: http://schema.org/Legislation
  ///
  static const legislationConsolidates = IriTerm.prevalidated(
    'http://schema.org/legislationConsolidates',
  );

  /// IRI for schemahttp:legislationCorrects [Expects: http://schema.org/Legislation]
  ///
  /// Another legislation in which this one introduces textual changes, like correction of spelling mistakes, with no legal impact (for modifications that have legal impact, use <a href="/legislationAmends">legislationAmends</a>).
  ///
  /// Can be used on: http://schema.org/Legislation
  ///
  static const legislationCorrects = IriTerm.prevalidated(
    'http://schema.org/legislationCorrects',
  );

  /// IRI for schemahttp:legislationCountersignedBy [Expects: http://schema.org/Organization, http://schema.org/Person]
  ///
  /// The person or organization that countersigned the legislation. Depending on the legal context, a countersignature can indicate that the signed authority undertakes to assume responsibility for texts emanating from a person who is inviolable and irresponsible, (for example a King, Grand Duc or President), or that the authority is in charge of the implementation of the text.
  ///
  /// Can be used on: http://schema.org/Legislation
  ///
  static const legislationCountersignedBy = IriTerm.prevalidated(
    'http://schema.org/legislationCountersignedBy',
  );

  /// IRI for schemahttp:legislationDate [Expects: http://schema.org/Date]
  ///
  /// The date of adoption or signature of the legislation. This is the date at which the text is officially aknowledged to be a legislation, even though it might not even be published or in force.
  ///
  /// Can be used on: http://schema.org/Legislation
  ///
  static const legislationDate = IriTerm.prevalidated(
    'http://schema.org/legislationDate',
  );

  /// IRI for schemahttp:legislationDateOfApplicability [Expects: http://schema.org/Date]
  ///
  /// The date at which the Legislation becomes applicable. This can sometimes be distinct from the date of entry into force : a text may come in force today, and state it will become applicable in 3 months.
  ///
  /// Can be used on: http://schema.org/Legislation
  ///
  static const legislationDateOfApplicability = IriTerm.prevalidated(
    'http://schema.org/legislationDateOfApplicability',
  );

  /// IRI for schemahttp:legislationDateVersion [Expects: http://schema.org/Date]
  ///
  /// The point-in-time at which the provided description of the legislation is valid (e.g.: when looking at the law on the 2016-04-07 (= dateVersion), I get the consolidation of 2015-04-12 of the "National Insurance Contributions Act 2015")
  ///
  /// Can be used on: http://schema.org/Legislation
  ///
  static const legislationDateVersion = IriTerm.prevalidated(
    'http://schema.org/legislationDateVersion',
  );

  /// IRI for schemahttp:legislationEnsuresImplementationOf [Expects: http://schema.org/Legislation]
  ///
  /// Indicates that this Legislation ensures the implementation of another Legislation, for example by modifying national legislations so that they do not contradict to an EU regulation or decision. This implies a legal meaning. Transpositions of EU Directive should be captured with <a href="/legislationTransposes">legislationTransposes</a>.
  ///
  /// Can be used on: http://schema.org/Legislation
  ///
  static const legislationEnsuresImplementationOf = IriTerm.prevalidated(
    'http://schema.org/legislationEnsuresImplementationOf',
  );

  /// IRI for schemahttp:legislationIdentifier [Expects: http://schema.org/Text, http://schema.org/URL]
  ///
  /// An identifier for the legislation. This can be either a string-based identifier, like the CELEX at EU level or the NOR in France, or a web-based, URL/URI identifier, like an ELI (European Legislation Identifier) or an URN-Lex.
  ///
  /// Can be used on: http://schema.org/Legislation
  ///
  static const legislationIdentifier = IriTerm.prevalidated(
    'http://schema.org/legislationIdentifier',
  );

  /// IRI for schemahttp:legislationJurisdiction [Expects: http://schema.org/AdministrativeArea, http://schema.org/Text]
  ///
  /// The jurisdiction from which the legislation originates.
  ///
  /// Can be used on: http://schema.org/Legislation
  ///
  static const legislationJurisdiction = IriTerm.prevalidated(
    'http://schema.org/legislationJurisdiction',
  );

  /// IRI for schemahttp:legislationLegalForce [Expects: http://schema.org/LegalForceStatus]
  ///
  /// Whether the legislation is currently in force, not in force, or partially in force.
  ///
  /// Can be used on: http://schema.org/Legislation
  ///
  static const legislationLegalForce = IriTerm.prevalidated(
    'http://schema.org/legislationLegalForce',
  );

  /// IRI for schemahttp:legislationLegalValue [Expects: http://schema.org/LegalValueLevel]
  ///
  /// The legal value of this legislation file. The same legislation can be written in multiple files with different legal values. Typically a digitally signed PDF have a "stronger" legal value than the HTML file of the same act.
  ///
  /// Can be used on: http://schema.org/LegislationObject
  ///
  static const legislationLegalValue = IriTerm.prevalidated(
    'http://schema.org/legislationLegalValue',
  );

  /// IRI for schemahttp:legislationPassedBy [Expects: http://schema.org/Organization, http://schema.org/Person]
  ///
  /// The person or organization that originally passed or made the law: typically parliament (for primary legislation) or government (for secondary legislation). This indicates the "legal author" of the law, as opposed to its physical author.
  ///
  /// Can be used on: http://schema.org/Legislation
  ///
  static const legislationPassedBy = IriTerm.prevalidated(
    'http://schema.org/legislationPassedBy',
  );

  /// IRI for schemahttp:legislationRepeals [Expects: http://schema.org/Legislation]
  ///
  /// Another legislation that this legislation repeals (cancels, abrogates).
  ///
  /// Can be used on: http://schema.org/Legislation
  ///
  static const legislationRepeals = IriTerm.prevalidated(
    'http://schema.org/legislationRepeals',
  );

  /// IRI for schemahttp:legislationResponsible [Expects: http://schema.org/Organization, http://schema.org/Person]
  ///
  /// An individual or organization that has some kind of responsibility for the legislation. Typically the ministry who is/was in charge of elaborating the legislation, or the adressee for potential questions about the legislation once it is published.
  ///
  /// Can be used on: http://schema.org/Legislation
  ///
  static const legislationResponsible = IriTerm.prevalidated(
    'http://schema.org/legislationResponsible',
  );

  /// IRI for schemahttp:legislationTransposes [Expects: http://schema.org/Legislation]
  ///
  /// Indicates that this legislation (or part of legislation) fulfills the objectives set by another legislation, by passing appropriate implementation measures. Typically, some legislations of European Union's member states or regions transpose European Directives. This indicates a legally binding link between the 2 legislations.
  ///
  /// Can be used on: http://schema.org/Legislation
  ///
  static const legislationTransposes = IriTerm.prevalidated(
    'http://schema.org/legislationTransposes',
  );

  /// IRI for schemahttp:legislationType [Expects: http://schema.org/CategoryCode, http://schema.org/Text]
  ///
  /// The type of the legislation. Examples of values are "law", "act", "directive", "decree", "regulation", "statutory instrument", "loi organique", "r√®glement grand-ducal", etc., depending on the country.
  ///
  /// Can be used on: http://schema.org/Legislation
  ///
  static const legislationType = IriTerm.prevalidated(
    'http://schema.org/legislationType',
  );

  /// IRI for schemahttp:leiCode [Expects: http://schema.org/Text]
  ///
  /// An organization identifier that uniquely identifies a legal entity as defined in ISO 17442.
  ///
  /// Can be used on: http://schema.org/Organization
  ///
  static const leiCode = IriTerm.prevalidated('http://schema.org/leiCode');

  /// IRI for schemahttp:lender [Expects: http://schema.org/Organization, http://schema.org/Person]
  ///
  /// A sub property of participant. The person that lends the object being borrowed.
  ///
  /// Can be used on: http://schema.org/BorrowAction
  ///
  static const lender = IriTerm.prevalidated('http://schema.org/lender');

  /// IRI for schemahttp:lesser [Expects: http://schema.org/QualitativeValue]
  ///
  /// This ordering relation for qualitative values indicates that the subject is lesser than the object.
  ///
  /// Can be used on: http://schema.org/QualitativeValue
  ///
  static const lesser = IriTerm.prevalidated('http://schema.org/lesser');

  /// IRI for schemahttp:lesserOrEqual [Expects: http://schema.org/QualitativeValue]
  ///
  /// This ordering relation for qualitative values indicates that the subject is lesser than or equal to the object.
  ///
  /// Can be used on: http://schema.org/QualitativeValue
  ///
  static const lesserOrEqual = IriTerm.prevalidated(
    'http://schema.org/lesserOrEqual',
  );

  /// IRI for schemahttp:letterer [Expects: http://schema.org/Person]
  ///
  /// The individual who adds lettering, including speech balloons and sound effects, to artwork.
  ///
  /// Can be used on: http://schema.org/ComicIssue, http://schema.org/ComicStory, http://schema.org/VisualArtwork
  ///
  static const letterer = IriTerm.prevalidated('http://schema.org/letterer');

  /// IRI for schemahttp:license [Expects: http://schema.org/CreativeWork, http://schema.org/URL]
  ///
  /// A license document that applies to this content, typically indicated by URL.
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const license = IriTerm.prevalidated('http://schema.org/license');

  /// IRI for schemahttp:line [Expects: http://schema.org/Text]
  ///
  /// A line is a point-to-point path consisting of two or more points. A line is expressed as a series of two or more point objects separated by space.
  ///
  /// Can be used on: http://schema.org/GeoShape
  ///
  static const line = IriTerm.prevalidated('http://schema.org/line');

  /// IRI for schemahttp:linkRelationship [Expects: http://schema.org/Text]
  ///
  /// Indicates the relationship type of a Web link.
  ///
  /// Can be used on: http://schema.org/LinkRole
  ///
  static const linkRelationship = IriTerm.prevalidated(
    'http://schema.org/linkRelationship',
  );

  /// IRI for schemahttp:liveBlogUpdate [Expects: http://schema.org/BlogPosting]
  ///
  /// An update to the LiveBlog.
  ///
  /// Can be used on: http://schema.org/LiveBlogPosting
  ///
  static const liveBlogUpdate = IriTerm.prevalidated(
    'http://schema.org/liveBlogUpdate',
  );

  /// IRI for schemahttp:loanMortgageMandateAmount [Expects: http://schema.org/MonetaryAmount]
  ///
  /// Amount of mortgage mandate that can be converted into a proper mortgage at a later stage.
  ///
  /// Can be used on: http://schema.org/MortgageLoan
  ///
  static const loanMortgageMandateAmount = IriTerm.prevalidated(
    'http://schema.org/loanMortgageMandateAmount',
  );

  /// IRI for schemahttp:loanPaymentAmount [Expects: http://schema.org/MonetaryAmount]
  ///
  /// The amount of money to pay in a single payment.
  ///
  /// Can be used on: http://schema.org/RepaymentSpecification
  ///
  static const loanPaymentAmount = IriTerm.prevalidated(
    'http://schema.org/loanPaymentAmount',
  );

  /// IRI for schemahttp:loanPaymentFrequency [Expects: http://schema.org/Number]
  ///
  /// Frequency of payments due, i.e. number of months between payments. This is defined as a frequency, i.e. the reciprocal of a period of time.
  ///
  /// Can be used on: http://schema.org/RepaymentSpecification
  ///
  static const loanPaymentFrequency = IriTerm.prevalidated(
    'http://schema.org/loanPaymentFrequency',
  );

  /// IRI for schemahttp:loanRepaymentForm [Expects: http://schema.org/RepaymentSpecification]
  ///
  /// A form of paying back money previously borrowed from a lender. Repayment usually takes the form of periodic payments that normally include part principal plus interest in each payment.
  ///
  /// Can be used on: http://schema.org/LoanOrCredit
  ///
  static const loanRepaymentForm = IriTerm.prevalidated(
    'http://schema.org/loanRepaymentForm',
  );

  /// IRI for schemahttp:loanTerm [Expects: http://schema.org/QuantitativeValue]
  ///
  /// The duration of the loan or credit agreement.
  ///
  /// Can be used on: http://schema.org/LoanOrCredit
  ///
  static const loanTerm = IriTerm.prevalidated('http://schema.org/loanTerm');

  /// IRI for schemahttp:loanType [Expects: http://schema.org/Text, http://schema.org/URL]
  ///
  /// The type of a loan or credit.
  ///
  /// Can be used on: http://schema.org/LoanOrCredit
  ///
  static const loanType = IriTerm.prevalidated('http://schema.org/loanType');

  /// IRI for schemahttp:locationCreated [Expects: http://schema.org/Place]
  ///
  /// The location where the CreativeWork was created, which may not be the same as the location depicted in the CreativeWork.
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const locationCreated = IriTerm.prevalidated(
    'http://schema.org/locationCreated',
  );

  /// IRI for schemahttp:lodgingUnitDescription [Expects: http://schema.org/Text]
  ///
  /// A full description of the lodging unit.
  ///
  /// Can be used on: http://schema.org/LodgingReservation
  ///
  static const lodgingUnitDescription = IriTerm.prevalidated(
    'http://schema.org/lodgingUnitDescription',
  );

  /// IRI for schemahttp:lodgingUnitType [Expects: http://schema.org/QualitativeValue, http://schema.org/Text]
  ///
  /// Textual description of the unit type (including suite vs. room, size of bed, etc.).
  ///
  /// Can be used on: http://schema.org/LodgingReservation
  ///
  static const lodgingUnitType = IriTerm.prevalidated(
    'http://schema.org/lodgingUnitType',
  );

  /// IRI for schemahttp:logo [Expects: http://schema.org/ImageObject, http://schema.org/URL]
  ///
  /// An associated logo.
  ///
  /// Can be used on: http://schema.org/Brand, http://schema.org/Certification, http://schema.org/Organization, http://schema.org/Place, http://schema.org/Product, http://schema.org/Service
  ///
  static const logo = IriTerm.prevalidated('http://schema.org/logo');

  /// IRI for schemahttp:longitude [Expects: http://schema.org/Number, http://schema.org/Text]
  ///
  /// The longitude of a location. For example ```-122.08585``` ([WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System)).
  ///
  /// Can be used on: http://schema.org/GeoCoordinates, http://schema.org/Place
  ///
  static const longitude = IriTerm.prevalidated('http://schema.org/longitude');

  /// IRI for schemahttp:loser [Expects: http://schema.org/Person]
  ///
  /// A sub property of participant. The loser of the action.
  ///
  /// Can be used on: http://schema.org/WinAction
  ///
  static const loser = IriTerm.prevalidated('http://schema.org/loser');

  /// IRI for schemahttp:lowPrice [Expects: http://schema.org/Number, http://schema.org/Text]
  ///
  /// The lowest price of all offers available.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  ///
  /// Can be used on: http://schema.org/AggregateOffer
  ///
  static const lowPrice = IriTerm.prevalidated('http://schema.org/lowPrice');

  /// IRI for schemahttp:lyricist [Expects: http://schema.org/Person]
  ///
  /// The person who wrote the words.
  ///
  /// Can be used on: http://schema.org/MusicComposition
  ///
  static const lyricist = IriTerm.prevalidated('http://schema.org/lyricist');

  /// IRI for schemahttp:lyrics [Expects: http://schema.org/CreativeWork]
  ///
  /// The words in the song.
  ///
  /// Can be used on: http://schema.org/MusicComposition
  ///
  static const lyrics = IriTerm.prevalidated('http://schema.org/lyrics');

  /// IRI for schemahttp:maintainer [Expects: http://schema.org/Organization, http://schema.org/Person]
  ///
  /// A maintainer of a {[Dataset]}, software package ({[SoftwareApplication]}), or other {[Project]}. A maintainer is a {[Person]} or {[Organization]} that manages contributions to, and/or publication of, some (typically complex) artifact. It is common for distributions of software and data to be based on "upstream" sources. When {[maintainer]} is applied to a specific version of something e.g. a particular version or packaging of a {[Dataset]}, it is always  possible that the upstream source has a different maintainer. The {[isBasedOn]} property can be used to indicate such relationships between datasets to make the different maintenance roles clear. Similarly in the case of software, a package may have dedicated maintainers working on integration into software distributions such as Ubuntu, as well as upstream maintainers of the underlying work.
  ///
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const maintainer = IriTerm.prevalidated(
    'http://schema.org/maintainer',
  );

  /// IRI for schemahttp:manufacturer [Expects: http://schema.org/Organization]
  ///
  /// The manufacturer of the product.
  ///
  /// Can be used on: http://schema.org/Product
  ///
  static const manufacturer = IriTerm.prevalidated(
    'http://schema.org/manufacturer',
  );

  /// IRI for schemahttp:map [Expects: http://schema.org/URL]
  ///
  /// A URL to a map of the place.
  ///
  /// Can be used on: http://schema.org/Place
  ///
  static const map = IriTerm.prevalidated('http://schema.org/map');

  /// IRI for schemahttp:mapType [Expects: http://schema.org/MapCategoryType]
  ///
  /// Indicates the kind of Map, from the MapCategoryType Enumeration.
  ///
  /// Can be used on: http://schema.org/Map
  ///
  static const mapType = IriTerm.prevalidated('http://schema.org/mapType');

  /// IRI for schemahttp:maps [Expects: http://schema.org/URL]
  ///
  /// A URL to a map of the place.
  ///
  /// Can be used on: http://schema.org/Place
  ///
  static const maps = IriTerm.prevalidated('http://schema.org/maps');

  /// IRI for schemahttp:marginOfError [Expects: http://schema.org/QuantitativeValue]
  ///
  /// A {[marginOfError]} for an {[Observation]}.
  ///
  /// Can be used on: http://schema.org/Observation
  ///
  static const marginOfError = IriTerm.prevalidated(
    'http://schema.org/marginOfError',
  );

  /// IRI for schemahttp:masthead [Expects: http://schema.org/CreativeWork, http://schema.org/URL]
  ///
  /// For a {[NewsMediaOrganization]}, a link to the masthead page or a page listing top editorial management.
  ///
  /// Can be used on: http://schema.org/NewsMediaOrganization
  ///
  static const masthead = IriTerm.prevalidated('http://schema.org/masthead');

  /// IRI for schemahttp:materialExtent [Expects: http://schema.org/QuantitativeValue, http://schema.org/Text]
  ///
  /// The quantity of the materials being described or an expression of the physical space they occupy.
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const materialExtent = IriTerm.prevalidated(
    'http://schema.org/materialExtent',
  );

  /// IRI for schemahttp:mathExpression [Expects: http://schema.org/SolveMathAction, http://schema.org/Text]
  ///
  /// A mathematical expression (e.g. 'x^2-3x=0') that may be solved for a specific variable, simplified, or transformed. This can take many formats, e.g. LaTeX, Ascii-Math, or math as you would write with a keyboard.
  ///
  /// Can be used on: http://schema.org/MathSolver
  ///
  static const mathExpression = IriTerm.prevalidated(
    'http://schema.org/mathExpression',
  );

  /// IRI for schemahttp:maxPrice [Expects: http://schema.org/Number]
  ///
  /// The highest price if the price is a range.
  ///
  /// Can be used on: http://schema.org/PriceSpecification
  ///
  static const maxPrice = IriTerm.prevalidated('http://schema.org/maxPrice');

  /// IRI for schemahttp:maxValue [Expects: http://schema.org/Number]
  ///
  /// The upper value of some characteristic or property.
  ///
  /// Can be used on: http://schema.org/MonetaryAmount, http://schema.org/PropertyValue, http://schema.org/PropertyValueSpecification, http://schema.org/QuantitativeValue
  ///
  static const maxValue = IriTerm.prevalidated('http://schema.org/maxValue');

  /// IRI for schemahttp:maximumAttendeeCapacity [Expects: http://schema.org/Integer]
  ///
  /// The total number of individuals that may attend an event or venue.
  ///
  /// Can be used on: http://schema.org/Event, http://schema.org/Place
  ///
  static const maximumAttendeeCapacity = IriTerm.prevalidated(
    'http://schema.org/maximumAttendeeCapacity',
  );

  /// IRI for schemahttp:maximumEnrollment [Expects: http://schema.org/Integer]
  ///
  /// The maximum number of students who may be enrolled in the program.
  ///
  /// Can be used on: http://schema.org/EducationalOccupationalProgram
  ///
  static const maximumEnrollment = IriTerm.prevalidated(
    'http://schema.org/maximumEnrollment',
  );

  /// IRI for schemahttp:maximumIntake [Expects: http://schema.org/MaximumDoseSchedule]
  ///
  /// Recommended intake of this supplement for a given population as defined by a specific recommending authority.
  ///
  /// Can be used on: http://schema.org/DietarySupplement, http://schema.org/Drug, http://schema.org/DrugStrength, http://schema.org/Substance
  ///
  static const maximumIntake = IriTerm.prevalidated(
    'http://schema.org/maximumIntake',
  );

  /// IRI for schemahttp:maximumPhysicalAttendeeCapacity [Expects: http://schema.org/Integer]
  ///
  /// The maximum physical attendee capacity of an {[Event]} whose {[eventAttendanceMode]} is {[OfflineEventAttendanceMode]} (or the offline aspects, in the case of a {[MixedEventAttendanceMode]}).
  ///
  /// Can be used on: http://schema.org/Event
  ///
  static const maximumPhysicalAttendeeCapacity = IriTerm.prevalidated(
    'http://schema.org/maximumPhysicalAttendeeCapacity',
  );

  /// IRI for schemahttp:maximumVirtualAttendeeCapacity [Expects: http://schema.org/Integer]
  ///
  /// The maximum virtual attendee capacity of an {[Event]} whose {[eventAttendanceMode]} is {[OnlineEventAttendanceMode]} (or the online aspects, in the case of a {[MixedEventAttendanceMode]}).
  ///
  /// Can be used on: http://schema.org/Event
  ///
  static const maximumVirtualAttendeeCapacity = IriTerm.prevalidated(
    'http://schema.org/maximumVirtualAttendeeCapacity',
  );

  /// IRI for schemahttp:mealService [Expects: http://schema.org/Text]
  ///
  /// Description of the meals that will be provided or available for purchase.
  ///
  /// Can be used on: http://schema.org/Flight
  ///
  static const mealService = IriTerm.prevalidated(
    'http://schema.org/mealService',
  );

  /// IRI for schemahttp:measuredProperty [Expects: http://schema.org/Property]
  ///
  /// The measuredProperty of an {[Observation]}, typically via its {[StatisticalVariable]}. There are various kinds of applicable {[Property]}: a schema.org property, a property from other RDF-compatible systems, e.g. W3C RDF Data Cube, Data Commons, Wikidata, or schema.org extensions such as [GS1's](https://www.gs1.org/voc/?show=properties).
  ///
  /// Can be used on: http://schema.org/Observation, http://schema.org/StatisticalVariable
  ///
  static const measuredProperty = IriTerm.prevalidated(
    'http://schema.org/measuredProperty',
  );

  /// IRI for schemahttp:measurementDenominator [Expects: http://schema.org/StatisticalVariable]
  ///
  /// Identifies the denominator variable when an observation represents a ratio or percentage.
  ///
  /// Can be used on: http://schema.org/Observation, http://schema.org/StatisticalVariable
  ///
  static const measurementDenominator = IriTerm.prevalidated(
    'http://schema.org/measurementDenominator',
  );

  /// IRI for schemahttp:measurementMethod [Expects: http://schema.org/DefinedTerm, http://schema.org/MeasurementMethodEnum, http://schema.org/Text, http://schema.org/URL]
  ///
  /// A subproperty of {[measurementTechnique]} that can be used for specifying specific methods, in particular via {[MeasurementMethodEnum]}.
  ///
  /// Can be used on: http://schema.org/DataCatalog, http://schema.org/DataDownload, http://schema.org/Dataset, http://schema.org/Observation, http://schema.org/PropertyValue, http://schema.org/StatisticalVariable
  ///
  static const measurementMethod = IriTerm.prevalidated(
    'http://schema.org/measurementMethod',
  );

  /// IRI for schemahttp:measurementQualifier [Expects: http://schema.org/Enumeration]
  ///
  /// Provides additional qualification to an observation. For example, a GDP observation measures the Nominal value.
  ///
  /// Can be used on: http://schema.org/Observation, http://schema.org/StatisticalVariable
  ///
  static const measurementQualifier = IriTerm.prevalidated(
    'http://schema.org/measurementQualifier',
  );

  /// IRI for schemahttp:mechanismOfAction [Expects: http://schema.org/Text]
  ///
  /// The specific biochemical interaction through which this drug or supplement produces its pharmacological effect.
  ///
  /// Can be used on: http://schema.org/DietarySupplement, http://schema.org/Drug
  ///
  static const mechanismOfAction = IriTerm.prevalidated(
    'http://schema.org/mechanismOfAction',
  );

  /// IRI for schemahttp:mediaAuthenticityCategory [Expects: http://schema.org/MediaManipulationRatingEnumeration]
  ///
  /// Indicates a MediaManipulationRatingEnumeration classification of a media object (in the context of how it was published or shared).
  ///
  /// Can be used on: http://schema.org/MediaReview
  ///
  static const mediaAuthenticityCategory = IriTerm.prevalidated(
    'http://schema.org/mediaAuthenticityCategory',
  );

  /// IRI for schemahttp:mediaItemAppearance [Expects: http://schema.org/MediaObject]
  ///
  /// In the context of a {[MediaReview]}, indicates specific media item(s) that are grouped using a {[MediaReviewItem]}.
  ///
  /// Can be used on: http://schema.org/MediaReviewItem
  ///
  static const mediaItemAppearance = IriTerm.prevalidated(
    'http://schema.org/mediaItemAppearance',
  );

  /// IRI for schemahttp:median [Expects: http://schema.org/Number]
  ///
  /// The median value.
  ///
  /// Can be used on: http://schema.org/QuantitativeValueDistribution
  ///
  static const median = IriTerm.prevalidated('http://schema.org/median');

  /// IRI for schemahttp:medicalAudience [Expects: http://schema.org/MedicalAudience, http://schema.org/MedicalAudienceType]
  ///
  /// Medical audience for page.
  ///
  /// Can be used on: http://schema.org/MedicalWebPage
  ///
  static const medicalAudience = IriTerm.prevalidated(
    'http://schema.org/medicalAudience',
  );

  /// IRI for schemahttp:medicalSpecialty [Expects: http://schema.org/MedicalSpecialty]
  ///
  /// A medical specialty of the provider.
  ///
  /// Can be used on: http://schema.org/Hospital, http://schema.org/MedicalClinic, http://schema.org/MedicalOrganization, http://schema.org/Physician
  ///
  static const medicalSpecialty = IriTerm.prevalidated(
    'http://schema.org/medicalSpecialty',
  );

  /// IRI for schemahttp:medicineSystem [Expects: http://schema.org/MedicineSystem]
  ///
  /// The system of medicine that includes this MedicalEntity, for example 'evidence-based', 'homeopathic', 'chiropractic', etc.
  ///
  /// Can be used on: http://schema.org/MedicalEntity
  ///
  static const medicineSystem = IriTerm.prevalidated(
    'http://schema.org/medicineSystem',
  );

  /// IRI for schemahttp:meetsEmissionStandard [Expects: http://schema.org/QualitativeValue, http://schema.org/Text, http://schema.org/URL]
  ///
  /// Indicates that the vehicle meets the respective emission standard.
  ///
  /// Can be used on: http://schema.org/Vehicle
  ///
  static const meetsEmissionStandard = IriTerm.prevalidated(
    'http://schema.org/meetsEmissionStandard',
  );

  /// IRI for schemahttp:members [Expects: http://schema.org/Organization, http://schema.org/Person]
  ///
  /// A member of this organization.
  ///
  /// Can be used on: http://schema.org/Organization, http://schema.org/ProgramMembership
  ///
  static const members = IriTerm.prevalidated('http://schema.org/members');

  /// IRI for schemahttp:membershipNumber [Expects: http://schema.org/Text]
  ///
  /// A unique identifier for the membership.
  ///
  /// Can be used on: http://schema.org/ProgramMembership
  ///
  static const membershipNumber = IriTerm.prevalidated(
    'http://schema.org/membershipNumber',
  );

  /// IRI for schemahttp:membershipPointsEarned [Expects: http://schema.org/Number, http://schema.org/QuantitativeValue]
  ///
  /// The number of membership points earned by the member. If necessary, the unitText can be used to express the units the points are issued in. (E.g. stars, miles, etc.)
  ///
  /// Can be used on: http://schema.org/MemberProgramTier, http://schema.org/PriceSpecification, http://schema.org/ProgramMembership
  ///
  static const membershipPointsEarned = IriTerm.prevalidated(
    'http://schema.org/membershipPointsEarned',
  );

  /// IRI for schemahttp:memoryRequirements [Expects: http://schema.org/Text, http://schema.org/URL]
  ///
  /// Minimum memory requirements.
  ///
  /// Can be used on: http://schema.org/SoftwareApplication
  ///
  static const memoryRequirements = IriTerm.prevalidated(
    'http://schema.org/memoryRequirements',
  );

  /// IRI for schemahttp:mentions [Expects: http://schema.org/Thing]
  ///
  /// Indicates that the CreativeWork contains a reference to, but is not necessarily about a concept.
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const mentions = IriTerm.prevalidated('http://schema.org/mentions');

  /// IRI for schemahttp:menu [Expects: http://schema.org/Menu, http://schema.org/Text, http://schema.org/URL]
  ///
  /// Either the actual menu as a structured representation, as text, or a URL of the menu.
  ///
  /// Can be used on: http://schema.org/FoodEstablishment
  ///
  static const menu = IriTerm.prevalidated('http://schema.org/menu');

  /// IRI for schemahttp:menuAddOn [Expects: http://schema.org/MenuItem, http://schema.org/MenuSection]
  ///
  /// Additional menu item(s) such as a side dish of salad or side order of fries that can be added to this menu item. Additionally it can be a menu section containing allowed add-on menu items for this menu item.
  ///
  /// Can be used on: http://schema.org/MenuItem
  ///
  static const menuAddOn = IriTerm.prevalidated('http://schema.org/menuAddOn');

  /// IRI for schemahttp:merchant [Expects: http://schema.org/Organization, http://schema.org/Person]
  ///
  /// 'merchant' is an out-dated term for 'seller'.
  ///
  /// Can be used on: http://schema.org/Order
  ///
  static const merchant = IriTerm.prevalidated('http://schema.org/merchant');

  /// IRI for schemahttp:merchantReturnDays [Expects: http://schema.org/Date, http://schema.org/DateTime, http://schema.org/Integer]
  ///
  /// Specifies either a fixed return date or the number of days (from the delivery date) that a product can be returned. Used when the {[returnPolicyCategory]} property is specified as {[MerchantReturnFiniteReturnWindow]}.
  ///
  /// Can be used on: http://schema.org/MerchantReturnPolicy, http://schema.org/MerchantReturnPolicySeasonalOverride
  ///
  static const merchantReturnDays = IriTerm.prevalidated(
    'http://schema.org/merchantReturnDays',
  );

  /// IRI for schemahttp:merchantReturnLink [Expects: http://schema.org/URL]
  ///
  /// Specifies a Web page or service by URL, for product returns.
  ///
  /// Can be used on: http://schema.org/MerchantReturnPolicy
  ///
  static const merchantReturnLink = IriTerm.prevalidated(
    'http://schema.org/merchantReturnLink',
  );

  /// IRI for schemahttp:messageAttachment [Expects: http://schema.org/CreativeWork]
  ///
  /// A CreativeWork attached to the message.
  ///
  /// Can be used on: http://schema.org/Message
  ///
  static const messageAttachment = IriTerm.prevalidated(
    'http://schema.org/messageAttachment',
  );

  /// IRI for schemahttp:mileageFromOdometer [Expects: http://schema.org/QuantitativeValue]
  ///
  /// The total distance travelled by the particular vehicle since its initial production, as read from its odometer.\n\nTypical unit code(s): KMT for kilometers, SMI for statute miles.
  ///
  /// Can be used on: http://schema.org/Vehicle
  ///
  static const mileageFromOdometer = IriTerm.prevalidated(
    'http://schema.org/mileageFromOdometer',
  );

  /// IRI for schemahttp:minPrice [Expects: http://schema.org/Number]
  ///
  /// The lowest price if the price is a range.
  ///
  /// Can be used on: http://schema.org/PriceSpecification
  ///
  static const minPrice = IriTerm.prevalidated('http://schema.org/minPrice');

  /// IRI for schemahttp:minValue [Expects: http://schema.org/Number]
  ///
  /// The lower value of some characteristic or property.
  ///
  /// Can be used on: http://schema.org/MonetaryAmount, http://schema.org/PropertyValue, http://schema.org/PropertyValueSpecification, http://schema.org/QuantitativeValue
  ///
  static const minValue = IriTerm.prevalidated('http://schema.org/minValue');

  /// IRI for schemahttp:minimumPaymentDue [Expects: http://schema.org/MonetaryAmount, http://schema.org/PriceSpecification]
  ///
  /// The minimum payment required at this time.
  ///
  /// Can be used on: http://schema.org/Invoice
  ///
  static const minimumPaymentDue = IriTerm.prevalidated(
    'http://schema.org/minimumPaymentDue',
  );

  /// IRI for schemahttp:missionCoveragePrioritiesPolicy [Expects: http://schema.org/CreativeWork, http://schema.org/URL]
  ///
  /// For a {[NewsMediaOrganization]}, a statement on coverage priorities, including any public agenda or stance on issues.
  ///
  /// Can be used on: http://schema.org/NewsMediaOrganization
  ///
  static const missionCoveragePrioritiesPolicy = IriTerm.prevalidated(
    'http://schema.org/missionCoveragePrioritiesPolicy',
  );

  /// IRI for schemahttp:mobileUrl [Expects: http://schema.org/Text]
  ///
  /// The {[mobileUrl]} property is provided for specific situations in which data consumers need to determine whether one of several provided URLs is a dedicated 'mobile site'.
  ///
  /// To discourage over-use, and reflecting intial usecases, the property is expected only on {[Product]} and {[Offer]}, rather than {[Thing]}. The general trend in web technology is towards [responsive design](https://en.wikipedia.org/wiki/Responsive_web_design) in which content can be flexibly adapted to a wide range of browsing environments. Pages and sites referenced with the long-established {[url]} property should ideally also be usable on a wide variety of devices, including mobile phones. In most cases, it would be pointless and counter productive to attempt to update all {[url]} markup to use {[mobileUrl]} for more mobile-oriented pages. The property is intended for the case when items (primarily {[Product]} and {[Offer]}) have extra URLs hosted on an additional "mobile site" alongside the main one. It should not be taken as an endorsement of this publication style.
  ///
  ///
  /// Can be used on: http://schema.org/Offer, http://schema.org/Product
  ///
  static const mobileUrl = IriTerm.prevalidated('http://schema.org/mobileUrl');

  /// IRI for schemahttp:model [Expects: http://schema.org/ProductModel, http://schema.org/Text]
  ///
  /// The model of the product. Use with the URL of a ProductModel or a textual representation of the model identifier. The URL of the ProductModel can be from an external source. It is recommended to additionally provide strong product identifiers via the gtin8/gtin13/gtin14 and mpn properties.
  ///
  /// Can be used on: http://schema.org/Product
  ///
  static const model = IriTerm.prevalidated('http://schema.org/model');

  /// IRI for schemahttp:modelDate [Expects: http://schema.org/Date]
  ///
  /// The release date of a vehicle model (often used to differentiate versions of the same make and model).
  ///
  /// Can be used on: http://schema.org/Vehicle
  ///
  static const modelDate = IriTerm.prevalidated('http://schema.org/modelDate');

  /// IRI for schemahttp:modifiedTime [Expects: http://schema.org/DateTime]
  ///
  /// The date and time the reservation was modified.
  ///
  /// Can be used on: http://schema.org/Reservation
  ///
  static const modifiedTime = IriTerm.prevalidated(
    'http://schema.org/modifiedTime',
  );

  /// IRI for schemahttp:molecularFormula [Expects: http://schema.org/Text]
  ///
  /// The empirical formula is the simplest whole number ratio of all the atoms in a molecule.
  ///
  /// Can be used on: http://schema.org/MolecularEntity
  ///
  static const molecularFormula = IriTerm.prevalidated(
    'http://schema.org/molecularFormula',
  );

  /// IRI for schemahttp:molecularWeight [Expects: http://schema.org/QuantitativeValue, http://schema.org/Text]
  ///
  /// This is the molecular weight of the entity being described, not of the parent. Units should be included in the form '&lt;Number&gt; &lt;unit&gt;', for example '12 amu' or as '&lt;QuantitativeValue&gt;.
  ///
  /// Can be used on: http://schema.org/MolecularEntity
  ///
  static const molecularWeight = IriTerm.prevalidated(
    'http://schema.org/molecularWeight',
  );

  /// IRI for schemahttp:monoisotopicMolecularWeight [Expects: http://schema.org/QuantitativeValue, http://schema.org/Text]
  ///
  /// The monoisotopic mass is the sum of the masses of the atoms in a molecule using the unbound, ground-state, rest mass of the principal (most abundant) isotope for each element instead of the isotopic average mass. Please include the units in the form '&lt;Number&gt; &lt;unit&gt;', for example '770.230488 g/mol' or as '&lt;QuantitativeValue&gt;.
  ///
  /// Can be used on: http://schema.org/MolecularEntity
  ///
  static const monoisotopicMolecularWeight = IriTerm.prevalidated(
    'http://schema.org/monoisotopicMolecularWeight',
  );

  /// IRI for schemahttp:monthlyMinimumRepaymentAmount [Expects: http://schema.org/MonetaryAmount, http://schema.org/Number]
  ///
  /// The minimum payment is the lowest amount of money that one is required to pay on a credit card statement each month.
  ///
  /// Can be used on: http://schema.org/PaymentCard
  ///
  static const monthlyMinimumRepaymentAmount = IriTerm.prevalidated(
    'http://schema.org/monthlyMinimumRepaymentAmount',
  );

  /// IRI for schemahttp:monthsOfExperience [Expects: http://schema.org/Number]
  ///
  /// Indicates the minimal number of months of experience required for a position.
  ///
  /// Can be used on: http://schema.org/OccupationalExperienceRequirements
  ///
  static const monthsOfExperience = IriTerm.prevalidated(
    'http://schema.org/monthsOfExperience',
  );

  /// IRI for schemahttp:mpn [Expects: http://schema.org/Text]
  ///
  /// The Manufacturer Part Number (MPN) of the product, or the product to which the offer refers.
  ///
  /// Can be used on: http://schema.org/Demand, http://schema.org/Offer, http://schema.org/Product
  ///
  static const mpn = IriTerm.prevalidated('http://schema.org/mpn');

  /// IRI for schemahttp:multipleValues [Expects: http://schema.org/Boolean]
  ///
  /// Whether multiple values are allowed for the property.  Default is false.
  ///
  /// Can be used on: http://schema.org/PropertyValueSpecification
  ///
  static const multipleValues = IriTerm.prevalidated(
    'http://schema.org/multipleValues',
  );

  /// IRI for schemahttp:muscleAction [Expects: http://schema.org/Text]
  ///
  /// The movement the muscle generates.
  ///
  /// Can be used on: http://schema.org/Muscle
  ///
  static const muscleAction = IriTerm.prevalidated(
    'http://schema.org/muscleAction',
  );

  /// IRI for schemahttp:musicArrangement [Expects: http://schema.org/MusicComposition]
  ///
  /// An arrangement derived from the composition.
  ///
  /// Can be used on: http://schema.org/MusicComposition
  ///
  static const musicArrangement = IriTerm.prevalidated(
    'http://schema.org/musicArrangement',
  );

  /// IRI for schemahttp:musicBy [Expects: http://schema.org/MusicGroup, http://schema.org/Person]
  ///
  /// The composer of the soundtrack.
  ///
  /// Can be used on: http://schema.org/Clip, http://schema.org/Episode, http://schema.org/Movie, http://schema.org/MovieSeries, http://schema.org/RadioSeries, http://schema.org/TVSeries, http://schema.org/VideoGame, http://schema.org/VideoGameSeries, http://schema.org/VideoObject
  ///
  static const musicBy = IriTerm.prevalidated('http://schema.org/musicBy');

  /// IRI for schemahttp:musicCompositionForm [Expects: http://schema.org/Text]
  ///
  /// The type of composition (e.g. overture, sonata, symphony, etc.).
  ///
  /// Can be used on: http://schema.org/MusicComposition
  ///
  static const musicCompositionForm = IriTerm.prevalidated(
    'http://schema.org/musicCompositionForm',
  );

  /// IRI for schemahttp:musicGroupMember [Expects: http://schema.org/Person]
  ///
  /// A member of a music group&#x2014;for example, John, Paul, George, or Ringo.
  ///
  /// Can be used on: http://schema.org/MusicGroup
  ///
  static const musicGroupMember = IriTerm.prevalidated(
    'http://schema.org/musicGroupMember',
  );

  /// IRI for schemahttp:musicReleaseFormat [Expects: http://schema.org/MusicReleaseFormatType]
  ///
  /// Format of this release (the type of recording media used, i.e. compact disc, digital media, LP, etc.).
  ///
  /// Can be used on: http://schema.org/MusicRelease
  ///
  static const musicReleaseFormat = IriTerm.prevalidated(
    'http://schema.org/musicReleaseFormat',
  );

  /// IRI for schemahttp:musicalKey [Expects: http://schema.org/Text]
  ///
  /// The key, mode, or scale this composition uses.
  ///
  /// Can be used on: http://schema.org/MusicComposition
  ///
  static const musicalKey = IriTerm.prevalidated(
    'http://schema.org/musicalKey',
  );

  /// IRI for schemahttp:naics [Expects: http://schema.org/Text]
  ///
  /// The North American Industry Classification System (NAICS) code for a particular organization or business person.
  ///
  /// Can be used on: http://schema.org/Organization, http://schema.org/Person
  ///
  static const naics = IriTerm.prevalidated('http://schema.org/naics');

  /// IRI for schemahttp:name [Expects: http://schema.org/Text]
  ///
  /// The name of the item.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const name = IriTerm.prevalidated('http://schema.org/name');

  /// IRI for schemahttp:namedPosition [Expects: http://schema.org/Text, http://schema.org/URL]
  ///
  /// A position played, performed or filled by a person or organization, as part of an organization. For example, an athlete in a SportsTeam might play in the position named 'Quarterback'.
  ///
  /// Can be used on: http://schema.org/Role
  ///
  static const namedPosition = IriTerm.prevalidated(
    'http://schema.org/namedPosition',
  );

  /// IRI for schemahttp:nationality [Expects: http://schema.org/Country]
  ///
  /// Nationality of the person.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const nationality = IriTerm.prevalidated(
    'http://schema.org/nationality',
  );

  /// IRI for schemahttp:naturalProgression [Expects: http://schema.org/Text]
  ///
  /// The expected progression of the condition if it is not treated and allowed to progress naturally.
  ///
  /// Can be used on: http://schema.org/MedicalCondition
  ///
  static const naturalProgression = IriTerm.prevalidated(
    'http://schema.org/naturalProgression',
  );

  /// IRI for schemahttp:negativeNotes [Expects: http://schema.org/ItemList, http://schema.org/ListItem, http://schema.org/Text, http://schema.org/WebContent]
  ///
  /// Provides negative considerations regarding something, most typically in pro/con lists for reviews (alongside {[positiveNotes]}). For symmetry
  ///
  /// In the case of a {[Review]}, the property describes the {[itemReviewed]} from the perspective of the review; in the case of a {[Product]}, the product itself is being described. Since product descriptions
  /// tend to emphasise positive claims, it may be relatively unusual to find {[negativeNotes]} used in this way. Nevertheless for the sake of symmetry, {[negativeNotes]} can be used on {[Product]}.
  ///
  /// The property values can be expressed either as unstructured text (repeated as necessary), or if ordered, as a list (in which case the most negative is at the beginning of the list).
  ///
  /// Can be used on: http://schema.org/Product, http://schema.org/Review
  ///
  static const negativeNotes = IriTerm.prevalidated(
    'http://schema.org/negativeNotes',
  );

  /// IRI for schemahttp:nerve [Expects: http://schema.org/Nerve]
  ///
  /// The underlying innervation associated with the muscle.
  ///
  /// Can be used on: http://schema.org/Muscle
  ///
  static const nerve = IriTerm.prevalidated('http://schema.org/nerve');

  /// IRI for schemahttp:nerveMotor [Expects: http://schema.org/Muscle]
  ///
  /// The neurological pathway extension that involves muscle control.
  ///
  /// Can be used on: http://schema.org/Nerve
  ///
  static const nerveMotor = IriTerm.prevalidated(
    'http://schema.org/nerveMotor',
  );

  /// IRI for schemahttp:netWorth [Expects: http://schema.org/MonetaryAmount, http://schema.org/PriceSpecification]
  ///
  /// The total financial value of the person as calculated by subtracting the total value of liabilities from the total value of assets.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const netWorth = IriTerm.prevalidated('http://schema.org/netWorth');

  /// IRI for schemahttp:newsUpdatesAndGuidelines [Expects: http://schema.org/URL, http://schema.org/WebContent]
  ///
  /// Indicates a page with news updates and guidelines. This could often be (but is not required to be) the main page containing {[SpecialAnnouncement]} markup on a site.
  ///
  /// Can be used on: http://schema.org/SpecialAnnouncement
  ///
  static const newsUpdatesAndGuidelines = IriTerm.prevalidated(
    'http://schema.org/newsUpdatesAndGuidelines',
  );

  /// IRI for schemahttp:nextItem [Expects: http://schema.org/ListItem]
  ///
  /// A link to the ListItem that follows the current one.
  ///
  /// Can be used on: http://schema.org/ListItem
  ///
  static const nextItem = IriTerm.prevalidated('http://schema.org/nextItem');

  /// IRI for schemahttp:noBylinesPolicy [Expects: http://schema.org/CreativeWork, http://schema.org/URL]
  ///
  /// For a {[NewsMediaOrganization]} or other news-related {[Organization]}, a statement explaining when authors of articles are not named in bylines.
  ///
  /// Can be used on: http://schema.org/NewsMediaOrganization
  ///
  static const noBylinesPolicy = IriTerm.prevalidated(
    'http://schema.org/noBylinesPolicy',
  );

  /// IRI for schemahttp:nonEqual [Expects: http://schema.org/QualitativeValue]
  ///
  /// This ordering relation for qualitative values indicates that the subject is not equal to the object.
  ///
  /// Can be used on: http://schema.org/QualitativeValue
  ///
  static const nonEqual = IriTerm.prevalidated('http://schema.org/nonEqual');

  /// IRI for schemahttp:nonProprietaryName [Expects: http://schema.org/Text]
  ///
  /// The generic name of this drug or supplement.
  ///
  /// Can be used on: http://schema.org/DietarySupplement, http://schema.org/Drug
  ///
  static const nonProprietaryName = IriTerm.prevalidated(
    'http://schema.org/nonProprietaryName',
  );

  /// IRI for schemahttp:nonprofitStatus [Expects: http://schema.org/NonprofitType]
  ///
  /// nonprofitStatus indicates the legal status of a non-profit organization in its primary place of business.
  ///
  /// Can be used on: http://schema.org/Organization
  ///
  static const nonprofitStatus = IriTerm.prevalidated(
    'http://schema.org/nonprofitStatus',
  );

  /// IRI for schemahttp:normalRange [Expects: http://schema.org/MedicalEnumeration, http://schema.org/Text]
  ///
  /// Range of acceptable values for a typical patient, when applicable.
  ///
  /// Can be used on: http://schema.org/MedicalTest
  ///
  static const normalRange = IriTerm.prevalidated(
    'http://schema.org/normalRange',
  );

  /// IRI for schemahttp:nsn [Expects: http://schema.org/Text]
  ///
  /// Indicates the [NATO stock number](https://en.wikipedia.org/wiki/NATO_Stock_Number) (nsn) of a {[Product]}.
  ///
  /// Can be used on: http://schema.org/Product
  ///
  static const nsn = IriTerm.prevalidated('http://schema.org/nsn');

  /// IRI for schemahttp:numAdults [Expects: http://schema.org/Integer, http://schema.org/QuantitativeValue]
  ///
  /// The number of adults staying in the unit.
  ///
  /// Can be used on: http://schema.org/LodgingReservation
  ///
  static const numAdults = IriTerm.prevalidated('http://schema.org/numAdults');

  /// IRI for schemahttp:numChildren [Expects: http://schema.org/Integer, http://schema.org/QuantitativeValue]
  ///
  /// The number of children staying in the unit.
  ///
  /// Can be used on: http://schema.org/LodgingReservation
  ///
  static const numChildren = IriTerm.prevalidated(
    'http://schema.org/numChildren',
  );

  /// IRI for schemahttp:numConstraints [Expects: http://schema.org/Integer]
  ///
  /// Indicates the number of constraints property values defined for a particular {[ConstraintNode]} such as {[StatisticalVariable]}. This helps applications understand if they have access to a sufficiently complete description of a {[StatisticalVariable]} or other construct that is defined using properties on template-style nodes.
  ///
  /// Can be used on: http://schema.org/ConstraintNode
  ///
  static const numConstraints = IriTerm.prevalidated(
    'http://schema.org/numConstraints',
  );

  /// IRI for schemahttp:numItems [Expects: http://schema.org/QuantitativeValue]
  ///
  /// Limits the number of items being shipped for which these conditions apply.
  ///
  /// Can be used on: http://schema.org/ShippingConditions
  ///
  static const numItems = IriTerm.prevalidated('http://schema.org/numItems');

  /// IRI for schemahttp:numTracks [Expects: http://schema.org/Integer]
  ///
  /// The number of tracks in this album or playlist.
  ///
  /// Can be used on: http://schema.org/MusicPlaylist
  ///
  static const numTracks = IriTerm.prevalidated('http://schema.org/numTracks');

  /// IRI for schemahttp:numberOfAccommodationUnits [Expects: http://schema.org/QuantitativeValue]
  ///
  /// Indicates the total (available plus unavailable) number of accommodation units in an {[ApartmentComplex]}, or the number of accommodation units for a specific {[FloorPlan]} (within its specific {[ApartmentComplex]}). See also {[numberOfAvailableAccommodationUnits]}.
  ///
  /// Can be used on: http://schema.org/ApartmentComplex, http://schema.org/FloorPlan
  ///
  static const numberOfAccommodationUnits = IriTerm.prevalidated(
    'http://schema.org/numberOfAccommodationUnits',
  );

  /// IRI for schemahttp:numberOfAirbags [Expects: http://schema.org/Number, http://schema.org/Text]
  ///
  /// The number or type of airbags in the vehicle.
  ///
  /// Can be used on: http://schema.org/Vehicle
  ///
  static const numberOfAirbags = IriTerm.prevalidated(
    'http://schema.org/numberOfAirbags',
  );

  /// IRI for schemahttp:numberOfAvailableAccommodationUnits [Expects: http://schema.org/QuantitativeValue]
  ///
  /// Indicates the number of available accommodation units in an {[ApartmentComplex]}, or the number of accommodation units for a specific {[FloorPlan]} (within its specific {[ApartmentComplex]}). See also {[numberOfAccommodationUnits]}.
  ///
  /// Can be used on: http://schema.org/ApartmentComplex, http://schema.org/FloorPlan
  ///
  static const numberOfAvailableAccommodationUnits = IriTerm.prevalidated(
    'http://schema.org/numberOfAvailableAccommodationUnits',
  );

  /// IRI for schemahttp:numberOfAxles [Expects: http://schema.org/Number, http://schema.org/QuantitativeValue]
  ///
  /// The number of axles.\n\nTypical unit code(s): C62.
  ///
  /// Can be used on: http://schema.org/Vehicle
  ///
  static const numberOfAxles = IriTerm.prevalidated(
    'http://schema.org/numberOfAxles',
  );

  /// IRI for schemahttp:numberOfBathroomsTotal [Expects: http://schema.org/Integer]
  ///
  /// The total integer number of bathrooms in some {[Accommodation]}, following real estate conventions as [documented in RESO](https://ddwiki.reso.org/display/DDW17/BathroomsTotalInteger+Field): "The simple sum of the number of bathrooms. For example for a property with two Full Bathrooms and one Half Bathroom, the Bathrooms Total Integer will be 3.". See also {[numberOfRooms]}.
  ///
  /// Can be used on: http://schema.org/Accommodation, http://schema.org/FloorPlan
  ///
  static const numberOfBathroomsTotal = IriTerm.prevalidated(
    'http://schema.org/numberOfBathroomsTotal',
  );

  /// IRI for schemahttp:numberOfBedrooms [Expects: http://schema.org/Number, http://schema.org/QuantitativeValue]
  ///
  /// The total integer number of bedrooms in a some {[Accommodation]}, {[ApartmentComplex]} or {[FloorPlan]}.
  ///
  /// Can be used on: http://schema.org/Accommodation, http://schema.org/ApartmentComplex, http://schema.org/FloorPlan
  ///
  static const numberOfBedrooms = IriTerm.prevalidated(
    'http://schema.org/numberOfBedrooms',
  );

  /// IRI for schemahttp:numberOfBeds [Expects: http://schema.org/Number]
  ///
  /// The quantity of the given bed type available in the HotelRoom, Suite, House, or Apartment.
  ///
  /// Can be used on: http://schema.org/BedDetails
  ///
  static const numberOfBeds = IriTerm.prevalidated(
    'http://schema.org/numberOfBeds',
  );

  /// IRI for schemahttp:numberOfCredits [Expects: http://schema.org/Integer, http://schema.org/StructuredValue]
  ///
  /// The number of credits or units awarded by a Course or required to complete an EducationalOccupationalProgram.
  ///
  /// Can be used on: http://schema.org/Course, http://schema.org/EducationalOccupationalProgram
  ///
  static const numberOfCredits = IriTerm.prevalidated(
    'http://schema.org/numberOfCredits',
  );

  /// IRI for schemahttp:numberOfDoors [Expects: http://schema.org/Number, http://schema.org/QuantitativeValue]
  ///
  /// The number of doors.\n\nTypical unit code(s): C62.
  ///
  /// Can be used on: http://schema.org/Vehicle
  ///
  static const numberOfDoors = IriTerm.prevalidated(
    'http://schema.org/numberOfDoors',
  );

  /// IRI for schemahttp:numberOfEmployees [Expects: http://schema.org/QuantitativeValue]
  ///
  /// The number of employees in an organization, e.g. business.
  ///
  /// Can be used on: http://schema.org/BusinessAudience, http://schema.org/Organization
  ///
  static const numberOfEmployees = IriTerm.prevalidated(
    'http://schema.org/numberOfEmployees',
  );

  /// IRI for schemahttp:numberOfEpisodes [Expects: http://schema.org/Integer]
  ///
  /// The number of episodes in this season or series.
  ///
  /// Can be used on: http://schema.org/CreativeWorkSeason, http://schema.org/RadioSeries, http://schema.org/TVSeries, http://schema.org/VideoGameSeries
  ///
  static const numberOfEpisodes = IriTerm.prevalidated(
    'http://schema.org/numberOfEpisodes',
  );

  /// IRI for schemahttp:numberOfForwardGears [Expects: http://schema.org/Number, http://schema.org/QuantitativeValue]
  ///
  /// The total number of forward gears available for the transmission system of the vehicle.\n\nTypical unit code(s): C62.
  ///
  /// Can be used on: http://schema.org/Vehicle
  ///
  static const numberOfForwardGears = IriTerm.prevalidated(
    'http://schema.org/numberOfForwardGears',
  );

  /// IRI for schemahttp:numberOfFullBathrooms [Expects: http://schema.org/Number]
  ///
  /// Number of full bathrooms - The total number of full and ¬æ bathrooms in an {[Accommodation]}. This corresponds to the [BathroomsFull field in RESO](https://ddwiki.reso.org/display/DDW17/BathroomsFull+Field).
  ///
  /// Can be used on: http://schema.org/Accommodation, http://schema.org/FloorPlan
  ///
  static const numberOfFullBathrooms = IriTerm.prevalidated(
    'http://schema.org/numberOfFullBathrooms',
  );

  /// IRI for schemahttp:numberOfItems [Expects: http://schema.org/Integer]
  ///
  /// The number of items in an ItemList. Note that some descriptions might not fully describe all items in a list (e.g., multi-page pagination); in such cases, the numberOfItems would be for the entire list.
  ///
  /// Can be used on: http://schema.org/ItemList
  ///
  static const numberOfItems = IriTerm.prevalidated(
    'http://schema.org/numberOfItems',
  );

  /// IRI for schemahttp:numberOfLoanPayments [Expects: http://schema.org/Number]
  ///
  /// The number of payments contractually required at origination to repay the loan. For monthly paying loans this is the number of months from the contractual first payment date to the maturity date.
  ///
  /// Can be used on: http://schema.org/RepaymentSpecification
  ///
  static const numberOfLoanPayments = IriTerm.prevalidated(
    'http://schema.org/numberOfLoanPayments',
  );

  /// IRI for schemahttp:numberOfPages [Expects: http://schema.org/Integer]
  ///
  /// The number of pages in the book.
  ///
  /// Can be used on: http://schema.org/Book
  ///
  static const numberOfPages = IriTerm.prevalidated(
    'http://schema.org/numberOfPages',
  );

  /// IRI for schemahttp:numberOfPartialBathrooms [Expects: http://schema.org/Number]
  ///
  /// Number of partial bathrooms - The total number of half and ¬º bathrooms in an {[Accommodation]}. This corresponds to the [BathroomsPartial field in RESO](https://ddwiki.reso.org/display/DDW17/BathroomsPartial+Field).
  ///
  /// Can be used on: http://schema.org/Accommodation, http://schema.org/FloorPlan
  ///
  static const numberOfPartialBathrooms = IriTerm.prevalidated(
    'http://schema.org/numberOfPartialBathrooms',
  );

  /// IRI for schemahttp:numberOfPlayers [Expects: http://schema.org/QuantitativeValue]
  ///
  /// Indicate how many people can play this game (minimum, maximum, or range).
  ///
  /// Can be used on: http://schema.org/Game, http://schema.org/VideoGameSeries
  ///
  static const numberOfPlayers = IriTerm.prevalidated(
    'http://schema.org/numberOfPlayers',
  );

  /// IRI for schemahttp:numberOfPreviousOwners [Expects: http://schema.org/Number, http://schema.org/QuantitativeValue]
  ///
  /// The number of owners of the vehicle, including the current one.\n\nTypical unit code(s): C62.
  ///
  /// Can be used on: http://schema.org/Vehicle
  ///
  static const numberOfPreviousOwners = IriTerm.prevalidated(
    'http://schema.org/numberOfPreviousOwners',
  );

  /// IRI for schemahttp:numberOfRooms [Expects: http://schema.org/Number, http://schema.org/QuantitativeValue]
  ///
  /// The number of rooms (excluding bathrooms and closets) of the accommodation or lodging business.
  /// Typical unit code(s): ROM for room or C62 for no unit. The type of room can be put in the unitText property of the QuantitativeValue.
  ///
  /// Can be used on: http://schema.org/Accommodation, http://schema.org/Apartment, http://schema.org/FloorPlan, http://schema.org/House, http://schema.org/LodgingBusiness, http://schema.org/SingleFamilyResidence, http://schema.org/Suite
  ///
  static const numberOfRooms = IriTerm.prevalidated(
    'http://schema.org/numberOfRooms',
  );

  /// IRI for schemahttp:numberOfSeasons [Expects: http://schema.org/Integer]
  ///
  /// The number of seasons in this series.
  ///
  /// Can be used on: http://schema.org/RadioSeries, http://schema.org/TVSeries, http://schema.org/VideoGameSeries
  ///
  static const numberOfSeasons = IriTerm.prevalidated(
    'http://schema.org/numberOfSeasons',
  );

  /// IRI for schemahttp:numberedPosition [Expects: http://schema.org/Number]
  ///
  /// A number associated with a role in an organization, for example, the number on an athlete's jersey.
  ///
  /// Can be used on: http://schema.org/OrganizationRole
  ///
  static const numberedPosition = IriTerm.prevalidated(
    'http://schema.org/numberedPosition',
  );

  /// IRI for schemahttp:nutrition [Expects: http://schema.org/NutritionInformation]
  ///
  /// Nutrition information about the recipe or menu item.
  ///
  /// Can be used on: http://schema.org/MenuItem, http://schema.org/Recipe
  ///
  static const nutrition = IriTerm.prevalidated('http://schema.org/nutrition');

  /// IRI for schemahttp:observationAbout [Expects: http://schema.org/Place, http://schema.org/Thing]
  ///
  /// The {[observationAbout]} property identifies an entity, often a {[Place]}, associated with an {[Observation]}.
  ///
  /// Can be used on: http://schema.org/Observation
  ///
  static const observationAbout = IriTerm.prevalidated(
    'http://schema.org/observationAbout',
  );

  /// IRI for schemahttp:observationDate [Expects: http://schema.org/DateTime]
  ///
  /// The observationDate of an {[Observation]}.
  ///
  /// Can be used on: http://schema.org/Observation
  ///
  static const observationDate = IriTerm.prevalidated(
    'http://schema.org/observationDate',
  );

  /// IRI for schemahttp:observationPeriod [Expects: http://schema.org/Text]
  ///
  /// The length of time an Observation took place over. The format follows `P[0-9]*[Y|M|D|h|m|s]`. For example, P1Y is Period 1 Year, P3M is Period 3 Months, P3h is Period 3 hours.
  ///
  /// Can be used on: http://schema.org/Observation
  ///
  static const observationPeriod = IriTerm.prevalidated(
    'http://schema.org/observationPeriod',
  );

  /// IRI for schemahttp:occupancy [Expects: http://schema.org/QuantitativeValue]
  ///
  /// The allowed total occupancy for the accommodation in persons (including infants etc). For individual accommodations, this is not necessarily the legal maximum but defines the permitted usage as per the contractual agreement (e.g. a double room used by a single person).
  /// Typical unit code(s): C62 for person.
  ///
  /// Can be used on: http://schema.org/Accommodation, http://schema.org/Apartment, http://schema.org/HotelRoom, http://schema.org/SingleFamilyResidence, http://schema.org/Suite
  ///
  static const occupancy = IriTerm.prevalidated('http://schema.org/occupancy');

  /// IRI for schemahttp:occupationLocation [Expects: http://schema.org/AdministrativeArea]
  ///
  /// The region/country for which this occupational description is appropriate. Note that educational requirements and qualifications can vary between jurisdictions.
  ///
  /// Can be used on: http://schema.org/Occupation
  ///
  static const occupationLocation = IriTerm.prevalidated(
    'http://schema.org/occupationLocation',
  );

  /// IRI for schemahttp:occupationalCategory [Expects: http://schema.org/CategoryCode, http://schema.org/Text]
  ///
  /// A category describing the job, preferably using a term from a taxonomy such as [BLS O*NET-SOC](http://www.onetcenter.org/taxonomy.html), [ISCO-08](https://www.ilo.org/public/english/bureau/stat/isco/isco08/) or similar, with the property repeated for each applicable value. Ideally the taxonomy should be identified, and both the textual label and formal code for the category should be provided.\n
  /// Note: for historical reasons, any textual label and formal code provided as a literal may be assumed to be from O*NET-SOC.
  ///
  /// Can be used on: http://schema.org/EducationalOccupationalProgram, http://schema.org/JobPosting, http://schema.org/Occupation, http://schema.org/Physician, http://schema.org/WorkBasedProgram
  ///
  static const occupationalCategory = IriTerm.prevalidated(
    'http://schema.org/occupationalCategory',
  );

  /// IRI for schemahttp:occupationalCredentialAwarded [Expects: http://schema.org/EducationalOccupationalCredential, http://schema.org/Text, http://schema.org/URL]
  ///
  /// A description of the qualification, award, certificate, diploma or other occupational credential awarded as a consequence of successful completion of this course or program.
  ///
  /// Can be used on: http://schema.org/Course, http://schema.org/EducationalOccupationalProgram
  ///
  static const occupationalCredentialAwarded = IriTerm.prevalidated(
    'http://schema.org/occupationalCredentialAwarded',
  );

  /// IRI for schemahttp:offerCount [Expects: http://schema.org/Integer]
  ///
  /// The number of offers for the product.
  ///
  /// Can be used on: http://schema.org/AggregateOffer
  ///
  static const offerCount = IriTerm.prevalidated(
    'http://schema.org/offerCount',
  );

  /// IRI for schemahttp:offersPrescriptionByMail [Expects: http://schema.org/Boolean]
  ///
  /// Whether prescriptions can be delivered by mail.
  ///
  /// Can be used on: http://schema.org/HealthPlanFormulary
  ///
  static const offersPrescriptionByMail = IriTerm.prevalidated(
    'http://schema.org/offersPrescriptionByMail',
  );

  /// IRI for schemahttp:openingHours [Expects: http://schema.org/Text]
  ///
  /// The general opening hours for a business. Opening hours can be specified as a weekly time range, starting with days, then times per day. Multiple days can be listed with commas ',' separating each day. Day or time ranges are specified using a hyphen '-'.\n\n* Days are specified using the following two-letter combinations: ```Mo```, ```Tu```, ```We```, ```Th```, ```Fr```, ```Sa```, ```Su```.\n* Times are specified using 24:00 format. For example, 3pm is specified as ```15:00```, 10am as ```10:00```. \n* Here is an example: <code>&lt;time itemprop="openingHours" datetime=&quot;Tu,Th 16:00-20:00&quot;&gt;Tuesdays and Thursdays 4-8pm&lt;/time&gt;</code>.\n* If a business is open 7 days a week, then it can be specified as <code>&lt;time itemprop=&quot;openingHours&quot; datetime=&quot;Mo-Su&quot;&gt;Monday through Sunday, all day&lt;/time&gt;</code>.
  ///
  /// Can be used on: http://schema.org/CivicStructure, http://schema.org/LocalBusiness
  ///
  static const openingHours = IriTerm.prevalidated(
    'http://schema.org/openingHours',
  );

  /// IRI for schemahttp:openingHoursSpecification [Expects: http://schema.org/OpeningHoursSpecification]
  ///
  /// The opening hours of a certain place.
  ///
  /// Can be used on: http://schema.org/Place
  ///
  static const openingHoursSpecification = IriTerm.prevalidated(
    'http://schema.org/openingHoursSpecification',
  );

  /// IRI for schemahttp:opens [Expects: http://schema.org/Time]
  ///
  /// The opening hour of the place or service on the given day(s) of the week.
  ///
  /// Can be used on: http://schema.org/OpeningHoursSpecification
  ///
  static const opens = IriTerm.prevalidated('http://schema.org/opens');

  /// IRI for schemahttp:operatingSystem [Expects: http://schema.org/Text]
  ///
  /// Operating systems supported (Windows 7, OS X 10.6, Android 1.6).
  ///
  /// Can be used on: http://schema.org/SoftwareApplication
  ///
  static const operatingSystem = IriTerm.prevalidated(
    'http://schema.org/operatingSystem',
  );

  /// IRI for schemahttp:opponent [Expects: http://schema.org/Person]
  ///
  /// A sub property of participant. The opponent on this action.
  ///
  /// Can be used on: http://schema.org/ExerciseAction
  ///
  static const opponent = IriTerm.prevalidated('http://schema.org/opponent');

  /// IRI for schemahttp:option [Expects: http://schema.org/Text, http://schema.org/Thing]
  ///
  /// A sub property of object. The options subject to this action.
  ///
  /// Can be used on: http://schema.org/ChooseAction
  ///
  static const option = IriTerm.prevalidated('http://schema.org/option');

  /// IRI for schemahttp:orderDate [Expects: http://schema.org/Date, http://schema.org/DateTime]
  ///
  /// Date order was placed.
  ///
  /// Can be used on: http://schema.org/Order
  ///
  static const orderDate = IriTerm.prevalidated('http://schema.org/orderDate');

  /// IRI for schemahttp:orderDelivery [Expects: http://schema.org/ParcelDelivery]
  ///
  /// The delivery of the parcel related to this order or order item.
  ///
  /// Can be used on: http://schema.org/Order, http://schema.org/OrderItem
  ///
  static const orderDelivery = IriTerm.prevalidated(
    'http://schema.org/orderDelivery',
  );

  /// IRI for schemahttp:orderItemNumber [Expects: http://schema.org/Text]
  ///
  /// The identifier of the order item.
  ///
  /// Can be used on: http://schema.org/OrderItem
  ///
  static const orderItemNumber = IriTerm.prevalidated(
    'http://schema.org/orderItemNumber',
  );

  /// IRI for schemahttp:orderItemStatus [Expects: http://schema.org/OrderStatus]
  ///
  /// The current status of the order item.
  ///
  /// Can be used on: http://schema.org/OrderItem
  ///
  static const orderItemStatus = IriTerm.prevalidated(
    'http://schema.org/orderItemStatus',
  );

  /// IRI for schemahttp:orderNumber [Expects: http://schema.org/Text]
  ///
  /// The identifier of the transaction.
  ///
  /// Can be used on: http://schema.org/Order
  ///
  static const orderNumber = IriTerm.prevalidated(
    'http://schema.org/orderNumber',
  );

  /// IRI for schemahttp:orderPercentage [Expects: http://schema.org/Number]
  ///
  /// Fraction of the value of the order that is charged as shipping cost.
  ///
  /// Can be used on: http://schema.org/ShippingRateSettings
  ///
  static const orderPercentage = IriTerm.prevalidated(
    'http://schema.org/orderPercentage',
  );

  /// IRI for schemahttp:orderQuantity [Expects: http://schema.org/Number, http://schema.org/QuantitativeValue]
  ///
  /// The number of the item ordered. If the property is not set, assume the quantity is one.
  ///
  /// Can be used on: http://schema.org/OrderItem
  ///
  static const orderQuantity = IriTerm.prevalidated(
    'http://schema.org/orderQuantity',
  );

  /// IRI for schemahttp:orderStatus [Expects: http://schema.org/OrderStatus]
  ///
  /// The current status of the order.
  ///
  /// Can be used on: http://schema.org/Order
  ///
  static const orderStatus = IriTerm.prevalidated(
    'http://schema.org/orderStatus',
  );

  /// IRI for schemahttp:orderValue [Expects: http://schema.org/MonetaryAmount]
  ///
  /// Minimum and maximum order value for which these shipping conditions are valid.
  ///
  /// Can be used on: http://schema.org/ShippingConditions
  ///
  static const orderValue = IriTerm.prevalidated(
    'http://schema.org/orderValue',
  );

  /// IRI for schemahttp:orderedItem [Expects: http://schema.org/OrderItem, http://schema.org/Product, http://schema.org/Service]
  ///
  /// The item ordered.
  ///
  /// Can be used on: http://schema.org/Order, http://schema.org/OrderItem
  ///
  static const orderedItem = IriTerm.prevalidated(
    'http://schema.org/orderedItem',
  );

  /// IRI for schemahttp:organizer [Expects: http://schema.org/Organization, http://schema.org/Person]
  ///
  /// An organizer of an Event.
  ///
  /// Can be used on: http://schema.org/Event
  ///
  static const organizer = IriTerm.prevalidated('http://schema.org/organizer');

  /// IRI for schemahttp:originAddress [Expects: http://schema.org/PostalAddress]
  ///
  /// Shipper's address.
  ///
  /// Can be used on: http://schema.org/ParcelDelivery
  ///
  static const originAddress = IriTerm.prevalidated(
    'http://schema.org/originAddress',
  );

  /// IRI for schemahttp:originalMediaContextDescription [Expects: http://schema.org/Text]
  ///
  /// Describes, in a {[MediaReview]} when dealing with {[DecontextualizedContent]}, background information that can contribute to better interpretation of the {[MediaObject]}.
  ///
  /// Can be used on: http://schema.org/MediaReview
  ///
  static const originalMediaContextDescription = IriTerm.prevalidated(
    'http://schema.org/originalMediaContextDescription',
  );

  /// IRI for schemahttp:originalMediaLink [Expects: http://schema.org/MediaObject, http://schema.org/URL, http://schema.org/WebPage]
  ///
  /// Link to the page containing an original version of the content, or directly to an online copy of the original {[MediaObject]} content, e.g. video file.
  ///
  /// Can be used on: http://schema.org/MediaReview
  ///
  static const originalMediaLink = IriTerm.prevalidated(
    'http://schema.org/originalMediaLink',
  );

  /// IRI for schemahttp:originatesFrom [Expects: http://schema.org/Vessel]
  ///
  /// The vasculature the lymphatic structure originates, or afferents, from.
  ///
  /// Can be used on: http://schema.org/LymphaticVessel
  ///
  static const originatesFrom = IriTerm.prevalidated(
    'http://schema.org/originatesFrom',
  );

  /// IRI for schemahttp:overdosage [Expects: http://schema.org/Text]
  ///
  /// Any information related to overdose on a drug, including signs or symptoms, treatments, contact information for emergency response.
  ///
  /// Can be used on: http://schema.org/Drug
  ///
  static const overdosage = IriTerm.prevalidated(
    'http://schema.org/overdosage',
  );

  /// IRI for schemahttp:ownedFrom [Expects: http://schema.org/DateTime]
  ///
  /// The date and time of obtaining the product.
  ///
  /// Can be used on: http://schema.org/OwnershipInfo
  ///
  static const ownedFrom = IriTerm.prevalidated('http://schema.org/ownedFrom');

  /// IRI for schemahttp:ownedThrough [Expects: http://schema.org/DateTime]
  ///
  /// The date and time of giving up ownership on the product.
  ///
  /// Can be used on: http://schema.org/OwnershipInfo
  ///
  static const ownedThrough = IriTerm.prevalidated(
    'http://schema.org/ownedThrough',
  );

  /// IRI for schemahttp:ownershipFundingInfo [Expects: http://schema.org/AboutPage, http://schema.org/CreativeWork, http://schema.org/Text, http://schema.org/URL]
  ///
  /// For an {[Organization]} (often but not necessarily a {[NewsMediaOrganization]}), a description of organizational ownership structure; funding and grants. In a news/media setting, this is with particular reference to editorial independence.   Note that the {[funder]} is also available and can be used to make basic funder information machine-readable.
  ///
  /// Can be used on: http://schema.org/NewsMediaOrganization, http://schema.org/Organization
  ///
  static const ownershipFundingInfo = IriTerm.prevalidated(
    'http://schema.org/ownershipFundingInfo',
  );

  /// IRI for schemahttp:owns [Expects: http://schema.org/OwnershipInfo, http://schema.org/Product]
  ///
  /// Products owned by the organization or person.
  ///
  /// Can be used on: http://schema.org/Organization, http://schema.org/Person
  ///
  static const owns = IriTerm.prevalidated('http://schema.org/owns');

  /// IRI for schemahttp:pageEnd [Expects: http://schema.org/Integer, http://schema.org/Text]
  ///
  /// The page on which the work ends; for example "138" or "xvi".
  ///
  /// Can be used on: http://schema.org/Article, http://schema.org/Chapter, http://schema.org/PublicationIssue, http://schema.org/PublicationVolume
  ///
  static const pageEnd = IriTerm.prevalidated('http://schema.org/pageEnd');

  /// IRI for schemahttp:pageStart [Expects: http://schema.org/Integer, http://schema.org/Text]
  ///
  /// The page on which the work starts; for example "135" or "xiii".
  ///
  /// Can be used on: http://schema.org/Article, http://schema.org/Chapter, http://schema.org/PublicationIssue, http://schema.org/PublicationVolume
  ///
  static const pageStart = IriTerm.prevalidated('http://schema.org/pageStart');

  /// IRI for schemahttp:pagination [Expects: http://schema.org/Text]
  ///
  /// Any description of pages that is not separated into pageStart and pageEnd; for example, "1-6, 9, 55" or "10-12, 46-49".
  ///
  /// Can be used on: http://schema.org/Article, http://schema.org/Chapter, http://schema.org/PublicationIssue, http://schema.org/PublicationVolume
  ///
  static const pagination = IriTerm.prevalidated(
    'http://schema.org/pagination',
  );

  /// IRI for schemahttp:parentItem [Expects: http://schema.org/Comment, http://schema.org/CreativeWork]
  ///
  /// The parent of a question, answer or item in general. Typically used for Q/A discussion threads e.g. a chain of comments with the first comment being an {[Article]} or other {[CreativeWork]}. See also {[comment]} which points from something to a comment about it.
  ///
  /// Can be used on: http://schema.org/Answer, http://schema.org/Comment, http://schema.org/Question
  ///
  static const parentItem = IriTerm.prevalidated(
    'http://schema.org/parentItem',
  );

  /// IRI for schemahttp:parentService [Expects: http://schema.org/BroadcastService]
  ///
  /// A broadcast service to which the broadcast service may belong to such as regional variations of a national channel.
  ///
  /// Can be used on: http://schema.org/BroadcastService
  ///
  static const parentService = IriTerm.prevalidated(
    'http://schema.org/parentService',
  );

  /// IRI for schemahttp:parents [Expects: http://schema.org/Person]
  ///
  /// A parents of the person.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const parents = IriTerm.prevalidated('http://schema.org/parents');

  /// IRI for schemahttp:partOfEpisode [Expects: http://schema.org/Episode]
  ///
  /// The episode to which this clip belongs.
  ///
  /// Can be used on: http://schema.org/Clip
  ///
  static const partOfEpisode = IriTerm.prevalidated(
    'http://schema.org/partOfEpisode',
  );

  /// IRI for schemahttp:partOfInvoice [Expects: http://schema.org/Invoice]
  ///
  /// The order is being paid as part of the referenced Invoice.
  ///
  /// Can be used on: http://schema.org/Order
  ///
  static const partOfInvoice = IriTerm.prevalidated(
    'http://schema.org/partOfInvoice',
  );

  /// IRI for schemahttp:partOfOrder [Expects: http://schema.org/Order]
  ///
  /// The overall order the items in this delivery were included in.
  ///
  /// Can be used on: http://schema.org/ParcelDelivery
  ///
  static const partOfOrder = IriTerm.prevalidated(
    'http://schema.org/partOfOrder',
  );

  /// IRI for schemahttp:partOfSeason [Expects: http://schema.org/CreativeWorkSeason]
  ///
  /// The season to which this episode belongs.
  ///
  /// Can be used on: http://schema.org/Clip, http://schema.org/Episode
  ///
  static const partOfSeason = IriTerm.prevalidated(
    'http://schema.org/partOfSeason',
  );

  /// IRI for schemahttp:partOfSystem [Expects: http://schema.org/AnatomicalSystem]
  ///
  /// The anatomical or organ system that this structure is part of.
  ///
  /// Can be used on: http://schema.org/AnatomicalStructure
  ///
  static const partOfSystem = IriTerm.prevalidated(
    'http://schema.org/partOfSystem',
  );

  /// IRI for schemahttp:partOfTVSeries [Expects: http://schema.org/TVSeries]
  ///
  /// The TV series to which this episode or season belongs.
  ///
  /// Can be used on: http://schema.org/TVClip, http://schema.org/TVEpisode, http://schema.org/TVSeason
  ///
  static const partOfTVSeries = IriTerm.prevalidated(
    'http://schema.org/partOfTVSeries',
  );

  /// IRI for schemahttp:partySize [Expects: http://schema.org/Integer, http://schema.org/QuantitativeValue]
  ///
  /// Number of people the reservation should accommodate.
  ///
  /// Can be used on: http://schema.org/FoodEstablishmentReservation, http://schema.org/TaxiReservation
  ///
  static const partySize = IriTerm.prevalidated('http://schema.org/partySize');

  /// IRI for schemahttp:passengerPriorityStatus [Expects: http://schema.org/QualitativeValue, http://schema.org/Text]
  ///
  /// The priority status assigned to a passenger for security or boarding (e.g. FastTrack or Priority).
  ///
  /// Can be used on: http://schema.org/FlightReservation
  ///
  static const passengerPriorityStatus = IriTerm.prevalidated(
    'http://schema.org/passengerPriorityStatus',
  );

  /// IRI for schemahttp:passengerSequenceNumber [Expects: http://schema.org/Text]
  ///
  /// The passenger's sequence number as assigned by the airline.
  ///
  /// Can be used on: http://schema.org/FlightReservation
  ///
  static const passengerSequenceNumber = IriTerm.prevalidated(
    'http://schema.org/passengerSequenceNumber',
  );

  /// IRI for schemahttp:pathophysiology [Expects: http://schema.org/Text]
  ///
  /// Changes in the normal mechanical, physical, and biochemical functions that are associated with this activity or condition.
  ///
  /// Can be used on: http://schema.org/MedicalCondition, http://schema.org/PhysicalActivity
  ///
  static const pathophysiology = IriTerm.prevalidated(
    'http://schema.org/pathophysiology',
  );

  /// IRI for schemahttp:pattern [Expects: http://schema.org/DefinedTerm, http://schema.org/Text]
  ///
  /// A pattern that something has, for example 'polka dot', 'striped', 'Canadian flag'. Values are typically expressed as text, although links to controlled value schemes are also supported.
  ///
  /// Can be used on: http://schema.org/CreativeWork, http://schema.org/Product
  ///
  static const pattern = IriTerm.prevalidated('http://schema.org/pattern');

  /// IRI for schemahttp:payload [Expects: http://schema.org/QuantitativeValue]
  ///
  /// The permitted weight of passengers and cargo, EXCLUDING the weight of the empty vehicle.\n\nTypical unit code(s): KGM for kilogram, LBR for pound\n\n* Note 1: Many databases specify the permitted TOTAL weight instead, which is the sum of {[weight]} and {[payload]}\n* Note 2: You can indicate additional information in the {[name]} of the {[QuantitativeValue]} node.\n* Note 3: You may also link to a {[QualitativeValue]} node that provides additional information using {[valueReference]}.\n* Note 4: Note that you can use {[minValue]} and {[maxValue]} to indicate ranges.
  ///
  /// Can be used on: http://schema.org/Vehicle
  ///
  static const payload = IriTerm.prevalidated('http://schema.org/payload');

  /// IRI for schemahttp:paymentAccepted [Expects: http://schema.org/Text]
  ///
  /// Cash, Credit Card, Cryptocurrency, Local Exchange Tradings System, etc.
  ///
  /// Can be used on: http://schema.org/LocalBusiness
  ///
  static const paymentAccepted = IriTerm.prevalidated(
    'http://schema.org/paymentAccepted',
  );

  /// IRI for schemahttp:paymentDue [Expects: http://schema.org/DateTime]
  ///
  /// The date that payment is due.
  ///
  /// Can be used on: http://schema.org/Invoice, http://schema.org/Order
  ///
  static const paymentDue = IriTerm.prevalidated(
    'http://schema.org/paymentDue',
  );

  /// IRI for schemahttp:paymentMethod [Expects: http://schema.org/PaymentMethod, http://schema.org/Text]
  ///
  /// The name of the credit card or other method of payment for the order.
  ///
  /// Can be used on: http://schema.org/Invoice, http://schema.org/Order
  ///
  static const paymentMethod = IriTerm.prevalidated(
    'http://schema.org/paymentMethod',
  );

  /// IRI for schemahttp:paymentMethodId [Expects: http://schema.org/Text]
  ///
  /// An identifier for the method of payment used (e.g. the last 4 digits of the credit card).
  ///
  /// Can be used on: http://schema.org/Invoice, http://schema.org/Order
  ///
  static const paymentMethodId = IriTerm.prevalidated(
    'http://schema.org/paymentMethodId',
  );

  /// IRI for schemahttp:paymentMethodType [Expects: http://schema.org/PaymentMethodType]
  ///
  /// The type of a payment method.
  ///
  /// Can be used on: http://schema.org/PaymentMethod
  ///
  static const paymentMethodType = IriTerm.prevalidated(
    'http://schema.org/paymentMethodType',
  );

  /// IRI for schemahttp:paymentStatus [Expects: http://schema.org/PaymentStatusType, http://schema.org/Text]
  ///
  /// The status of payment; whether the invoice has been paid or not.
  ///
  /// Can be used on: http://schema.org/Invoice
  ///
  static const paymentStatus = IriTerm.prevalidated(
    'http://schema.org/paymentStatus',
  );

  /// IRI for schemahttp:paymentUrl [Expects: http://schema.org/URL]
  ///
  /// The URL for sending a payment.
  ///
  /// Can be used on: http://schema.org/Order
  ///
  static const paymentUrl = IriTerm.prevalidated(
    'http://schema.org/paymentUrl',
  );

  /// IRI for schemahttp:penciler [Expects: http://schema.org/Person]
  ///
  /// The individual who draws the primary narrative artwork.
  ///
  /// Can be used on: http://schema.org/ComicIssue, http://schema.org/ComicStory, http://schema.org/VisualArtwork
  ///
  static const penciler = IriTerm.prevalidated('http://schema.org/penciler');

  /// IRI for schemahttp:percentile10 [Expects: http://schema.org/Number]
  ///
  /// The 10th percentile value.
  ///
  /// Can be used on: http://schema.org/QuantitativeValueDistribution
  ///
  static const percentile10 = IriTerm.prevalidated(
    'http://schema.org/percentile10',
  );

  /// IRI for schemahttp:percentile25 [Expects: http://schema.org/Number]
  ///
  /// The 25th percentile value.
  ///
  /// Can be used on: http://schema.org/QuantitativeValueDistribution
  ///
  static const percentile25 = IriTerm.prevalidated(
    'http://schema.org/percentile25',
  );

  /// IRI for schemahttp:percentile75 [Expects: http://schema.org/Number]
  ///
  /// The 75th percentile value.
  ///
  /// Can be used on: http://schema.org/QuantitativeValueDistribution
  ///
  static const percentile75 = IriTerm.prevalidated(
    'http://schema.org/percentile75',
  );

  /// IRI for schemahttp:percentile90 [Expects: http://schema.org/Number]
  ///
  /// The 90th percentile value.
  ///
  /// Can be used on: http://schema.org/QuantitativeValueDistribution
  ///
  static const percentile90 = IriTerm.prevalidated(
    'http://schema.org/percentile90',
  );

  /// IRI for schemahttp:performerIn [Expects: http://schema.org/Event]
  ///
  /// Event that this person is a performer or participant in.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const performerIn = IriTerm.prevalidated(
    'http://schema.org/performerIn',
  );

  /// IRI for schemahttp:performers [Expects: http://schema.org/Organization, http://schema.org/Person]
  ///
  /// The main performer or performers of the event&#x2014;for example, a presenter, musician, or actor.
  ///
  /// Can be used on: http://schema.org/Event
  ///
  static const performers = IriTerm.prevalidated(
    'http://schema.org/performers',
  );

  /// IRI for schemahttp:permissionType [Expects: http://schema.org/DigitalDocumentPermissionType]
  ///
  /// The type of permission granted the person, organization, or audience.
  ///
  /// Can be used on: http://schema.org/DigitalDocumentPermission
  ///
  static const permissionType = IriTerm.prevalidated(
    'http://schema.org/permissionType',
  );

  /// IRI for schemahttp:permissions [Expects: http://schema.org/Text]
  ///
  /// Permission(s) required to run the app (for example, a mobile app may require full internet access or may run only on wifi).
  ///
  /// Can be used on: http://schema.org/SoftwareApplication
  ///
  static const permissions = IriTerm.prevalidated(
    'http://schema.org/permissions',
  );

  /// IRI for schemahttp:permitAudience [Expects: http://schema.org/Audience]
  ///
  /// The target audience for this permit.
  ///
  /// Can be used on: http://schema.org/Permit
  ///
  static const permitAudience = IriTerm.prevalidated(
    'http://schema.org/permitAudience',
  );

  /// IRI for schemahttp:permittedUsage [Expects: http://schema.org/Text]
  ///
  /// Indications regarding the permitted usage of the accommodation.
  ///
  /// Can be used on: http://schema.org/Accommodation
  ///
  static const permittedUsage = IriTerm.prevalidated(
    'http://schema.org/permittedUsage',
  );

  /// IRI for schemahttp:petsAllowed [Expects: http://schema.org/Boolean, http://schema.org/Text]
  ///
  /// Indicates whether pets are allowed to enter the accommodation or lodging business. More detailed information can be put in a text value.
  ///
  /// Can be used on: http://schema.org/Accommodation, http://schema.org/ApartmentComplex, http://schema.org/FloorPlan, http://schema.org/LodgingBusiness
  ///
  static const petsAllowed = IriTerm.prevalidated(
    'http://schema.org/petsAllowed',
  );

  /// IRI for schemahttp:phoneticText [Expects: http://schema.org/Text]
  ///
  /// Representation of a text {[textValue]} using the specified {[speechToTextMarkup]}. For example the city name of Houston in IPA: /ÀàhjuÀêst…ôn/.
  ///
  /// Can be used on: http://schema.org/PronounceableText
  ///
  static const phoneticText = IriTerm.prevalidated(
    'http://schema.org/phoneticText',
  );

  /// IRI for schemahttp:photos [Expects: http://schema.org/ImageObject, http://schema.org/Photograph]
  ///
  /// Photographs of this place.
  ///
  /// Can be used on: http://schema.org/Place
  ///
  static const photos = IriTerm.prevalidated('http://schema.org/photos');

  /// IRI for schemahttp:physicalRequirement [Expects: http://schema.org/DefinedTerm, http://schema.org/Text, http://schema.org/URL]
  ///
  /// A description of the types of physical activity associated with the job. Defined terms such as those in O*net may be used, but note that there is no way to specify the level of ability as well as its nature when using a defined term.
  ///
  /// Can be used on: http://schema.org/JobPosting
  ///
  static const physicalRequirement = IriTerm.prevalidated(
    'http://schema.org/physicalRequirement',
  );

  /// IRI for schemahttp:physiologicalBenefits [Expects: http://schema.org/Text]
  ///
  /// Specific physiologic benefits associated to the plan.
  ///
  /// Can be used on: http://schema.org/Diet
  ///
  static const physiologicalBenefits = IriTerm.prevalidated(
    'http://schema.org/physiologicalBenefits',
  );

  /// IRI for schemahttp:pickupLocation [Expects: http://schema.org/Place]
  ///
  /// Where a taxi will pick up a passenger or a rental car can be picked up.
  ///
  /// Can be used on: http://schema.org/RentalCarReservation, http://schema.org/TaxiReservation
  ///
  static const pickupLocation = IriTerm.prevalidated(
    'http://schema.org/pickupLocation',
  );

  /// IRI for schemahttp:pickupTime [Expects: http://schema.org/DateTime]
  ///
  /// When a taxi will pick up a passenger or a rental car can be picked up.
  ///
  /// Can be used on: http://schema.org/RentalCarReservation, http://schema.org/TaxiReservation
  ///
  static const pickupTime = IriTerm.prevalidated(
    'http://schema.org/pickupTime',
  );

  /// IRI for schemahttp:playMode [Expects: http://schema.org/GamePlayMode]
  ///
  /// Indicates whether this game is multi-player, co-op or single-player.  The game can be marked as multi-player, co-op and single-player at the same time.
  ///
  /// Can be used on: http://schema.org/VideoGame, http://schema.org/VideoGameSeries
  ///
  static const playMode = IriTerm.prevalidated('http://schema.org/playMode');

  /// IRI for schemahttp:playerType [Expects: http://schema.org/Text]
  ///
  /// Player type required&#x2014;for example, Flash or Silverlight.
  ///
  /// Can be used on: http://schema.org/MediaObject
  ///
  static const playerType = IriTerm.prevalidated(
    'http://schema.org/playerType',
  );

  /// IRI for schemahttp:playersOnline [Expects: http://schema.org/Integer]
  ///
  /// Number of players on the server.
  ///
  /// Can be used on: http://schema.org/GameServer
  ///
  static const playersOnline = IriTerm.prevalidated(
    'http://schema.org/playersOnline',
  );

  /// IRI for schemahttp:polygon [Expects: http://schema.org/Text]
  ///
  /// A polygon is the area enclosed by a point-to-point path for which the starting and ending points are the same. A polygon is expressed as a series of four or more space delimited points where the first and final points are identical.
  ///
  /// Can be used on: http://schema.org/GeoShape
  ///
  static const polygon = IriTerm.prevalidated('http://schema.org/polygon');

  /// IRI for schemahttp:populationType [Expects: http://schema.org/Class]
  ///
  /// Indicates the populationType common to all members of a {[StatisticalPopulation]} or all cases within the scope of a {[StatisticalVariable]}.
  ///
  /// Can be used on: http://schema.org/StatisticalPopulation, http://schema.org/StatisticalVariable
  ///
  static const populationType = IriTerm.prevalidated(
    'http://schema.org/populationType',
  );

  /// IRI for schemahttp:positiveNotes [Expects: http://schema.org/ItemList, http://schema.org/ListItem, http://schema.org/Text, http://schema.org/WebContent]
  ///
  /// Provides positive considerations regarding something, for example product highlights or (alongside {[negativeNotes]}) pro/con lists for reviews.
  ///
  /// In the case of a {[Review]}, the property describes the {[itemReviewed]} from the perspective of the review; in the case of a {[Product]}, the product itself is being described.
  ///
  /// The property values can be expressed either as unstructured text (repeated as necessary), or if ordered, as a list (in which case the most positive is at the beginning of the list).
  ///
  /// Can be used on: http://schema.org/Product, http://schema.org/Review
  ///
  static const positiveNotes = IriTerm.prevalidated(
    'http://schema.org/positiveNotes',
  );

  /// IRI for schemahttp:possibleComplication [Expects: http://schema.org/Text]
  ///
  /// A possible unexpected and unfavorable evolution of a medical condition. Complications may include worsening of the signs or symptoms of the disease, extension of the condition to other organ systems, etc.
  ///
  /// Can be used on: http://schema.org/MedicalCondition
  ///
  static const possibleComplication = IriTerm.prevalidated(
    'http://schema.org/possibleComplication',
  );

  /// IRI for schemahttp:possibleTreatment [Expects: http://schema.org/MedicalTherapy]
  ///
  /// A possible treatment to address this condition, sign or symptom.
  ///
  /// Can be used on: http://schema.org/MedicalCondition, http://schema.org/MedicalSignOrSymptom
  ///
  static const possibleTreatment = IriTerm.prevalidated(
    'http://schema.org/possibleTreatment',
  );

  /// IRI for schemahttp:postOfficeBoxNumber [Expects: http://schema.org/Text]
  ///
  /// The post office box number for PO box addresses.
  ///
  /// Can be used on: http://schema.org/PostalAddress
  ///
  static const postOfficeBoxNumber = IriTerm.prevalidated(
    'http://schema.org/postOfficeBoxNumber',
  );

  /// IRI for schemahttp:postOp [Expects: http://schema.org/Text]
  ///
  /// A description of the postoperative procedures, care, and/or followups for this device.
  ///
  /// Can be used on: http://schema.org/MedicalDevice
  ///
  static const postOp = IriTerm.prevalidated('http://schema.org/postOp');

  /// IRI for schemahttp:postalCode [Expects: http://schema.org/Text]
  ///
  /// The postal code. For example, 94043.
  ///
  /// Can be used on: http://schema.org/DefinedRegion, http://schema.org/GeoCoordinates, http://schema.org/GeoShape, http://schema.org/PostalAddress
  ///
  static const postalCode = IriTerm.prevalidated(
    'http://schema.org/postalCode',
  );

  /// IRI for schemahttp:postalCodeBegin [Expects: http://schema.org/Text]
  ///
  /// First postal code in a range (included).
  ///
  /// Can be used on: http://schema.org/PostalCodeRangeSpecification
  ///
  static const postalCodeBegin = IriTerm.prevalidated(
    'http://schema.org/postalCodeBegin',
  );

  /// IRI for schemahttp:postalCodeEnd [Expects: http://schema.org/Text]
  ///
  /// Last postal code in the range (included). Needs to be after {[postalCodeBegin]}.
  ///
  /// Can be used on: http://schema.org/PostalCodeRangeSpecification
  ///
  static const postalCodeEnd = IriTerm.prevalidated(
    'http://schema.org/postalCodeEnd',
  );

  /// IRI for schemahttp:postalCodePrefix [Expects: http://schema.org/Text]
  ///
  /// A defined range of postal codes indicated by a common textual prefix. Used for non-numeric systems such as UK.
  ///
  /// Can be used on: http://schema.org/DefinedRegion
  ///
  static const postalCodePrefix = IriTerm.prevalidated(
    'http://schema.org/postalCodePrefix',
  );

  /// IRI for schemahttp:postalCodeRange [Expects: http://schema.org/PostalCodeRangeSpecification]
  ///
  /// A defined range of postal codes.
  ///
  /// Can be used on: http://schema.org/DefinedRegion
  ///
  static const postalCodeRange = IriTerm.prevalidated(
    'http://schema.org/postalCodeRange',
  );

  /// IRI for schemahttp:potentialAction [Expects: http://schema.org/Action]
  ///
  /// Indicates a potential Action, which describes an idealized action in which this thing would play an 'object' role.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const potentialAction = IriTerm.prevalidated(
    'http://schema.org/potentialAction',
  );

  /// IRI for schemahttp:potentialUse [Expects: http://schema.org/DefinedTerm]
  ///
  /// Intended use of the BioChemEntity by humans.
  ///
  /// Can be used on: http://schema.org/ChemicalSubstance, http://schema.org/MolecularEntity
  ///
  static const potentialUse = IriTerm.prevalidated(
    'http://schema.org/potentialUse',
  );

  /// IRI for schemahttp:practicesAt [Expects: http://schema.org/MedicalOrganization]
  ///
  /// A {[MedicalOrganization]} where the {[IndividualPhysician]} practices.
  ///
  /// Can be used on: http://schema.org/IndividualPhysician
  ///
  static const practicesAt = IriTerm.prevalidated(
    'http://schema.org/practicesAt',
  );

  /// IRI for schemahttp:preOp [Expects: http://schema.org/Text]
  ///
  /// A description of the workup, testing, and other preparations required before implanting this device.
  ///
  /// Can be used on: http://schema.org/MedicalDevice
  ///
  static const preOp = IriTerm.prevalidated('http://schema.org/preOp');

  /// IRI for schemahttp:predecessorOf [Expects: http://schema.org/ProductModel]
  ///
  /// A pointer from a previous, often discontinued variant of the product to its newer variant.
  ///
  /// Can be used on: http://schema.org/ProductModel
  ///
  static const predecessorOf = IriTerm.prevalidated(
    'http://schema.org/predecessorOf',
  );

  /// IRI for schemahttp:pregnancyCategory [Expects: http://schema.org/DrugPregnancyCategory]
  ///
  /// Pregnancy category of this drug.
  ///
  /// Can be used on: http://schema.org/Drug
  ///
  static const pregnancyCategory = IriTerm.prevalidated(
    'http://schema.org/pregnancyCategory',
  );

  /// IRI for schemahttp:pregnancyWarning [Expects: http://schema.org/Text]
  ///
  /// Any precaution, guidance, contraindication, etc. related to this drug's use during pregnancy.
  ///
  /// Can be used on: http://schema.org/Drug
  ///
  static const pregnancyWarning = IriTerm.prevalidated(
    'http://schema.org/pregnancyWarning',
  );

  /// IRI for schemahttp:prepTime [Expects: http://schema.org/Duration]
  ///
  /// The length of time it takes to prepare the items to be used in instructions or a direction, in [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601).
  ///
  /// Can be used on: http://schema.org/HowTo, http://schema.org/HowToDirection
  ///
  static const prepTime = IriTerm.prevalidated('http://schema.org/prepTime');

  /// IRI for schemahttp:preparation [Expects: http://schema.org/MedicalEntity, http://schema.org/Text]
  ///
  /// Typical preparation that a patient must undergo before having the procedure performed.
  ///
  /// Can be used on: http://schema.org/MedicalProcedure
  ///
  static const preparation = IriTerm.prevalidated(
    'http://schema.org/preparation',
  );

  /// IRI for schemahttp:prescribingInfo [Expects: http://schema.org/URL]
  ///
  /// Link to prescribing information for the drug.
  ///
  /// Can be used on: http://schema.org/Drug
  ///
  static const prescribingInfo = IriTerm.prevalidated(
    'http://schema.org/prescribingInfo',
  );

  /// IRI for schemahttp:prescriptionStatus [Expects: http://schema.org/DrugPrescriptionStatus, http://schema.org/Text]
  ///
  /// Indicates the status of drug prescription, e.g. local catalogs classifications or whether the drug is available by prescription or over-the-counter, etc.
  ///
  /// Can be used on: http://schema.org/Drug
  ///
  static const prescriptionStatus = IriTerm.prevalidated(
    'http://schema.org/prescriptionStatus',
  );

  /// IRI for schemahttp:previousItem [Expects: http://schema.org/ListItem]
  ///
  /// A link to the ListItem that precedes the current one.
  ///
  /// Can be used on: http://schema.org/ListItem
  ///
  static const previousItem = IriTerm.prevalidated(
    'http://schema.org/previousItem',
  );

  /// IRI for schemahttp:previousStartDate [Expects: http://schema.org/Date]
  ///
  /// Used in conjunction with eventStatus for rescheduled or cancelled events. This property contains the previously scheduled start date. For rescheduled events, the startDate property should be used for the newly scheduled start date. In the (rare) case of an event that has been postponed and rescheduled multiple times, this field may be repeated.
  ///
  /// Can be used on: http://schema.org/Event
  ///
  static const previousStartDate = IriTerm.prevalidated(
    'http://schema.org/previousStartDate',
  );

  /// IRI for schemahttp:price [Expects: http://schema.org/Number, http://schema.org/Text]
  ///
  /// The offer price of a product, or of a price component when attached to PriceSpecification and its subtypes.\n\nUsage guidelines:\n\n* Use the {[priceCurrency]} property (with standard formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217), e.g. "USD"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies, e.g. "BTC"; well known names for [Local Exchange Trading Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system) (LETS) and other currency types, e.g. "Ithaca HOUR") instead of including [ambiguous symbols](http://en.wikipedia.org/wiki/Dollar_sign#Currencies_that_use_the_dollar_or_peso_sign) such as '$' in the value.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.\n* Note that both [RDFa](http://www.w3.org/TR/xhtml-rdfa-primer/#using-the-content-attribute) and Microdata syntax allow the use of a "content=" attribute for publishing simple machine-readable values alongside more human-friendly formatting.\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similar Unicode symbols.
  ///
  ///
  /// Can be used on: http://schema.org/DonateAction, http://schema.org/Offer, http://schema.org/PriceSpecification, http://schema.org/TradeAction
  ///
  static const price = IriTerm.prevalidated('http://schema.org/price');

  /// IRI for schemahttp:priceComponent [Expects: http://schema.org/UnitPriceSpecification]
  ///
  /// This property links to all {[UnitPriceSpecification]} nodes that apply in parallel for the {[CompoundPriceSpecification]} node.
  ///
  /// Can be used on: http://schema.org/CompoundPriceSpecification
  ///
  static const priceComponent = IriTerm.prevalidated(
    'http://schema.org/priceComponent',
  );

  /// IRI for schemahttp:priceComponentType [Expects: http://schema.org/PriceComponentTypeEnumeration]
  ///
  /// Identifies a price component (for example, a line item on an invoice), part of the total price for an offer.
  ///
  /// Can be used on: http://schema.org/UnitPriceSpecification
  ///
  static const priceComponentType = IriTerm.prevalidated(
    'http://schema.org/priceComponentType',
  );

  /// IRI for schemahttp:priceCurrency [Expects: http://schema.org/Text]
  ///
  /// The currency of the price, or a price component when attached to {[PriceSpecification]} and its subtypes.\n\nUse standard formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217), e.g. "USD"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies, e.g. "BTC"; well known names for [Local Exchange Trading Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system) (LETS) and other currency types, e.g. "Ithaca HOUR".
  ///
  /// Can be used on: http://schema.org/DonateAction, http://schema.org/Offer, http://schema.org/PriceSpecification, http://schema.org/Reservation, http://schema.org/Ticket, http://schema.org/TradeAction
  ///
  static const priceCurrency = IriTerm.prevalidated(
    'http://schema.org/priceCurrency',
  );

  /// IRI for schemahttp:priceRange [Expects: http://schema.org/Text]
  ///
  /// The price range of the business, for example ```$$$```.
  ///
  /// Can be used on: http://schema.org/LocalBusiness
  ///
  static const priceRange = IriTerm.prevalidated(
    'http://schema.org/priceRange',
  );

  /// IRI for schemahttp:priceSpecification [Expects: http://schema.org/PriceSpecification]
  ///
  /// One or more detailed price specifications, indicating the unit price and delivery or payment charges.
  ///
  /// Can be used on: http://schema.org/Demand, http://schema.org/DonateAction, http://schema.org/Offer, http://schema.org/TradeAction
  ///
  static const priceSpecification = IriTerm.prevalidated(
    'http://schema.org/priceSpecification',
  );

  /// IRI for schemahttp:priceType [Expects: http://schema.org/PriceTypeEnumeration, http://schema.org/Text]
  ///
  /// Defines the type of a price specified for an offered product, for example a list price, a (temporary) sale price or a manufacturer suggested retail price. If multiple prices are specified for an offer the {[priceType]} property can be used to identify the type of each such specified price. The value of priceType can be specified as a value from enumeration PriceTypeEnumeration or as a free form text string for price types that are not already predefined in PriceTypeEnumeration.
  ///
  /// Can be used on: http://schema.org/CompoundPriceSpecification, http://schema.org/UnitPriceSpecification
  ///
  static const priceType = IriTerm.prevalidated('http://schema.org/priceType');

  /// IRI for schemahttp:priceValidUntil [Expects: http://schema.org/Date]
  ///
  /// The date after which the price is no longer available.
  ///
  /// Can be used on: http://schema.org/Offer
  ///
  static const priceValidUntil = IriTerm.prevalidated(
    'http://schema.org/priceValidUntil',
  );

  /// IRI for schemahttp:primaryImageOfPage [Expects: http://schema.org/ImageObject]
  ///
  /// Indicates the main image on the page.
  ///
  /// Can be used on: http://schema.org/WebPage
  ///
  static const primaryImageOfPage = IriTerm.prevalidated(
    'http://schema.org/primaryImageOfPage',
  );

  /// IRI for schemahttp:primaryPrevention [Expects: http://schema.org/MedicalTherapy]
  ///
  /// A preventative therapy used to prevent an initial occurrence of the medical condition, such as vaccination.
  ///
  /// Can be used on: http://schema.org/MedicalCondition
  ///
  static const primaryPrevention = IriTerm.prevalidated(
    'http://schema.org/primaryPrevention',
  );

  /// IRI for schemahttp:printColumn [Expects: http://schema.org/Text]
  ///
  /// The number of the column in which the NewsArticle appears in the print edition.
  ///
  /// Can be used on: http://schema.org/NewsArticle
  ///
  static const printColumn = IriTerm.prevalidated(
    'http://schema.org/printColumn',
  );

  /// IRI for schemahttp:printEdition [Expects: http://schema.org/Text]
  ///
  /// The edition of the print product in which the NewsArticle appears.
  ///
  /// Can be used on: http://schema.org/NewsArticle
  ///
  static const printEdition = IriTerm.prevalidated(
    'http://schema.org/printEdition',
  );

  /// IRI for schemahttp:printPage [Expects: http://schema.org/Text]
  ///
  /// If this NewsArticle appears in print, this field indicates the name of the page on which the article is found. Please note that this field is intended for the exact page name (e.g. A5, B18).
  ///
  /// Can be used on: http://schema.org/NewsArticle
  ///
  static const printPage = IriTerm.prevalidated('http://schema.org/printPage');

  /// IRI for schemahttp:printSection [Expects: http://schema.org/Text]
  ///
  /// If this NewsArticle appears in print, this field indicates the print section in which the article appeared.
  ///
  /// Can be used on: http://schema.org/NewsArticle
  ///
  static const printSection = IriTerm.prevalidated(
    'http://schema.org/printSection',
  );

  /// IRI for schemahttp:procedure [Expects: http://schema.org/Text]
  ///
  /// A description of the procedure involved in setting up, using, and/or installing the device.
  ///
  /// Can be used on: http://schema.org/MedicalDevice
  ///
  static const procedure = IriTerm.prevalidated('http://schema.org/procedure');

  /// IRI for schemahttp:procedureType [Expects: http://schema.org/MedicalProcedureType]
  ///
  /// The type of procedure, for example Surgical, Noninvasive, or Percutaneous.
  ///
  /// Can be used on: http://schema.org/MedicalProcedure
  ///
  static const procedureType = IriTerm.prevalidated(
    'http://schema.org/procedureType',
  );

  /// IRI for schemahttp:processingTime [Expects: http://schema.org/Duration]
  ///
  /// Estimated processing time for the service using this channel.
  ///
  /// Can be used on: http://schema.org/ServiceChannel
  ///
  static const processingTime = IriTerm.prevalidated(
    'http://schema.org/processingTime',
  );

  /// IRI for schemahttp:processorRequirements [Expects: http://schema.org/Text]
  ///
  /// Processor architecture required to run the application (e.g. IA64).
  ///
  /// Can be used on: http://schema.org/SoftwareApplication
  ///
  static const processorRequirements = IriTerm.prevalidated(
    'http://schema.org/processorRequirements',
  );

  /// IRI for schemahttp:producer [Expects: http://schema.org/Organization, http://schema.org/Person]
  ///
  /// The person or organization who produced the work (e.g. music album, movie, TV/radio series etc.).
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const producer = IriTerm.prevalidated('http://schema.org/producer');

  /// IRI for schemahttp:produces [Expects: http://schema.org/Thing]
  ///
  /// The tangible thing generated by the service, e.g. a passport, permit, etc.
  ///
  /// Can be used on: http://schema.org/Service
  ///
  static const produces = IriTerm.prevalidated('http://schema.org/produces');

  /// IRI for schemahttp:productGroupID [Expects: http://schema.org/Text]
  ///
  /// Indicates a textual identifier for a ProductGroup.
  ///
  /// Can be used on: http://schema.org/ProductGroup
  ///
  static const productGroupID = IriTerm.prevalidated(
    'http://schema.org/productGroupID',
  );

  /// IRI for schemahttp:productID [Expects: http://schema.org/Text]
  ///
  /// The product identifier, such as ISBN. For example: ``` meta itemprop="productID" content="isbn:123-456-789" ```.
  ///
  /// Can be used on: http://schema.org/Product
  ///
  static const productID = IriTerm.prevalidated('http://schema.org/productID');

  /// IRI for schemahttp:productSupported [Expects: http://schema.org/Product, http://schema.org/Text]
  ///
  /// The product or service this support contact point is related to (such as product support for a particular product line). This can be a specific product or product line (e.g. "iPhone") or a general category of products or services (e.g. "smartphones").
  ///
  /// Can be used on: http://schema.org/ContactPoint
  ///
  static const productSupported = IriTerm.prevalidated(
    'http://schema.org/productSupported',
  );

  /// IRI for schemahttp:productionCompany [Expects: http://schema.org/Organization]
  ///
  /// The production company or studio responsible for the item, e.g. series, video game, episode etc.
  ///
  /// Can be used on: http://schema.org/CreativeWorkSeason, http://schema.org/Episode, http://schema.org/MediaObject, http://schema.org/Movie, http://schema.org/MovieSeries, http://schema.org/RadioSeries, http://schema.org/TVSeries, http://schema.org/VideoGameSeries
  ///
  static const productionCompany = IriTerm.prevalidated(
    'http://schema.org/productionCompany',
  );

  /// IRI for schemahttp:productionDate [Expects: http://schema.org/Date]
  ///
  /// The date of production of the item, e.g. vehicle.
  ///
  /// Can be used on: http://schema.org/Product, http://schema.org/Vehicle
  ///
  static const productionDate = IriTerm.prevalidated(
    'http://schema.org/productionDate',
  );

  /// IRI for schemahttp:proficiencyLevel [Expects: http://schema.org/Text]
  ///
  /// Proficiency needed for this content; expected values: 'Beginner', 'Expert'.
  ///
  /// Can be used on: http://schema.org/TechArticle
  ///
  static const proficiencyLevel = IriTerm.prevalidated(
    'http://schema.org/proficiencyLevel',
  );

  /// IRI for schemahttp:program [Expects: http://schema.org/MemberProgram]
  ///
  /// The [MemberProgram](http://schema.org/MemberProgram) associated with a [ProgramMembership](http://schema.org/ProgramMembership).
  ///
  /// Can be used on: http://schema.org/ProgramMembership
  ///
  static const program = IriTerm.prevalidated('http://schema.org/program');

  /// IRI for schemahttp:programMembershipUsed [Expects: http://schema.org/ProgramMembership]
  ///
  /// Any membership in a frequent flyer, hotel loyalty program, etc. being applied to the reservation.
  ///
  /// Can be used on: http://schema.org/Reservation
  ///
  static const programMembershipUsed = IriTerm.prevalidated(
    'http://schema.org/programMembershipUsed',
  );

  /// IRI for schemahttp:programName [Expects: http://schema.org/Text]
  ///
  /// The program providing the membership. It is preferable to use [:program](http://schema.org/program) instead.
  ///
  /// Can be used on: http://schema.org/ProgramMembership
  ///
  static const programName = IriTerm.prevalidated(
    'http://schema.org/programName',
  );

  /// IRI for schemahttp:programPrerequisites [Expects: http://schema.org/AlignmentObject, http://schema.org/Course, http://schema.org/EducationalOccupationalCredential, http://schema.org/Text]
  ///
  /// Prerequisites for enrolling in the program.
  ///
  /// Can be used on: http://schema.org/EducationalOccupationalProgram
  ///
  static const programPrerequisites = IriTerm.prevalidated(
    'http://schema.org/programPrerequisites',
  );

  /// IRI for schemahttp:programType [Expects: http://schema.org/DefinedTerm, http://schema.org/Text]
  ///
  /// The type of educational or occupational program. For example, classroom, internship, alternance, etc.
  ///
  /// Can be used on: http://schema.org/EducationalOccupationalProgram
  ///
  static const programType = IriTerm.prevalidated(
    'http://schema.org/programType',
  );

  /// IRI for schemahttp:programmingLanguage [Expects: http://schema.org/ComputerLanguage, http://schema.org/Text]
  ///
  /// The computer programming language.
  ///
  /// Can be used on: http://schema.org/SoftwareSourceCode
  ///
  static const programmingLanguage = IriTerm.prevalidated(
    'http://schema.org/programmingLanguage',
  );

  /// IRI for schemahttp:programmingModel [Expects: http://schema.org/Text]
  ///
  /// Indicates whether API is managed or unmanaged.
  ///
  /// Can be used on: http://schema.org/APIReference
  ///
  static const programmingModel = IriTerm.prevalidated(
    'http://schema.org/programmingModel',
  );

  /// IRI for schemahttp:propertyID [Expects: http://schema.org/Text, http://schema.org/URL]
  ///
  /// A commonly used identifier for the characteristic represented by the property, e.g. a manufacturer or a standard code for a property. propertyID can be
  /// (1) a prefixed string, mainly meant to be used with standards for product properties; (2) a site-specific, non-prefixed string (e.g. the primary key of the property or the vendor-specific ID of the property), or (3)
  /// a URL indicating the type of the property, either pointing to an external vocabulary, or a Web resource that describes the property (e.g. a glossary entry).
  /// Standards bodies should promote a standard prefix for the identifiers of properties from their standards.
  ///
  /// Can be used on: http://schema.org/PropertyValue
  ///
  static const propertyID = IriTerm.prevalidated(
    'http://schema.org/propertyID',
  );

  /// IRI for schemahttp:proprietaryName [Expects: http://schema.org/Text]
  ///
  /// Proprietary name given to the diet plan, typically by its originator or creator.
  ///
  /// Can be used on: http://schema.org/DietarySupplement, http://schema.org/Drug
  ///
  static const proprietaryName = IriTerm.prevalidated(
    'http://schema.org/proprietaryName',
  );

  /// IRI for schemahttp:proteinContent [Expects: http://schema.org/Mass]
  ///
  /// The number of grams of protein.
  ///
  /// Can be used on: http://schema.org/NutritionInformation
  ///
  static const proteinContent = IriTerm.prevalidated(
    'http://schema.org/proteinContent',
  );

  /// IRI for schemahttp:providerMobility [Expects: http://schema.org/Text]
  ///
  /// Indicates the mobility of a provided service (e.g. 'static', 'dynamic').
  ///
  /// Can be used on: http://schema.org/Service
  ///
  static const providerMobility = IriTerm.prevalidated(
    'http://schema.org/providerMobility',
  );

  /// IRI for schemahttp:providesService [Expects: http://schema.org/Service]
  ///
  /// The service provided by this channel.
  ///
  /// Can be used on: http://schema.org/ServiceChannel
  ///
  static const providesService = IriTerm.prevalidated(
    'http://schema.org/providesService',
  );

  /// IRI for schemahttp:publicAccess [Expects: http://schema.org/Boolean]
  ///
  /// A flag to signal that the {[Place]} is open to public visitors.  If this property is omitted there is no assumed default boolean value.
  ///
  /// Can be used on: http://schema.org/Place
  ///
  static const publicAccess = IriTerm.prevalidated(
    'http://schema.org/publicAccess',
  );

  /// IRI for schemahttp:publicTransportClosuresInfo [Expects: http://schema.org/URL, http://schema.org/WebContent]
  ///
  /// Information about public transport closures.
  ///
  /// Can be used on: http://schema.org/SpecialAnnouncement
  ///
  static const publicTransportClosuresInfo = IriTerm.prevalidated(
    'http://schema.org/publicTransportClosuresInfo',
  );

  /// IRI for schemahttp:publication [Expects: http://schema.org/PublicationEvent]
  ///
  /// A publication event associated with the item.
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const publication = IriTerm.prevalidated(
    'http://schema.org/publication',
  );

  /// IRI for schemahttp:publicationType [Expects: http://schema.org/Text]
  ///
  /// The type of the medical article, taken from the US NLM MeSH publication type catalog. See also [MeSH documentation](http://www.nlm.nih.gov/mesh/pubtypes.html).
  ///
  /// Can be used on: http://schema.org/MedicalScholarlyArticle
  ///
  static const publicationType = IriTerm.prevalidated(
    'http://schema.org/publicationType',
  );

  /// IRI for schemahttp:publishedBy [Expects: http://schema.org/Organization, http://schema.org/Person]
  ///
  /// An agent associated with the publication event.
  ///
  /// Can be used on: http://schema.org/PublicationEvent
  ///
  static const publishedBy = IriTerm.prevalidated(
    'http://schema.org/publishedBy',
  );

  /// IRI for schemahttp:publishedOn [Expects: http://schema.org/BroadcastService]
  ///
  /// A broadcast service associated with the publication event.
  ///
  /// Can be used on: http://schema.org/PublicationEvent
  ///
  static const publishedOn = IriTerm.prevalidated(
    'http://schema.org/publishedOn',
  );

  /// IRI for schemahttp:publisher [Expects: http://schema.org/Organization, http://schema.org/Person]
  ///
  /// The publisher of the article in question.
  ///
  /// Can be used on: http://schema.org/CreativeWork, http://schema.org/FinancialIncentive
  ///
  static const publisher = IriTerm.prevalidated('http://schema.org/publisher');

  /// IRI for schemahttp:publisherImprint [Expects: http://schema.org/Organization]
  ///
  /// The publishing division which published the comic.
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const publisherImprint = IriTerm.prevalidated(
    'http://schema.org/publisherImprint',
  );

  /// IRI for schemahttp:purchaseDate [Expects: http://schema.org/Date]
  ///
  /// The date the item, e.g. vehicle, was purchased by the current owner.
  ///
  /// Can be used on: http://schema.org/Product, http://schema.org/Vehicle
  ///
  static const purchaseDate = IriTerm.prevalidated(
    'http://schema.org/purchaseDate',
  );

  /// IRI for schemahttp:purchasePriceLimit [Expects: http://schema.org/MonetaryAmount]
  ///
  /// Optional. The maximum price the item can have and still qualify for this offer.
  ///
  /// Can be used on: http://schema.org/FinancialIncentive
  ///
  static const purchasePriceLimit = IriTerm.prevalidated(
    'http://schema.org/purchasePriceLimit',
  );

  /// IRI for schemahttp:purchaseType [Expects: http://schema.org/PurchaseType]
  ///
  /// Optional. The type of purchase the consumer must make in order to qualify for this incentive.
  ///
  /// Can be used on: http://schema.org/FinancialIncentive
  ///
  static const purchaseType = IriTerm.prevalidated(
    'http://schema.org/purchaseType',
  );

  /// IRI for schemahttp:qualifications [Expects: http://schema.org/EducationalOccupationalCredential, http://schema.org/Text]
  ///
  /// Specific qualifications required for this role or Occupation.
  ///
  /// Can be used on: http://schema.org/JobPosting, http://schema.org/Occupation
  ///
  static const qualifications = IriTerm.prevalidated(
    'http://schema.org/qualifications',
  );

  /// IRI for schemahttp:qualifiedExpense [Expects: http://schema.org/IncentiveQualifiedExpenseType]
  ///
  /// Optional. The types of expenses that are covered by the incentive. For example some incentives are only for the goods (tangible items) but the services (labor) are excluded.
  ///
  /// Can be used on: http://schema.org/FinancialIncentive
  ///
  static const qualifiedExpense = IriTerm.prevalidated(
    'http://schema.org/qualifiedExpense',
  );

  /// IRI for schemahttp:quarantineGuidelines [Expects: http://schema.org/URL, http://schema.org/WebContent]
  ///
  /// Guidelines about quarantine rules, e.g. in the context of a pandemic.
  ///
  /// Can be used on: http://schema.org/SpecialAnnouncement
  ///
  static const quarantineGuidelines = IriTerm.prevalidated(
    'http://schema.org/quarantineGuidelines',
  );

  /// IRI for schemahttp:query [Expects: http://schema.org/Text]
  ///
  /// A sub property of instrument. The query used on this action.
  ///
  /// Can be used on: http://schema.org/SearchAction
  ///
  static const query = IriTerm.prevalidated('http://schema.org/query');

  /// IRI for schemahttp:quest [Expects: http://schema.org/Thing]
  ///
  /// The task that a player-controlled character, or group of characters may complete in order to gain a reward.
  ///
  /// Can be used on: http://schema.org/Game, http://schema.org/VideoGameSeries
  ///
  static const quest = IriTerm.prevalidated('http://schema.org/quest');

  /// IRI for schemahttp:question [Expects: http://schema.org/Question]
  ///
  /// A sub property of object. A question.
  ///
  /// Can be used on: http://schema.org/AskAction
  ///
  static const question = IriTerm.prevalidated('http://schema.org/question');

  /// IRI for schemahttp:rangeIncludes [Expects: http://schema.org/Class]
  ///
  /// Relates a property to a class that constitutes (one of) the expected type(s) for values of the property.
  ///
  /// Can be used on: http://schema.org/Property
  ///
  static const rangeIncludes = IriTerm.prevalidated(
    'http://schema.org/rangeIncludes',
  );

  /// IRI for schemahttp:ratingCount [Expects: http://schema.org/Integer]
  ///
  /// The count of total number of ratings.
  ///
  /// Can be used on: http://schema.org/AggregateRating
  ///
  static const ratingCount = IriTerm.prevalidated(
    'http://schema.org/ratingCount',
  );

  /// IRI for schemahttp:ratingExplanation [Expects: http://schema.org/Text]
  ///
  /// A short explanation (e.g. one to two sentences) providing background context and other information that led to the conclusion expressed in the rating. This is particularly applicable to ratings associated with "fact check" markup using {[ClaimReview]}.
  ///
  /// Can be used on: http://schema.org/Rating
  ///
  static const ratingExplanation = IriTerm.prevalidated(
    'http://schema.org/ratingExplanation',
  );

  /// IRI for schemahttp:ratingValue [Expects: http://schema.org/Number, http://schema.org/Text]
  ///
  /// The rating for the content.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  ///
  /// Can be used on: http://schema.org/Rating
  ///
  static const ratingValue = IriTerm.prevalidated(
    'http://schema.org/ratingValue',
  );

  /// IRI for schemahttp:readBy [Expects: http://schema.org/Person]
  ///
  /// A person who reads (performs) the audiobook.
  ///
  /// Can be used on: http://schema.org/Audiobook
  ///
  static const readBy = IriTerm.prevalidated('http://schema.org/readBy');

  /// IRI for schemahttp:readonlyValue [Expects: http://schema.org/Boolean]
  ///
  /// Whether or not a property is mutable.  Default is false. Specifying this for a property that also has a value makes it act similar to a "hidden" input in an HTML form.
  ///
  /// Can be used on: http://schema.org/PropertyValueSpecification
  ///
  static const readonlyValue = IriTerm.prevalidated(
    'http://schema.org/readonlyValue',
  );

  /// IRI for schemahttp:realEstateAgent [Expects: http://schema.org/RealEstateAgent]
  ///
  /// A sub property of participant. The real estate agent involved in the action.
  ///
  /// Can be used on: http://schema.org/RentAction
  ///
  static const realEstateAgent = IriTerm.prevalidated(
    'http://schema.org/realEstateAgent',
  );

  /// IRI for schemahttp:recipe [Expects: http://schema.org/Recipe]
  ///
  /// A sub property of instrument. The recipe/instructions used to perform the action.
  ///
  /// Can be used on: http://schema.org/CookAction
  ///
  static const recipe = IriTerm.prevalidated('http://schema.org/recipe');

  /// IRI for schemahttp:recipeCategory [Expects: http://schema.org/Text]
  ///
  /// The category of the recipe‚Äîfor example, appetizer, entree, etc.
  ///
  /// Can be used on: http://schema.org/Recipe
  ///
  static const recipeCategory = IriTerm.prevalidated(
    'http://schema.org/recipeCategory',
  );

  /// IRI for schemahttp:recipeCuisine [Expects: http://schema.org/Text]
  ///
  /// The cuisine of the recipe (for example, French or Ethiopian).
  ///
  /// Can be used on: http://schema.org/Recipe
  ///
  static const recipeCuisine = IriTerm.prevalidated(
    'http://schema.org/recipeCuisine',
  );

  /// IRI for schemahttp:recipeInstructions [Expects: http://schema.org/CreativeWork, http://schema.org/ItemList, http://schema.org/Text]
  ///
  /// A step in making the recipe, in the form of a single item (document, video, etc.) or an ordered list with HowToStep and/or HowToSection items.
  ///
  /// Can be used on: http://schema.org/Recipe
  ///
  static const recipeInstructions = IriTerm.prevalidated(
    'http://schema.org/recipeInstructions',
  );

  /// IRI for schemahttp:recipeYield [Expects: http://schema.org/QuantitativeValue, http://schema.org/Text]
  ///
  /// The quantity produced by the recipe (for example, number of people served, number of servings, etc).
  ///
  /// Can be used on: http://schema.org/Recipe
  ///
  static const recipeYield = IriTerm.prevalidated(
    'http://schema.org/recipeYield',
  );

  /// IRI for schemahttp:recognizedBy [Expects: http://schema.org/Organization]
  ///
  /// An organization that acknowledges the validity, value or utility of a credential. Note: recognition may include a process of quality assurance or accreditation.
  ///
  /// Can be used on: http://schema.org/EducationalOccupationalCredential
  ///
  static const recognizedBy = IriTerm.prevalidated(
    'http://schema.org/recognizedBy',
  );

  /// IRI for schemahttp:recognizingAuthority [Expects: http://schema.org/Organization]
  ///
  /// If applicable, the organization that officially recognizes this entity as part of its endorsed system of medicine.
  ///
  /// Can be used on: http://schema.org/MedicalEntity
  ///
  static const recognizingAuthority = IriTerm.prevalidated(
    'http://schema.org/recognizingAuthority',
  );

  /// IRI for schemahttp:recommendationStrength [Expects: http://schema.org/Text]
  ///
  /// Strength of the guideline's recommendation (e.g. 'class I').
  ///
  /// Can be used on: http://schema.org/MedicalGuidelineRecommendation
  ///
  static const recommendationStrength = IriTerm.prevalidated(
    'http://schema.org/recommendationStrength',
  );

  /// IRI for schemahttp:recommendedIntake [Expects: http://schema.org/RecommendedDoseSchedule]
  ///
  /// Recommended intake of this supplement for a given population as defined by a specific recommending authority.
  ///
  /// Can be used on: http://schema.org/DietarySupplement
  ///
  static const recommendedIntake = IriTerm.prevalidated(
    'http://schema.org/recommendedIntake',
  );

  /// IRI for schemahttp:recordLabel [Expects: http://schema.org/Organization]
  ///
  /// The label that issued the release.
  ///
  /// Can be used on: http://schema.org/MusicRelease
  ///
  static const recordLabel = IriTerm.prevalidated(
    'http://schema.org/recordLabel',
  );

  /// IRI for schemahttp:recourseLoan [Expects: http://schema.org/Boolean]
  ///
  /// The only way you get the money back in the event of default is the security. Recourse is where you still have the opportunity to go back to the borrower for the rest of the money.
  ///
  /// Can be used on: http://schema.org/LoanOrCredit
  ///
  static const recourseLoan = IriTerm.prevalidated(
    'http://schema.org/recourseLoan',
  );

  /// IRI for schemahttp:referee [Expects: http://schema.org/Person]
  ///
  /// An official who watches a game or match closely to enforce the rules and arbitrate on matters arising from the play such as referees, umpires or judges. The name of the effective function can vary according to the sport.
  ///
  /// Can be used on: http://schema.org/SportsEvent
  ///
  static const referee = IriTerm.prevalidated('http://schema.org/referee');

  /// IRI for schemahttp:referenceQuantity [Expects: http://schema.org/QuantitativeValue]
  ///
  /// The reference quantity for which a certain price applies, e.g. 1 EUR per 4 kWh of electricity. This property is a replacement for unitOfMeasurement for the advanced cases where the price does not relate to a standard unit.
  ///
  /// Can be used on: http://schema.org/UnitPriceSpecification
  ///
  static const referenceQuantity = IriTerm.prevalidated(
    'http://schema.org/referenceQuantity',
  );

  /// IRI for schemahttp:referencesOrder [Expects: http://schema.org/Order]
  ///
  /// The Order(s) related to this Invoice. One or more Orders may be combined into a single Invoice.
  ///
  /// Can be used on: http://schema.org/Invoice
  ///
  static const referencesOrder = IriTerm.prevalidated(
    'http://schema.org/referencesOrder',
  );

  /// IRI for schemahttp:refundType [Expects: http://schema.org/RefundTypeEnumeration]
  ///
  /// A refund type, from an enumerated list.
  ///
  /// Can be used on: http://schema.org/MerchantReturnPolicy, http://schema.org/MerchantReturnPolicySeasonalOverride
  ///
  static const refundType = IriTerm.prevalidated(
    'http://schema.org/refundType',
  );

  /// IRI for schemahttp:regionDrained [Expects: http://schema.org/AnatomicalStructure, http://schema.org/AnatomicalSystem]
  ///
  /// The anatomical or organ system drained by this vessel; generally refers to a specific part of an organ.
  ///
  /// Can be used on: http://schema.org/LymphaticVessel, http://schema.org/Vein
  ///
  static const regionDrained = IriTerm.prevalidated(
    'http://schema.org/regionDrained',
  );

  /// IRI for schemahttp:regionsAllowed [Expects: http://schema.org/Place]
  ///
  /// The regions where the media is allowed. If not specified, then it's assumed to be allowed everywhere. Specify the countries in [ISO 3166 format](http://en.wikipedia.org/wiki/ISO_3166).
  ///
  /// Can be used on: http://schema.org/MediaObject
  ///
  static const regionsAllowed = IriTerm.prevalidated(
    'http://schema.org/regionsAllowed',
  );

  /// IRI for schemahttp:relatedAnatomy [Expects: http://schema.org/AnatomicalStructure, http://schema.org/AnatomicalSystem]
  ///
  /// Anatomical systems or structures that relate to the superficial anatomy.
  ///
  /// Can be used on: http://schema.org/SuperficialAnatomy
  ///
  static const relatedAnatomy = IriTerm.prevalidated(
    'http://schema.org/relatedAnatomy',
  );

  /// IRI for schemahttp:relatedCondition [Expects: http://schema.org/MedicalCondition]
  ///
  /// A medical condition associated with this anatomy.
  ///
  /// Can be used on: http://schema.org/AnatomicalStructure, http://schema.org/AnatomicalSystem, http://schema.org/SuperficialAnatomy
  ///
  static const relatedCondition = IriTerm.prevalidated(
    'http://schema.org/relatedCondition',
  );

  /// IRI for schemahttp:relatedDrug [Expects: http://schema.org/Drug]
  ///
  /// Any other drug related to this one, for example commonly-prescribed alternatives.
  ///
  /// Can be used on: http://schema.org/Drug
  ///
  static const relatedDrug = IriTerm.prevalidated(
    'http://schema.org/relatedDrug',
  );

  /// IRI for schemahttp:relatedLink [Expects: http://schema.org/URL]
  ///
  /// A link related to this web page, for example to other related web pages.
  ///
  /// Can be used on: http://schema.org/WebPage
  ///
  static const relatedLink = IriTerm.prevalidated(
    'http://schema.org/relatedLink',
  );

  /// IRI for schemahttp:relatedStructure [Expects: http://schema.org/AnatomicalStructure]
  ///
  /// Related anatomical structure(s) that are not part of the system but relate or connect to it, such as vascular bundles associated with an organ system.
  ///
  /// Can be used on: http://schema.org/AnatomicalSystem
  ///
  static const relatedStructure = IriTerm.prevalidated(
    'http://schema.org/relatedStructure',
  );

  /// IRI for schemahttp:relatedTherapy [Expects: http://schema.org/MedicalTherapy]
  ///
  /// A medical therapy related to this anatomy.
  ///
  /// Can be used on: http://schema.org/AnatomicalStructure, http://schema.org/AnatomicalSystem, http://schema.org/SuperficialAnatomy
  ///
  static const relatedTherapy = IriTerm.prevalidated(
    'http://schema.org/relatedTherapy',
  );

  /// IRI for schemahttp:relatedTo [Expects: http://schema.org/Person]
  ///
  /// The most generic familial relation.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const relatedTo = IriTerm.prevalidated('http://schema.org/relatedTo');

  /// IRI for schemahttp:releaseDate [Expects: http://schema.org/Date]
  ///
  /// The release date of a product or product model. This can be used to distinguish the exact variant of a product.
  ///
  /// Can be used on: http://schema.org/Product
  ///
  static const releaseDate = IriTerm.prevalidated(
    'http://schema.org/releaseDate',
  );

  /// IRI for schemahttp:releaseNotes [Expects: http://schema.org/Text, http://schema.org/URL]
  ///
  /// Description of what changed in this version.
  ///
  /// Can be used on: http://schema.org/SoftwareApplication
  ///
  static const releaseNotes = IriTerm.prevalidated(
    'http://schema.org/releaseNotes',
  );

  /// IRI for schemahttp:releasedEvent [Expects: http://schema.org/PublicationEvent]
  ///
  /// The place and time the release was issued, expressed as a PublicationEvent.
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const releasedEvent = IriTerm.prevalidated(
    'http://schema.org/releasedEvent',
  );

  /// IRI for schemahttp:relevantOccupation [Expects: http://schema.org/Occupation]
  ///
  /// The Occupation for the JobPosting.
  ///
  /// Can be used on: http://schema.org/JobPosting
  ///
  static const relevantOccupation = IriTerm.prevalidated(
    'http://schema.org/relevantOccupation',
  );

  /// IRI for schemahttp:relevantSpecialty [Expects: http://schema.org/MedicalSpecialty]
  ///
  /// If applicable, a medical specialty in which this entity is relevant.
  ///
  /// Can be used on: http://schema.org/MedicalEntity
  ///
  static const relevantSpecialty = IriTerm.prevalidated(
    'http://schema.org/relevantSpecialty',
  );

  /// IRI for schemahttp:remainingAttendeeCapacity [Expects: http://schema.org/Integer]
  ///
  /// The number of attendee places for an event that remain unallocated.
  ///
  /// Can be used on: http://schema.org/Event
  ///
  static const remainingAttendeeCapacity = IriTerm.prevalidated(
    'http://schema.org/remainingAttendeeCapacity',
  );

  /// IRI for schemahttp:renegotiableLoan [Expects: http://schema.org/Boolean]
  ///
  /// Whether the terms for payment of interest can be renegotiated during the life of the loan.
  ///
  /// Can be used on: http://schema.org/LoanOrCredit
  ///
  static const renegotiableLoan = IriTerm.prevalidated(
    'http://schema.org/renegotiableLoan',
  );

  /// IRI for schemahttp:repeatCount [Expects: http://schema.org/Integer]
  ///
  /// Defines the number of times a recurring {[Event]} will take place.
  ///
  /// Can be used on: http://schema.org/Schedule
  ///
  static const repeatCount = IriTerm.prevalidated(
    'http://schema.org/repeatCount',
  );

  /// IRI for schemahttp:repeatFrequency [Expects: http://schema.org/Duration, http://schema.org/Text]
  ///
  /// Defines the frequency at which {[Event]}s will occur according to a schedule {[Schedule]}. The intervals between
  /// events should be defined as a {[Duration]} of time.
  ///
  /// Can be used on: http://schema.org/Schedule
  ///
  static const repeatFrequency = IriTerm.prevalidated(
    'http://schema.org/repeatFrequency',
  );

  /// IRI for schemahttp:repetitions [Expects: http://schema.org/Number, http://schema.org/QuantitativeValue]
  ///
  /// Number of times one should repeat the activity.
  ///
  /// Can be used on: http://schema.org/ExercisePlan
  ///
  static const repetitions = IriTerm.prevalidated(
    'http://schema.org/repetitions',
  );

  /// IRI for schemahttp:replacee [Expects: http://schema.org/Thing]
  ///
  /// A sub property of object. The object that is being replaced.
  ///
  /// Can be used on: http://schema.org/ReplaceAction
  ///
  static const replacee = IriTerm.prevalidated('http://schema.org/replacee');

  /// IRI for schemahttp:replacer [Expects: http://schema.org/Thing]
  ///
  /// A sub property of object. The object that replaces.
  ///
  /// Can be used on: http://schema.org/ReplaceAction
  ///
  static const replacer = IriTerm.prevalidated('http://schema.org/replacer');

  /// IRI for schemahttp:replyToUrl [Expects: http://schema.org/URL]
  ///
  /// The URL at which a reply may be posted to the specified UserComment.
  ///
  /// Can be used on: http://schema.org/UserComments
  ///
  static const replyToUrl = IriTerm.prevalidated(
    'http://schema.org/replyToUrl',
  );

  /// IRI for schemahttp:reportNumber [Expects: http://schema.org/Text]
  ///
  /// The number or other unique designator assigned to a Report by the publishing organization.
  ///
  /// Can be used on: http://schema.org/Report
  ///
  static const reportNumber = IriTerm.prevalidated(
    'http://schema.org/reportNumber',
  );

  /// IRI for schemahttp:representativeOfPage [Expects: http://schema.org/Boolean]
  ///
  /// Indicates whether this image is representative of the content of the page.
  ///
  /// Can be used on: http://schema.org/ImageObject
  ///
  static const representativeOfPage = IriTerm.prevalidated(
    'http://schema.org/representativeOfPage',
  );

  /// IRI for schemahttp:requiredCollateral [Expects: http://schema.org/Text, http://schema.org/Thing]
  ///
  /// Assets required to secure loan or credit repayments. It may take form of third party pledge, goods, financial instruments (cash, securities, etc.)
  ///
  /// Can be used on: http://schema.org/LoanOrCredit
  ///
  static const requiredCollateral = IriTerm.prevalidated(
    'http://schema.org/requiredCollateral',
  );

  /// IRI for schemahttp:requiredGender [Expects: http://schema.org/Text]
  ///
  /// Audiences defined by a person's gender.
  ///
  /// Can be used on: http://schema.org/PeopleAudience
  ///
  static const requiredGender = IriTerm.prevalidated(
    'http://schema.org/requiredGender',
  );

  /// IRI for schemahttp:requiredMaxAge [Expects: http://schema.org/Integer]
  ///
  /// Audiences defined by a person's maximum age.
  ///
  /// Can be used on: http://schema.org/PeopleAudience
  ///
  static const requiredMaxAge = IriTerm.prevalidated(
    'http://schema.org/requiredMaxAge',
  );

  /// IRI for schemahttp:requiredMinAge [Expects: http://schema.org/Integer]
  ///
  /// Audiences defined by a person's minimum age.
  ///
  /// Can be used on: http://schema.org/PeopleAudience
  ///
  static const requiredMinAge = IriTerm.prevalidated(
    'http://schema.org/requiredMinAge',
  );

  /// IRI for schemahttp:requiredQuantity [Expects: http://schema.org/Number, http://schema.org/QuantitativeValue, http://schema.org/Text]
  ///
  /// The required quantity of the item(s).
  ///
  /// Can be used on: http://schema.org/HowToItem
  ///
  static const requiredQuantity = IriTerm.prevalidated(
    'http://schema.org/requiredQuantity',
  );

  /// IRI for schemahttp:requirements [Expects: http://schema.org/Text, http://schema.org/URL]
  ///
  /// Component dependency requirements for application. This includes runtime environments and shared libraries that are not included in the application distribution package, but required to run the application (examples: DirectX, Java or .NET runtime).
  ///
  /// Can be used on: http://schema.org/SoftwareApplication
  ///
  static const requirements = IriTerm.prevalidated(
    'http://schema.org/requirements',
  );

  /// IRI for schemahttp:requiresSubscription [Expects: http://schema.org/Boolean, http://schema.org/MediaSubscription]
  ///
  /// Indicates if use of the media require a subscription  (either paid or free). Allowed values are ```true``` or ```false``` (note that an earlier version had 'yes', 'no').
  ///
  /// Can be used on: http://schema.org/ActionAccessSpecification, http://schema.org/MediaObject
  ///
  static const requiresSubscription = IriTerm.prevalidated(
    'http://schema.org/requiresSubscription',
  );

  /// IRI for schemahttp:reservationFor [Expects: http://schema.org/Thing]
  ///
  /// The thing -- flight, event, restaurant, etc. being reserved.
  ///
  /// Can be used on: http://schema.org/Reservation
  ///
  static const reservationFor = IriTerm.prevalidated(
    'http://schema.org/reservationFor',
  );

  /// IRI for schemahttp:reservationId [Expects: http://schema.org/Text]
  ///
  /// A unique identifier for the reservation.
  ///
  /// Can be used on: http://schema.org/Reservation
  ///
  static const reservationId = IriTerm.prevalidated(
    'http://schema.org/reservationId',
  );

  /// IRI for schemahttp:reservationStatus [Expects: http://schema.org/ReservationStatusType]
  ///
  /// The current status of the reservation.
  ///
  /// Can be used on: http://schema.org/Reservation
  ///
  static const reservationStatus = IriTerm.prevalidated(
    'http://schema.org/reservationStatus',
  );

  /// IRI for schemahttp:reservedTicket [Expects: http://schema.org/Ticket]
  ///
  /// A ticket associated with the reservation.
  ///
  /// Can be used on: http://schema.org/Reservation
  ///
  static const reservedTicket = IriTerm.prevalidated(
    'http://schema.org/reservedTicket',
  );

  /// IRI for schemahttp:responsibilities [Expects: http://schema.org/Text]
  ///
  /// Responsibilities associated with this role or Occupation.
  ///
  /// Can be used on: http://schema.org/JobPosting, http://schema.org/Occupation
  ///
  static const responsibilities = IriTerm.prevalidated(
    'http://schema.org/responsibilities',
  );

  /// IRI for schemahttp:restPeriods [Expects: http://schema.org/QuantitativeValue, http://schema.org/Text]
  ///
  /// How often one should break from the activity.
  ///
  /// Can be used on: http://schema.org/ExercisePlan
  ///
  static const restPeriods = IriTerm.prevalidated(
    'http://schema.org/restPeriods',
  );

  /// IRI for schemahttp:restockingFee [Expects: http://schema.org/MonetaryAmount, http://schema.org/Number]
  ///
  /// Use {[MonetaryAmount]} to specify a fixed restocking fee for product returns, or use {[Number]} to specify a percentage of the product price paid by the customer.
  ///
  /// Can be used on: http://schema.org/MerchantReturnPolicy, http://schema.org/MerchantReturnPolicySeasonalOverride
  ///
  static const restockingFee = IriTerm.prevalidated(
    'http://schema.org/restockingFee',
  );

  /// IRI for schemahttp:resultComment [Expects: http://schema.org/Comment]
  ///
  /// A sub property of result. The Comment created or sent as a result of this action.
  ///
  /// Can be used on: http://schema.org/CommentAction, http://schema.org/ReplyAction
  ///
  static const resultComment = IriTerm.prevalidated(
    'http://schema.org/resultComment',
  );

  /// IRI for schemahttp:resultReview [Expects: http://schema.org/Review]
  ///
  /// A sub property of result. The review that resulted in the performing of the action.
  ///
  /// Can be used on: http://schema.org/ReviewAction
  ///
  static const resultReview = IriTerm.prevalidated(
    'http://schema.org/resultReview',
  );

  /// IRI for schemahttp:returnFees [Expects: http://schema.org/ReturnFeesEnumeration]
  ///
  /// The type of return fees for purchased products (for any return reason).
  ///
  /// Can be used on: http://schema.org/MerchantReturnPolicy, http://schema.org/MerchantReturnPolicySeasonalOverride
  ///
  static const returnFees = IriTerm.prevalidated(
    'http://schema.org/returnFees',
  );

  /// IRI for schemahttp:returnLabelSource [Expects: http://schema.org/ReturnLabelSourceEnumeration]
  ///
  /// The method (from an enumeration) by which the customer obtains a return shipping label for a product returned for any reason.
  ///
  /// Can be used on: http://schema.org/MerchantReturnPolicy
  ///
  static const returnLabelSource = IriTerm.prevalidated(
    'http://schema.org/returnLabelSource',
  );

  /// IRI for schemahttp:returnMethod [Expects: http://schema.org/ReturnMethodEnumeration]
  ///
  /// The type of return method offered, specified from an enumeration.
  ///
  /// Can be used on: http://schema.org/MerchantReturnPolicy, http://schema.org/MerchantReturnPolicySeasonalOverride
  ///
  static const returnMethod = IriTerm.prevalidated(
    'http://schema.org/returnMethod',
  );

  /// IRI for schemahttp:returnPolicyCategory [Expects: http://schema.org/MerchantReturnEnumeration]
  ///
  /// Specifies an applicable return policy (from an enumeration).
  ///
  /// Can be used on: http://schema.org/MerchantReturnPolicy, http://schema.org/MerchantReturnPolicySeasonalOverride
  ///
  static const returnPolicyCategory = IriTerm.prevalidated(
    'http://schema.org/returnPolicyCategory',
  );

  /// IRI for schemahttp:returnPolicyCountry [Expects: http://schema.org/Country, http://schema.org/Text]
  ///
  /// The country where the product has to be sent to for returns, for example "Ireland" using the {[name]} property of {[Country]}. You can also provide the two-letter [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1). Note that this can be different from the country where the product was originally shipped from or sent to.
  ///
  /// Can be used on: http://schema.org/MerchantReturnPolicy
  ///
  static const returnPolicyCountry = IriTerm.prevalidated(
    'http://schema.org/returnPolicyCountry',
  );

  /// IRI for schemahttp:returnPolicySeasonalOverride [Expects: http://schema.org/MerchantReturnPolicySeasonalOverride]
  ///
  /// Seasonal override of a return policy.
  ///
  /// Can be used on: http://schema.org/MerchantReturnPolicy
  ///
  static const returnPolicySeasonalOverride = IriTerm.prevalidated(
    'http://schema.org/returnPolicySeasonalOverride',
  );

  /// IRI for schemahttp:returnShippingFeesAmount [Expects: http://schema.org/MonetaryAmount]
  ///
  /// Amount of shipping costs for product returns (for any reason). Applicable when property {[returnFees]} equals {[ReturnShippingFees]}.
  ///
  /// Can be used on: http://schema.org/MerchantReturnPolicy, http://schema.org/MerchantReturnPolicySeasonalOverride
  ///
  static const returnShippingFeesAmount = IriTerm.prevalidated(
    'http://schema.org/returnShippingFeesAmount',
  );

  /// IRI for schemahttp:reviewAspect [Expects: http://schema.org/Text]
  ///
  /// This Review or Rating is relevant to this part or facet of the itemReviewed.
  ///
  /// Can be used on: http://schema.org/Guide, http://schema.org/Rating, http://schema.org/Review
  ///
  static const reviewAspect = IriTerm.prevalidated(
    'http://schema.org/reviewAspect',
  );

  /// IRI for schemahttp:reviewBody [Expects: http://schema.org/Text]
  ///
  /// The actual body of the review.
  ///
  /// Can be used on: http://schema.org/Review
  ///
  static const reviewBody = IriTerm.prevalidated(
    'http://schema.org/reviewBody',
  );

  /// IRI for schemahttp:reviewCount [Expects: http://schema.org/Integer]
  ///
  /// The count of total number of reviews.
  ///
  /// Can be used on: http://schema.org/AggregateRating
  ///
  static const reviewCount = IriTerm.prevalidated(
    'http://schema.org/reviewCount',
  );

  /// IRI for schemahttp:reviewRating [Expects: http://schema.org/Rating]
  ///
  /// The rating given in this review. Note that reviews can themselves be rated. The ```reviewRating``` applies to rating given by the review. The {[aggregateRating]} property applies to the review itself, as a creative work.
  ///
  /// Can be used on: http://schema.org/Review
  ///
  static const reviewRating = IriTerm.prevalidated(
    'http://schema.org/reviewRating',
  );

  /// IRI for schemahttp:reviewedBy [Expects: http://schema.org/Organization, http://schema.org/Person]
  ///
  /// People or organizations that have reviewed the content on this web page for accuracy and/or completeness.
  ///
  /// Can be used on: http://schema.org/WebPage
  ///
  static const reviewedBy = IriTerm.prevalidated(
    'http://schema.org/reviewedBy',
  );

  /// IRI for schemahttp:reviews [Expects: http://schema.org/Review]
  ///
  /// Review of the item.
  ///
  /// Can be used on: http://schema.org/CreativeWork, http://schema.org/Offer, http://schema.org/Organization, http://schema.org/Place, http://schema.org/Product
  ///
  static const reviews = IriTerm.prevalidated('http://schema.org/reviews');

  /// IRI for schemahttp:riskFactor [Expects: http://schema.org/MedicalRiskFactor]
  ///
  /// A modifiable or non-modifiable factor that increases the risk of a patient contracting this condition, e.g. age,  coexisting condition.
  ///
  /// Can be used on: http://schema.org/MedicalCondition
  ///
  static const riskFactor = IriTerm.prevalidated(
    'http://schema.org/riskFactor',
  );

  /// IRI for schemahttp:risks [Expects: http://schema.org/Text]
  ///
  /// Specific physiologic risks associated to the diet plan.
  ///
  /// Can be used on: http://schema.org/Diet
  ///
  static const risks = IriTerm.prevalidated('http://schema.org/risks');

  /// IRI for schemahttp:roofLoad [Expects: http://schema.org/QuantitativeValue]
  ///
  /// The permitted total weight of cargo and installations (e.g. a roof rack) on top of the vehicle.\n\nTypical unit code(s): KGM for kilogram, LBR for pound\n\n* Note 1: You can indicate additional information in the {[name]} of the {[QuantitativeValue]} node.\n* Note 2: You may also link to a {[QualitativeValue]} node that provides additional information using {[valueReference]}\n* Note 3: Note that you can use {[minValue]} and {[maxValue]} to indicate ranges.
  ///
  /// Can be used on: http://schema.org/BusOrCoach, http://schema.org/Car
  ///
  static const roofLoad = IriTerm.prevalidated('http://schema.org/roofLoad');

  /// IRI for schemahttp:rsvpResponse [Expects: http://schema.org/RsvpResponseType]
  ///
  /// The response (yes, no, maybe) to the RSVP.
  ///
  /// Can be used on: http://schema.org/RsvpAction
  ///
  static const rsvpResponse = IriTerm.prevalidated(
    'http://schema.org/rsvpResponse',
  );

  /// IRI for schemahttp:runsTo [Expects: http://schema.org/Vessel]
  ///
  /// The vasculature the lymphatic structure runs, or efferents, to.
  ///
  /// Can be used on: http://schema.org/LymphaticVessel
  ///
  static const runsTo = IriTerm.prevalidated('http://schema.org/runsTo');

  /// IRI for schemahttp:runtime [Expects: http://schema.org/Text]
  ///
  /// Runtime platform or script interpreter dependencies (example: Java v1, Python 2.3, .NET Framework 3.0).
  ///
  /// Can be used on: http://schema.org/SoftwareSourceCode
  ///
  static const runtime = IriTerm.prevalidated('http://schema.org/runtime');

  /// IRI for schemahttp:rxcui [Expects: http://schema.org/Text]
  ///
  /// The RxCUI drug identifier from RXNORM.
  ///
  /// Can be used on: http://schema.org/Drug
  ///
  static const rxcui = IriTerm.prevalidated('http://schema.org/rxcui');

  /// IRI for schemahttp:safetyConsideration [Expects: http://schema.org/Text]
  ///
  /// Any potential safety concern associated with the supplement. May include interactions with other drugs and foods, pregnancy, breastfeeding, known adverse reactions, and documented efficacy of the supplement.
  ///
  /// Can be used on: http://schema.org/DietarySupplement
  ///
  static const safetyConsideration = IriTerm.prevalidated(
    'http://schema.org/safetyConsideration',
  );

  /// IRI for schemahttp:salaryCurrency [Expects: http://schema.org/Text]
  ///
  /// The currency (coded using [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217)) used for the main salary information in this job posting or for this employee.
  ///
  /// Can be used on: http://schema.org/EmployeeRole, http://schema.org/JobPosting
  ///
  static const salaryCurrency = IriTerm.prevalidated(
    'http://schema.org/salaryCurrency',
  );

  /// IRI for schemahttp:salaryUponCompletion [Expects: http://schema.org/MonetaryAmountDistribution]
  ///
  /// The expected salary upon completing the training.
  ///
  /// Can be used on: http://schema.org/EducationalOccupationalProgram
  ///
  static const salaryUponCompletion = IriTerm.prevalidated(
    'http://schema.org/salaryUponCompletion',
  );

  /// IRI for schemahttp:sameAs [Expects: http://schema.org/URL]
  ///
  /// URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Wikidata entry, or official website.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const sameAs = IriTerm.prevalidated('http://schema.org/sameAs');

  /// IRI for schemahttp:sampleType [Expects: http://schema.org/Text]
  ///
  /// What type of code sample: full (compile ready) solution, code snippet, inline code, scripts, template.
  ///
  /// Can be used on: http://schema.org/SoftwareSourceCode
  ///
  static const sampleType = IriTerm.prevalidated(
    'http://schema.org/sampleType',
  );

  /// IRI for schemahttp:saturatedFatContent [Expects: http://schema.org/Mass]
  ///
  /// The number of grams of saturated fat.
  ///
  /// Can be used on: http://schema.org/NutritionInformation
  ///
  static const saturatedFatContent = IriTerm.prevalidated(
    'http://schema.org/saturatedFatContent',
  );

  /// IRI for schemahttp:scheduleTimezone [Expects: http://schema.org/Text]
  ///
  /// Indicates the timezone for which the time(s) indicated in the {[Schedule]} are given. The value provided should be among those listed in the IANA Time Zone Database.
  ///
  /// Can be used on: http://schema.org/Schedule
  ///
  static const scheduleTimezone = IriTerm.prevalidated(
    'http://schema.org/scheduleTimezone',
  );

  /// IRI for schemahttp:scheduledPaymentDate [Expects: http://schema.org/Date]
  ///
  /// The date the invoice is scheduled to be paid.
  ///
  /// Can be used on: http://schema.org/Invoice
  ///
  static const scheduledPaymentDate = IriTerm.prevalidated(
    'http://schema.org/scheduledPaymentDate',
  );

  /// IRI for schemahttp:scheduledTime [Expects: http://schema.org/Date, http://schema.org/DateTime]
  ///
  /// The time the object is scheduled to.
  ///
  /// Can be used on: http://schema.org/PlanAction
  ///
  static const scheduledTime = IriTerm.prevalidated(
    'http://schema.org/scheduledTime',
  );

  /// IRI for schemahttp:schemaVersion [Expects: http://schema.org/Text, http://schema.org/URL]
  ///
  /// Indicates (by URL or string) a particular version of a schema used in some CreativeWork. This property was created primarily to
  /// indicate the use of a specific schema.org release, e.g. ```10.0``` as a simple string, or more explicitly via URL, ```http://schema.org/docs/releases.html#v10.0```. There may be situations in which other schemas might usefully be referenced this way, e.g. ```http://dublincore.org/specifications/dublin-core/dces/1999-07-02/``` but this has not been carefully explored in the community.
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const schemaVersion = IriTerm.prevalidated(
    'http://schema.org/schemaVersion',
  );

  /// IRI for schemahttp:schoolClosuresInfo [Expects: http://schema.org/URL, http://schema.org/WebContent]
  ///
  /// Information about school closures.
  ///
  /// Can be used on: http://schema.org/SpecialAnnouncement
  ///
  static const schoolClosuresInfo = IriTerm.prevalidated(
    'http://schema.org/schoolClosuresInfo',
  );

  /// IRI for schemahttp:screenCount [Expects: http://schema.org/Number]
  ///
  /// The number of screens in the movie theater.
  ///
  /// Can be used on: http://schema.org/MovieTheater
  ///
  static const screenCount = IriTerm.prevalidated(
    'http://schema.org/screenCount',
  );

  /// IRI for schemahttp:screenshot [Expects: http://schema.org/ImageObject, http://schema.org/URL]
  ///
  /// A link to a screenshot image of the app.
  ///
  /// Can be used on: http://schema.org/SoftwareApplication
  ///
  static const screenshot = IriTerm.prevalidated(
    'http://schema.org/screenshot',
  );

  /// IRI for schemahttp:sdDatePublished [Expects: http://schema.org/Date]
  ///
  /// Indicates the date on which the current structured data was generated / published. Typically used alongside {[sdPublisher]}.
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const sdDatePublished = IriTerm.prevalidated(
    'http://schema.org/sdDatePublished',
  );

  /// IRI for schemahttp:sdLicense [Expects: http://schema.org/CreativeWork, http://schema.org/URL]
  ///
  /// A license document that applies to this structured data, typically indicated by URL.
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const sdLicense = IriTerm.prevalidated('http://schema.org/sdLicense');

  /// IRI for schemahttp:sdPublisher [Expects: http://schema.org/Organization, http://schema.org/Person]
  ///
  /// Indicates the party responsible for generating and publishing the current structured data markup, typically in cases where the structured data is derived automatically from existing published content but published on a different site. For example, student projects and open data initiatives often re-publish existing content with more explicitly structured metadata. The
  /// {[sdPublisher]} property helps make such practices more explicit.
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const sdPublisher = IriTerm.prevalidated(
    'http://schema.org/sdPublisher',
  );

  /// IRI for schemahttp:seasonNumber [Expects: http://schema.org/Integer, http://schema.org/Text]
  ///
  /// Position of the season within an ordered group of seasons.
  ///
  /// Can be used on: http://schema.org/CreativeWorkSeason
  ///
  static const seasonNumber = IriTerm.prevalidated(
    'http://schema.org/seasonNumber',
  );

  /// IRI for schemahttp:seasonalOverride [Expects: http://schema.org/OpeningHoursSpecification]
  ///
  /// Limited period during which these shipping conditions apply.
  ///
  /// Can be used on: http://schema.org/ShippingConditions
  ///
  static const seasonalOverride = IriTerm.prevalidated(
    'http://schema.org/seasonalOverride',
  );

  /// IRI for schemahttp:seasons [Expects: http://schema.org/CreativeWorkSeason]
  ///
  /// A season in a media series.
  ///
  /// Can be used on: http://schema.org/RadioSeries, http://schema.org/TVSeries, http://schema.org/VideoGameSeries
  ///
  static const seasons = IriTerm.prevalidated('http://schema.org/seasons');

  /// IRI for schemahttp:seatNumber [Expects: http://schema.org/Text]
  ///
  /// The location of the reserved seat (e.g., 27).
  ///
  /// Can be used on: http://schema.org/Seat
  ///
  static const seatNumber = IriTerm.prevalidated(
    'http://schema.org/seatNumber',
  );

  /// IRI for schemahttp:seatRow [Expects: http://schema.org/Text]
  ///
  /// The row location of the reserved seat (e.g., B).
  ///
  /// Can be used on: http://schema.org/Seat
  ///
  static const seatRow = IriTerm.prevalidated('http://schema.org/seatRow');

  /// IRI for schemahttp:seatSection [Expects: http://schema.org/Text]
  ///
  /// The section location of the reserved seat (e.g. Orchestra).
  ///
  /// Can be used on: http://schema.org/Seat
  ///
  static const seatSection = IriTerm.prevalidated(
    'http://schema.org/seatSection',
  );

  /// IRI for schemahttp:seatingCapacity [Expects: http://schema.org/Number, http://schema.org/QuantitativeValue]
  ///
  /// The number of persons that can be seated (e.g. in a vehicle), both in terms of the physical space available, and in terms of limitations set by law.\n\nTypical unit code(s): C62 for persons.
  ///
  /// Can be used on: http://schema.org/Vehicle
  ///
  static const seatingCapacity = IriTerm.prevalidated(
    'http://schema.org/seatingCapacity',
  );

  /// IRI for schemahttp:seatingType [Expects: http://schema.org/QualitativeValue, http://schema.org/Text]
  ///
  /// The type/class of the seat.
  ///
  /// Can be used on: http://schema.org/Seat
  ///
  static const seatingType = IriTerm.prevalidated(
    'http://schema.org/seatingType',
  );

  /// IRI for schemahttp:secondaryPrevention [Expects: http://schema.org/MedicalTherapy]
  ///
  /// A preventative therapy used to prevent reoccurrence of the medical condition after an initial episode of the condition.
  ///
  /// Can be used on: http://schema.org/MedicalCondition
  ///
  static const secondaryPrevention = IriTerm.prevalidated(
    'http://schema.org/secondaryPrevention',
  );

  /// IRI for schemahttp:securityClearanceRequirement [Expects: http://schema.org/Text, http://schema.org/URL]
  ///
  /// A description of any security clearance requirements of the job.
  ///
  /// Can be used on: http://schema.org/JobPosting
  ///
  static const securityClearanceRequirement = IriTerm.prevalidated(
    'http://schema.org/securityClearanceRequirement',
  );

  /// IRI for schemahttp:securityScreening [Expects: http://schema.org/Text]
  ///
  /// The type of security screening the passenger is subject to.
  ///
  /// Can be used on: http://schema.org/FlightReservation
  ///
  static const securityScreening = IriTerm.prevalidated(
    'http://schema.org/securityScreening',
  );

  /// IRI for schemahttp:seeks [Expects: http://schema.org/Demand]
  ///
  /// A pointer to products or services sought by the organization or person (demand).
  ///
  /// Can be used on: http://schema.org/Organization, http://schema.org/Person
  ///
  static const seeks = IriTerm.prevalidated('http://schema.org/seeks');

  /// IRI for schemahttp:sender [Expects: http://schema.org/Audience, http://schema.org/Organization, http://schema.org/Person]
  ///
  /// A sub property of participant. The participant who is at the sending end of the action.
  ///
  /// Can be used on: http://schema.org/Message, http://schema.org/ReceiveAction
  ///
  static const sender = IriTerm.prevalidated('http://schema.org/sender');

  /// IRI for schemahttp:sensoryRequirement [Expects: http://schema.org/DefinedTerm, http://schema.org/Text, http://schema.org/URL]
  ///
  /// A description of any sensory requirements and levels necessary to function on the job, including hearing and vision. Defined terms such as those in O*net may be used, but note that there is no way to specify the level of ability as well as its nature when using a defined term.
  ///
  /// Can be used on: http://schema.org/JobPosting
  ///
  static const sensoryRequirement = IriTerm.prevalidated(
    'http://schema.org/sensoryRequirement',
  );

  /// IRI for schemahttp:sensoryUnit [Expects: http://schema.org/AnatomicalStructure, http://schema.org/SuperficialAnatomy]
  ///
  /// The neurological pathway extension that inputs and sends information to the brain or spinal cord.
  ///
  /// Can be used on: http://schema.org/Nerve
  ///
  static const sensoryUnit = IriTerm.prevalidated(
    'http://schema.org/sensoryUnit',
  );

  /// IRI for schemahttp:seriousAdverseOutcome [Expects: http://schema.org/MedicalEntity]
  ///
  /// A possible serious complication and/or serious side effect of this therapy. Serious adverse outcomes include those that are life-threatening; result in death, disability, or permanent damage; require hospitalization or prolong existing hospitalization; cause congenital anomalies or birth defects; or jeopardize the patient and may require medical or surgical intervention to prevent one of the outcomes in this definition.
  ///
  /// Can be used on: http://schema.org/MedicalDevice, http://schema.org/MedicalTherapy
  ///
  static const seriousAdverseOutcome = IriTerm.prevalidated(
    'http://schema.org/seriousAdverseOutcome',
  );

  /// IRI for schemahttp:serverStatus [Expects: http://schema.org/GameServerStatus]
  ///
  /// Status of a game server.
  ///
  /// Can be used on: http://schema.org/GameServer
  ///
  static const serverStatus = IriTerm.prevalidated(
    'http://schema.org/serverStatus',
  );

  /// IRI for schemahttp:servesCuisine [Expects: http://schema.org/Text]
  ///
  /// The cuisine of the restaurant.
  ///
  /// Can be used on: http://schema.org/FoodEstablishment
  ///
  static const servesCuisine = IriTerm.prevalidated(
    'http://schema.org/servesCuisine',
  );

  /// IRI for schemahttp:serviceAudience [Expects: http://schema.org/Audience]
  ///
  /// The audience eligible for this service.
  ///
  /// Can be used on: http://schema.org/Service
  ///
  static const serviceAudience = IriTerm.prevalidated(
    'http://schema.org/serviceAudience',
  );

  /// IRI for schemahttp:serviceLocation [Expects: http://schema.org/Place]
  ///
  /// The location (e.g. civic structure, local business, etc.) where a person can go to access the service.
  ///
  /// Can be used on: http://schema.org/ServiceChannel
  ///
  static const serviceLocation = IriTerm.prevalidated(
    'http://schema.org/serviceLocation',
  );

  /// IRI for schemahttp:serviceOperator [Expects: http://schema.org/Organization]
  ///
  /// The operating organization, if different from the provider.  This enables the representation of services that are provided by an organization, but operated by another organization like a subcontractor.
  ///
  /// Can be used on: http://schema.org/GovernmentService
  ///
  static const serviceOperator = IriTerm.prevalidated(
    'http://schema.org/serviceOperator',
  );

  /// IRI for schemahttp:servicePhone [Expects: http://schema.org/ContactPoint]
  ///
  /// The phone number to use to access the service.
  ///
  /// Can be used on: http://schema.org/ServiceChannel
  ///
  static const servicePhone = IriTerm.prevalidated(
    'http://schema.org/servicePhone',
  );

  /// IRI for schemahttp:servicePostalAddress [Expects: http://schema.org/PostalAddress]
  ///
  /// The address for accessing the service by mail.
  ///
  /// Can be used on: http://schema.org/ServiceChannel
  ///
  static const servicePostalAddress = IriTerm.prevalidated(
    'http://schema.org/servicePostalAddress',
  );

  /// IRI for schemahttp:serviceSmsNumber [Expects: http://schema.org/ContactPoint]
  ///
  /// The number to access the service by text message.
  ///
  /// Can be used on: http://schema.org/ServiceChannel
  ///
  static const serviceSmsNumber = IriTerm.prevalidated(
    'http://schema.org/serviceSmsNumber',
  );

  /// IRI for schemahttp:serviceType [Expects: http://schema.org/GovernmentBenefitsType, http://schema.org/Text]
  ///
  /// The type of service being offered, e.g. veterans' benefits, emergency relief, etc.
  ///
  /// Can be used on: http://schema.org/Service
  ///
  static const serviceType = IriTerm.prevalidated(
    'http://schema.org/serviceType',
  );

  /// IRI for schemahttp:serviceUrl [Expects: http://schema.org/URL]
  ///
  /// The website to access the service.
  ///
  /// Can be used on: http://schema.org/ServiceChannel
  ///
  static const serviceUrl = IriTerm.prevalidated(
    'http://schema.org/serviceUrl',
  );

  /// IRI for schemahttp:servingSize [Expects: http://schema.org/Text]
  ///
  /// The serving size, in terms of the number of volume or mass.
  ///
  /// Can be used on: http://schema.org/NutritionInformation
  ///
  static const servingSize = IriTerm.prevalidated(
    'http://schema.org/servingSize',
  );

  /// IRI for schemahttp:sha256 [Expects: http://schema.org/Text]
  ///
  /// The [SHA-2](https://en.wikipedia.org/wiki/SHA-2) SHA256 hash of the content of the item. For example, a zero-length input has value 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'.
  ///
  /// Can be used on: http://schema.org/MediaObject
  ///
  static const sha256 = IriTerm.prevalidated('http://schema.org/sha256');

  /// IRI for schemahttp:sharedContent [Expects: http://schema.org/CreativeWork]
  ///
  /// A CreativeWork such as an image, video, or audio clip shared as part of this posting.
  ///
  /// Can be used on: http://schema.org/Comment, http://schema.org/SocialMediaPosting
  ///
  static const sharedContent = IriTerm.prevalidated(
    'http://schema.org/sharedContent',
  );

  /// IRI for schemahttp:shippingConditions [Expects: http://schema.org/ShippingConditions]
  ///
  /// The conditions (constraints, price) applicable to the {[ShippingService]}.
  ///
  /// Can be used on: http://schema.org/ShippingService
  ///
  static const shippingConditions = IriTerm.prevalidated(
    'http://schema.org/shippingConditions',
  );

  /// IRI for schemahttp:shippingDestination [Expects: http://schema.org/DefinedRegion]
  ///
  /// indicates (possibly multiple) shipping destinations. These can be defined in several ways, e.g. postalCode ranges.
  ///
  /// Can be used on: http://schema.org/DeliveryTimeSettings, http://schema.org/OfferShippingDetails, http://schema.org/ShippingConditions, http://schema.org/ShippingRateSettings
  ///
  static const shippingDestination = IriTerm.prevalidated(
    'http://schema.org/shippingDestination',
  );

  /// IRI for schemahttp:shippingDetails [Expects: http://schema.org/OfferShippingDetails]
  ///
  /// Indicates information about the shipping policies and options associated with an {[Offer]}.
  ///
  /// Can be used on: http://schema.org/Offer
  ///
  static const shippingDetails = IriTerm.prevalidated(
    'http://schema.org/shippingDetails',
  );

  /// IRI for schemahttp:shippingOrigin [Expects: http://schema.org/DefinedRegion]
  ///
  /// Indicates the origin of a shipment, i.e. where it should be coming from.
  ///
  /// Can be used on: http://schema.org/OfferShippingDetails, http://schema.org/ShippingConditions
  ///
  static const shippingOrigin = IriTerm.prevalidated(
    'http://schema.org/shippingOrigin',
  );

  /// IRI for schemahttp:shippingRate [Expects: http://schema.org/MonetaryAmount, http://schema.org/ShippingRateSettings]
  ///
  /// The shipping rate is the cost of shipping to the specified destination. Typically, the maxValue and currency values (of the {[MonetaryAmount]}) are most appropriate.
  ///
  /// Can be used on: http://schema.org/OfferShippingDetails, http://schema.org/ShippingConditions, http://schema.org/ShippingRateSettings
  ///
  static const shippingRate = IriTerm.prevalidated(
    'http://schema.org/shippingRate',
  );

  /// IRI for schemahttp:siblings [Expects: http://schema.org/Person]
  ///
  /// A sibling of the person.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const siblings = IriTerm.prevalidated('http://schema.org/siblings');

  /// IRI for schemahttp:signDetected [Expects: http://schema.org/MedicalSign]
  ///
  /// A sign detected by the test.
  ///
  /// Can be used on: http://schema.org/MedicalTest
  ///
  static const signDetected = IriTerm.prevalidated(
    'http://schema.org/signDetected',
  );

  /// IRI for schemahttp:signOrSymptom [Expects: http://schema.org/MedicalSignOrSymptom]
  ///
  /// A sign or symptom of this condition. Signs are objective or physically observable manifestations of the medical condition while symptoms are the subjective experience of the medical condition.
  ///
  /// Can be used on: http://schema.org/MedicalCondition
  ///
  static const signOrSymptom = IriTerm.prevalidated(
    'http://schema.org/signOrSymptom',
  );

  /// IRI for schemahttp:significance [Expects: http://schema.org/Text]
  ///
  /// The significance associated with the superficial anatomy; as an example, how characteristics of the superficial anatomy can suggest underlying medical conditions or courses of treatment.
  ///
  /// Can be used on: http://schema.org/SuperficialAnatomy
  ///
  static const significance = IriTerm.prevalidated(
    'http://schema.org/significance',
  );

  /// IRI for schemahttp:significantLinks [Expects: http://schema.org/URL]
  ///
  /// The most significant URLs on the page. Typically, these are the non-navigation links that are clicked on the most.
  ///
  /// Can be used on: http://schema.org/WebPage
  ///
  static const significantLinks = IriTerm.prevalidated(
    'http://schema.org/significantLinks',
  );

  /// IRI for schemahttp:size [Expects: http://schema.org/DefinedTerm, http://schema.org/QuantitativeValue, http://schema.org/SizeSpecification, http://schema.org/Text]
  ///
  /// A standardized size of a product or creative work, specified either through a simple textual string (for example 'XL', '32Wx34L'), a  QuantitativeValue with a unitCode, or a comprehensive and structured {[SizeSpecification]}; in other cases, the {[width]}, {[height]}, {[depth]} and {[weight]} properties may be more applicable.
  ///
  /// Can be used on: http://schema.org/CreativeWork, http://schema.org/Product
  ///
  static const size = IriTerm.prevalidated('http://schema.org/size');

  /// IRI for schemahttp:sizeGroup [Expects: http://schema.org/SizeGroupEnumeration, http://schema.org/Text]
  ///
  /// The size group (also known as "size type") for a product's size. Size groups are common in the fashion industry to define size segments and suggested audiences for wearable products. Multiple values can be combined, for example "men's big and tall", "petite maternity" or "regular".
  ///
  /// Can be used on: http://schema.org/SizeSpecification
  ///
  static const sizeGroup = IriTerm.prevalidated('http://schema.org/sizeGroup');

  /// IRI for schemahttp:sizeSystem [Expects: http://schema.org/SizeSystemEnumeration, http://schema.org/Text]
  ///
  /// The size system used to identify a product's size. Typically either a standard (for example, "GS1" or "ISO-EN13402"), country code (for example "US" or "JP"), or a measuring system (for example "Metric" or "Imperial").
  ///
  /// Can be used on: http://schema.org/SizeSpecification
  ///
  static const sizeSystem = IriTerm.prevalidated(
    'http://schema.org/sizeSystem',
  );

  /// IRI for schemahttp:skills [Expects: http://schema.org/DefinedTerm, http://schema.org/Text]
  ///
  /// A statement of knowledge, skill, ability, task or any other assertion expressing a competency that is either claimed by a person, an organization or desired or required to fulfill a role or to work in an occupation.
  ///
  /// Can be used on: http://schema.org/JobPosting, http://schema.org/Occupation, http://schema.org/Organization, http://schema.org/Person
  ///
  static const skills = IriTerm.prevalidated('http://schema.org/skills');

  /// IRI for schemahttp:sku [Expects: http://schema.org/Text]
  ///
  /// The Stock Keeping Unit (SKU), i.e. a merchant-specific identifier for a product or service, or the product to which the offer refers.
  ///
  /// Can be used on: http://schema.org/Demand, http://schema.org/Offer, http://schema.org/Product
  ///
  static const sku = IriTerm.prevalidated('http://schema.org/sku');

  /// IRI for schemahttp:slogan [Expects: http://schema.org/Text]
  ///
  /// A slogan or motto associated with the item.
  ///
  /// Can be used on: http://schema.org/Brand, http://schema.org/Organization, http://schema.org/Place, http://schema.org/Product, http://schema.org/Service
  ///
  static const slogan = IriTerm.prevalidated('http://schema.org/slogan');

  /// IRI for schemahttp:smiles [Expects: http://schema.org/Text]
  ///
  /// A specification in form of a line notation for describing the structure of chemical species using short ASCII strings.  Double bond stereochemistry \ indicators may need to be escaped in the string in formats where the backslash is an escape character.
  ///
  /// Can be used on: http://schema.org/MolecularEntity
  ///
  static const smiles = IriTerm.prevalidated('http://schema.org/smiles');

  /// IRI for schemahttp:smokingAllowed [Expects: http://schema.org/Boolean]
  ///
  /// Indicates whether it is allowed to smoke in the place, e.g. in the restaurant, hotel or hotel room.
  ///
  /// Can be used on: http://schema.org/Place
  ///
  static const smokingAllowed = IriTerm.prevalidated(
    'http://schema.org/smokingAllowed',
  );

  /// IRI for schemahttp:sodiumContent [Expects: http://schema.org/Mass]
  ///
  /// The number of milligrams of sodium.
  ///
  /// Can be used on: http://schema.org/NutritionInformation
  ///
  static const sodiumContent = IriTerm.prevalidated(
    'http://schema.org/sodiumContent',
  );

  /// IRI for schemahttp:softwareAddOn [Expects: http://schema.org/SoftwareApplication]
  ///
  /// Additional content for a software application.
  ///
  /// Can be used on: http://schema.org/SoftwareApplication
  ///
  static const softwareAddOn = IriTerm.prevalidated(
    'http://schema.org/softwareAddOn',
  );

  /// IRI for schemahttp:softwareHelp [Expects: http://schema.org/CreativeWork]
  ///
  /// Software application help.
  ///
  /// Can be used on: http://schema.org/SoftwareApplication
  ///
  static const softwareHelp = IriTerm.prevalidated(
    'http://schema.org/softwareHelp',
  );

  /// IRI for schemahttp:softwareVersion [Expects: http://schema.org/Text]
  ///
  /// Version of the software instance.
  ///
  /// Can be used on: http://schema.org/SoftwareApplication
  ///
  static const softwareVersion = IriTerm.prevalidated(
    'http://schema.org/softwareVersion',
  );

  /// IRI for schemahttp:sourceOrganization [Expects: http://schema.org/Organization]
  ///
  /// The Organization on whose behalf the creator was working.
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const sourceOrganization = IriTerm.prevalidated(
    'http://schema.org/sourceOrganization',
  );

  /// IRI for schemahttp:sourcedFrom [Expects: http://schema.org/BrainStructure]
  ///
  /// The neurological pathway that originates the neurons.
  ///
  /// Can be used on: http://schema.org/Nerve
  ///
  static const sourcedFrom = IriTerm.prevalidated(
    'http://schema.org/sourcedFrom',
  );

  /// IRI for schemahttp:spatial [Expects: http://schema.org/Place]
  ///
  /// The "spatial" property can be used in cases when more specific properties
  /// (e.g. {[locationCreated]}, {[spatialCoverage]}, {[contentLocation]}) are not known to be appropriate.
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const spatial = IriTerm.prevalidated('http://schema.org/spatial');

  /// IRI for schemahttp:speakable [Expects: http://schema.org/SpeakableSpecification, http://schema.org/URL]
  ///
  /// Indicates sections of a Web page that are particularly 'speakable' in the sense of being highlighted as being especially appropriate for text-to-speech conversion. Other sections of a page may also be usefully spoken in particular circumstances; the 'speakable' property serves to indicate the parts most likely to be generally useful for speech.
  ///
  /// The *speakable* property can be repeated an arbitrary number of times, with three kinds of possible 'content-locator' values:
  ///
  /// 1.) *id-value* URL references - uses *id-value* of an element in the page being annotated. The simplest use of *speakable* has (potentially relative) URL values, referencing identified sections of the document concerned.
  ///
  /// 2.) CSS Selectors - addresses content in the annotated page, e.g. via class attribute. Use the {[cssSelector]} property.
  ///
  /// 3.)  XPaths - addresses content via XPaths (assuming an XML view of the content). Use the {[xpath]} property.
  ///
  ///
  /// For more sophisticated markup of speakable sections beyond simple ID references, either CSS selectors or XPath expressions to pick out document section(s) as speakable. For this
  /// we define a supporting type, {[SpeakableSpecification]}  which is defined to be a possible value of the *speakable* property.
  ///
  ///
  /// Can be used on: http://schema.org/Article, http://schema.org/WebPage
  ///
  static const speakable = IriTerm.prevalidated('http://schema.org/speakable');

  /// IRI for schemahttp:specialCommitments [Expects: http://schema.org/Text]
  ///
  /// Any special commitments associated with this job posting. Valid entries include VeteranCommit, MilitarySpouseCommit, etc.
  ///
  /// Can be used on: http://schema.org/JobPosting
  ///
  static const specialCommitments = IriTerm.prevalidated(
    'http://schema.org/specialCommitments',
  );

  /// IRI for schemahttp:specialOpeningHoursSpecification [Expects: http://schema.org/OpeningHoursSpecification]
  ///
  /// The special opening hours of a certain place.\n\nUse this to explicitly override general opening hours brought in scope by {[openingHoursSpecification]} or {[openingHours]}.
  ///
  ///
  /// Can be used on: http://schema.org/Place
  ///
  static const specialOpeningHoursSpecification = IriTerm.prevalidated(
    'http://schema.org/specialOpeningHoursSpecification',
  );

  /// IRI for schemahttp:specialty [Expects: http://schema.org/Specialty]
  ///
  /// One of the domain specialities to which this web page's content applies.
  ///
  /// Can be used on: http://schema.org/WebPage
  ///
  static const specialty = IriTerm.prevalidated('http://schema.org/specialty');

  /// IRI for schemahttp:speechToTextMarkup [Expects: http://schema.org/Text]
  ///
  /// Form of markup used. eg. [SSML](https://www.w3.org/TR/speech-synthesis11) or [IPA](https://www.wikidata.org/wiki/Property:P898).
  ///
  /// Can be used on: http://schema.org/PronounceableText
  ///
  static const speechToTextMarkup = IriTerm.prevalidated(
    'http://schema.org/speechToTextMarkup',
  );

  /// IRI for schemahttp:speed [Expects: http://schema.org/QuantitativeValue]
  ///
  /// The speed range of the vehicle. If the vehicle is powered by an engine, the upper limit of the speed range (indicated by {[maxValue]}) should be the maximum speed achievable under regular conditions.\n\nTypical unit code(s): KMH for km/h, HM for mile per hour (0.447 04 m/s), KNT for knot\n\n*Note 1: Use {[minValue]} and {[maxValue]} to indicate the range. Typically, the minimal value is zero.\n* Note 2: There are many different ways of measuring the speed range. You can link to information about how the given value has been determined using the {[valueReference]} property.
  ///
  /// Can be used on: http://schema.org/Vehicle
  ///
  static const speed = IriTerm.prevalidated('http://schema.org/speed');

  /// IRI for schemahttp:spokenByCharacter [Expects: http://schema.org/Organization, http://schema.org/Person]
  ///
  /// The (e.g. fictional) character, Person or Organization to whom the quotation is attributed within the containing CreativeWork.
  ///
  /// Can be used on: http://schema.org/Quotation
  ///
  static const spokenByCharacter = IriTerm.prevalidated(
    'http://schema.org/spokenByCharacter',
  );

  /// IRI for schemahttp:sport [Expects: http://schema.org/Text, http://schema.org/URL]
  ///
  /// A type of sport (e.g. Baseball).
  ///
  /// Can be used on: http://schema.org/SportsEvent, http://schema.org/SportsOrganization
  ///
  static const sport = IriTerm.prevalidated('http://schema.org/sport');

  /// IRI for schemahttp:sportsActivityLocation [Expects: http://schema.org/SportsActivityLocation]
  ///
  /// A sub property of location. The sports activity location where this action occurred.
  ///
  /// Can be used on: http://schema.org/ExerciseAction
  ///
  static const sportsActivityLocation = IriTerm.prevalidated(
    'http://schema.org/sportsActivityLocation',
  );

  /// IRI for schemahttp:sportsEvent [Expects: http://schema.org/SportsEvent]
  ///
  /// A sub property of location. The sports event where this action occurred.
  ///
  /// Can be used on: http://schema.org/ExerciseAction
  ///
  static const sportsEvent = IriTerm.prevalidated(
    'http://schema.org/sportsEvent',
  );

  /// IRI for schemahttp:sportsTeam [Expects: http://schema.org/SportsTeam]
  ///
  /// A sub property of participant. The sports team that participated on this action.
  ///
  /// Can be used on: http://schema.org/ExerciseAction
  ///
  static const sportsTeam = IriTerm.prevalidated(
    'http://schema.org/sportsTeam',
  );

  /// IRI for schemahttp:spouse [Expects: http://schema.org/Person]
  ///
  /// The person's spouse.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const spouse = IriTerm.prevalidated('http://schema.org/spouse');

  /// IRI for schemahttp:stage [Expects: http://schema.org/MedicalConditionStage]
  ///
  /// The stage of the condition, if applicable.
  ///
  /// Can be used on: http://schema.org/MedicalCondition
  ///
  static const stage = IriTerm.prevalidated('http://schema.org/stage');

  /// IRI for schemahttp:stageAsNumber [Expects: http://schema.org/Number]
  ///
  /// The stage represented as a number, e.g. 3.
  ///
  /// Can be used on: http://schema.org/MedicalConditionStage
  ///
  static const stageAsNumber = IriTerm.prevalidated(
    'http://schema.org/stageAsNumber',
  );

  /// IRI for schemahttp:starRating [Expects: http://schema.org/Rating]
  ///
  /// An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
  ///
  /// Can be used on: http://schema.org/FoodEstablishment, http://schema.org/LodgingBusiness
  ///
  static const starRating = IriTerm.prevalidated(
    'http://schema.org/starRating',
  );

  /// IRI for schemahttp:startDate [Expects: http://schema.org/Date, http://schema.org/DateTime]
  ///
  /// The start date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).
  ///
  /// Can be used on: http://schema.org/CreativeWorkSeason, http://schema.org/CreativeWorkSeries, http://schema.org/DatedMoneySpecification, http://schema.org/EducationalOccupationalProgram, http://schema.org/Event, http://schema.org/MerchantReturnPolicySeasonalOverride, http://schema.org/Role, http://schema.org/Schedule
  ///
  static const startDate = IriTerm.prevalidated('http://schema.org/startDate');

  /// IRI for schemahttp:startOffset [Expects: http://schema.org/HyperTocEntry, http://schema.org/Number]
  ///
  /// The start time of the clip expressed as the number of seconds from the beginning of the work.
  ///
  /// Can be used on: http://schema.org/Clip, http://schema.org/SeekToAction
  ///
  static const startOffset = IriTerm.prevalidated(
    'http://schema.org/startOffset',
  );

  /// IRI for schemahttp:startTime [Expects: http://schema.org/DateTime, http://schema.org/Time]
  ///
  /// The startTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to start. For actions that span a period of time, when the action was performed. E.g. John wrote a book from *January* to December. For media, including audio and video, it's the time offset of the start of a clip within a larger file.\n\nNote that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions.
  ///
  /// Can be used on: http://schema.org/Action, http://schema.org/FoodEstablishmentReservation, http://schema.org/InteractionCounter, http://schema.org/MediaObject, http://schema.org/Schedule
  ///
  static const startTime = IriTerm.prevalidated('http://schema.org/startTime');

  /// IRI for schemahttp:statType [Expects: http://schema.org/Property, http://schema.org/Text, http://schema.org/URL]
  ///
  /// Indicates the kind of statistic represented by a {[StatisticalVariable]}, e.g. mean, count etc. The value of statType is a property, either from within Schema.org (e.g. {[median]}, {[marginOfError]}, {[maxValue]}, {[minValue]}) or from other compatible (e.g. RDF) systems such as DataCommons.org or Wikidata.org.
  ///
  /// Can be used on: http://schema.org/StatisticalVariable
  ///
  static const statType = IriTerm.prevalidated('http://schema.org/statType');

  /// IRI for schemahttp:status [Expects: http://schema.org/EventStatusType, http://schema.org/MedicalStudyStatus, http://schema.org/Text]
  ///
  /// The status of the study (enumerated).
  ///
  /// Can be used on: http://schema.org/MedicalCondition, http://schema.org/MedicalProcedure, http://schema.org/MedicalStudy
  ///
  static const status = IriTerm.prevalidated('http://schema.org/status');

  /// IRI for schemahttp:steeringPosition [Expects: http://schema.org/SteeringPositionValue]
  ///
  /// The position of the steering wheel or similar device (mostly for cars).
  ///
  /// Can be used on: http://schema.org/Vehicle
  ///
  static const steeringPosition = IriTerm.prevalidated(
    'http://schema.org/steeringPosition',
  );

  /// IRI for schemahttp:stepValue [Expects: http://schema.org/Number]
  ///
  /// The stepValue attribute indicates the granularity that is expected (and required) of the value in a PropertyValueSpecification.
  ///
  /// Can be used on: http://schema.org/PropertyValueSpecification
  ///
  static const stepValue = IriTerm.prevalidated('http://schema.org/stepValue');

  /// IRI for schemahttp:steps [Expects: http://schema.org/CreativeWork, http://schema.org/ItemList, http://schema.org/Text]
  ///
  /// A single step item (as HowToStep, text, document, video, etc.) or a HowToSection (originally misnamed 'steps'; 'step' is preferred).
  ///
  /// Can be used on: http://schema.org/HowTo, http://schema.org/HowToSection
  ///
  static const steps = IriTerm.prevalidated('http://schema.org/steps');

  /// IRI for schemahttp:storageRequirements [Expects: http://schema.org/Text, http://schema.org/URL]
  ///
  /// Storage requirements (free space required).
  ///
  /// Can be used on: http://schema.org/SoftwareApplication
  ///
  static const storageRequirements = IriTerm.prevalidated(
    'http://schema.org/storageRequirements',
  );

  /// IRI for schemahttp:streetAddress [Expects: http://schema.org/Text]
  ///
  /// The street address. For example, 1600 Amphitheatre Pkwy.
  ///
  /// Can be used on: http://schema.org/PostalAddress
  ///
  static const streetAddress = IriTerm.prevalidated(
    'http://schema.org/streetAddress',
  );

  /// IRI for schemahttp:strengthUnit [Expects: http://schema.org/Text]
  ///
  /// The units of an active ingredient's strength, e.g. mg.
  ///
  /// Can be used on: http://schema.org/DrugStrength
  ///
  static const strengthUnit = IriTerm.prevalidated(
    'http://schema.org/strengthUnit',
  );

  /// IRI for schemahttp:strengthValue [Expects: http://schema.org/Number]
  ///
  /// The value of an active ingredient's strength, e.g. 325.
  ///
  /// Can be used on: http://schema.org/DrugStrength
  ///
  static const strengthValue = IriTerm.prevalidated(
    'http://schema.org/strengthValue',
  );

  /// IRI for schemahttp:structuralClass [Expects: http://schema.org/Text]
  ///
  /// The name given to how bone physically connects to each other.
  ///
  /// Can be used on: http://schema.org/Joint
  ///
  static const structuralClass = IriTerm.prevalidated(
    'http://schema.org/structuralClass',
  );

  /// IRI for schemahttp:study [Expects: http://schema.org/MedicalStudy]
  ///
  /// A medical study or trial related to this entity.
  ///
  /// Can be used on: http://schema.org/MedicalEntity
  ///
  static const study = IriTerm.prevalidated('http://schema.org/study');

  /// IRI for schemahttp:studyDesign [Expects: http://schema.org/MedicalObservationalStudyDesign]
  ///
  /// Specifics about the observational study design (enumerated).
  ///
  /// Can be used on: http://schema.org/MedicalObservationalStudy
  ///
  static const studyDesign = IriTerm.prevalidated(
    'http://schema.org/studyDesign',
  );

  /// IRI for schemahttp:studyLocation [Expects: http://schema.org/AdministrativeArea]
  ///
  /// The location in which the study is taking/took place.
  ///
  /// Can be used on: http://schema.org/MedicalStudy
  ///
  static const studyLocation = IriTerm.prevalidated(
    'http://schema.org/studyLocation',
  );

  /// IRI for schemahttp:studySubject [Expects: http://schema.org/MedicalEntity]
  ///
  /// A subject of the study, i.e. one of the medical conditions, therapies, devices, drugs, etc. investigated by the study.
  ///
  /// Can be used on: http://schema.org/MedicalStudy
  ///
  static const studySubject = IriTerm.prevalidated(
    'http://schema.org/studySubject',
  );

  /// IRI for schemahttp:subEvents [Expects: http://schema.org/Event]
  ///
  /// Events that are a part of this event. For example, a conference event includes many presentations, each subEvents of the conference.
  ///
  /// Can be used on: http://schema.org/Event
  ///
  static const subEvents = IriTerm.prevalidated('http://schema.org/subEvents');

  /// IRI for schemahttp:subReservation [Expects: http://schema.org/Reservation]
  ///
  /// The individual reservations included in the package. Typically a repeated property.
  ///
  /// Can be used on: http://schema.org/ReservationPackage
  ///
  static const subReservation = IriTerm.prevalidated(
    'http://schema.org/subReservation',
  );

  /// IRI for schemahttp:subStageSuffix [Expects: http://schema.org/Text]
  ///
  /// The substage, e.g. 'a' for Stage IIIa.
  ///
  /// Can be used on: http://schema.org/MedicalConditionStage
  ///
  static const subStageSuffix = IriTerm.prevalidated(
    'http://schema.org/subStageSuffix',
  );

  /// IRI for schemahttp:subStructure [Expects: http://schema.org/AnatomicalStructure]
  ///
  /// Component (sub-)structure(s) that comprise this anatomical structure.
  ///
  /// Can be used on: http://schema.org/AnatomicalStructure
  ///
  static const subStructure = IriTerm.prevalidated(
    'http://schema.org/subStructure',
  );

  /// IRI for schemahttp:subTest [Expects: http://schema.org/MedicalTest]
  ///
  /// A component test of the panel.
  ///
  /// Can be used on: http://schema.org/MedicalTestPanel
  ///
  static const subTest = IriTerm.prevalidated('http://schema.org/subTest');

  /// IRI for schemahttp:subtitleLanguage [Expects: http://schema.org/Language, http://schema.org/Text]
  ///
  /// Languages in which subtitles/captions are available, in [IETF BCP 47 standard format](http://tools.ietf.org/html/bcp47).
  ///
  /// Can be used on: http://schema.org/BroadcastEvent, http://schema.org/Movie, http://schema.org/ScreeningEvent, http://schema.org/TVEpisode
  ///
  static const subtitleLanguage = IriTerm.prevalidated(
    'http://schema.org/subtitleLanguage',
  );

  /// IRI for schemahttp:successorOf [Expects: http://schema.org/ProductModel]
  ///
  /// A pointer from a newer variant of a product  to its previous, often discontinued predecessor.
  ///
  /// Can be used on: http://schema.org/ProductModel
  ///
  static const successorOf = IriTerm.prevalidated(
    'http://schema.org/successorOf',
  );

  /// IRI for schemahttp:sugarContent [Expects: http://schema.org/Mass]
  ///
  /// The number of grams of sugar.
  ///
  /// Can be used on: http://schema.org/NutritionInformation
  ///
  static const sugarContent = IriTerm.prevalidated(
    'http://schema.org/sugarContent',
  );

  /// IRI for schemahttp:suggestedAge [Expects: http://schema.org/QuantitativeValue]
  ///
  /// The age or age range for the intended audience or person, for example 3-12 months for infants, 1-5 years for toddlers.
  ///
  /// Can be used on: http://schema.org/PeopleAudience, http://schema.org/SizeSpecification
  ///
  static const suggestedAge = IriTerm.prevalidated(
    'http://schema.org/suggestedAge',
  );

  /// IRI for schemahttp:suggestedGender [Expects: http://schema.org/GenderType, http://schema.org/Text]
  ///
  /// The suggested gender of the intended person or audience, for example "male", "female", or "unisex".
  ///
  /// Can be used on: http://schema.org/PeopleAudience, http://schema.org/SizeSpecification
  ///
  static const suggestedGender = IriTerm.prevalidated(
    'http://schema.org/suggestedGender',
  );

  /// IRI for schemahttp:suggestedMaxAge [Expects: http://schema.org/Number]
  ///
  /// Maximum recommended age in years for the audience or user.
  ///
  /// Can be used on: http://schema.org/PeopleAudience
  ///
  static const suggestedMaxAge = IriTerm.prevalidated(
    'http://schema.org/suggestedMaxAge',
  );

  /// IRI for schemahttp:suggestedMeasurement [Expects: http://schema.org/QuantitativeValue]
  ///
  /// A suggested range of body measurements for the intended audience or person, for example inseam between 32 and 34 inches or height between 170 and 190 cm. Typically found on a size chart for wearable products.
  ///
  /// Can be used on: http://schema.org/PeopleAudience, http://schema.org/SizeSpecification
  ///
  static const suggestedMeasurement = IriTerm.prevalidated(
    'http://schema.org/suggestedMeasurement',
  );

  /// IRI for schemahttp:suggestedMinAge [Expects: http://schema.org/Number]
  ///
  /// Minimum recommended age in years for the audience or user.
  ///
  /// Can be used on: http://schema.org/PeopleAudience
  ///
  static const suggestedMinAge = IriTerm.prevalidated(
    'http://schema.org/suggestedMinAge',
  );

  /// IRI for schemahttp:suitableForDiet [Expects: http://schema.org/RestrictedDiet]
  ///
  /// Indicates a dietary restriction or guideline for which this recipe or menu item is suitable, e.g. diabetic, halal etc.
  ///
  /// Can be used on: http://schema.org/MenuItem, http://schema.org/Recipe
  ///
  static const suitableForDiet = IriTerm.prevalidated(
    'http://schema.org/suitableForDiet',
  );

  /// IRI for schemahttp:supersededBy [Expects: http://schema.org/Class, http://schema.org/Enumeration, http://schema.org/Property]
  ///
  /// Relates a term (i.e. a property, class or enumeration) to one that supersedes it.
  ///
  /// Can be used on: http://schema.org/Class, http://schema.org/Enumeration, http://schema.org/Property
  ///
  static const supersededBy = IriTerm.prevalidated(
    'http://schema.org/supersededBy',
  );

  /// IRI for schemahttp:supplyTo [Expects: http://schema.org/AnatomicalStructure]
  ///
  /// The area to which the artery supplies blood.
  ///
  /// Can be used on: http://schema.org/Artery
  ///
  static const supplyTo = IriTerm.prevalidated('http://schema.org/supplyTo');

  /// IRI for schemahttp:supportingData [Expects: http://schema.org/DataFeed]
  ///
  /// Supporting data for a SoftwareApplication.
  ///
  /// Can be used on: http://schema.org/SoftwareApplication
  ///
  static const supportingData = IriTerm.prevalidated(
    'http://schema.org/supportingData',
  );

  /// IRI for schemahttp:surface [Expects: http://schema.org/Text, http://schema.org/URL]
  ///
  /// A material used as a surface in some artwork, e.g. Canvas, Paper, Wood, Board, etc.
  ///
  /// Can be used on: http://schema.org/VisualArtwork
  ///
  static const surface = IriTerm.prevalidated('http://schema.org/surface');

  /// IRI for schemahttp:syllabusSections [Expects: http://schema.org/Syllabus]
  ///
  /// Indicates (typically several) Syllabus entities that lay out what each section of the overall course will cover.
  ///
  /// Can be used on: http://schema.org/Course
  ///
  static const syllabusSections = IriTerm.prevalidated(
    'http://schema.org/syllabusSections',
  );

  /// IRI for schemahttp:target [Expects: http://schema.org/EntryPoint, http://schema.org/URL]
  ///
  /// Indicates a target EntryPoint, or url, for an Action.
  ///
  /// Can be used on: http://schema.org/Action
  ///
  static const target = IriTerm.prevalidated('http://schema.org/target');

  /// IRI for schemahttp:targetDescription [Expects: http://schema.org/Text]
  ///
  /// The description of a node in an established educational framework.
  ///
  /// Can be used on: http://schema.org/AlignmentObject
  ///
  static const targetDescription = IriTerm.prevalidated(
    'http://schema.org/targetDescription',
  );

  /// IRI for schemahttp:targetName [Expects: http://schema.org/Text]
  ///
  /// The name of a node in an established educational framework.
  ///
  /// Can be used on: http://schema.org/AlignmentObject
  ///
  static const targetName = IriTerm.prevalidated(
    'http://schema.org/targetName',
  );

  /// IRI for schemahttp:targetPlatform [Expects: http://schema.org/Text]
  ///
  /// Type of app development: phone, Metro style, desktop, XBox, etc.
  ///
  /// Can be used on: http://schema.org/APIReference
  ///
  static const targetPlatform = IriTerm.prevalidated(
    'http://schema.org/targetPlatform',
  );

  /// IRI for schemahttp:targetPopulation [Expects: http://schema.org/Text]
  ///
  /// Characteristics of the population for which this is intended, or which typically uses it, e.g. 'adults'.
  ///
  /// Can be used on: http://schema.org/DietarySupplement, http://schema.org/DoseSchedule
  ///
  static const targetPopulation = IriTerm.prevalidated(
    'http://schema.org/targetPopulation',
  );

  /// IRI for schemahttp:targetProduct [Expects: http://schema.org/SoftwareApplication]
  ///
  /// Target Operating System / Product to which the code applies.  If applies to several versions, just the product name can be used.
  ///
  /// Can be used on: http://schema.org/SoftwareSourceCode
  ///
  static const targetProduct = IriTerm.prevalidated(
    'http://schema.org/targetProduct',
  );

  /// IRI for schemahttp:targetUrl [Expects: http://schema.org/URL]
  ///
  /// The URL of a node in an established educational framework.
  ///
  /// Can be used on: http://schema.org/AlignmentObject
  ///
  static const targetUrl = IriTerm.prevalidated('http://schema.org/targetUrl');

  /// IRI for schemahttp:taxID [Expects: http://schema.org/Text]
  ///
  /// The Tax / Fiscal ID of the organization or person, e.g. the TIN in the US or the CIF/NIF in Spain.
  ///
  /// Can be used on: http://schema.org/Organization, http://schema.org/Person
  ///
  static const taxID = IriTerm.prevalidated('http://schema.org/taxID');

  /// IRI for schemahttp:taxonRank [Expects: http://schema.org/PropertyValue, http://schema.org/Text, http://schema.org/URL]
  ///
  /// The taxonomic rank of this taxon given preferably as a URI from a controlled vocabulary ‚Äì typically the ranks from TDWG TaxonRank ontology or equivalent Wikidata URIs.
  ///
  /// Can be used on: http://schema.org/Taxon
  ///
  static const taxonRank = IriTerm.prevalidated('http://schema.org/taxonRank');

  /// IRI for schemahttp:taxonomicRange [Expects: http://schema.org/DefinedTerm, http://schema.org/Taxon, http://schema.org/Text, http://schema.org/URL]
  ///
  /// The taxonomic grouping of the organism that expresses, encodes, or in some way related to the BioChemEntity.
  ///
  /// Can be used on: http://schema.org/BioChemEntity
  ///
  static const taxonomicRange = IriTerm.prevalidated(
    'http://schema.org/taxonomicRange',
  );

  /// IRI for schemahttp:teaches [Expects: http://schema.org/DefinedTerm, http://schema.org/Text]
  ///
  /// The item being described is intended to help a person learn the competency or learning outcome defined by the referenced term.
  ///
  /// Can be used on: http://schema.org/CreativeWork, http://schema.org/EducationEvent, http://schema.org/LearningResource
  ///
  static const teaches = IriTerm.prevalidated('http://schema.org/teaches');

  /// IRI for schemahttp:telephone [Expects: http://schema.org/Text]
  ///
  /// The telephone number.
  ///
  /// Can be used on: http://schema.org/ContactPoint, http://schema.org/Organization, http://schema.org/Person, http://schema.org/Place
  ///
  static const telephone = IriTerm.prevalidated('http://schema.org/telephone');

  /// IRI for schemahttp:temporal [Expects: http://schema.org/DateTime, http://schema.org/Text]
  ///
  /// The "temporal" property can be used in cases where more specific properties
  /// (e.g. {[temporalCoverage]}, {[dateCreated]}, {[dateModified]}, {[datePublished]}) are not known to be appropriate.
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const temporal = IriTerm.prevalidated('http://schema.org/temporal');

  /// IRI for schemahttp:termDuration [Expects: http://schema.org/Duration]
  ///
  /// The amount of time in a term as defined by the institution. A term is a length of time where students take one or more classes. Semesters and quarters are common units for term.
  ///
  /// Can be used on: http://schema.org/EducationalOccupationalProgram
  ///
  static const termDuration = IriTerm.prevalidated(
    'http://schema.org/termDuration',
  );

  /// IRI for schemahttp:termsOfService [Expects: http://schema.org/Text, http://schema.org/URL]
  ///
  /// Human-readable terms of service documentation.
  ///
  /// Can be used on: http://schema.org/Service
  ///
  static const termsOfService = IriTerm.prevalidated(
    'http://schema.org/termsOfService',
  );

  /// IRI for schemahttp:termsPerYear [Expects: http://schema.org/Number]
  ///
  /// The number of times terms of study are offered per year. Semesters and quarters are common units for term. For example, if the student can only take 2 semesters for the program in one year, then termsPerYear should be 2.
  ///
  /// Can be used on: http://schema.org/EducationalOccupationalProgram
  ///
  static const termsPerYear = IriTerm.prevalidated(
    'http://schema.org/termsPerYear',
  );

  /// IRI for schemahttp:text [Expects: http://schema.org/Text]
  ///
  /// The textual content of this CreativeWork.
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const text = IriTerm.prevalidated('http://schema.org/text');

  /// IRI for schemahttp:textValue [Expects: http://schema.org/Text]
  ///
  /// Text value being annotated.
  ///
  /// Can be used on: http://schema.org/PronounceableText
  ///
  static const textValue = IriTerm.prevalidated('http://schema.org/textValue');

  /// IRI for schemahttp:thumbnail [Expects: http://schema.org/ImageObject]
  ///
  /// Thumbnail image for an image or video.
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const thumbnail = IriTerm.prevalidated('http://schema.org/thumbnail');

  /// IRI for schemahttp:thumbnailUrl [Expects: http://schema.org/URL]
  ///
  /// A thumbnail image relevant to the Thing.
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const thumbnailUrl = IriTerm.prevalidated(
    'http://schema.org/thumbnailUrl',
  );

  /// IRI for schemahttp:tickerSymbol [Expects: http://schema.org/Text]
  ///
  /// The exchange traded instrument associated with a Corporation object. The tickerSymbol is expressed as an exchange and an instrument name separated by a space character. For the exchange component of the tickerSymbol attribute, we recommend using the controlled vocabulary of Market Identifier Codes (MIC) specified in ISO 15022.
  ///
  /// Can be used on: http://schema.org/Corporation
  ///
  static const tickerSymbol = IriTerm.prevalidated(
    'http://schema.org/tickerSymbol',
  );

  /// IRI for schemahttp:ticketNumber [Expects: http://schema.org/Text]
  ///
  /// The unique identifier for the ticket.
  ///
  /// Can be used on: http://schema.org/Ticket
  ///
  static const ticketNumber = IriTerm.prevalidated(
    'http://schema.org/ticketNumber',
  );

  /// IRI for schemahttp:ticketToken [Expects: http://schema.org/Text, http://schema.org/URL]
  ///
  /// Reference to an asset (e.g., Barcode, QR code image or PDF) usable for entrance.
  ///
  /// Can be used on: http://schema.org/Ticket
  ///
  static const ticketToken = IriTerm.prevalidated(
    'http://schema.org/ticketToken',
  );

  /// IRI for schemahttp:ticketedSeat [Expects: http://schema.org/Seat]
  ///
  /// The seat associated with the ticket.
  ///
  /// Can be used on: http://schema.org/Ticket
  ///
  static const ticketedSeat = IriTerm.prevalidated(
    'http://schema.org/ticketedSeat',
  );

  /// IRI for schemahttp:timeOfDay [Expects: http://schema.org/Text]
  ///
  /// The time of day the program normally runs. For example, "evenings".
  ///
  /// Can be used on: http://schema.org/EducationalOccupationalProgram
  ///
  static const timeOfDay = IriTerm.prevalidated('http://schema.org/timeOfDay');

  /// IRI for schemahttp:timeRequired [Expects: http://schema.org/Duration]
  ///
  /// Approximate or typical time it usually takes to work with or through the content of this work for the typical or target audience.
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const timeRequired = IriTerm.prevalidated(
    'http://schema.org/timeRequired',
  );

  /// IRI for schemahttp:timeToComplete [Expects: http://schema.org/Duration]
  ///
  /// The expected length of time to complete the program if attending full-time.
  ///
  /// Can be used on: http://schema.org/EducationalOccupationalProgram
  ///
  static const timeToComplete = IriTerm.prevalidated(
    'http://schema.org/timeToComplete',
  );

  /// IRI for schemahttp:tissueSample [Expects: http://schema.org/Text]
  ///
  /// The type of tissue sample required for the test.
  ///
  /// Can be used on: http://schema.org/PathologyTest
  ///
  static const tissueSample = IriTerm.prevalidated(
    'http://schema.org/tissueSample',
  );

  /// IRI for schemahttp:title [Expects: http://schema.org/Text]
  ///
  /// The title of the job.
  ///
  /// Can be used on: http://schema.org/JobPosting
  ///
  static const title = IriTerm.prevalidated('http://schema.org/title');

  /// IRI for schemahttp:titleEIDR [Expects: http://schema.org/Text, http://schema.org/URL]
  ///
  /// An [EIDR](https://eidr.org/) (Entertainment Identifier Registry) {[identifier]} representing at the most general/abstract level, a work of film or television.
  ///
  /// For example, the motion picture known as "Ghostbusters" has a titleEIDR of  "10.5240/7EC7-228A-510A-053E-CBB8-J". This title (or work) may have several variants, which EIDR calls "edits". See {[editEIDR]}.
  ///
  /// Since schema.org types like {[Movie]}, {[TVEpisode]}, {[TVSeason]}, and {[TVSeries]} can be used for both works and their multiple expressions, it is possible to use {[titleEIDR]} alone (for a general description), or alongside {[editEIDR]} for a more edit-specific description.
  ///
  ///
  /// Can be used on: http://schema.org/Movie, http://schema.org/TVEpisode, http://schema.org/TVSeason, http://schema.org/TVSeries
  ///
  static const titleEIDR = IriTerm.prevalidated('http://schema.org/titleEIDR');

  /// IRI for schemahttp:toLocation [Expects: http://schema.org/Place]
  ///
  /// A sub property of location. The final location of the object or the agent after the action.
  ///
  /// Can be used on: http://schema.org/ExerciseAction, http://schema.org/InsertAction, http://schema.org/MoveAction, http://schema.org/TransferAction
  ///
  static const toLocation = IriTerm.prevalidated(
    'http://schema.org/toLocation',
  );

  /// IRI for schemahttp:toRecipient [Expects: http://schema.org/Audience, http://schema.org/ContactPoint, http://schema.org/Organization, http://schema.org/Person]
  ///
  /// A sub property of recipient. The recipient who was directly sent the message.
  ///
  /// Can be used on: http://schema.org/Message
  ///
  static const toRecipient = IriTerm.prevalidated(
    'http://schema.org/toRecipient',
  );

  /// IRI for schemahttp:tocContinuation [Expects: http://schema.org/HyperTocEntry]
  ///
  /// A {[HyperTocEntry]} can have a {[tocContinuation]} indicated, which is another {[HyperTocEntry]} that would be the default next item to play or render.
  ///
  /// Can be used on: http://schema.org/HyperTocEntry
  ///
  static const tocContinuation = IriTerm.prevalidated(
    'http://schema.org/tocContinuation',
  );

  /// IRI for schemahttp:tocEntry [Expects: http://schema.org/HyperTocEntry]
  ///
  /// Indicates a {[HyperTocEntry]} in a {[HyperToc]}.
  ///
  /// Can be used on: http://schema.org/HyperToc
  ///
  static const tocEntry = IriTerm.prevalidated('http://schema.org/tocEntry');

  /// IRI for schemahttp:tongueWeight [Expects: http://schema.org/QuantitativeValue]
  ///
  /// The permitted vertical load (TWR) of a trailer attached to the vehicle. Also referred to as Tongue Load Rating (TLR) or Vertical Load Rating (VLR).\n\nTypical unit code(s): KGM for kilogram, LBR for pound\n\n* Note 1: You can indicate additional information in the {[name]} of the {[QuantitativeValue]} node.\n* Note 2: You may also link to a {[QualitativeValue]} node that provides additional information using {[valueReference]}.\n* Note 3: Note that you can use {[minValue]} and {[maxValue]} to indicate ranges.
  ///
  /// Can be used on: http://schema.org/Vehicle
  ///
  static const tongueWeight = IriTerm.prevalidated(
    'http://schema.org/tongueWeight',
  );

  /// IRI for schemahttp:tool [Expects: http://schema.org/HowToTool, http://schema.org/Text]
  ///
  /// A sub property of instrument. An object used (but not consumed) when performing instructions or a direction.
  ///
  /// Can be used on: http://schema.org/HowTo, http://schema.org/HowToDirection
  ///
  static const tool = IriTerm.prevalidated('http://schema.org/tool');

  /// IRI for schemahttp:torque [Expects: http://schema.org/QuantitativeValue]
  ///
  /// The torque (turning force) of the vehicle's engine.\n\nTypical unit code(s): NU for newton metre (N m), F17 for pound-force per foot, or F48 for pound-force per inch\n\n* Note 1: You can link to information about how the given value has been determined (e.g. reference RPM) using the {[valueReference]} property.\n* Note 2: You can use {[minValue]} and {[maxValue]} to indicate ranges.
  ///
  /// Can be used on: http://schema.org/EngineSpecification
  ///
  static const torque = IriTerm.prevalidated('http://schema.org/torque');

  /// IRI for schemahttp:totalHistoricalEnrollment [Expects: http://schema.org/Integer]
  ///
  /// The total number of students that have enrolled in the history of the course.
  ///
  /// Can be used on: http://schema.org/Course
  ///
  static const totalHistoricalEnrollment = IriTerm.prevalidated(
    'http://schema.org/totalHistoricalEnrollment',
  );

  /// IRI for schemahttp:totalJobOpenings [Expects: http://schema.org/Integer]
  ///
  /// The number of positions open for this job posting. Use a positive integer. Do not use if the number of positions is unclear or not known.
  ///
  /// Can be used on: http://schema.org/JobPosting
  ///
  static const totalJobOpenings = IriTerm.prevalidated(
    'http://schema.org/totalJobOpenings',
  );

  /// IRI for schemahttp:totalPaymentDue [Expects: http://schema.org/MonetaryAmount, http://schema.org/PriceSpecification]
  ///
  /// The total amount due.
  ///
  /// Can be used on: http://schema.org/Invoice
  ///
  static const totalPaymentDue = IriTerm.prevalidated(
    'http://schema.org/totalPaymentDue',
  );

  /// IRI for schemahttp:totalPrice [Expects: http://schema.org/Number, http://schema.org/PriceSpecification, http://schema.org/Text]
  ///
  /// The total price for the reservation or ticket, including applicable taxes, shipping, etc.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  ///
  /// Can be used on: http://schema.org/Reservation, http://schema.org/Ticket
  ///
  static const totalPrice = IriTerm.prevalidated(
    'http://schema.org/totalPrice',
  );

  /// IRI for schemahttp:totalTime [Expects: http://schema.org/Duration]
  ///
  /// The total time required to perform instructions or a direction (including time to prepare the supplies), in [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601).
  ///
  /// Can be used on: http://schema.org/HowTo, http://schema.org/HowToDirection
  ///
  static const totalTime = IriTerm.prevalidated('http://schema.org/totalTime');

  /// IRI for schemahttp:tourBookingPage [Expects: http://schema.org/URL]
  ///
  /// A page providing information on how to book a tour of some {[Place]}, such as an {[Accommodation]} or {[ApartmentComplex]} in a real estate setting, as well as other kinds of tours as appropriate.
  ///
  /// Can be used on: http://schema.org/Accommodation, http://schema.org/ApartmentComplex, http://schema.org/Place
  ///
  static const tourBookingPage = IriTerm.prevalidated(
    'http://schema.org/tourBookingPage',
  );

  /// IRI for schemahttp:touristType [Expects: http://schema.org/Audience, http://schema.org/Text]
  ///
  /// Attraction suitable for type(s) of tourist. E.g. children, visitors from a particular country, etc.
  ///
  /// Can be used on: http://schema.org/TouristAttraction, http://schema.org/TouristDestination, http://schema.org/TouristTrip
  ///
  static const touristType = IriTerm.prevalidated(
    'http://schema.org/touristType',
  );

  /// IRI for schemahttp:trackingNumber [Expects: http://schema.org/Text]
  ///
  /// Shipper tracking number.
  ///
  /// Can be used on: http://schema.org/ParcelDelivery
  ///
  static const trackingNumber = IriTerm.prevalidated(
    'http://schema.org/trackingNumber',
  );

  /// IRI for schemahttp:trackingUrl [Expects: http://schema.org/URL]
  ///
  /// Tracking url for the parcel delivery.
  ///
  /// Can be used on: http://schema.org/ParcelDelivery
  ///
  static const trackingUrl = IriTerm.prevalidated(
    'http://schema.org/trackingUrl',
  );

  /// IRI for schemahttp:tracks [Expects: http://schema.org/MusicRecording]
  ///
  /// A music recording (track)&#x2014;usually a single song.
  ///
  /// Can be used on: http://schema.org/MusicGroup, http://schema.org/MusicPlaylist
  ///
  static const tracks = IriTerm.prevalidated('http://schema.org/tracks');

  /// IRI for schemahttp:trailer [Expects: http://schema.org/VideoObject]
  ///
  /// The trailer of a movie or TV/radio series, season, episode, etc.
  ///
  /// Can be used on: http://schema.org/CreativeWorkSeason, http://schema.org/Episode, http://schema.org/Movie, http://schema.org/MovieSeries, http://schema.org/RadioSeries, http://schema.org/TVSeries, http://schema.org/VideoGame, http://schema.org/VideoGameSeries
  ///
  static const trailer = IriTerm.prevalidated('http://schema.org/trailer');

  /// IRI for schemahttp:trailerWeight [Expects: http://schema.org/QuantitativeValue]
  ///
  /// The permitted weight of a trailer attached to the vehicle.\n\nTypical unit code(s): KGM for kilogram, LBR for pound\n* Note 1: You can indicate additional information in the {[name]} of the {[QuantitativeValue]} node.\n* Note 2: You may also link to a {[QualitativeValue]} node that provides additional information using {[valueReference]}.\n* Note 3: Note that you can use {[minValue]} and {[maxValue]} to indicate ranges.
  ///
  /// Can be used on: http://schema.org/Vehicle
  ///
  static const trailerWeight = IriTerm.prevalidated(
    'http://schema.org/trailerWeight',
  );

  /// IRI for schemahttp:trainName [Expects: http://schema.org/Text]
  ///
  /// The name of the train (e.g. The Orient Express).
  ///
  /// Can be used on: http://schema.org/TrainTrip
  ///
  static const trainName = IriTerm.prevalidated('http://schema.org/trainName');

  /// IRI for schemahttp:trainNumber [Expects: http://schema.org/Text]
  ///
  /// The unique identifier for the train.
  ///
  /// Can be used on: http://schema.org/TrainTrip
  ///
  static const trainNumber = IriTerm.prevalidated(
    'http://schema.org/trainNumber',
  );

  /// IRI for schemahttp:trainingSalary [Expects: http://schema.org/MonetaryAmountDistribution]
  ///
  /// The estimated salary earned while in the program.
  ///
  /// Can be used on: http://schema.org/EducationalOccupationalProgram, http://schema.org/WorkBasedProgram
  ///
  static const trainingSalary = IriTerm.prevalidated(
    'http://schema.org/trainingSalary',
  );

  /// IRI for schemahttp:transFatContent [Expects: http://schema.org/Mass]
  ///
  /// The number of grams of trans fat.
  ///
  /// Can be used on: http://schema.org/NutritionInformation
  ///
  static const transFatContent = IriTerm.prevalidated(
    'http://schema.org/transFatContent',
  );

  /// IRI for schemahttp:transcript [Expects: http://schema.org/Text]
  ///
  /// If this MediaObject is an AudioObject or VideoObject, the transcript of that object.
  ///
  /// Can be used on: http://schema.org/AudioObject, http://schema.org/VideoObject
  ///
  static const transcript = IriTerm.prevalidated(
    'http://schema.org/transcript',
  );

  /// IRI for schemahttp:transitTime [Expects: http://schema.org/QuantitativeValue, http://schema.org/ServicePeriod]
  ///
  /// The typical delay the order has been sent for delivery and the goods reach the final customer.
  ///
  /// In the context of {[ShippingDeliveryTime]}, use the {[QuantitativeValue]}. Typical properties: minValue, maxValue, unitCode (d for DAY).
  ///
  /// In the context of {[ShippingConditions]}, use the {[ServicePeriod]}. It has a duration (as a {[QuantitativeValue]}) and also business days and a cut-off time.
  ///
  ///
  /// Can be used on: http://schema.org/ShippingConditions, http://schema.org/ShippingDeliveryTime
  ///
  static const transitTime = IriTerm.prevalidated(
    'http://schema.org/transitTime',
  );

  /// IRI for schemahttp:translator [Expects: http://schema.org/Organization, http://schema.org/Person]
  ///
  /// Organization or person who adapts a creative work to different languages, regional differences and technical requirements of a target market, or that translates during some event.
  ///
  /// Can be used on: http://schema.org/CreativeWork, http://schema.org/Event
  ///
  static const translator = IriTerm.prevalidated(
    'http://schema.org/translator',
  );

  /// IRI for schemahttp:transmissionMethod [Expects: http://schema.org/Text]
  ///
  /// How the disease spreads, either as a route or vector, for example 'direct contact', 'Aedes aegypti', etc.
  ///
  /// Can be used on: http://schema.org/InfectiousDisease
  ///
  static const transmissionMethod = IriTerm.prevalidated(
    'http://schema.org/transmissionMethod',
  );

  /// IRI for schemahttp:travelBans [Expects: http://schema.org/URL, http://schema.org/WebContent]
  ///
  /// Information about travel bans, e.g. in the context of a pandemic.
  ///
  /// Can be used on: http://schema.org/SpecialAnnouncement
  ///
  static const travelBans = IriTerm.prevalidated(
    'http://schema.org/travelBans',
  );

  /// IRI for schemahttp:trialDesign [Expects: http://schema.org/MedicalTrialDesign]
  ///
  /// Specifics about the trial design (enumerated).
  ///
  /// Can be used on: http://schema.org/MedicalTrial
  ///
  static const trialDesign = IriTerm.prevalidated(
    'http://schema.org/trialDesign',
  );

  /// IRI for schemahttp:tributary [Expects: http://schema.org/AnatomicalStructure]
  ///
  /// The anatomical or organ system that the vein flows into; a larger structure that the vein connects to.
  ///
  /// Can be used on: http://schema.org/Vein
  ///
  static const tributary = IriTerm.prevalidated('http://schema.org/tributary');

  /// IRI for schemahttp:tripOrigin [Expects: http://schema.org/Place]
  ///
  /// The location of origin of the trip, prior to any destination(s).
  ///
  /// Can be used on: http://schema.org/Trip
  ///
  static const tripOrigin = IriTerm.prevalidated(
    'http://schema.org/tripOrigin',
  );

  /// IRI for schemahttp:typeOfBed [Expects: http://schema.org/BedType, http://schema.org/Text]
  ///
  /// The type of bed to which the BedDetail refers, i.e. the type of bed available in the quantity indicated by quantity.
  ///
  /// Can be used on: http://schema.org/BedDetails
  ///
  static const typeOfBed = IriTerm.prevalidated('http://schema.org/typeOfBed');

  /// IRI for schemahttp:typeOfGood [Expects: http://schema.org/Product, http://schema.org/Service]
  ///
  /// The product that this structured value is referring to.
  ///
  /// Can be used on: http://schema.org/OwnershipInfo, http://schema.org/TypeAndQuantityNode
  ///
  static const typeOfGood = IriTerm.prevalidated(
    'http://schema.org/typeOfGood',
  );

  /// IRI for schemahttp:typicalAgeRange [Expects: http://schema.org/Text]
  ///
  /// The typical expected age range, e.g. '7-9', '11-'.
  ///
  /// Can be used on: http://schema.org/CreativeWork, http://schema.org/Event
  ///
  static const typicalAgeRange = IriTerm.prevalidated(
    'http://schema.org/typicalAgeRange',
  );

  /// IRI for schemahttp:typicalCreditsPerTerm [Expects: http://schema.org/Integer, http://schema.org/StructuredValue]
  ///
  /// The number of credits or units a full-time student would be expected to take in 1 term however 'term' is defined by the institution.
  ///
  /// Can be used on: http://schema.org/EducationalOccupationalProgram
  ///
  static const typicalCreditsPerTerm = IriTerm.prevalidated(
    'http://schema.org/typicalCreditsPerTerm',
  );

  /// IRI for schemahttp:typicalTest [Expects: http://schema.org/MedicalTest]
  ///
  /// A medical test typically performed given this condition.
  ///
  /// Can be used on: http://schema.org/MedicalCondition
  ///
  static const typicalTest = IriTerm.prevalidated(
    'http://schema.org/typicalTest',
  );

  /// IRI for schemahttp:underName [Expects: http://schema.org/Organization, http://schema.org/Person]
  ///
  /// The person or organization the reservation or ticket is for.
  ///
  /// Can be used on: http://schema.org/Reservation, http://schema.org/Ticket
  ///
  static const underName = IriTerm.prevalidated('http://schema.org/underName');

  /// IRI for schemahttp:unitCode [Expects: http://schema.org/Text, http://schema.org/URL]
  ///
  /// The unit of measurement given using the UN/CEFACT Common Code (3 characters) or a URL. Other codes than the UN/CEFACT Common Code may be used with a prefix followed by a colon.
  ///
  /// Can be used on: http://schema.org/PropertyValue, http://schema.org/QuantitativeValue, http://schema.org/TypeAndQuantityNode, http://schema.org/UnitPriceSpecification
  ///
  static const unitCode = IriTerm.prevalidated('http://schema.org/unitCode');

  /// IRI for schemahttp:unitText [Expects: http://schema.org/Text]
  ///
  /// A string or text indicating the unit of measurement. Useful if you cannot provide a standard unit code for
  /// <a href='unitCode'>unitCode</a>.
  ///
  /// Can be used on: http://schema.org/PropertyValue, http://schema.org/QuantitativeValue, http://schema.org/TypeAndQuantityNode, http://schema.org/UnitPriceSpecification
  ///
  static const unitText = IriTerm.prevalidated('http://schema.org/unitText');

  /// IRI for schemahttp:unnamedSourcesPolicy [Expects: http://schema.org/CreativeWork, http://schema.org/URL]
  ///
  /// For an {[Organization]} (typically a {[NewsMediaOrganization]}), a statement about policy on use of unnamed sources and the decision process required.
  ///
  /// Can be used on: http://schema.org/NewsMediaOrganization, http://schema.org/Organization
  ///
  static const unnamedSourcesPolicy = IriTerm.prevalidated(
    'http://schema.org/unnamedSourcesPolicy',
  );

  /// IRI for schemahttp:unsaturatedFatContent [Expects: http://schema.org/Mass]
  ///
  /// The number of grams of unsaturated fat.
  ///
  /// Can be used on: http://schema.org/NutritionInformation
  ///
  static const unsaturatedFatContent = IriTerm.prevalidated(
    'http://schema.org/unsaturatedFatContent',
  );

  /// IRI for schemahttp:uploadDate [Expects: http://schema.org/Date, http://schema.org/DateTime]
  ///
  /// Date (including time if available) when this media object was uploaded to this site.
  ///
  /// Can be used on: http://schema.org/MediaObject
  ///
  static const uploadDate = IriTerm.prevalidated(
    'http://schema.org/uploadDate',
  );

  /// IRI for schemahttp:upvoteCount [Expects: http://schema.org/Integer]
  ///
  /// The number of upvotes this question, answer or comment has received from the community.
  ///
  /// Can be used on: http://schema.org/Comment
  ///
  static const upvoteCount = IriTerm.prevalidated(
    'http://schema.org/upvoteCount',
  );

  /// IRI for schemahttp:url [Expects: http://schema.org/URL]
  ///
  /// URL of the item.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const url = IriTerm.prevalidated('http://schema.org/url');

  /// IRI for schemahttp:urlTemplate [Expects: http://schema.org/Text]
  ///
  /// An url template (RFC6570) that will be used to construct the target of the execution of the action.
  ///
  /// Can be used on: http://schema.org/EntryPoint
  ///
  static const urlTemplate = IriTerm.prevalidated(
    'http://schema.org/urlTemplate',
  );

  /// IRI for schemahttp:usNPI [Expects: http://schema.org/Text]
  ///
  /// A <a href="https://en.wikipedia.org/wiki/National_Provider_Identifier">National Provider Identifier</a> (NPI)
  /// is a unique 10-digit identification number issued to health care providers in the United States by the Centers for Medicare and Medicaid Services.
  ///
  /// Can be used on: http://schema.org/Physician
  ///
  static const usNPI = IriTerm.prevalidated('http://schema.org/usNPI');

  /// IRI for schemahttp:usedToDiagnose [Expects: http://schema.org/MedicalCondition]
  ///
  /// A condition the test is used to diagnose.
  ///
  /// Can be used on: http://schema.org/MedicalTest
  ///
  static const usedToDiagnose = IriTerm.prevalidated(
    'http://schema.org/usedToDiagnose',
  );

  /// IRI for schemahttp:userInteractionCount [Expects: http://schema.org/Integer]
  ///
  /// The number of interactions for the CreativeWork using the WebSite or SoftwareApplication.
  ///
  /// Can be used on: http://schema.org/InteractionCounter
  ///
  static const userInteractionCount = IriTerm.prevalidated(
    'http://schema.org/userInteractionCount',
  );

  /// IRI for schemahttp:usesDevice [Expects: http://schema.org/MedicalDevice]
  ///
  /// Device used to perform the test.
  ///
  /// Can be used on: http://schema.org/MedicalTest
  ///
  static const usesDevice = IriTerm.prevalidated(
    'http://schema.org/usesDevice',
  );

  /// IRI for schemahttp:usesHealthPlanIdStandard [Expects: http://schema.org/Text, http://schema.org/URL]
  ///
  /// The standard for interpreting the Plan ID. The preferred is "HIOS". See the Centers for Medicare & Medicaid Services for more details.
  ///
  /// Can be used on: http://schema.org/HealthInsurancePlan
  ///
  static const usesHealthPlanIdStandard = IriTerm.prevalidated(
    'http://schema.org/usesHealthPlanIdStandard',
  );

  /// IRI for schemahttp:utterances [Expects: http://schema.org/Text]
  ///
  /// Text of an utterances (spoken words, lyrics etc.) that occurs at a certain section of a media object, represented as a {[HyperTocEntry]}.
  ///
  /// Can be used on: http://schema.org/HyperTocEntry
  ///
  static const utterances = IriTerm.prevalidated(
    'http://schema.org/utterances',
  );

  /// IRI for schemahttp:validFor [Expects: http://schema.org/Duration]
  ///
  /// The duration of validity of a permit or similar thing.
  ///
  /// Can be used on: http://schema.org/EducationalOccupationalCredential, http://schema.org/Permit
  ///
  static const validFor = IriTerm.prevalidated('http://schema.org/validFor');

  /// IRI for schemahttp:validForMemberTier [Expects: http://schema.org/MemberProgramTier]
  ///
  /// The membership program tier an Offer (or a PriceSpecification, OfferShippingDetails, or MerchantReturnPolicy under an Offer) is valid for.
  ///
  /// Can be used on: http://schema.org/MerchantReturnPolicy, http://schema.org/Offer, http://schema.org/OfferShippingDetails, http://schema.org/PriceSpecification, http://schema.org/ShippingService
  ///
  static const validForMemberTier = IriTerm.prevalidated(
    'http://schema.org/validForMemberTier',
  );

  /// IRI for schemahttp:validFrom [Expects: http://schema.org/Date, http://schema.org/DateTime]
  ///
  /// The date when the item becomes valid.
  ///
  /// Can be used on: http://schema.org/Certification, http://schema.org/Demand, http://schema.org/FinancialIncentive, http://schema.org/LocationFeatureSpecification, http://schema.org/MonetaryAmount, http://schema.org/Offer, http://schema.org/OpeningHoursSpecification, http://schema.org/Permit, http://schema.org/PriceSpecification
  ///
  static const validFrom = IriTerm.prevalidated('http://schema.org/validFrom');

  /// IRI for schemahttp:validIn [Expects: http://schema.org/AdministrativeArea]
  ///
  /// The geographic area where the item is valid. Applies for example to a {[Permit]}, a {[Certification]}, or an {[EducationalOccupationalCredential]}.
  ///
  /// Can be used on: http://schema.org/Certification, http://schema.org/EducationalOccupationalCredential, http://schema.org/Permit
  ///
  static const validIn = IriTerm.prevalidated('http://schema.org/validIn');

  /// IRI for schemahttp:validThrough [Expects: http://schema.org/Date, http://schema.org/DateTime]
  ///
  /// The date after when the item is not valid. For example the end of an offer, salary period, or a period of opening hours.
  ///
  /// Can be used on: http://schema.org/Demand, http://schema.org/FinancialIncentive, http://schema.org/JobPosting, http://schema.org/LocationFeatureSpecification, http://schema.org/MonetaryAmount, http://schema.org/Offer, http://schema.org/OpeningHoursSpecification, http://schema.org/PriceSpecification
  ///
  static const validThrough = IriTerm.prevalidated(
    'http://schema.org/validThrough',
  );

  /// IRI for schemahttp:validUntil [Expects: http://schema.org/Date]
  ///
  /// The date when the item is no longer valid.
  ///
  /// Can be used on: http://schema.org/Permit
  ///
  static const validUntil = IriTerm.prevalidated(
    'http://schema.org/validUntil',
  );

  /// IRI for schemahttp:value [Expects: http://schema.org/Boolean, http://schema.org/Number, http://schema.org/StructuredValue, http://schema.org/Text]
  ///
  /// The value of a {[QuantitativeValue]} (including {[Observation]}) or property value node.\n\n* For {[QuantitativeValue]} and {[MonetaryAmount]}, the recommended type for values is 'Number'.\n* For {[PropertyValue]}, it can be 'Text', 'Number', 'Boolean', or 'StructuredValue'.\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  ///
  /// Can be used on: http://schema.org/MonetaryAmount, http://schema.org/PropertyValue, http://schema.org/QuantitativeValue
  ///
  static const value = IriTerm.prevalidated('http://schema.org/value');

  /// IRI for schemahttp:valueAddedTaxIncluded [Expects: http://schema.org/Boolean]
  ///
  /// Specifies whether the applicable value-added tax (VAT) is included in the price specification or not.
  ///
  /// Can be used on: http://schema.org/PriceSpecification
  ///
  static const valueAddedTaxIncluded = IriTerm.prevalidated(
    'http://schema.org/valueAddedTaxIncluded',
  );

  /// IRI for schemahttp:valueMaxLength [Expects: http://schema.org/Number]
  ///
  /// Specifies the allowed range for number of characters in a literal value.
  ///
  /// Can be used on: http://schema.org/PropertyValueSpecification
  ///
  static const valueMaxLength = IriTerm.prevalidated(
    'http://schema.org/valueMaxLength',
  );

  /// IRI for schemahttp:valueMinLength [Expects: http://schema.org/Number]
  ///
  /// Specifies the minimum allowed range for number of characters in a literal value.
  ///
  /// Can be used on: http://schema.org/PropertyValueSpecification
  ///
  static const valueMinLength = IriTerm.prevalidated(
    'http://schema.org/valueMinLength',
  );

  /// IRI for schemahttp:valueName [Expects: http://schema.org/Text]
  ///
  /// Indicates the name of the PropertyValueSpecification to be used in URL templates and form encoding in a manner analogous to HTML's input@name.
  ///
  /// Can be used on: http://schema.org/PropertyValueSpecification
  ///
  static const valueName = IriTerm.prevalidated('http://schema.org/valueName');

  /// IRI for schemahttp:valuePattern [Expects: http://schema.org/Text]
  ///
  /// Specifies a regular expression for testing literal values according to the HTML spec.
  ///
  /// Can be used on: http://schema.org/PropertyValueSpecification
  ///
  static const valuePattern = IriTerm.prevalidated(
    'http://schema.org/valuePattern',
  );

  /// IRI for schemahttp:valueReference [Expects: http://schema.org/DefinedTerm, http://schema.org/Enumeration, http://schema.org/MeasurementTypeEnumeration, http://schema.org/PropertyValue, http://schema.org/QualitativeValue, http://schema.org/QuantitativeValue, http://schema.org/StructuredValue, http://schema.org/Text]
  ///
  /// A secondary value that provides additional information on the original value, e.g. a reference temperature or a type of measurement.
  ///
  /// Can be used on: http://schema.org/PropertyValue, http://schema.org/QualitativeValue, http://schema.org/QuantitativeValue
  ///
  static const valueReference = IriTerm.prevalidated(
    'http://schema.org/valueReference',
  );

  /// IRI for schemahttp:valueRequired [Expects: http://schema.org/Boolean]
  ///
  /// Whether the property must be filled in to complete the action.  Default is false.
  ///
  /// Can be used on: http://schema.org/PropertyValueSpecification
  ///
  static const valueRequired = IriTerm.prevalidated(
    'http://schema.org/valueRequired',
  );

  /// IRI for schemahttp:variableMeasured [Expects: http://schema.org/Property, http://schema.org/PropertyValue, http://schema.org/StatisticalVariable, http://schema.org/Text]
  ///
  /// The variableMeasured property can indicate (repeated as necessary) the  variables that are measured in some dataset, either described as text or as pairs of identifier and description using PropertyValue, or more explicitly as a {[StatisticalVariable]}.
  ///
  /// Can be used on: http://schema.org/Dataset, http://schema.org/Observation
  ///
  static const variableMeasured = IriTerm.prevalidated(
    'http://schema.org/variableMeasured',
  );

  /// IRI for schemahttp:variantCover [Expects: http://schema.org/Text]
  ///
  /// A description of the variant cover
  /// for the issue, if the issue is a variant printing. For example, "Bryan Hitch
  /// Variant Cover" or "2nd Printing Variant".
  ///
  /// Can be used on: http://schema.org/ComicIssue
  ///
  static const variantCover = IriTerm.prevalidated(
    'http://schema.org/variantCover',
  );

  /// IRI for schemahttp:variesBy [Expects: http://schema.org/DefinedTerm, http://schema.org/Text]
  ///
  /// Indicates the property or properties by which the variants in a {[ProductGroup]} vary, e.g. their size, color etc. Schema.org properties can be referenced by their short name e.g. "color"; terms defined elsewhere can be referenced with their URIs.
  ///
  /// Can be used on: http://schema.org/ProductGroup
  ///
  static const variesBy = IriTerm.prevalidated('http://schema.org/variesBy');

  /// IRI for schemahttp:vatID [Expects: http://schema.org/Text]
  ///
  /// The Value-added Tax ID of the organization or person.
  ///
  /// Can be used on: http://schema.org/Organization, http://schema.org/Person
  ///
  static const vatID = IriTerm.prevalidated('http://schema.org/vatID');

  /// IRI for schemahttp:vehicleConfiguration [Expects: http://schema.org/Text]
  ///
  /// A short text indicating the configuration of the vehicle, e.g. '5dr hatchback ST 2.5 MT 225 hp' or 'limited edition'.
  ///
  /// Can be used on: http://schema.org/Vehicle
  ///
  static const vehicleConfiguration = IriTerm.prevalidated(
    'http://schema.org/vehicleConfiguration',
  );

  /// IRI for schemahttp:vehicleEngine [Expects: http://schema.org/EngineSpecification]
  ///
  /// Information about the engine or engines of the vehicle.
  ///
  /// Can be used on: http://schema.org/Vehicle
  ///
  static const vehicleEngine = IriTerm.prevalidated(
    'http://schema.org/vehicleEngine',
  );

  /// IRI for schemahttp:vehicleIdentificationNumber [Expects: http://schema.org/Text]
  ///
  /// The Vehicle Identification Number (VIN) is a unique serial number used by the automotive industry to identify individual motor vehicles.
  ///
  /// Can be used on: http://schema.org/Vehicle
  ///
  static const vehicleIdentificationNumber = IriTerm.prevalidated(
    'http://schema.org/vehicleIdentificationNumber',
  );

  /// IRI for schemahttp:vehicleInteriorColor [Expects: http://schema.org/Text]
  ///
  /// The color or color combination of the interior of the vehicle.
  ///
  /// Can be used on: http://schema.org/Vehicle
  ///
  static const vehicleInteriorColor = IriTerm.prevalidated(
    'http://schema.org/vehicleInteriorColor',
  );

  /// IRI for schemahttp:vehicleInteriorType [Expects: http://schema.org/Text]
  ///
  /// The type or material of the interior of the vehicle (e.g. synthetic fabric, leather, wood, etc.). While most interior types are characterized by the material used, an interior type can also be based on vehicle usage or target audience.
  ///
  /// Can be used on: http://schema.org/Vehicle
  ///
  static const vehicleInteriorType = IriTerm.prevalidated(
    'http://schema.org/vehicleInteriorType',
  );

  /// IRI for schemahttp:vehicleModelDate [Expects: http://schema.org/Date]
  ///
  /// The release date of a vehicle model (often used to differentiate versions of the same make and model).
  ///
  /// Can be used on: http://schema.org/Vehicle
  ///
  static const vehicleModelDate = IriTerm.prevalidated(
    'http://schema.org/vehicleModelDate',
  );

  /// IRI for schemahttp:vehicleSeatingCapacity [Expects: http://schema.org/Number, http://schema.org/QuantitativeValue]
  ///
  /// The number of passengers that can be seated in the vehicle, both in terms of the physical space available, and in terms of limitations set by law.\n\nTypical unit code(s): C62 for persons.
  ///
  /// Can be used on: http://schema.org/Vehicle
  ///
  static const vehicleSeatingCapacity = IriTerm.prevalidated(
    'http://schema.org/vehicleSeatingCapacity',
  );

  /// IRI for schemahttp:vehicleSpecialUsage [Expects: http://schema.org/CarUsageType, http://schema.org/Text]
  ///
  /// Indicates whether the vehicle has been used for special purposes, like commercial rental, driving school, or as a taxi. The legislation in many countries requires this information to be revealed when offering a car for sale.
  ///
  /// Can be used on: http://schema.org/Vehicle
  ///
  static const vehicleSpecialUsage = IriTerm.prevalidated(
    'http://schema.org/vehicleSpecialUsage',
  );

  /// IRI for schemahttp:vehicleTransmission [Expects: http://schema.org/QualitativeValue, http://schema.org/Text, http://schema.org/URL]
  ///
  /// The type of component used for transmitting the power from a rotating power source to the wheels or other relevant component(s) ("gearbox" for cars).
  ///
  /// Can be used on: http://schema.org/Vehicle
  ///
  static const vehicleTransmission = IriTerm.prevalidated(
    'http://schema.org/vehicleTransmission',
  );

  /// IRI for schemahttp:vendor [Expects: http://schema.org/Organization, http://schema.org/Person]
  ///
  /// 'vendor' is an earlier term for 'seller'.
  ///
  /// Can be used on: http://schema.org/BuyAction
  ///
  static const vendor = IriTerm.prevalidated('http://schema.org/vendor');

  /// IRI for schemahttp:verificationFactCheckingPolicy [Expects: http://schema.org/CreativeWork, http://schema.org/URL]
  ///
  /// Disclosure about verification and fact-checking processes for a {[NewsMediaOrganization]} or other fact-checking {[Organization]}.
  ///
  /// Can be used on: http://schema.org/NewsMediaOrganization
  ///
  static const verificationFactCheckingPolicy = IriTerm.prevalidated(
    'http://schema.org/verificationFactCheckingPolicy',
  );

  /// IRI for schemahttp:version [Expects: http://schema.org/Number, http://schema.org/Text]
  ///
  /// The version of the CreativeWork embodied by a specified resource.
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const version = IriTerm.prevalidated('http://schema.org/version');

  /// IRI for schemahttp:video [Expects: http://schema.org/Clip, http://schema.org/VideoObject]
  ///
  /// An embedded video object.
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const video = IriTerm.prevalidated('http://schema.org/video');

  /// IRI for schemahttp:videoFormat [Expects: http://schema.org/Text]
  ///
  /// The type of screening or video broadcast used (e.g. IMAX, 3D, SD, HD, etc.).
  ///
  /// Can be used on: http://schema.org/BroadcastEvent, http://schema.org/BroadcastService, http://schema.org/ScreeningEvent
  ///
  static const videoFormat = IriTerm.prevalidated(
    'http://schema.org/videoFormat',
  );

  /// IRI for schemahttp:videoFrameSize [Expects: http://schema.org/Text]
  ///
  /// The frame size of the video.
  ///
  /// Can be used on: http://schema.org/VideoObject
  ///
  static const videoFrameSize = IriTerm.prevalidated(
    'http://schema.org/videoFrameSize',
  );

  /// IRI for schemahttp:videoQuality [Expects: http://schema.org/Text]
  ///
  /// The quality of the video.
  ///
  /// Can be used on: http://schema.org/VideoObject
  ///
  static const videoQuality = IriTerm.prevalidated(
    'http://schema.org/videoQuality',
  );

  /// IRI for schemahttp:volumeNumber [Expects: http://schema.org/Integer, http://schema.org/Text]
  ///
  /// Identifies the volume of publication or multi-part work; for example, "iii" or "2".
  ///
  /// Can be used on: http://schema.org/PublicationVolume
  ///
  static const volumeNumber = IriTerm.prevalidated(
    'http://schema.org/volumeNumber',
  );

  /// IRI for schemahttp:warning [Expects: http://schema.org/Text, http://schema.org/URL]
  ///
  /// Any FDA or other warnings about the drug (text or URL).
  ///
  /// Can be used on: http://schema.org/Drug
  ///
  static const warning = IriTerm.prevalidated('http://schema.org/warning');

  /// IRI for schemahttp:warrantyPromise [Expects: http://schema.org/WarrantyPromise]
  ///
  /// The warranty promise(s) included in the offer.
  ///
  /// Can be used on: http://schema.org/BuyAction, http://schema.org/SellAction
  ///
  static const warrantyPromise = IriTerm.prevalidated(
    'http://schema.org/warrantyPromise',
  );

  /// IRI for schemahttp:warrantyScope [Expects: http://schema.org/WarrantyScope]
  ///
  /// The scope of the warranty promise.
  ///
  /// Can be used on: http://schema.org/WarrantyPromise
  ///
  static const warrantyScope = IriTerm.prevalidated(
    'http://schema.org/warrantyScope',
  );

  /// IRI for schemahttp:webCheckinTime [Expects: http://schema.org/DateTime]
  ///
  /// The time when a passenger can check into the flight online.
  ///
  /// Can be used on: http://schema.org/Flight
  ///
  static const webCheckinTime = IriTerm.prevalidated(
    'http://schema.org/webCheckinTime',
  );

  /// IRI for schemahttp:webFeed [Expects: http://schema.org/DataFeed, http://schema.org/URL]
  ///
  /// The URL for a feed, e.g. associated with a podcast series, blog, or series of date-stamped updates. This is usually RSS or Atom.
  ///
  /// Can be used on: http://schema.org/PodcastSeries, http://schema.org/SpecialAnnouncement
  ///
  static const webFeed = IriTerm.prevalidated('http://schema.org/webFeed');

  /// IRI for schemahttp:weight [Expects: http://schema.org/Mass, http://schema.org/QuantitativeValue]
  ///
  /// The weight of the product or person.
  ///
  /// Can be used on: http://schema.org/OfferShippingDetails, http://schema.org/Person, http://schema.org/Product, http://schema.org/ShippingConditions, http://schema.org/VisualArtwork
  ///
  static const weight = IriTerm.prevalidated('http://schema.org/weight');

  /// IRI for schemahttp:weightPercentage [Expects: http://schema.org/Number]
  ///
  /// Fraction of the weight that is used to compute the shipping price.
  ///
  /// Can be used on: http://schema.org/ShippingRateSettings
  ///
  static const weightPercentage = IriTerm.prevalidated(
    'http://schema.org/weightPercentage',
  );

  /// IRI for schemahttp:weightTotal [Expects: http://schema.org/QuantitativeValue]
  ///
  /// The permitted total weight of the loaded vehicle, including passengers and cargo and the weight of the empty vehicle.\n\nTypical unit code(s): KGM for kilogram, LBR for pound\n\n* Note 1: You can indicate additional information in the {[name]} of the {[QuantitativeValue]} node.\n* Note 2: You may also link to a {[QualitativeValue]} node that provides additional information using {[valueReference]}.\n* Note 3: Note that you can use {[minValue]} and {[maxValue]} to indicate ranges.
  ///
  /// Can be used on: http://schema.org/Vehicle
  ///
  static const weightTotal = IriTerm.prevalidated(
    'http://schema.org/weightTotal',
  );

  /// IRI for schemahttp:wheelbase [Expects: http://schema.org/QuantitativeValue]
  ///
  /// The distance between the centers of the front and rear wheels.\n\nTypical unit code(s): CMT for centimeters, MTR for meters, INH for inches, FOT for foot/feet.
  ///
  /// Can be used on: http://schema.org/Vehicle
  ///
  static const wheelbase = IriTerm.prevalidated('http://schema.org/wheelbase');

  /// IRI for schemahttp:width [Expects: http://schema.org/Distance, http://schema.org/QuantitativeValue]
  ///
  /// The width of the item.
  ///
  /// Can be used on: http://schema.org/MediaObject, http://schema.org/OfferShippingDetails, http://schema.org/Product, http://schema.org/ShippingConditions, http://schema.org/VisualArtwork
  ///
  static const width = IriTerm.prevalidated('http://schema.org/width');

  /// IRI for schemahttp:winner [Expects: http://schema.org/Person]
  ///
  /// A sub property of participant. The winner of the action.
  ///
  /// Can be used on: http://schema.org/LoseAction
  ///
  static const winner = IriTerm.prevalidated('http://schema.org/winner');

  /// IRI for schemahttp:wordCount [Expects: http://schema.org/Integer]
  ///
  /// The number of words in the text of the CreativeWork such as an Article, Book, etc.
  ///
  /// Can be used on: http://schema.org/Article, http://schema.org/CreativeWork
  ///
  static const wordCount = IriTerm.prevalidated('http://schema.org/wordCount');

  /// IRI for schemahttp:workHours [Expects: http://schema.org/Text]
  ///
  /// The typical working hours for this job (e.g. 1st shift, night shift, 8am-5pm).
  ///
  /// Can be used on: http://schema.org/JobPosting
  ///
  static const workHours = IriTerm.prevalidated('http://schema.org/workHours');

  /// IRI for schemahttp:workLocation [Expects: http://schema.org/ContactPoint, http://schema.org/Place]
  ///
  /// A contact location for a person's place of work.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const workLocation = IriTerm.prevalidated(
    'http://schema.org/workLocation',
  );

  /// IRI for schemahttp:workPerformed [Expects: http://schema.org/CreativeWork]
  ///
  /// A work performed in some event, for example a play performed in a TheaterEvent.
  ///
  /// Can be used on: http://schema.org/Event
  ///
  static const workPerformed = IriTerm.prevalidated(
    'http://schema.org/workPerformed',
  );

  /// IRI for schemahttp:workPresented [Expects: http://schema.org/Movie]
  ///
  /// The movie presented during this event.
  ///
  /// Can be used on: http://schema.org/ScreeningEvent
  ///
  static const workPresented = IriTerm.prevalidated(
    'http://schema.org/workPresented',
  );

  /// IRI for schemahttp:workload [Expects: http://schema.org/Energy, http://schema.org/QuantitativeValue]
  ///
  /// Quantitative measure of the physiologic output of the exercise; also referred to as energy expenditure.
  ///
  /// Can be used on: http://schema.org/ExercisePlan
  ///
  static const workload = IriTerm.prevalidated('http://schema.org/workload');

  /// IRI for schemahttp:worksFor [Expects: http://schema.org/Organization]
  ///
  /// Organizations that the person works for.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const worksFor = IriTerm.prevalidated('http://schema.org/worksFor');

  /// IRI for schemahttp:worstRating [Expects: http://schema.org/Number, http://schema.org/Text]
  ///
  /// The lowest value allowed in this rating system.
  ///
  /// Can be used on: http://schema.org/Rating
  ///
  static const worstRating = IriTerm.prevalidated(
    'http://schema.org/worstRating',
  );

  /// IRI for schemahttp:xpath [Expects: http://schema.org/XPathType]
  ///
  /// An XPath, e.g. of a {[SpeakableSpecification]} or {[WebPageElement]}. In the latter case, multiple matches within a page can constitute a single conceptual "Web page element".
  ///
  /// Can be used on: http://schema.org/SpeakableSpecification, http://schema.org/WebPageElement
  ///
  static const xpath = IriTerm.prevalidated('http://schema.org/xpath');

  /// IRI for schemahttp:yearBuilt [Expects: http://schema.org/Number]
  ///
  /// The year an {[Accommodation]} was constructed. This corresponds to the [YearBuilt field in RESO](https://ddwiki.reso.org/display/DDW17/YearBuilt+Field).
  ///
  /// Can be used on: http://schema.org/Accommodation
  ///
  static const yearBuilt = IriTerm.prevalidated('http://schema.org/yearBuilt');

  /// IRI for schemahttp:yearlyRevenue [Expects: http://schema.org/QuantitativeValue]
  ///
  /// The size of the business in annual revenue.
  ///
  /// Can be used on: http://schema.org/BusinessAudience
  ///
  static const yearlyRevenue = IriTerm.prevalidated(
    'http://schema.org/yearlyRevenue',
  );

  /// IRI for schemahttp:yearsInOperation [Expects: http://schema.org/QuantitativeValue]
  ///
  /// The age of the business.
  ///
  /// Can be used on: http://schema.org/BusinessAudience
  ///
  static const yearsInOperation = IriTerm.prevalidated(
    'http://schema.org/yearsInOperation',
  );

  /// IRI for schemahttp:actionApplication [Expects: http://schema.org/SoftwareApplication]
  ///
  /// An application that can complete the request.
  ///
  /// Can be used on: http://schema.org/EntryPoint
  ///
  static const actionApplication = IriTerm.prevalidated(
    'http://schema.org/actionApplication',
  );

  /// IRI for schemahttp:actionOption [Expects: http://schema.org/Text, http://schema.org/Thing]
  ///
  /// A sub property of object. The options subject to this action.
  ///
  /// Can be used on: http://schema.org/ChooseAction
  ///
  static const actionOption = IriTerm.prevalidated(
    'http://schema.org/actionOption',
  );

  /// IRI for schemahttp:album [Expects: http://schema.org/MusicAlbum]
  ///
  /// A music album.
  ///
  /// Can be used on: http://schema.org/MusicGroup
  ///
  static const album = IriTerm.prevalidated('http://schema.org/album');

  /// IRI for schemahttp:albumRelease [Expects: http://schema.org/MusicRelease]
  ///
  /// A release of this album.
  ///
  /// Can be used on: http://schema.org/MusicAlbum
  ///
  static const albumRelease = IriTerm.prevalidated(
    'http://schema.org/albumRelease',
  );

  /// IRI for schemahttp:alternateName [Expects: http://schema.org/Text]
  ///
  /// An alias for the item.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const alternateName = IriTerm.prevalidated(
    'http://schema.org/alternateName',
  );

  /// IRI for schemahttp:alumni [Expects: http://schema.org/Person]
  ///
  /// Alumni of an organization.
  ///
  /// Can be used on: http://schema.org/EducationalOrganization, http://schema.org/Organization
  ///
  static const alumni = IriTerm.prevalidated('http://schema.org/alumni');

  /// IRI for schemahttp:alumniOf [Expects: http://schema.org/EducationalOrganization, http://schema.org/Organization]
  ///
  /// An organization that the person is an alumni of.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const alumniOf = IriTerm.prevalidated('http://schema.org/alumniOf');

  /// IRI for schemahttp:archiveHeld [Expects: http://schema.org/ArchiveComponent]
  ///
  /// Collection, [fonds](https://en.wikipedia.org/wiki/Fonds), or item held, kept or maintained by an {[ArchiveOrganization]}.
  ///
  /// Can be used on: http://schema.org/ArchiveOrganization
  ///
  static const archiveHeld = IriTerm.prevalidated(
    'http://schema.org/archiveHeld',
  );

  /// IRI for schemahttp:arterialBranch [Expects: http://schema.org/AnatomicalStructure]
  ///
  /// The branches that comprise the arterial structure.
  ///
  /// Can be used on: http://schema.org/Artery
  ///
  static const arterialBranch = IriTerm.prevalidated(
    'http://schema.org/arterialBranch',
  );

  /// IRI for schemahttp:artworkSurface [Expects: http://schema.org/Text, http://schema.org/URL]
  ///
  /// The supporting materials for the artwork, e.g. Canvas, Paper, Wood, Board, etc.
  ///
  /// Can be used on: http://schema.org/VisualArtwork
  ///
  static const artworkSurface = IriTerm.prevalidated(
    'http://schema.org/artworkSurface',
  );

  /// IRI for schemahttp:attendee [Expects: http://schema.org/Organization, http://schema.org/Person]
  ///
  /// A person or organization attending the event.
  ///
  /// Can be used on: http://schema.org/Event
  ///
  static const attendee = IriTerm.prevalidated('http://schema.org/attendee');

  /// IRI for schemahttp:audience [Expects: http://schema.org/Audience]
  ///
  /// An intended audience, i.e. a group for whom something was created.
  ///
  /// Can be used on: http://schema.org/CreativeWork, http://schema.org/Event, http://schema.org/LodgingBusiness, http://schema.org/PlayAction, http://schema.org/Product, http://schema.org/Service
  ///
  static const audience = IriTerm.prevalidated('http://schema.org/audience');

  /// IRI for schemahttp:availableOnDevice [Expects: http://schema.org/Text]
  ///
  /// Device required to run the application. Used in cases where a specific make/model is required to run the application.
  ///
  /// Can be used on: http://schema.org/SoftwareApplication
  ///
  static const availableOnDevice = IriTerm.prevalidated(
    'http://schema.org/availableOnDevice',
  );

  /// IRI for schemahttp:award [Expects: http://schema.org/Text]
  ///
  /// An award won by or for this item.
  ///
  /// Can be used on: http://schema.org/CreativeWork, http://schema.org/Organization, http://schema.org/Person, http://schema.org/Product, http://schema.org/Service
  ///
  static const award = IriTerm.prevalidated('http://schema.org/award');

  /// IRI for schemahttp:blogPost [Expects: http://schema.org/BlogPosting]
  ///
  /// A posting that is part of this blog.
  ///
  /// Can be used on: http://schema.org/Blog
  ///
  static const blogPost = IriTerm.prevalidated('http://schema.org/blogPost');

  /// IRI for schemahttp:broker [Expects: http://schema.org/Organization, http://schema.org/Person]
  ///
  /// An entity that arranges for an exchange between a buyer and a seller.  In most cases a broker never acquires or releases ownership of a product or service involved in an exchange.  If it is not clear whether an entity is a broker, seller, or buyer, the latter two terms are preferred.
  ///
  /// Can be used on: http://schema.org/Invoice, http://schema.org/Order, http://schema.org/Reservation, http://schema.org/Service
  ///
  static const broker = IriTerm.prevalidated('http://schema.org/broker');

  /// IRI for schemahttp:caption [Expects: http://schema.org/MediaObject, http://schema.org/Text]
  ///
  /// The caption for this object. For downloadable machine formats (closed caption, subtitles etc.) use MediaObject and indicate the {[encodingFormat]}.
  ///
  /// Can be used on: http://schema.org/AudioObject, http://schema.org/ImageObject, http://schema.org/VideoObject
  ///
  static const caption = IriTerm.prevalidated('http://schema.org/caption');

  /// IRI for schemahttp:category [Expects: http://schema.org/CategoryCode, http://schema.org/PhysicalActivityCategory, http://schema.org/Text, http://schema.org/Thing, http://schema.org/URL]
  ///
  /// A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy.
  ///
  /// Can be used on: http://schema.org/ActionAccessSpecification, http://schema.org/Invoice, http://schema.org/Offer, http://schema.org/PhysicalActivity, http://schema.org/Product, http://schema.org/Recommendation, http://schema.org/Service, http://schema.org/SpecialAnnouncement
  ///
  static const category = IriTerm.prevalidated('http://schema.org/category');

  /// IRI for schemahttp:childTaxon [Expects: http://schema.org/Taxon, http://schema.org/Text, http://schema.org/URL]
  ///
  /// Closest child taxa of the taxon in question.
  ///
  /// Can be used on: http://schema.org/Taxon
  ///
  static const childTaxon = IriTerm.prevalidated(
    'http://schema.org/childTaxon',
  );

  /// IRI for schemahttp:clinicalPharmacology [Expects: http://schema.org/Text]
  ///
  /// Description of the absorption and elimination of drugs, including their concentration (pharmacokinetics, pK) and biological effects (pharmacodynamics, pD).
  ///
  /// Can be used on: http://schema.org/Drug
  ///
  static const clinicalPharmacology = IriTerm.prevalidated(
    'http://schema.org/clinicalPharmacology',
  );

  /// IRI for schemahttp:codeSampleType [Expects: http://schema.org/Text]
  ///
  /// What type of code sample: full (compile ready) solution, code snippet, inline code, scripts, template.
  ///
  /// Can be used on: http://schema.org/SoftwareSourceCode
  ///
  static const codeSampleType = IriTerm.prevalidated(
    'http://schema.org/codeSampleType',
  );

  /// IRI for schemahttp:colleague [Expects: http://schema.org/Person, http://schema.org/URL]
  ///
  /// A colleague of the person.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const colleague = IriTerm.prevalidated('http://schema.org/colleague');

  /// IRI for schemahttp:contactPoint [Expects: http://schema.org/ContactPoint]
  ///
  /// A contact point for a person or organization.
  ///
  /// Can be used on: http://schema.org/HealthInsurancePlan, http://schema.org/Organization, http://schema.org/Person
  ///
  static const contactPoint = IriTerm.prevalidated(
    'http://schema.org/contactPoint',
  );

  /// IRI for schemahttp:containsPlace [Expects: http://schema.org/Place]
  ///
  /// The basic containment relation between a place and another that it contains.
  ///
  /// Can be used on: http://schema.org/Place
  ///
  static const containsPlace = IriTerm.prevalidated(
    'http://schema.org/containsPlace',
  );

  /// IRI for schemahttp:containsSeason [Expects: http://schema.org/CreativeWorkSeason]
  ///
  /// A season that is part of the media series.
  ///
  /// Can be used on: http://schema.org/RadioSeries, http://schema.org/TVSeries, http://schema.org/VideoGameSeries
  ///
  static const containsSeason = IriTerm.prevalidated(
    'http://schema.org/containsSeason',
  );

  /// IRI for schemahttp:contentLocation [Expects: http://schema.org/Place]
  ///
  /// The location depicted or described in the content. For example, the location in a photograph or painting.
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const contentLocation = IriTerm.prevalidated(
    'http://schema.org/contentLocation',
  );

  /// IRI for schemahttp:creator [Expects: http://schema.org/Organization, http://schema.org/Person]
  ///
  /// The creator/author of this CreativeWork. This is the same as the Author property for CreativeWork.
  ///
  /// Can be used on: http://schema.org/CreativeWork, http://schema.org/UserComments
  ///
  static const creator = IriTerm.prevalidated('http://schema.org/creator');

  /// IRI for schemahttp:dataset [Expects: http://schema.org/Dataset]
  ///
  /// A dataset contained in this catalog.
  ///
  /// Can be used on: http://schema.org/DataCatalog
  ///
  static const dataset = IriTerm.prevalidated('http://schema.org/dataset');

  /// IRI for schemahttp:dateCreated [Expects: http://schema.org/Date, http://schema.org/DateTime]
  ///
  /// The date on which the CreativeWork was created or the item was added to a DataFeed.
  ///
  /// Can be used on: http://schema.org/CreativeWork, http://schema.org/DataFeedItem
  ///
  static const dateCreated = IriTerm.prevalidated(
    'http://schema.org/dateCreated',
  );

  /// IRI for schemahttp:director [Expects: http://schema.org/Person]
  ///
  /// A director of e.g. TV, radio, movie, video gaming etc. content, or of an event. Directors can be associated with individual items or with a series, episode, clip.
  ///
  /// Can be used on: http://schema.org/Clip, http://schema.org/CreativeWorkSeason, http://schema.org/Episode, http://schema.org/Event, http://schema.org/Movie, http://schema.org/MovieSeries, http://schema.org/RadioSeries, http://schema.org/TVSeries, http://schema.org/VideoGame, http://schema.org/VideoGameSeries, http://schema.org/VideoObject
  ///
  static const director = IriTerm.prevalidated('http://schema.org/director');

  /// IRI for schemahttp:duration [Expects: http://schema.org/Duration, http://schema.org/QuantitativeValue]
  ///
  /// The duration of the item (movie, audio recording, event, etc.) in [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601).
  ///
  /// Can be used on: http://schema.org/Audiobook, http://schema.org/Episode, http://schema.org/Event, http://schema.org/MediaObject, http://schema.org/Movie, http://schema.org/MusicRecording, http://schema.org/MusicRelease, http://schema.org/QuantitativeValueDistribution, http://schema.org/Schedule, http://schema.org/ServicePeriod
  ///
  static const duration = IriTerm.prevalidated('http://schema.org/duration');

  /// IRI for schemahttp:employee [Expects: http://schema.org/Person]
  ///
  /// Someone working for this organization.
  ///
  /// Can be used on: http://schema.org/Organization
  ///
  static const employee = IriTerm.prevalidated('http://schema.org/employee');

  /// IRI for schemahttp:encodesBioChemEntity [Expects: http://schema.org/BioChemEntity]
  ///
  /// Another BioChemEntity encoded by this one.
  ///
  /// Can be used on: http://schema.org/Gene
  ///
  static const encodesBioChemEntity = IriTerm.prevalidated(
    'http://schema.org/encodesBioChemEntity',
  );

  /// IRI for schemahttp:encodesCreativeWork [Expects: http://schema.org/CreativeWork]
  ///
  /// The CreativeWork encoded by this media object.
  ///
  /// Can be used on: http://schema.org/MediaObject
  ///
  static const encodesCreativeWork = IriTerm.prevalidated(
    'http://schema.org/encodesCreativeWork',
  );

  /// IRI for schemahttp:encodingFormat [Expects: http://schema.org/Text, http://schema.org/URL]
  ///
  /// Media type typically expressed using a MIME format (see [IANA site](http://www.iana.org/assignments/media-types/media-types.xhtml) and [MDN reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)), e.g. application/zip for a SoftwareApplication binary, audio/mpeg for .mp3 etc.
  ///
  /// In cases where a {[CreativeWork]} has several media type representations, {[encoding]} can be used to indicate each {[MediaObject]} alongside particular {[encodingFormat]} information.
  ///
  /// Unregistered or niche encoding and file formats can be indicated instead via the most appropriate URL, e.g. defining Web page or a Wikipedia/Wikidata entry.
  ///
  /// Can be used on: http://schema.org/CreativeWork, http://schema.org/MediaObject
  ///
  static const encodingFormat = IriTerm.prevalidated(
    'http://schema.org/encodingFormat',
  );

  /// IRI for schemahttp:episode [Expects: http://schema.org/Episode]
  ///
  /// An episode of a TV, radio or game media within a series or season.
  ///
  /// Can be used on: http://schema.org/CreativeWorkSeason, http://schema.org/RadioSeries, http://schema.org/TVSeries, http://schema.org/VideoGameSeries
  ///
  static const episode = IriTerm.prevalidated('http://schema.org/episode');

  /// IRI for schemahttp:event [Expects: http://schema.org/Event]
  ///
  /// Upcoming or past event associated with this place, organization, or action.
  ///
  /// Can be used on: http://schema.org/InformAction, http://schema.org/InviteAction, http://schema.org/JoinAction, http://schema.org/LeaveAction, http://schema.org/Organization, http://schema.org/Place, http://schema.org/PlayAction
  ///
  static const event = IriTerm.prevalidated('http://schema.org/event');

  /// IRI for schemahttp:exampleOfWork [Expects: http://schema.org/CreativeWork]
  ///
  /// A creative work that this work is an example/instance/realization/derivation of.
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const exampleOfWork = IriTerm.prevalidated(
    'http://schema.org/exampleOfWork',
  );

  /// IRI for schemahttp:executableLibraryName [Expects: http://schema.org/Text]
  ///
  /// Library file name, e.g., mscorlib.dll, system.web.dll.
  ///
  /// Can be used on: http://schema.org/APIReference
  ///
  static const executableLibraryName = IriTerm.prevalidated(
    'http://schema.org/executableLibraryName',
  );

  /// IRI for schemahttp:exerciseCourse [Expects: http://schema.org/Place]
  ///
  /// A sub property of location. The course where this action was taken.
  ///
  /// Can be used on: http://schema.org/ExerciseAction
  ///
  static const exerciseCourse = IriTerm.prevalidated(
    'http://schema.org/exerciseCourse',
  );

  /// IRI for schemahttp:founder [Expects: http://schema.org/Organization, http://schema.org/Person]
  ///
  /// A person or organization who founded this organization.
  ///
  /// Can be used on: http://schema.org/Organization
  ///
  static const founder = IriTerm.prevalidated('http://schema.org/founder');

  /// IRI for schemahttp:frequency [Expects: http://schema.org/Text]
  ///
  /// How often the dose is taken, e.g. 'daily'.
  ///
  /// Can be used on: http://schema.org/DoseSchedule
  ///
  static const frequency = IriTerm.prevalidated('http://schema.org/frequency');

  /// IRI for schemahttp:fundedItem [Expects: http://schema.org/BioChemEntity, http://schema.org/CreativeWork, http://schema.org/Event, http://schema.org/MedicalEntity, http://schema.org/Organization, http://schema.org/Person, http://schema.org/Product]
  ///
  /// Indicates something directly or indirectly funded or sponsored through a {[Grant]}. See also {[ownershipFundingInfo]}.
  ///
  /// Can be used on: http://schema.org/Grant
  ///
  static const fundedItem = IriTerm.prevalidated(
    'http://schema.org/fundedItem',
  );

  /// IRI for schemahttp:funding [Expects: http://schema.org/Grant]
  ///
  /// A {[Grant]} that directly or indirectly provide funding or sponsorship for this item. See also {[ownershipFundingInfo]}.
  ///
  /// Can be used on: http://schema.org/BioChemEntity, http://schema.org/CreativeWork, http://schema.org/Event, http://schema.org/MedicalEntity, http://schema.org/Organization, http://schema.org/Person, http://schema.org/Product
  ///
  static const funding = IriTerm.prevalidated('http://schema.org/funding');

  /// IRI for schemahttp:game [Expects: http://schema.org/VideoGame]
  ///
  /// Video game which is played on this server.
  ///
  /// Can be used on: http://schema.org/GameServer
  ///
  static const game = IriTerm.prevalidated('http://schema.org/game');

  /// IRI for schemahttp:gameServer [Expects: http://schema.org/GameServer]
  ///
  /// The server on which  it is possible to play the game.
  ///
  /// Can be used on: http://schema.org/VideoGame
  ///
  static const gameServer = IriTerm.prevalidated(
    'http://schema.org/gameServer',
  );

  /// IRI for schemahttp:genre [Expects: http://schema.org/Text, http://schema.org/URL]
  ///
  /// Genre of the creative work, broadcast channel or group.
  ///
  /// Can be used on: http://schema.org/BroadcastChannel, http://schema.org/CreativeWork, http://schema.org/MusicGroup
  ///
  static const genre = IriTerm.prevalidated('http://schema.org/genre');

  /// IRI for schemahttp:hasBioChemEntityPart [Expects: http://schema.org/BioChemEntity]
  ///
  /// Indicates a BioChemEntity that (in some sense) has this BioChemEntity as a part.
  ///
  /// Can be used on: http://schema.org/BioChemEntity
  ///
  static const hasBioChemEntityPart = IriTerm.prevalidated(
    'http://schema.org/hasBioChemEntityPart',
  );

  /// IRI for schemahttp:hasBroadcastChannel [Expects: http://schema.org/BroadcastChannel]
  ///
  /// A broadcast channel of a broadcast service.
  ///
  /// Can be used on: http://schema.org/BroadcastService
  ///
  static const hasBroadcastChannel = IriTerm.prevalidated(
    'http://schema.org/hasBroadcastChannel',
  );

  /// IRI for schemahttp:hasDefinedTerm [Expects: http://schema.org/DefinedTerm]
  ///
  /// A Defined Term contained in this term set.
  ///
  /// Can be used on: http://schema.org/DefinedTermSet, http://schema.org/Taxon
  ///
  static const hasDefinedTerm = IriTerm.prevalidated(
    'http://schema.org/hasDefinedTerm',
  );

  /// IRI for schemahttp:hasMenu [Expects: http://schema.org/Menu, http://schema.org/Text, http://schema.org/URL]
  ///
  /// Either the actual menu as a structured representation, as text, or a URL of the menu.
  ///
  /// Can be used on: http://schema.org/FoodEstablishment
  ///
  static const hasMenu = IriTerm.prevalidated('http://schema.org/hasMenu');

  /// IRI for schemahttp:hasTiers [Expects: http://schema.org/MemberProgramTier]
  ///
  /// The tiers of a member program.
  ///
  /// Can be used on: http://schema.org/MemberProgram
  ///
  static const hasTiers = IriTerm.prevalidated('http://schema.org/hasTiers');

  /// IRI for schemahttp:hasVariant [Expects: http://schema.org/Product]
  ///
  /// Indicates a {[Product]} that is a member of this {[ProductGroup]} (or {[ProductModel]}).
  ///
  /// Can be used on: http://schema.org/ProductGroup
  ///
  static const hasVariant = IriTerm.prevalidated(
    'http://schema.org/hasVariant',
  );

  /// IRI for schemahttp:holdingArchive [Expects: http://schema.org/ArchiveOrganization]
  ///
  /// {[ArchiveOrganization]} that holds, keeps or maintains the {[ArchiveComponent]}.
  ///
  /// Can be used on: http://schema.org/ArchiveComponent
  ///
  static const holdingArchive = IriTerm.prevalidated(
    'http://schema.org/holdingArchive',
  );

  /// IRI for schemahttp:inDefinedTermSet [Expects: http://schema.org/DefinedTermSet, http://schema.org/URL]
  ///
  /// A {[DefinedTermSet]} that contains this term.
  ///
  /// Can be used on: http://schema.org/DefinedTerm
  ///
  static const inDefinedTermSet = IriTerm.prevalidated(
    'http://schema.org/inDefinedTermSet',
  );

  /// IRI for schemahttp:inLanguage [Expects: http://schema.org/Language, http://schema.org/Text]
  ///
  /// The language of the content or performance or used in an action. Please use one of the language codes from the [IETF BCP 47 standard](http://tools.ietf.org/html/bcp47). See also {[availableLanguage]}.
  ///
  /// Can be used on: http://schema.org/BroadcastService, http://schema.org/CommunicateAction, http://schema.org/CreativeWork, http://schema.org/Event, http://schema.org/LinkRole, http://schema.org/PronounceableText, http://schema.org/WriteAction
  ///
  static const inLanguage = IriTerm.prevalidated(
    'http://schema.org/inLanguage',
  );

  /// IRI for schemahttp:incentiveCompensation [Expects: http://schema.org/Text]
  ///
  /// Description of bonus and commission compensation aspects of the job.
  ///
  /// Can be used on: http://schema.org/JobPosting
  ///
  static const incentiveCompensation = IriTerm.prevalidated(
    'http://schema.org/incentiveCompensation',
  );

  /// IRI for schemahttp:interactionStatistic [Expects: http://schema.org/InteractionCounter]
  ///
  /// The number of interactions for the CreativeWork using the WebSite or SoftwareApplication. The most specific child type of InteractionCounter should be used.
  ///
  /// Can be used on: http://schema.org/CreativeWork, http://schema.org/Organization, http://schema.org/Person
  ///
  static const interactionStatistic = IriTerm.prevalidated(
    'http://schema.org/interactionStatistic',
  );

  /// IRI for schemahttp:isAccessibleForFree [Expects: http://schema.org/Boolean]
  ///
  /// A flag to signal that the item, event, or place is accessible for free.
  ///
  /// Can be used on: http://schema.org/CreativeWork, http://schema.org/Event, http://schema.org/Place
  ///
  static const isAccessibleForFree = IriTerm.prevalidated(
    'http://schema.org/isAccessibleForFree',
  );

  /// IRI for schemahttp:isBasedOn [Expects: http://schema.org/CreativeWork, http://schema.org/Product, http://schema.org/URL]
  ///
  /// A resource from which this work is derived or from which it is a modification or adaptation.
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const isBasedOn = IriTerm.prevalidated('http://schema.org/isBasedOn');

  /// IRI for schemahttp:isEncodedByBioChemEntity [Expects: http://schema.org/Gene]
  ///
  /// Another BioChemEntity encoding by this one.
  ///
  /// Can be used on: http://schema.org/BioChemEntity
  ///
  static const isEncodedByBioChemEntity = IriTerm.prevalidated(
    'http://schema.org/isEncodedByBioChemEntity',
  );

  /// IRI for schemahttp:isPartOfBioChemEntity [Expects: http://schema.org/BioChemEntity]
  ///
  /// Indicates a BioChemEntity that is (in some sense) a part of this BioChemEntity.
  ///
  /// Can be used on: http://schema.org/BioChemEntity
  ///
  static const isPartOfBioChemEntity = IriTerm.prevalidated(
    'http://schema.org/isPartOfBioChemEntity',
  );

  /// IRI for schemahttp:isTierOf [Expects: http://schema.org/MemberProgram]
  ///
  /// The member program this tier is a part of.
  ///
  /// Can be used on: http://schema.org/MemberProgramTier
  ///
  static const isTierOf = IriTerm.prevalidated('http://schema.org/isTierOf');

  /// IRI for schemahttp:isVariantOf [Expects: http://schema.org/ProductGroup, http://schema.org/ProductModel]
  ///
  /// Indicates the kind of product that this is a variant of. In the case of {[ProductModel]}, this is a pointer (from a ProductModel) to a base product from which this product is a variant. It is safe to infer that the variant inherits all product features from the base model, unless defined locally. This is not transitive. In the case of a {[ProductGroup]}, the group description also serves as a template, representing a set of Products that vary on explicitly defined, specific dimensions only (so it defines both a set of variants, as well as which values distinguish amongst those variants). When used with {[ProductGroup]}, this property can apply to any {[Product]} included in the group.
  ///
  /// Can be used on: http://schema.org/Product, http://schema.org/ProductModel
  ///
  static const isVariantOf = IriTerm.prevalidated(
    'http://schema.org/isVariantOf',
  );

  /// IRI for schemahttp:itemOffered [Expects: http://schema.org/AggregateOffer, http://schema.org/CreativeWork, http://schema.org/Event, http://schema.org/MenuItem, http://schema.org/Product, http://schema.org/Service, http://schema.org/Trip]
  ///
  /// An item being offered (or demanded). The transactional nature of the offer or demand is documented using {[businessFunction]}, e.g. sell, lease etc. While several common expected types are listed explicitly in this definition, others can be used. Using a second type, such as Product or a subtype of Product, can clarify the nature of the offer.
  ///
  /// Can be used on: http://schema.org/Demand, http://schema.org/Offer
  ///
  static const itemOffered = IriTerm.prevalidated(
    'http://schema.org/itemOffered',
  );

  /// IRI for schemahttp:jobBenefits [Expects: http://schema.org/Text]
  ///
  /// Description of benefits associated with the job.
  ///
  /// Can be used on: http://schema.org/JobPosting
  ///
  static const jobBenefits = IriTerm.prevalidated(
    'http://schema.org/jobBenefits',
  );

  /// IRI for schemahttp:jurisdiction [Expects: http://schema.org/AdministrativeArea, http://schema.org/Text]
  ///
  /// Indicates a legal jurisdiction, e.g. of some legislation, or where some government service is based.
  ///
  /// Can be used on: http://schema.org/GovernmentService, http://schema.org/Legislation
  ///
  static const jurisdiction = IriTerm.prevalidated(
    'http://schema.org/jurisdiction',
  );

  /// IRI for schemahttp:mainContentOfPage [Expects: http://schema.org/WebPageElement]
  ///
  /// Indicates if this web page element is the main subject of the page.
  ///
  /// Can be used on: http://schema.org/WebPage
  ///
  static const mainContentOfPage = IriTerm.prevalidated(
    'http://schema.org/mainContentOfPage',
  );

  /// IRI for schemahttp:mainEntity [Expects: http://schema.org/Thing]
  ///
  /// Indicates the primary entity described in some page or other CreativeWork.
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const mainEntity = IriTerm.prevalidated(
    'http://schema.org/mainEntity',
  );

  /// IRI for schemahttp:mainEntityOfPage [Expects: http://schema.org/CreativeWork, http://schema.org/URL]
  ///
  /// Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See [background notes](/docs/datamodel.html#mainEntityBackground) for details.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const mainEntityOfPage = IriTerm.prevalidated(
    'http://schema.org/mainEntityOfPage',
  );

  /// IRI for schemahttp:makesOffer [Expects: http://schema.org/Offer]
  ///
  /// A pointer to products or services offered by the organization or person.
  ///
  /// Can be used on: http://schema.org/Organization, http://schema.org/Person
  ///
  static const makesOffer = IriTerm.prevalidated(
    'http://schema.org/makesOffer',
  );

  /// IRI for schemahttp:measurementTechnique [Expects: http://schema.org/DefinedTerm, http://schema.org/MeasurementMethodEnum, http://schema.org/Text, http://schema.org/URL]
  ///
  /// A technique, method or technology used in an {[Observation]}, {[StatisticalVariable]} or {[Dataset]} (or {[DataDownload]}, {[DataCatalog]}), corresponding to the method used for measuring the corresponding variable(s) (for datasets, described using {[variableMeasured]}; for {[Observation]}, a {[StatisticalVariable]}). Often but not necessarily each {[variableMeasured]} will have an explicit representation as (or mapping to) an property such as those defined in Schema.org, or other RDF vocabularies and "knowledge graphs". In that case the subproperty of {[variableMeasured]} called {[measuredProperty]} is applicable.
  ///
  /// The {[measurementTechnique]} property helps when extra clarification is needed about how a {[measuredProperty]} was measured. This is oriented towards scientific and scholarly dataset publication but may have broader applicability; it is not intended as a full representation of measurement, but can often serve as a high level summary for dataset discovery.
  ///
  /// For example, if {[variableMeasured]} is: molecule concentration, {[measurementTechnique]} could be: "mass spectrometry" or "nmr spectroscopy" or "colorimetry" or "immunofluorescence". If the {[variableMeasured]} is "depression rating", the {[measurementTechnique]} could be "Zung Scale" or "HAM-D" or "Beck Depression Inventory".
  ///
  /// If there are several {[variableMeasured]} properties recorded for some given data object, use a {[PropertyValue]} for each {[variableMeasured]} and attach the corresponding {[measurementTechnique]}. The value can also be from an enumeration, organized as a {[MeasurementMetholdEnumeration]}.
  ///
  /// Can be used on: http://schema.org/DataCatalog, http://schema.org/DataDownload, http://schema.org/Dataset, http://schema.org/Observation, http://schema.org/PropertyValue, http://schema.org/StatisticalVariable
  ///
  static const measurementTechnique = IriTerm.prevalidated(
    'http://schema.org/measurementTechnique',
  );

  /// IRI for schemahttp:offeredBy [Expects: http://schema.org/Organization, http://schema.org/Person]
  ///
  /// A pointer to the organization or person making the offer.
  ///
  /// Can be used on: http://schema.org/Offer
  ///
  static const offeredBy = IriTerm.prevalidated('http://schema.org/offeredBy');

  /// IRI for schemahttp:offers [Expects: http://schema.org/Demand, http://schema.org/Offer]
  ///
  /// An offer to provide this item&#x2014;for example, an offer to sell a product, rent the DVD of a movie, perform a service, or give away tickets to an event. Use {[businessFunction]} to indicate the kind of transaction offered, i.e. sell, lease, etc. This property can also be used to describe a {[Demand]}. While this property is listed as expected on a number of common types, it can be used in others. In that case, using a second type, such as Product or a subtype of Product, can clarify the nature of the offer.
  ///
  ///
  /// Can be used on: http://schema.org/AggregateOffer, http://schema.org/CreativeWork, http://schema.org/EducationalOccupationalProgram, http://schema.org/Event, http://schema.org/MenuItem, http://schema.org/Product, http://schema.org/Service, http://schema.org/Trip
  ///
  static const offers = IriTerm.prevalidated('http://schema.org/offers');

  /// IRI for schemahttp:parent [Expects: http://schema.org/Person]
  ///
  /// A parent of this person.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const parent = IriTerm.prevalidated('http://schema.org/parent');

  /// IRI for schemahttp:parentTaxon [Expects: http://schema.org/Taxon, http://schema.org/Text, http://schema.org/URL]
  ///
  /// Closest parent taxon of the taxon in question.
  ///
  /// Can be used on: http://schema.org/Taxon
  ///
  static const parentTaxon = IriTerm.prevalidated(
    'http://schema.org/parentTaxon',
  );

  /// IRI for schemahttp:partOfSeries [Expects: http://schema.org/CreativeWorkSeries]
  ///
  /// The series to which this episode or season belongs.
  ///
  /// Can be used on: http://schema.org/Clip, http://schema.org/CreativeWorkSeason, http://schema.org/Episode
  ///
  static const partOfSeries = IriTerm.prevalidated(
    'http://schema.org/partOfSeries',
  );

  /// IRI for schemahttp:partOfTrip [Expects: http://schema.org/Trip]
  ///
  /// Identifies that this {[Trip]} is a subTrip of another Trip.  For example Day 1, Day 2, etc. of a multi-day trip.
  ///
  /// Can be used on: http://schema.org/Trip
  ///
  static const partOfTrip = IriTerm.prevalidated(
    'http://schema.org/partOfTrip',
  );

  /// IRI for schemahttp:paymentDueDate [Expects: http://schema.org/Date, http://schema.org/DateTime]
  ///
  /// The date that payment is due.
  ///
  /// Can be used on: http://schema.org/Invoice, http://schema.org/Order
  ///
  static const paymentDueDate = IriTerm.prevalidated(
    'http://schema.org/paymentDueDate',
  );

  /// IRI for schemahttp:performTime [Expects: http://schema.org/Duration]
  ///
  /// The length of time it takes to perform instructions or a direction (not including time to prepare the supplies), in [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601).
  ///
  /// Can be used on: http://schema.org/HowTo, http://schema.org/HowToDirection
  ///
  static const performTime = IriTerm.prevalidated(
    'http://schema.org/performTime',
  );

  /// IRI for schemahttp:performer [Expects: http://schema.org/Organization, http://schema.org/Person]
  ///
  /// A performer at the event&#x2014;for example, a presenter, musician, musical group or actor.
  ///
  /// Can be used on: http://schema.org/Event
  ///
  static const performer = IriTerm.prevalidated('http://schema.org/performer');

  /// IRI for schemahttp:photo [Expects: http://schema.org/ImageObject, http://schema.org/Photograph]
  ///
  /// A photograph of this place.
  ///
  /// Can be used on: http://schema.org/Place
  ///
  static const photo = IriTerm.prevalidated('http://schema.org/photo');

  /// IRI for schemahttp:provider [Expects: http://schema.org/Organization, http://schema.org/Person]
  ///
  /// The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller.
  ///
  /// Can be used on: http://schema.org/Action, http://schema.org/CreativeWork, http://schema.org/EducationalOccupationalProgram, http://schema.org/FinancialIncentive, http://schema.org/Invoice, http://schema.org/ParcelDelivery, http://schema.org/Reservation, http://schema.org/Service, http://schema.org/Trip
  ///
  static const provider = IriTerm.prevalidated('http://schema.org/provider');

  /// IRI for schemahttp:providesBroadcastService [Expects: http://schema.org/BroadcastService]
  ///
  /// The BroadcastService offered on this channel.
  ///
  /// Can be used on: http://schema.org/BroadcastChannel
  ///
  static const providesBroadcastService = IriTerm.prevalidated(
    'http://schema.org/providesBroadcastService',
  );

  /// IRI for schemahttp:recipeIngredient [Expects: http://schema.org/Text]
  ///
  /// A single ingredient used in the recipe, e.g. sugar, flour or garlic.
  ///
  /// Can be used on: http://schema.org/Recipe
  ///
  static const recipeIngredient = IriTerm.prevalidated(
    'http://schema.org/recipeIngredient',
  );

  /// IRI for schemahttp:recordedAs [Expects: http://schema.org/MusicRecording]
  ///
  /// An audio recording of the work.
  ///
  /// Can be used on: http://schema.org/MusicComposition
  ///
  static const recordedAs = IriTerm.prevalidated(
    'http://schema.org/recordedAs',
  );

  /// IRI for schemahttp:recordedAt [Expects: http://schema.org/Event]
  ///
  /// The Event where the CreativeWork was recorded. The CreativeWork may capture all or part of the event.
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const recordedAt = IriTerm.prevalidated(
    'http://schema.org/recordedAt',
  );

  /// IRI for schemahttp:recordedIn [Expects: http://schema.org/CreativeWork]
  ///
  /// The CreativeWork that captured all or part of this Event.
  ///
  /// Can be used on: http://schema.org/Event
  ///
  static const recordedIn = IriTerm.prevalidated(
    'http://schema.org/recordedIn',
  );

  /// IRI for schemahttp:recordingOf [Expects: http://schema.org/MusicComposition]
  ///
  /// The composition this track is a recording of.
  ///
  /// Can be used on: http://schema.org/MusicRecording
  ///
  static const recordingOf = IriTerm.prevalidated(
    'http://schema.org/recordingOf',
  );

  /// IRI for schemahttp:releaseOf [Expects: http://schema.org/MusicAlbum]
  ///
  /// The album this is a release of.
  ///
  /// Can be used on: http://schema.org/MusicRelease
  ///
  static const releaseOf = IriTerm.prevalidated('http://schema.org/releaseOf');

  /// IRI for schemahttp:review [Expects: http://schema.org/Review]
  ///
  /// A review of the item.
  ///
  /// Can be used on: http://schema.org/Brand, http://schema.org/CreativeWork, http://schema.org/Event, http://schema.org/Offer, http://schema.org/Organization, http://schema.org/Place, http://schema.org/Product, http://schema.org/Service
  ///
  static const review = IriTerm.prevalidated('http://schema.org/review');

  /// IRI for schemahttp:roleName [Expects: http://schema.org/Text, http://schema.org/URL]
  ///
  /// A role played, performed or filled by a person or organization. For example, the team of creators for a comic book might fill the roles named 'inker', 'penciller', and 'letterer'; or an athlete in a SportsTeam might play in the position named 'Quarterback'.
  ///
  /// Can be used on: http://schema.org/Role
  ///
  static const roleName = IriTerm.prevalidated('http://schema.org/roleName');

  /// IRI for schemahttp:runtimePlatform [Expects: http://schema.org/Text]
  ///
  /// Runtime platform or script interpreter dependencies (example: Java v1, Python 2.3, .NET Framework 3.0).
  ///
  /// Can be used on: http://schema.org/SoftwareSourceCode
  ///
  static const runtimePlatform = IriTerm.prevalidated(
    'http://schema.org/runtimePlatform',
  );

  /// IRI for schemahttp:season [Expects: http://schema.org/CreativeWorkSeason, http://schema.org/URL]
  ///
  /// A season in a media series.
  ///
  /// Can be used on: http://schema.org/RadioSeries, http://schema.org/TVSeries, http://schema.org/VideoGameSeries
  ///
  static const season = IriTerm.prevalidated('http://schema.org/season');

  /// IRI for schemahttp:serialNumber [Expects: http://schema.org/Text]
  ///
  /// The serial number or any alphanumeric identifier of a particular product. When attached to an offer, it is a shortcut for the serial number of the product included in the offer.
  ///
  /// Can be used on: http://schema.org/Demand, http://schema.org/IndividualProduct, http://schema.org/Offer
  ///
  static const serialNumber = IriTerm.prevalidated(
    'http://schema.org/serialNumber',
  );

  /// IRI for schemahttp:serviceArea [Expects: http://schema.org/AdministrativeArea, http://schema.org/GeoShape, http://schema.org/Place]
  ///
  /// The geographic area where the service is provided.
  ///
  /// Can be used on: http://schema.org/ContactPoint, http://schema.org/Organization, http://schema.org/Service
  ///
  static const serviceArea = IriTerm.prevalidated(
    'http://schema.org/serviceArea',
  );

  /// IRI for schemahttp:serviceOutput [Expects: http://schema.org/Thing]
  ///
  /// The tangible thing generated by the service, e.g. a passport, permit, etc.
  ///
  /// Can be used on: http://schema.org/Service
  ///
  static const serviceOutput = IriTerm.prevalidated(
    'http://schema.org/serviceOutput',
  );

  /// IRI for schemahttp:sibling [Expects: http://schema.org/Person]
  ///
  /// A sibling of the person.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const sibling = IriTerm.prevalidated('http://schema.org/sibling');

  /// IRI for schemahttp:significantLink [Expects: http://schema.org/URL]
  ///
  /// One of the more significant URLs on the page. Typically, these are the non-navigation links that are clicked on the most.
  ///
  /// Can be used on: http://schema.org/WebPage
  ///
  static const significantLink = IriTerm.prevalidated(
    'http://schema.org/significantLink',
  );

  /// IRI for schemahttp:softwareRequirements [Expects: http://schema.org/Text, http://schema.org/URL]
  ///
  /// Component dependency requirements for application. This includes runtime environments and shared libraries that are not included in the application distribution package, but required to run the application (examples: DirectX, Java or .NET runtime).
  ///
  /// Can be used on: http://schema.org/SoftwareApplication
  ///
  static const softwareRequirements = IriTerm.prevalidated(
    'http://schema.org/softwareRequirements',
  );

  /// IRI for schemahttp:sponsor [Expects: http://schema.org/Organization, http://schema.org/Person]
  ///
  /// A person or organization that supports a thing through a pledge, promise, or financial contribution. E.g. a sponsor of a Medical Study or a corporate sponsor of an event.
  ///
  /// Can be used on: http://schema.org/CreativeWork, http://schema.org/Event, http://schema.org/Grant, http://schema.org/MedicalStudy, http://schema.org/Organization, http://schema.org/Person
  ///
  static const sponsor = IriTerm.prevalidated('http://schema.org/sponsor');

  /// IRI for schemahttp:subOrganization [Expects: http://schema.org/Organization]
  ///
  /// A relationship between two organizations where the first includes the second, e.g., as a subsidiary. See also: the more specific 'department' property.
  ///
  /// Can be used on: http://schema.org/Organization
  ///
  static const subOrganization = IriTerm.prevalidated(
    'http://schema.org/subOrganization',
  );

  /// IRI for schemahttp:subTrip [Expects: http://schema.org/Trip]
  ///
  /// Identifies a {[Trip]} that is a subTrip of this Trip.  For example Day 1, Day 2, etc. of a multi-day trip.
  ///
  /// Can be used on: http://schema.org/Trip
  ///
  static const subTrip = IriTerm.prevalidated('http://schema.org/subTrip');

  /// IRI for schemahttp:subjectOf [Expects: http://schema.org/CreativeWork, http://schema.org/Event]
  ///
  /// A CreativeWork or Event about this Thing.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const subjectOf = IriTerm.prevalidated('http://schema.org/subjectOf');

  /// IRI for schemahttp:suggestedAnswer [Expects: http://schema.org/Answer, http://schema.org/ItemList]
  ///
  /// An answer (possibly one of several, possibly incorrect) to a Question, e.g. on a Question/Answer site.
  ///
  /// Can be used on: http://schema.org/Question
  ///
  static const suggestedAnswer = IriTerm.prevalidated(
    'http://schema.org/suggestedAnswer',
  );

  /// IRI for schemahttp:superEvent [Expects: http://schema.org/Event]
  ///
  /// An event that this event is a part of. For example, a collection of individual music performances might each have a music festival as their superEvent.
  ///
  /// Can be used on: http://schema.org/Event
  ///
  static const superEvent = IriTerm.prevalidated(
    'http://schema.org/superEvent',
  );

  /// IRI for schemahttp:targetCollection [Expects: http://schema.org/Thing]
  ///
  /// A sub property of object. The collection target of the action.
  ///
  /// Can be used on: http://schema.org/UpdateAction
  ///
  static const targetCollection = IriTerm.prevalidated(
    'http://schema.org/targetCollection',
  );

  /// IRI for schemahttp:temporalCoverage [Expects: http://schema.org/DateTime, http://schema.org/Text, http://schema.org/URL]
  ///
  /// The temporalCoverage of a CreativeWork indicates the period that the content applies to, i.e. that it describes, either as a DateTime or as a textual string indicating a time period in [ISO 8601 time interval format](https://en.wikipedia.org/wiki/ISO_8601#Time_intervals). In
  /// the case of a Dataset it will typically indicate the relevant time period in a precise notation (e.g. for a 2011 census dataset, the year 2011 would be written "2011/2012"). Other forms of content, e.g. ScholarlyArticle, Book, TVSeries or TVEpisode, may indicate their temporalCoverage in broader terms - textually or via well-known URL.
  /// Written works such as books may sometimes have precise temporal coverage too, e.g. a work set in 1939 - 1945 can be indicated in ISO 8601 interval format format via "1939/1945".
  ///
  /// Open-ended date ranges can be written with ".." in place of the end date. For example, "2015-11/.." indicates a range beginning in November 2015 and with no specified final date. This is tentative and might be updated in future when ISO 8601 is officially updated.
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const temporalCoverage = IriTerm.prevalidated(
    'http://schema.org/temporalCoverage',
  );

  /// IRI for schemahttp:termCode [Expects: http://schema.org/Text]
  ///
  /// A code that identifies this {[DefinedTerm]} within a {[DefinedTermSet]}.
  ///
  /// Can be used on: http://schema.org/DefinedTerm
  ///
  static const termCode = IriTerm.prevalidated('http://schema.org/termCode');

  /// IRI for schemahttp:track [Expects: http://schema.org/ItemList, http://schema.org/MusicRecording]
  ///
  /// A music recording (track)&#x2014;usually a single song. If an ItemList is given, the list should contain items of type MusicRecording.
  ///
  /// Can be used on: http://schema.org/MusicGroup, http://schema.org/MusicPlaylist
  ///
  static const track = IriTerm.prevalidated('http://schema.org/track');

  /// IRI for schemahttp:translationOfWork [Expects: http://schema.org/CreativeWork]
  ///
  /// The work that this work has been translated from. E.g. Áâ©ÁßçËµ∑Ê∫ê is a translationOf ‚ÄúOn the Origin of Species‚Äù.
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const translationOfWork = IriTerm.prevalidated(
    'http://schema.org/translationOfWork',
  );

  /// IRI for schemahttp:usageInfo [Expects: http://schema.org/CreativeWork, http://schema.org/URL]
  ///
  /// The schema.org {[usageInfo]} property indicates further information about a {[CreativeWork]}. This property is applicable both to works that are freely available and to those that require payment or other transactions. It can reference additional information, e.g. community expectations on preferred linking and citation conventions, as well as purchasing details. For something that can be commercially licensed, usageInfo can provide detailed, resource-specific information about licensing options.
  ///
  /// This property can be used alongside the license property which indicates license(s) applicable to some piece of content. The usageInfo property can provide information about other licensing options, e.g. acquiring commercial usage rights for an image that is also available under non-commercial creative commons licenses.
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const usageInfo = IriTerm.prevalidated('http://schema.org/usageInfo');

  /// IRI for schemahttp:warranty [Expects: http://schema.org/WarrantyPromise]
  ///
  /// The warranty promise(s) included in the offer.
  ///
  /// Can be used on: http://schema.org/Demand, http://schema.org/Offer
  ///
  static const warranty = IriTerm.prevalidated('http://schema.org/warranty');

  /// IRI for schemahttp:workTranslation [Expects: http://schema.org/CreativeWork]
  ///
  /// A work that is a translation of the content of this work. E.g. Ë•øÈÅäË®ò has an English workTranslation ‚ÄúJourney to the West‚Äù, a German workTranslation ‚ÄúMonkeys Pilgerfahrt‚Äù and a Vietnamese  translation T√¢y du k√Ω b√¨nh kh·∫£o.
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const workTranslation = IriTerm.prevalidated(
    'http://schema.org/workTranslation',
  );

  /// IRI for schemahttp:yield_ [Expects: http://schema.org/QuantitativeValue, http://schema.org/Text]
  ///
  /// The quantity that results by performing instructions. For example, a paper airplane, 10 personalized candles.
  ///
  /// Can be used on: http://schema.org/HowTo
  ///
  static const yield_ = IriTerm.prevalidated('http://schema.org/yield');

  /// IRI for schemahttp:about [Expects: http://schema.org/Thing]
  ///
  /// The subject matter of the content.
  ///
  /// Can be used on: http://schema.org/Certification, http://schema.org/CommunicateAction, http://schema.org/CreativeWork, http://schema.org/Event
  ///
  static const about = IriTerm.prevalidated('http://schema.org/about');

  /// IRI for schemahttp:actor [Expects: http://schema.org/PerformingGroup, http://schema.org/Person]
  ///
  /// An actor (individual or a group), e.g. in TV, radio, movie, video games etc., or in an event. Actors can be associated with individual items or with a series, episode, clip.
  ///
  /// Can be used on: http://schema.org/Clip, http://schema.org/CreativeWorkSeason, http://schema.org/Episode, http://schema.org/Event, http://schema.org/Movie, http://schema.org/MovieSeries, http://schema.org/PodcastSeries, http://schema.org/RadioSeries, http://schema.org/TVSeries, http://schema.org/VideoGame, http://schema.org/VideoGameSeries, http://schema.org/VideoObject
  ///
  static const actor = IriTerm.prevalidated('http://schema.org/actor');

  /// IRI for schemahttp:associatedReview [Expects: http://schema.org/Review]
  ///
  /// An associated {[Review]}.
  ///
  /// Can be used on: http://schema.org/Review
  ///
  static const associatedReview = IriTerm.prevalidated(
    'http://schema.org/associatedReview',
  );

  /// IRI for schemahttp:competitor [Expects: http://schema.org/Person, http://schema.org/SportsTeam]
  ///
  /// A competitor in a sports event.
  ///
  /// Can be used on: http://schema.org/SportsEvent
  ///
  static const competitor = IriTerm.prevalidated(
    'http://schema.org/competitor',
  );

  /// IRI for schemahttp:containedInPlace [Expects: http://schema.org/Place]
  ///
  /// The basic containment relation between a place and one that contains it.
  ///
  /// Can be used on: http://schema.org/Place
  ///
  static const containedInPlace = IriTerm.prevalidated(
    'http://schema.org/containedInPlace',
  );

  /// IRI for schemahttp:encoding [Expects: http://schema.org/MediaObject]
  ///
  /// A media object that encodes this CreativeWork. This property is a synonym for associatedMedia.
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const encoding = IriTerm.prevalidated('http://schema.org/encoding');

  /// IRI for schemahttp:hasMap [Expects: http://schema.org/Map, http://schema.org/URL]
  ///
  /// A URL to a map of the place.
  ///
  /// Can be used on: http://schema.org/Place
  ///
  static const hasMap = IriTerm.prevalidated('http://schema.org/hasMap');

  /// IRI for schemahttp:legislationApplies [Expects: http://schema.org/Legislation]
  ///
  /// Indicates that this legislation (or part of a legislation) somehow transfers another legislation in a different legislative context. This is an informative link, and it has no legal value. For legally-binding links of transposition, use the <a href="/legislationTransposes">legislationTransposes</a> property. For example an informative consolidated law of a European Union's member state "applies" the consolidated version of the European Directive implemented in it.
  ///
  /// Can be used on: http://schema.org/Legislation
  ///
  static const legislationApplies = IriTerm.prevalidated(
    'http://schema.org/legislationApplies',
  );

  /// IRI for schemahttp:material [Expects: http://schema.org/Product, http://schema.org/Text, http://schema.org/URL]
  ///
  /// A material that something is made from, e.g. leather, wool, cotton, paper.
  ///
  /// Can be used on: http://schema.org/CreativeWork, http://schema.org/Product
  ///
  static const material = IriTerm.prevalidated('http://schema.org/material');

  /// IRI for schemahttp:memberOf [Expects: http://schema.org/MemberProgramTier, http://schema.org/Organization, http://schema.org/ProgramMembership]
  ///
  /// An Organization (or ProgramMembership) to which this Person or Organization belongs.
  ///
  /// Can be used on: http://schema.org/Organization, http://schema.org/Person
  ///
  static const memberOf = IriTerm.prevalidated('http://schema.org/memberOf');

  /// IRI for schemahttp:parentOrganization [Expects: http://schema.org/Organization]
  ///
  /// The larger organization that this organization is a {[subOrganization]} of, if any.
  ///
  /// Can be used on: http://schema.org/Organization
  ///
  static const parentOrganization = IriTerm.prevalidated(
    'http://schema.org/parentOrganization',
  );

  /// IRI for schemahttp:result [Expects: http://schema.org/Thing]
  ///
  /// The result produced in the action. E.g. John wrote *a book*.
  ///
  /// Can be used on: http://schema.org/Action
  ///
  static const result = IriTerm.prevalidated('http://schema.org/result');

  /// IRI for schemahttp:seller [Expects: http://schema.org/Organization, http://schema.org/Person]
  ///
  /// An entity which offers (sells / leases / lends / loans) the services / goods.  A seller may also be a provider.
  ///
  /// Can be used on: http://schema.org/BuyAction, http://schema.org/Demand, http://schema.org/Flight, http://schema.org/Offer, http://schema.org/Order
  ///
  static const seller = IriTerm.prevalidated('http://schema.org/seller');

  /// IRI for schemahttp:spatialCoverage [Expects: http://schema.org/Place]
  ///
  /// The spatialCoverage of a CreativeWork indicates the place(s) which are the focus of the content. It is a subproperty of
  /// contentLocation intended primarily for more technical and detailed materials. For example with a Dataset, it indicates
  /// areas that the dataset describes: a dataset of New York weather would have spatialCoverage which was the place: the state of New York.
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const spatialCoverage = IriTerm.prevalidated(
    'http://schema.org/spatialCoverage',
  );

  /// IRI for schemahttp:step [Expects: http://schema.org/CreativeWork, http://schema.org/HowToSection, http://schema.org/HowToStep, http://schema.org/Text]
  ///
  /// A single step item (as HowToStep, text, document, video, etc.) or a HowToSection.
  ///
  /// Can be used on: http://schema.org/HowTo
  ///
  static const step = IriTerm.prevalidated('http://schema.org/step');

  /// IRI for schemahttp:subEvent [Expects: http://schema.org/Event]
  ///
  /// An Event that is part of this event. For example, a conference event includes many presentations, each of which is a subEvent of the conference.
  ///
  /// Can be used on: http://schema.org/Event
  ///
  static const subEvent = IriTerm.prevalidated('http://schema.org/subEvent');

  /// IRI for schemahttp:supply [Expects: http://schema.org/HowToSupply, http://schema.org/Text]
  ///
  /// A sub-property of instrument. A supply consumed when performing instructions or a direction.
  ///
  /// Can be used on: http://schema.org/HowTo, http://schema.org/HowToDirection
  ///
  static const supply = IriTerm.prevalidated('http://schema.org/supply');

  /// IRI for schemahttp:workFeatured [Expects: http://schema.org/CreativeWork]
  ///
  /// A work featured in some event, e.g. exhibited in an ExhibitionEvent.
  /// Specific subproperties are available for workPerformed (e.g. a play), or a workPresented (a Movie at a ScreeningEvent).
  ///
  /// Can be used on: http://schema.org/Event
  ///
  static const workFeatured = IriTerm.prevalidated(
    'http://schema.org/workFeatured',
  );

  /// IRI for schemahttp:areaServed [Expects: http://schema.org/AdministrativeArea, http://schema.org/GeoShape, http://schema.org/Place, http://schema.org/Text]
  ///
  /// The geographic area where a service or offered item is provided.
  ///
  /// Can be used on: http://schema.org/ContactPoint, http://schema.org/DeliveryChargeSpecification, http://schema.org/Demand, http://schema.org/FinancialIncentive, http://schema.org/Offer, http://schema.org/Organization, http://schema.org/Service
  ///
  static const areaServed = IriTerm.prevalidated(
    'http://schema.org/areaServed',
  );

  /// IRI for schemahttp:includedInDataCatalog [Expects: http://schema.org/DataCatalog]
  ///
  /// A data catalog which contains this dataset.
  ///
  /// Can be used on: http://schema.org/Dataset
  ///
  static const includedInDataCatalog = IriTerm.prevalidated(
    'http://schema.org/includedInDataCatalog',
  );

  /// IRI for schemahttp:legislationChanges [Expects: http://schema.org/Legislation]
  ///
  /// Another legislation that this legislation changes. This encompasses the notions of amendment, replacement, correction, repeal, or other types of change. This may be a direct change (textual or non-textual amendment) or a consequential or indirect change. The property is to be used to express the existence of a change relationship between two acts rather than the existence of a consolidated version of the text that shows the result of the change. For consolidation relationships, use the <a href="/legislationConsolidates">legislationConsolidates</a> property.
  ///
  /// Can be used on: http://schema.org/Legislation
  ///
  static const legislationChanges = IriTerm.prevalidated(
    'http://schema.org/legislationChanges',
  );

  /// IRI for schemahttp:member [Expects: http://schema.org/Organization, http://schema.org/Person]
  ///
  /// A member of an Organization or a ProgramMembership. Organizations can be members of organizations; ProgramMembership is typically for individuals.
  ///
  /// Can be used on: http://schema.org/Organization, http://schema.org/ProgramMembership
  ///
  static const member = IriTerm.prevalidated('http://schema.org/member');

  /// IRI for schemahttp:recipient [Expects: http://schema.org/Audience, http://schema.org/ContactPoint, http://schema.org/Organization, http://schema.org/Person]
  ///
  /// A sub property of participant. The participant who is at the receiving end of the action.
  ///
  /// Can be used on: http://schema.org/AuthorizeAction, http://schema.org/CommunicateAction, http://schema.org/DonateAction, http://schema.org/GiveAction, http://schema.org/Message, http://schema.org/PayAction, http://schema.org/ReturnAction, http://schema.org/SendAction, http://schema.org/TipAction
  ///
  static const recipient = IriTerm.prevalidated('http://schema.org/recipient');

  /// IRI for schemahttp:workExample [Expects: http://schema.org/CreativeWork]
  ///
  /// Example/instance/realization/derivation of the concept of this creative work. E.g. the paperback edition, first edition, or e-book.
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const workExample = IriTerm.prevalidated(
    'http://schema.org/workExample',
  );

  /// IRI for schemahttp:description [Expects: http://schema.org/Text, http://schema.org/TextObject]
  ///
  /// A description of the item.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const description = IriTerm.prevalidated(
    'http://schema.org/description',
  );

  /// IRI for schemahttp:gtin [Expects: http://schema.org/Text, http://schema.org/URL]
  ///
  /// A Global Trade Item Number ([GTIN](https://www.gs1.org/standards/id-keys/gtin)). GTINs identify trade items, including products and services, using numeric identification codes.
  ///
  /// A correct {[gtin]} value should be a valid GTIN, which means that it should be an all-numeric string of either 8, 12, 13 or 14 digits, or a "GS1 Digital Link" URL based on such a string. The numeric component should also have a [valid GS1 check digit](https://www.gs1.org/services/check-digit-calculator) and meet the other rules for valid GTINs. See also [GS1's GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) and [Wikipedia](https://en.wikipedia.org/wiki/Global_Trade_Item_Number) for more details. Left-padding of the gtin values is not required or encouraged. The {[gtin]} property generalizes the earlier {[gtin8]}, {[gtin12]}, {[gtin13]}, and {[gtin14]} properties.
  ///
  /// The GS1 [digital link specifications](https://www.gs1.org/standards/Digital-Link/) expresses GTINs as URLs (URIs, IRIs, etc.).
  /// Digital Links should be populated into the {[hasGS1DigitalLink]} attribute.
  ///
  /// Note also that this is a definition for how to include GTINs in Schema.org data, and not a definition of GTINs in general - see the GS1 documentation for authoritative details.
  ///
  /// Can be used on: http://schema.org/Demand, http://schema.org/Offer, http://schema.org/Product
  ///
  static const gtin = IriTerm.prevalidated('http://schema.org/gtin');

  /// IRI for schemahttp:hasRepresentation [Expects: http://schema.org/PropertyValue, http://schema.org/Text, http://schema.org/URL]
  ///
  /// A common representation such as a protein sequence or chemical structure for this entity. For images use schema.org/image.
  ///
  /// Can be used on: http://schema.org/BioChemEntity
  ///
  static const hasRepresentation = IriTerm.prevalidated(
    'http://schema.org/hasRepresentation',
  );

  /// IRI for schemahttp:image [Expects: http://schema.org/ImageObject, http://schema.org/URL]
  ///
  /// An image of the item. This can be a {[URL]} or a fully described {[ImageObject]}.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const image = IriTerm.prevalidated('http://schema.org/image');

  /// IRI for schemahttp:hasPart [Expects: http://schema.org/CreativeWork]
  ///
  /// Indicates an item or CreativeWork that is part of this item, or CreativeWork (in some sense).
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const hasPart = IriTerm.prevalidated('http://schema.org/hasPart');

  /// IRI for schemahttp:position [Expects: http://schema.org/Integer, http://schema.org/Text]
  ///
  /// The position of an item in a series or sequence of items.
  ///
  /// Can be used on: http://schema.org/CreativeWork, http://schema.org/ListItem
  ///
  static const position = IriTerm.prevalidated('http://schema.org/position');

  /// IRI for schemahttp:isPartOf [Expects: http://schema.org/CreativeWork, http://schema.org/URL]
  ///
  /// Indicates an item or CreativeWork that this item, or CreativeWork (in some sense), is part of.
  ///
  /// Can be used on: http://schema.org/CreativeWork
  ///
  static const isPartOf = IriTerm.prevalidated('http://schema.org/isPartOf');

  /// IRI for schemahttp:instrument [Expects: http://schema.org/Thing]
  ///
  /// The object that helped the agent perform the action. E.g. John wrote a book with *a pen*.
  ///
  /// Can be used on: http://schema.org/Action
  ///
  static const instrument = IriTerm.prevalidated(
    'http://schema.org/instrument',
  );

  /// IRI for schemahttp:object [Expects: http://schema.org/Thing]
  ///
  /// The object upon which the action is carried out, whose state is kept intact or changed. Also known as the semantic roles patient, affected or undergoer (which change their state) or theme (which doesn't). E.g. John read *a book*.
  ///
  /// Can be used on: http://schema.org/Action
  ///
  static const object = IriTerm.prevalidated('http://schema.org/object');

  /// IRI for schemahttp:publishingPrinciples [Expects: http://schema.org/CreativeWork, http://schema.org/URL]
  ///
  /// The publishingPrinciples property indicates (typically via {[URL]}) a document describing the editorial principles of an {[Organization]} (or individual, e.g. a {[Person]} writing a blog) that relate to their activities as a publisher, e.g. ethics or diversity policies. When applied to a {[CreativeWork]} (e.g. {[NewsArticle]}) the principles are those of the party primarily responsible for the creation of the {[CreativeWork]}.
  ///
  /// While such policies are most typically expressed in natural language, sometimes related information (e.g. indicating a {[funder]}) can be expressed using schema.org terminology.
  ///
  ///
  /// Can be used on: http://schema.org/CreativeWork, http://schema.org/Organization, http://schema.org/Person
  ///
  static const publishingPrinciples = IriTerm.prevalidated(
    'http://schema.org/publishingPrinciples',
  );

  /// IRI for schemahttp:location [Expects: http://schema.org/Place, http://schema.org/PostalAddress, http://schema.org/Text, http://schema.org/VirtualLocation]
  ///
  /// The location of, for example, where an event is happening, where an organization is located, or where an action takes place.
  ///
  /// Can be used on: http://schema.org/Action, http://schema.org/Event, http://schema.org/InteractionCounter, http://schema.org/Organization
  ///
  static const location = IriTerm.prevalidated('http://schema.org/location');

  /// IRI for schemahttp:participant [Expects: http://schema.org/Organization, http://schema.org/Person]
  ///
  /// Other co-agents that participated in the action indirectly. E.g. John wrote a book with *Steve*.
  ///
  /// Can be used on: http://schema.org/Action
  ///
  static const participant = IriTerm.prevalidated(
    'http://schema.org/participant',
  );

  /// IRI for schemahttp:identifier [Expects: http://schema.org/PropertyValue, http://schema.org/Text, http://schema.org/URL]
  ///
  /// The identifier property represents any kind of identifier for any kind of {[Thing]}, such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
  ///
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const identifier = IriTerm.prevalidated(
    'http://schema.org/identifier',
  );

  /// IRI for schemahttp:source
  ///
  ///
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const source = IriTerm.prevalidated('http://schema.org/source');
}
