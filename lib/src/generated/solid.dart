// Copyright (c) 2025, Klas Kala√ü <habbatical@gmail.com>
// All rights reserved. Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// GENERATED CODE - DO NOT MODIFY BY HAND
// Generated by VocabularyBuilder

import 'package:rdf_core/rdf_core.dart';

/// Main Solid vocabulary class containing all terms
///
/// Contains all terms defined in the http://www.w3.org/ns/solid/terms# vocabulary.
class Solid {
  // Private constructor prevents instantiation
  const Solid._();

  /// Base IRI for Solid vocabulary
  /// [Spec](http://www.w3.org/ns/solid/terms#)
  static const String namespace = 'http://www.w3.org/ns/solid/terms#';
  static const String prefix = 'solid';

  /// IRI for solid:Account
  ///
  /// A Solid account.
  ///
  static const Account = IriTerm.prevalidated(
    'http://www.w3.org/ns/solid/terms#Account',
  );

  /// IRI for solid:Inbox
  ///
  /// A resource containing notifications.
  ///
  static const Inbox = IriTerm.prevalidated(
    'http://www.w3.org/ns/solid/terms#Inbox',
  );

  /// IRI for solid:InsertDeletePatch
  ///
  /// A class of patch expressing insertions, deletions, and conditional modifications to a resource that has an RDF-based representation.
  ///
  /// [See also](https://solidproject.org/TR/2021/protocol-20211217#server-patch-n3-type)
  ///
  static const InsertDeletePatch = IriTerm.prevalidated(
    'http://www.w3.org/ns/solid/terms#InsertDeletePatch',
  );

  /// IRI for solid:ListedDocument
  ///
  /// Listed Type Index is a registry of resources that are publicly discoverable by outside users and applications.
  ///
  static const ListedDocument = IriTerm.prevalidated(
    'http://www.w3.org/ns/solid/terms#ListedDocument',
  );

  /// IRI for solid:Notification
  ///
  /// A notification resource.
  ///
  static const Notification = IriTerm.prevalidated(
    'http://www.w3.org/ns/solid/terms#Notification',
  );

  /// IRI for solid:Patch
  ///
  /// A patch expresses conditional modifications to a resource that has an RDF-based representation.
  ///
  static const Patch = IriTerm.prevalidated(
    'http://www.w3.org/ns/solid/terms#Patch',
  );

  /// IRI for solid:Timeline
  ///
  /// A resource containing time ordered items and sub-containers.  Sub-containers may be desirable in file based systems to split the timeline into logical components e.g. /yyyy-mm-dd/ as used in ISO 8061.
  ///
  static const Timeline = IriTerm.prevalidated(
    'http://www.w3.org/ns/solid/terms#Timeline',
  );

  /// IRI for solid:TypeIndex
  ///
  /// A index of type registries for resources. Applications can register the RDF type they use and list them in the index resource.
  ///
  static const TypeIndex = IriTerm.prevalidated(
    'http://www.w3.org/ns/solid/terms#TypeIndex',
  );

  /// IRI for solid:TypeRegistration
  ///
  /// The registered types that map a RDF classes/types to their locations using either `instance` or `instanceContainer` property.
  ///
  static const TypeRegistration = IriTerm.prevalidated(
    'http://www.w3.org/ns/solid/terms#TypeRegistration',
  );

  /// IRI for solid:UnlistedDocument
  ///
  /// Unlisted Type Index is a registry of resources that are private to the user and their apps, for types that are not publicly discoverable.
  ///
  static const UnlistedDocument = IriTerm.prevalidated(
    'http://www.w3.org/ns/solid/terms#UnlistedDocument',
  );

  /// IRI for solid:account
  ///
  /// A solid account belonging to an Agent.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const account = IriTerm.prevalidated(
    'http://www.w3.org/ns/solid/terms#account',
  );

  /// IRI for solid:deletes [Expects: http://www.w3.org/2000/10/swap/log#Formula]
  ///
  /// The triple patterns this patch removes from the document.
  ///
  /// Can be used on: http://www.w3.org/ns/solid/terms#Patch
  ///
  static const deletes = IriTerm.prevalidated(
    'http://www.w3.org/ns/solid/terms#deletes',
  );

  /// IRI for solid:forClass
  ///
  /// A class that is used to map an listed or unlisted type index.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const forClass = IriTerm.prevalidated(
    'http://www.w3.org/ns/solid/terms#forClass',
  );

  /// IRI for solid:inbox
  ///
  /// Deprecated pointer to a Linked Data Notifications inbox; please use http://www.w3.org/ns/ldp#inbox instead.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const inbox = IriTerm.prevalidated(
    'http://www.w3.org/ns/solid/terms#inbox',
  );

  /// IRI for solid:inserts [Expects: http://www.w3.org/2000/10/swap/log#Formula]
  ///
  /// The triple patterns this patch adds to the document.
  ///
  /// Can be used on: http://www.w3.org/ns/solid/terms#Patch
  ///
  static const inserts = IriTerm.prevalidated(
    'http://www.w3.org/ns/solid/terms#inserts',
  );

  /// IRI for solid:instance
  ///
  /// Maps a type to an individual resource, typically an index or a directory listing resource.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const instance = IriTerm.prevalidated(
    'http://www.w3.org/ns/solid/terms#instance',
  );

  /// IRI for solid:instanceContainer
  ///
  /// Maps a type to a container which the client would have to list to get the instances of that type.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const instanceContainer = IriTerm.prevalidated(
    'http://www.w3.org/ns/solid/terms#instanceContainer',
  );

  /// IRI for solid:loginEndpoint
  ///
  /// The login URI of a given server.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const loginEndpoint = IriTerm.prevalidated(
    'http://www.w3.org/ns/solid/terms#loginEndpoint',
  );

  /// IRI for solid:logoutEndpoint
  ///
  /// The logout URI of a given server.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const logoutEndpoint = IriTerm.prevalidated(
    'http://www.w3.org/ns/solid/terms#logoutEndpoint',
  );

  /// IRI for solid:notification
  ///
  /// Notification resource for an inbox.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const notification = IriTerm.prevalidated(
    'http://www.w3.org/ns/solid/terms#notification',
  );

  /// IRI for solid:oidcIssuer
  ///
  /// The preferred OpenID Connect issuer URI for a given WebID.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const oidcIssuer = IriTerm.prevalidated(
    'http://www.w3.org/ns/solid/terms#oidcIssuer',
  );

  /// IRI for solid:owner [Expects: http://xmlns.com/foaf/0.1/Agent]
  ///
  /// A person or social entity that is considered to have control, rights, and responsibilities over a data storage.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const owner = IriTerm.prevalidated(
    'http://www.w3.org/ns/solid/terms#owner',
  );

  /// IRI for solid:patches [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// The document to which this patch applies.
  ///
  /// Can be used on: http://www.w3.org/ns/solid/terms#Patch
  ///
  static const patches = IriTerm.prevalidated(
    'http://www.w3.org/ns/solid/terms#patches',
  );

  /// IRI for solid:privateTypeIndex [Expects: http://www.w3.org/ns/solid/terms#UnlistedDocument]
  ///
  /// Points to an unlisted type index resource.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const privateTypeIndex = IriTerm.prevalidated(
    'http://www.w3.org/ns/solid/terms#privateTypeIndex',
  );

  /// IRI for solid:publicTypeIndex [Expects: http://www.w3.org/ns/solid/terms#ListedDocument]
  ///
  /// Points to a listed type index resource.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const publicTypeIndex = IriTerm.prevalidated(
    'http://www.w3.org/ns/solid/terms#publicTypeIndex',
  );

  /// IRI for solid:privateLabelIndex [Expects: http://www.w3.org/ns/solid/terms#UnlistedDocument]
  ///
  /// Points to an unlisted label index resource.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const privateLabelIndex = IriTerm.prevalidated(
    'http://www.w3.org/ns/solid/terms#privateLabelIndex',
  );

  /// IRI for solid:read
  ///
  /// Indicates if a message has been read or not. This property should have a boolean datatype.
  ///
  /// Can be used on: http://rdfs.org/sioc/ns#Post
  ///
  static const read = IriTerm.prevalidated(
    'http://www.w3.org/ns/solid/terms#read',
  );

  /// IRI for solid:storageDescription
  ///
  /// Refers to the resource that provides a description of the storage containing this resource.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  /// [See also](https://solidproject.org/TR/2024/protocol-20240512#server-storage-description)
  ///
  static const storageDescription = IriTerm.prevalidated(
    'http://www.w3.org/ns/solid/terms#storageDescription',
  );

  /// IRI for solid:storageQuota
  ///
  /// The quota of non-volatile memory that is available for the account (in bytes)
  ///
  /// Can be used on: http://www.w3.org/ns/solid/terms#Account
  ///
  static const storageQuota = IriTerm.prevalidated(
    'http://www.w3.org/ns/solid/terms#storageQuota',
  );

  /// IRI for solid:storageUsage
  ///
  /// The amount of non-volatile memory that the account have used (in bytes)
  ///
  /// Can be used on: http://www.w3.org/ns/solid/terms#Account
  ///
  static const storageUsage = IriTerm.prevalidated(
    'http://www.w3.org/ns/solid/terms#storageUsage',
  );

  /// IRI for solid:typeIndex [Expects: http://www.w3.org/ns/solid/terms#TypeIndex]
  ///
  /// Points to a TypeIndex resource.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const typeIndex = IriTerm.prevalidated(
    'http://www.w3.org/ns/solid/terms#typeIndex',
  );

  /// IRI for solid:timeline
  ///
  /// Timeline for a given resource.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const timeline = IriTerm.prevalidated(
    'http://www.w3.org/ns/solid/terms#timeline',
  );

  /// IRI for solid:where [Expects: http://www.w3.org/2000/10/swap/log#Formula]
  ///
  /// The conditions the document and the inserted and deleted triple patterns need to satisfy in order for the patch to be applied.
  ///
  /// Can be used on: http://www.w3.org/ns/solid/terms#Patch
  ///
  static const where = IriTerm.prevalidated(
    'http://www.w3.org/ns/solid/terms#where',
  );
}
