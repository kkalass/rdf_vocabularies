// Copyright (c) 2025, Klas Kala√ü <habbatical@gmail.com>
// All rights reserved. Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// GENERATED CODE - DO NOT MODIFY BY HAND
// Generated by VocabularyBuilder

import 'package:rdf_core/rdf_core.dart';

/// Person class from SchemaHttp vocabulary
///
/// A person (alive, dead, undead, or fictional).
///
/// Inherits from:
/// - Agent (http://xmlns.com/foaf/0.1/Agent)
/// - Resource (http://www.w3.org/2000/01/rdf-schema#Resource)
/// - SocialEntity (http://www.w3.org/2000/10/swap/pim/contact#SocialEntity)
/// - SpatialThing (http://www.w3.org/2003/01/geo/wgs84_pos#SpatialThing)
/// - Thing (http://schema.org/Thing)
/// - Thing (http://www.w3.org/2002/07/owl#Thing)
///
/// Equivalent to:
/// - Agent (http://purl.org/dc/terms/Agent)
/// - Person (http://xmlns.com/foaf/0.1/Person)
/// - Person (http://www.w3.org/2000/10/swap/pim/contact#Person)
///
/// This class provides access to all properties that can be used with Person.
/// [Class Reference](http://schema.org/Person)
///
/// [Vocabulary Reference](http://schema.org/)
class SchemaHttpPerson {
  // Private constructor prevents instantiation
  const SchemaHttpPerson._();

  /// IRI term for the Person class
  /// Use this to specify that a resource is of this type.
  static const classIri = IriTerm.prevalidated('http://schema.org/Person');

  /// additionalName [Expects: http://schema.org/Text]
  ///
  /// An additional name for a Person, can be used for a middle name.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const additionalName = IriTerm.prevalidated(
    'http://schema.org/additionalName',
  );

  /// additionalType [Expects: http://schema.org/Text, http://schema.org/URL]
  ///
  /// An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. Typically the value is a URI-identified RDF class, and in this case corresponds to the
  /// use of rdf:type in RDF. Text values can be used sparingly, for cases where useful information can be added without their being an appropriate schema to reference. In the case of text values, the class label should follow the schema.org <a href="http://schema.org/docs/styleguide.html">style guide</a>.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const additionalType = IriTerm.prevalidated(
    'http://schema.org/additionalType',
  );

  /// address [Expects: http://schema.org/PostalAddress, http://schema.org/Text]
  ///
  /// Physical address of the item.
  ///
  /// Can be used on: http://schema.org/GeoCoordinates, http://schema.org/GeoShape, http://schema.org/Organization, http://schema.org/Person, http://schema.org/Place
  ///
  static const address = IriTerm.prevalidated('http://schema.org/address');

  /// affiliation [Expects: http://schema.org/Organization]
  ///
  /// An organization that this person is affiliated with. For example, a school/university, a club, or a team.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const affiliation = IriTerm.prevalidated(
    'http://schema.org/affiliation',
  );

  /// agentInteractionStatistic [Expects: http://schema.org/InteractionCounter]
  ///
  /// The number of completed interactions for this entity, in a particular role (the 'agent'), in a particular action (indicated in the statistic), and in a particular context (i.e. interactionService).
  ///
  /// Can be used on: http://schema.org/Organization, http://schema.org/Person
  ///
  static const agentInteractionStatistic = IriTerm.prevalidated(
    'http://schema.org/agentInteractionStatistic',
  );

  /// awards [Expects: http://schema.org/Text]
  ///
  /// Awards won by or for this item.
  ///
  /// Can be used on: http://schema.org/CreativeWork, http://schema.org/Organization, http://schema.org/Person, http://schema.org/Product
  ///
  static const awards = IriTerm.prevalidated('http://schema.org/awards');

  /// birthDate [Expects: http://schema.org/Date]
  ///
  /// Date of birth.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const birthDate = IriTerm.prevalidated('http://schema.org/birthDate');

  /// birthPlace [Expects: http://schema.org/Place]
  ///
  /// The place where the person was born.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const birthPlace = IriTerm.prevalidated(
    'http://schema.org/birthPlace',
  );

  /// brand [Expects: http://schema.org/Brand, http://schema.org/Organization]
  ///
  /// The brand(s) associated with a product or service, or the brand(s) maintained by an organization or business person.
  ///
  /// Can be used on: http://schema.org/Organization, http://schema.org/Person, http://schema.org/Product, http://schema.org/Service
  ///
  static const brand = IriTerm.prevalidated('http://schema.org/brand');

  /// callSign [Expects: http://schema.org/Text]
  ///
  /// A [callsign](https://en.wikipedia.org/wiki/Call_sign), as used in broadcasting and radio communications to identify people, radio and TV stations, or vehicles.
  ///
  /// Can be used on: http://schema.org/BroadcastService, http://schema.org/Person, http://schema.org/Vehicle
  ///
  static const callSign = IriTerm.prevalidated('http://schema.org/callSign');

  /// children [Expects: http://schema.org/Person]
  ///
  /// A child of the person.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const children = IriTerm.prevalidated('http://schema.org/children');

  /// colleagues [Expects: http://schema.org/Person]
  ///
  /// A colleague of the person.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const colleagues = IriTerm.prevalidated(
    'http://schema.org/colleagues',
  );

  /// contactPoints [Expects: http://schema.org/ContactPoint]
  ///
  /// A contact point for a person or organization.
  ///
  /// Can be used on: http://schema.org/Organization, http://schema.org/Person
  ///
  static const contactPoints = IriTerm.prevalidated(
    'http://schema.org/contactPoints',
  );

  /// deathDate [Expects: http://schema.org/Date]
  ///
  /// Date of death.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const deathDate = IriTerm.prevalidated('http://schema.org/deathDate');

  /// deathPlace [Expects: http://schema.org/Place]
  ///
  /// The place where the person died.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const deathPlace = IriTerm.prevalidated(
    'http://schema.org/deathPlace',
  );

  /// disambiguatingDescription [Expects: http://schema.org/Text]
  ///
  /// A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const disambiguatingDescription = IriTerm.prevalidated(
    'http://schema.org/disambiguatingDescription',
  );

  /// duns [Expects: http://schema.org/Text]
  ///
  /// The Dun & Bradstreet DUNS number for identifying an organization or business person.
  ///
  /// Can be used on: http://schema.org/Organization, http://schema.org/Person
  ///
  static const duns = IriTerm.prevalidated('http://schema.org/duns');

  /// email [Expects: http://schema.org/Text]
  ///
  /// Email address.
  ///
  /// Can be used on: http://schema.org/ContactPoint, http://schema.org/Organization, http://schema.org/Person
  ///
  static const email = IriTerm.prevalidated('http://schema.org/email');

  /// familyName [Expects: http://schema.org/Text]
  ///
  /// Family name. In the U.S., the last name of a Person.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const familyName = IriTerm.prevalidated(
    'http://schema.org/familyName',
  );

  /// faxNumber [Expects: http://schema.org/Text]
  ///
  /// The fax number.
  ///
  /// Can be used on: http://schema.org/ContactPoint, http://schema.org/Organization, http://schema.org/Person, http://schema.org/Place
  ///
  static const faxNumber = IriTerm.prevalidated('http://schema.org/faxNumber');

  /// follows [Expects: http://schema.org/Person]
  ///
  /// The most generic uni-directional social relation.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const follows = IriTerm.prevalidated('http://schema.org/follows');

  /// funder [Expects: http://schema.org/Organization, http://schema.org/Person]
  ///
  /// A person or organization that supports (sponsors) something through some kind of financial contribution.
  ///
  /// Can be used on: http://schema.org/CreativeWork, http://schema.org/Event, http://schema.org/Grant, http://schema.org/MonetaryGrant, http://schema.org/Organization, http://schema.org/Person
  ///
  static const funder = IriTerm.prevalidated('http://schema.org/funder');

  /// gender [Expects: http://schema.org/GenderType, http://schema.org/Text]
  ///
  /// Gender of something, typically a {[Person]}, but possibly also fictional characters, animals, etc. While http://schema.org/Male and http://schema.org/Female may be used, text strings are also acceptable for people who do not identify as a binary gender. The {[gender]} property can also be used in an extended sense to cover e.g. the gender of sports teams. As with the gender of individuals, we do not try to enumerate all possibilities. A mixed-gender {[SportsTeam]} can be indicated with a text value of "Mixed".
  ///
  /// Can be used on: http://schema.org/Person, http://schema.org/SportsTeam
  ///
  static const gender = IriTerm.prevalidated('http://schema.org/gender');

  /// givenName [Expects: http://schema.org/Text]
  ///
  /// Given name. In the U.S., the first name of a Person.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const givenName = IriTerm.prevalidated('http://schema.org/givenName');

  /// globalLocationNumber [Expects: http://schema.org/Text]
  ///
  /// The [Global Location Number](http://www.gs1.org/gln) (GLN, sometimes also referred to as International Location Number or ILN) of the respective organization, person, or place. The GLN is a 13-digit number used to identify parties and physical locations.
  ///
  /// Can be used on: http://schema.org/Organization, http://schema.org/Person, http://schema.org/Place
  ///
  static const globalLocationNumber = IriTerm.prevalidated(
    'http://schema.org/globalLocationNumber',
  );

  /// hasCertification [Expects: http://schema.org/Certification]
  ///
  /// Certification information about a product, organization, service, place, or person.
  ///
  /// Can be used on: http://schema.org/Organization, http://schema.org/Person, http://schema.org/Place, http://schema.org/Product, http://schema.org/Service
  ///
  static const hasCertification = IriTerm.prevalidated(
    'http://schema.org/hasCertification',
  );

  /// hasCredential [Expects: http://schema.org/EducationalOccupationalCredential]
  ///
  /// A credential awarded to the Person or Organization.
  ///
  /// Can be used on: http://schema.org/Organization, http://schema.org/Person
  ///
  static const hasCredential = IriTerm.prevalidated(
    'http://schema.org/hasCredential',
  );

  /// hasOccupation [Expects: http://schema.org/Occupation]
  ///
  /// The Person's occupation. For past professions, use Role for expressing dates.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const hasOccupation = IriTerm.prevalidated(
    'http://schema.org/hasOccupation',
  );

  /// hasOfferCatalog [Expects: http://schema.org/OfferCatalog]
  ///
  /// Indicates an OfferCatalog listing for this Organization, Person, or Service.
  ///
  /// Can be used on: http://schema.org/Organization, http://schema.org/Person, http://schema.org/Service
  ///
  static const hasOfferCatalog = IriTerm.prevalidated(
    'http://schema.org/hasOfferCatalog',
  );

  /// hasPOS [Expects: http://schema.org/Place]
  ///
  /// Points-of-Sales operated by the organization or person.
  ///
  /// Can be used on: http://schema.org/Organization, http://schema.org/Person
  ///
  static const hasPOS = IriTerm.prevalidated('http://schema.org/hasPOS');

  /// height [Expects: http://schema.org/Distance, http://schema.org/QuantitativeValue]
  ///
  /// The height of the item.
  ///
  /// Can be used on: http://schema.org/MediaObject, http://schema.org/OfferShippingDetails, http://schema.org/Person, http://schema.org/Product, http://schema.org/ShippingConditions, http://schema.org/VisualArtwork
  ///
  static const height = IriTerm.prevalidated('http://schema.org/height');

  /// homeLocation [Expects: http://schema.org/ContactPoint, http://schema.org/Place]
  ///
  /// A contact location for a person's residence.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const homeLocation = IriTerm.prevalidated(
    'http://schema.org/homeLocation',
  );

  /// honorificPrefix [Expects: http://schema.org/Text]
  ///
  /// An honorific prefix preceding a Person's name such as Dr/Mrs/Mr.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const honorificPrefix = IriTerm.prevalidated(
    'http://schema.org/honorificPrefix',
  );

  /// honorificSuffix [Expects: http://schema.org/Text]
  ///
  /// An honorific suffix following a Person's name such as M.D./PhD/MSCSW.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const honorificSuffix = IriTerm.prevalidated(
    'http://schema.org/honorificSuffix',
  );

  /// interactionCount
  ///
  /// This property is deprecated, alongside the UserInteraction types on which it depended.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const interactionCount = IriTerm.prevalidated(
    'http://schema.org/interactionCount',
  );

  /// isicV4 [Expects: http://schema.org/Text]
  ///
  /// The International Standard of Industrial Classification of All Economic Activities (ISIC), Revision 4 code for a particular organization, business person, or place.
  ///
  /// Can be used on: http://schema.org/Organization, http://schema.org/Person, http://schema.org/Place
  ///
  static const isicV4 = IriTerm.prevalidated('http://schema.org/isicV4');

  /// jobTitle [Expects: http://schema.org/DefinedTerm, http://schema.org/Text]
  ///
  /// The job title of the person (for example, Financial Manager).
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const jobTitle = IriTerm.prevalidated('http://schema.org/jobTitle');

  /// knows [Expects: http://schema.org/Person]
  ///
  /// The most generic bi-directional social/work relation.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const knows = IriTerm.prevalidated('http://schema.org/knows');

  /// knowsAbout [Expects: http://schema.org/Text, http://schema.org/Thing, http://schema.org/URL]
  ///
  /// Of a {[Person]}, and less typically of an {[Organization]}, to indicate a topic that is known about - suggesting possible expertise but not implying it. We do not distinguish skill levels here, or relate this to educational content, events, objectives or {[JobPosting]} descriptions.
  ///
  /// Can be used on: http://schema.org/Organization, http://schema.org/Person
  ///
  static const knowsAbout = IriTerm.prevalidated(
    'http://schema.org/knowsAbout',
  );

  /// knowsLanguage [Expects: http://schema.org/Language, http://schema.org/Text]
  ///
  /// Of a {[Person]}, and less typically of an {[Organization]}, to indicate a known language. We do not distinguish skill levels or reading/writing/speaking/signing here. Use language codes from the [IETF BCP 47 standard](http://tools.ietf.org/html/bcp47).
  ///
  /// Can be used on: http://schema.org/Organization, http://schema.org/Person
  ///
  static const knowsLanguage = IriTerm.prevalidated(
    'http://schema.org/knowsLanguage',
  );

  /// naics [Expects: http://schema.org/Text]
  ///
  /// The North American Industry Classification System (NAICS) code for a particular organization or business person.
  ///
  /// Can be used on: http://schema.org/Organization, http://schema.org/Person
  ///
  static const naics = IriTerm.prevalidated('http://schema.org/naics');

  /// name [Expects: http://schema.org/Text]
  ///
  /// The name of the item.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const name = IriTerm.prevalidated('http://schema.org/name');

  /// nationality [Expects: http://schema.org/Country]
  ///
  /// Nationality of the person.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const nationality = IriTerm.prevalidated(
    'http://schema.org/nationality',
  );

  /// netWorth [Expects: http://schema.org/MonetaryAmount, http://schema.org/PriceSpecification]
  ///
  /// The total financial value of the person as calculated by subtracting the total value of liabilities from the total value of assets.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const netWorth = IriTerm.prevalidated('http://schema.org/netWorth');

  /// owns [Expects: http://schema.org/OwnershipInfo, http://schema.org/Product]
  ///
  /// Products owned by the organization or person.
  ///
  /// Can be used on: http://schema.org/Organization, http://schema.org/Person
  ///
  static const owns = IriTerm.prevalidated('http://schema.org/owns');

  /// parents [Expects: http://schema.org/Person]
  ///
  /// A parents of the person.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const parents = IriTerm.prevalidated('http://schema.org/parents');

  /// performerIn [Expects: http://schema.org/Event]
  ///
  /// Event that this person is a performer or participant in.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const performerIn = IriTerm.prevalidated(
    'http://schema.org/performerIn',
  );

  /// potentialAction [Expects: http://schema.org/Action]
  ///
  /// Indicates a potential Action, which describes an idealized action in which this thing would play an 'object' role.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const potentialAction = IriTerm.prevalidated(
    'http://schema.org/potentialAction',
  );

  /// relatedTo [Expects: http://schema.org/Person]
  ///
  /// The most generic familial relation.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const relatedTo = IriTerm.prevalidated('http://schema.org/relatedTo');

  /// sameAs [Expects: http://schema.org/URL]
  ///
  /// URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Wikidata entry, or official website.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const sameAs = IriTerm.prevalidated('http://schema.org/sameAs');

  /// seeks [Expects: http://schema.org/Demand]
  ///
  /// A pointer to products or services sought by the organization or person (demand).
  ///
  /// Can be used on: http://schema.org/Organization, http://schema.org/Person
  ///
  static const seeks = IriTerm.prevalidated('http://schema.org/seeks');

  /// siblings [Expects: http://schema.org/Person]
  ///
  /// A sibling of the person.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const siblings = IriTerm.prevalidated('http://schema.org/siblings');

  /// skills [Expects: http://schema.org/DefinedTerm, http://schema.org/Text]
  ///
  /// A statement of knowledge, skill, ability, task or any other assertion expressing a competency that is either claimed by a person, an organization or desired or required to fulfill a role or to work in an occupation.
  ///
  /// Can be used on: http://schema.org/JobPosting, http://schema.org/Occupation, http://schema.org/Organization, http://schema.org/Person
  ///
  static const skills = IriTerm.prevalidated('http://schema.org/skills');

  /// spouse [Expects: http://schema.org/Person]
  ///
  /// The person's spouse.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const spouse = IriTerm.prevalidated('http://schema.org/spouse');

  /// taxID [Expects: http://schema.org/Text]
  ///
  /// The Tax / Fiscal ID of the organization or person, e.g. the TIN in the US or the CIF/NIF in Spain.
  ///
  /// Can be used on: http://schema.org/Organization, http://schema.org/Person
  ///
  static const taxID = IriTerm.prevalidated('http://schema.org/taxID');

  /// telephone [Expects: http://schema.org/Text]
  ///
  /// The telephone number.
  ///
  /// Can be used on: http://schema.org/ContactPoint, http://schema.org/Organization, http://schema.org/Person, http://schema.org/Place
  ///
  static const telephone = IriTerm.prevalidated('http://schema.org/telephone');

  /// url [Expects: http://schema.org/URL]
  ///
  /// URL of the item.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const url = IriTerm.prevalidated('http://schema.org/url');

  /// vatID [Expects: http://schema.org/Text]
  ///
  /// The Value-added Tax ID of the organization or person.
  ///
  /// Can be used on: http://schema.org/Organization, http://schema.org/Person
  ///
  static const vatID = IriTerm.prevalidated('http://schema.org/vatID');

  /// weight [Expects: http://schema.org/Mass, http://schema.org/QuantitativeValue]
  ///
  /// The weight of the product or person.
  ///
  /// Can be used on: http://schema.org/OfferShippingDetails, http://schema.org/Person, http://schema.org/Product, http://schema.org/ShippingConditions, http://schema.org/VisualArtwork
  ///
  static const weight = IriTerm.prevalidated('http://schema.org/weight');

  /// workLocation [Expects: http://schema.org/ContactPoint, http://schema.org/Place]
  ///
  /// A contact location for a person's place of work.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const workLocation = IriTerm.prevalidated(
    'http://schema.org/workLocation',
  );

  /// worksFor [Expects: http://schema.org/Organization]
  ///
  /// Organizations that the person works for.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const worksFor = IriTerm.prevalidated('http://schema.org/worksFor');

  /// alternateName [Expects: http://schema.org/Text]
  ///
  /// An alias for the item.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const alternateName = IriTerm.prevalidated(
    'http://schema.org/alternateName',
  );

  /// alumniOf [Expects: http://schema.org/EducationalOrganization, http://schema.org/Organization]
  ///
  /// An organization that the person is an alumni of.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const alumniOf = IriTerm.prevalidated('http://schema.org/alumniOf');

  /// award [Expects: http://schema.org/Text]
  ///
  /// An award won by or for this item.
  ///
  /// Can be used on: http://schema.org/CreativeWork, http://schema.org/Organization, http://schema.org/Person, http://schema.org/Product, http://schema.org/Service
  ///
  static const award = IriTerm.prevalidated('http://schema.org/award');

  /// colleague [Expects: http://schema.org/Person, http://schema.org/URL]
  ///
  /// A colleague of the person.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const colleague = IriTerm.prevalidated('http://schema.org/colleague');

  /// contactPoint [Expects: http://schema.org/ContactPoint]
  ///
  /// A contact point for a person or organization.
  ///
  /// Can be used on: http://schema.org/HealthInsurancePlan, http://schema.org/Organization, http://schema.org/Person
  ///
  static const contactPoint = IriTerm.prevalidated(
    'http://schema.org/contactPoint',
  );

  /// funding [Expects: http://schema.org/Grant]
  ///
  /// A {[Grant]} that directly or indirectly provide funding or sponsorship for this item. See also {[ownershipFundingInfo]}.
  ///
  /// Can be used on: http://schema.org/BioChemEntity, http://schema.org/CreativeWork, http://schema.org/Event, http://schema.org/MedicalEntity, http://schema.org/Organization, http://schema.org/Person, http://schema.org/Product
  ///
  static const funding = IriTerm.prevalidated('http://schema.org/funding');

  /// interactionStatistic [Expects: http://schema.org/InteractionCounter]
  ///
  /// The number of interactions for the CreativeWork using the WebSite or SoftwareApplication. The most specific child type of InteractionCounter should be used.
  ///
  /// Can be used on: http://schema.org/CreativeWork, http://schema.org/Organization, http://schema.org/Person
  ///
  static const interactionStatistic = IriTerm.prevalidated(
    'http://schema.org/interactionStatistic',
  );

  /// mainEntityOfPage [Expects: http://schema.org/CreativeWork, http://schema.org/URL]
  ///
  /// Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See [background notes](/docs/datamodel.html#mainEntityBackground) for details.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const mainEntityOfPage = IriTerm.prevalidated(
    'http://schema.org/mainEntityOfPage',
  );

  /// makesOffer [Expects: http://schema.org/Offer]
  ///
  /// A pointer to products or services offered by the organization or person.
  ///
  /// Can be used on: http://schema.org/Organization, http://schema.org/Person
  ///
  static const makesOffer = IriTerm.prevalidated(
    'http://schema.org/makesOffer',
  );

  /// parent [Expects: http://schema.org/Person]
  ///
  /// A parent of this person.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const parent = IriTerm.prevalidated('http://schema.org/parent');

  /// sibling [Expects: http://schema.org/Person]
  ///
  /// A sibling of the person.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const sibling = IriTerm.prevalidated('http://schema.org/sibling');

  /// sponsor [Expects: http://schema.org/Organization, http://schema.org/Person]
  ///
  /// A person or organization that supports a thing through a pledge, promise, or financial contribution. E.g. a sponsor of a Medical Study or a corporate sponsor of an event.
  ///
  /// Can be used on: http://schema.org/CreativeWork, http://schema.org/Event, http://schema.org/Grant, http://schema.org/MedicalStudy, http://schema.org/Organization, http://schema.org/Person
  ///
  static const sponsor = IriTerm.prevalidated('http://schema.org/sponsor');

  /// subjectOf [Expects: http://schema.org/CreativeWork, http://schema.org/Event]
  ///
  /// A CreativeWork or Event about this Thing.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const subjectOf = IriTerm.prevalidated('http://schema.org/subjectOf');

  /// memberOf [Expects: http://schema.org/MemberProgramTier, http://schema.org/Organization, http://schema.org/ProgramMembership]
  ///
  /// An Organization (or ProgramMembership) to which this Person or Organization belongs.
  ///
  /// Can be used on: http://schema.org/Organization, http://schema.org/Person
  ///
  static const memberOf = IriTerm.prevalidated('http://schema.org/memberOf');

  /// description [Expects: http://schema.org/Text, http://schema.org/TextObject]
  ///
  /// A description of the item.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const description = IriTerm.prevalidated(
    'http://schema.org/description',
  );

  /// image [Expects: http://schema.org/ImageObject, http://schema.org/URL]
  ///
  /// An image of the item. This can be a {[URL]} or a fully described {[ImageObject]}.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const image = IriTerm.prevalidated('http://schema.org/image');

  /// publishingPrinciples [Expects: http://schema.org/CreativeWork, http://schema.org/URL]
  ///
  /// The publishingPrinciples property indicates (typically via {[URL]}) a document describing the editorial principles of an {[Organization]} (or individual, e.g. a {[Person]} writing a blog) that relate to their activities as a publisher, e.g. ethics or diversity policies. When applied to a {[CreativeWork]} (e.g. {[NewsArticle]}) the principles are those of the party primarily responsible for the creation of the {[CreativeWork]}.
  ///
  /// While such policies are most typically expressed in natural language, sometimes related information (e.g. indicating a {[funder]}) can be expressed using schema.org terminology.
  ///
  ///
  /// Can be used on: http://schema.org/CreativeWork, http://schema.org/Organization, http://schema.org/Person
  ///
  static const publishingPrinciples = IriTerm.prevalidated(
    'http://schema.org/publishingPrinciples',
  );

  /// identifier [Expects: http://schema.org/PropertyValue, http://schema.org/Text, http://schema.org/URL]
  ///
  /// The identifier property represents any kind of identifier for any kind of {[Thing]}, such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
  ///
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const identifier = IriTerm.prevalidated(
    'http://schema.org/identifier',
  );

  /// source
  ///
  ///
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const source = IriTerm.prevalidated('http://schema.org/source');

  /// type from rdf vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Class]
  ///
  /// The subject is an instance of a class.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfType = IriTerm.prevalidated(
    'http://www.w3.org/1999/02/22-rdf-syntax-ns#type',
  );

  /// value from rdf vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// Idiomatic property used for structured values.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfValue = IriTerm.prevalidated(
    'http://www.w3.org/1999/02/22-rdf-syntax-ns#value',
  );

  /// comment from rdfs vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// A description of the subject resource.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfsComment = IriTerm.prevalidated(
    'http://www.w3.org/2000/01/rdf-schema#comment',
  );

  /// label from rdfs vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// A human-readable name for the subject.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfsLabel = IriTerm.prevalidated(
    'http://www.w3.org/2000/01/rdf-schema#label',
  );

  /// seeAlso from rdfs vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// Further information about the subject resource.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfsSeeAlso = IriTerm.prevalidated(
    'http://www.w3.org/2000/01/rdf-schema#seeAlso',
  );

  /// isDefinedBy from rdfs vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// The definition of the subject resource.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfsIsDefinedBy = IriTerm.prevalidated(
    'http://www.w3.org/2000/01/rdf-schema#isDefinedBy',
  );

  /// member from rdfs vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// A member of the subject resource.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfsMember = IriTerm.prevalidated(
    'http://www.w3.org/2000/01/rdf-schema#member',
  );

  /// annotatedProperty from owl vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// The property that determines the predicate of an annotated axiom or annotated annotation.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const owlAnnotatedProperty = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#annotatedProperty',
  );

  /// annotatedSource from owl vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// The property that determines the subject of an annotated axiom or annotated annotation.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const owlAnnotatedSource = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#annotatedSource',
  );

  /// annotatedTarget from owl vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// The property that determines the object of an annotated axiom or annotated annotation.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const owlAnnotatedTarget = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#annotatedTarget',
  );

  /// bottomDataProperty from owl vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// The data property that does not relate any individual to any data value.
  ///
  /// Can be used on: http://www.w3.org/2002/07/owl#Thing
  ///
  static const owlBottomDataProperty = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#bottomDataProperty',
  );

  /// bottomObjectProperty from owl vocabulary [Expects: http://www.w3.org/2002/07/owl#Thing]
  ///
  /// The object property that does not relate any two individuals.
  ///
  /// Can be used on: http://www.w3.org/2002/07/owl#Thing
  ///
  static const owlBottomObjectProperty = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#bottomObjectProperty',
  );

  /// deprecated from owl vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// The annotation property that indicates that a given entity has been deprecated.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const owlDeprecated = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#deprecated',
  );

  /// differentFrom from owl vocabulary [Expects: http://www.w3.org/2002/07/owl#Thing]
  ///
  /// The property that determines that two given individuals are different.
  ///
  /// Can be used on: http://www.w3.org/2002/07/owl#Thing
  ///
  static const owlDifferentFrom = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#differentFrom',
  );

  /// members from owl vocabulary [Expects: http://www.w3.org/1999/02/22-rdf-syntax-ns#List]
  ///
  /// The property that determines the collection of members in either a owl:AllDifferent, owl:AllDisjointClasses or owl:AllDisjointProperties axiom.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const owlMembers = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#members',
  );

  /// sameAs from owl vocabulary [Expects: http://www.w3.org/2002/07/owl#Thing]
  ///
  /// The property that determines that two given individuals are equal.
  ///
  /// Can be used on: http://www.w3.org/2002/07/owl#Thing
  ///
  static const owlSameAs = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#sameAs',
  );

  /// topDataProperty from owl vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// The data property that relates every individual to every data value.
  ///
  /// Can be used on: http://www.w3.org/2002/07/owl#Thing
  ///
  static const owlTopDataProperty = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#topDataProperty',
  );

  /// topObjectProperty from owl vocabulary [Expects: http://www.w3.org/2002/07/owl#Thing]
  ///
  /// The object property that relates every two individuals.
  ///
  /// Can be used on: http://www.w3.org/2002/07/owl#Thing
  ///
  static const owlTopObjectProperty = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#topObjectProperty',
  );

  /// versionInfo from owl vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// The annotation property that provides version information for an ontology or another OWL construct.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const owlVersionInfo = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#versionInfo',
  );

  /// mbox from foaf vocabulary [Expects: http://www.w3.org/2002/07/owl#Thing]
  ///
  /// A
  /// personal mailbox, ie. an Internet mailbox associated with exactly one owner, the first owner of this mailbox. This is a 'static inverse functional property', in that  there is (across time and change) at most one individual that ever has any particular value for foaf:mbox.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const foafMbox = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/mbox',
  );

  /// mbox_sha1sum from foaf vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// The sha1sum of the URI of an Internet mailbox associated with exactly one owner, the  first owner of the mailbox.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const foafMbox_sha1sum = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/mbox_sha1sum',
  );

  /// gender from foaf vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// The gender of this Agent (typically but not necessarily 'male' or 'female').
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const foafGender = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/gender',
  );

  /// geekcode from foaf vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// A textual geekcode for this person, see http://www.geekcode.com/geek.html
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Person
  ///
  static const foafGeekcode = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/geekcode',
  );

  /// based_near from foaf vocabulary [Expects: http://www.w3.org/2003/01/geo/wgs84_pos#SpatialThing]
  ///
  /// A location that something is based near, for some broadly human notion of near.
  ///
  /// Can be used on: http://www.w3.org/2003/01/geo/wgs84_pos#SpatialThing
  ///
  static const foafBased_near = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/based_near',
  );

  /// jabberID from foaf vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// A jabber ID for something.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const foafJabberID = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/jabberID',
  );

  /// aimChatID from foaf vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// An AIM chat ID
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const foafAimChatID = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/aimChatID',
  );

  /// skypeID from foaf vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// A Skype ID
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const foafSkypeID = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/skypeID',
  );

  /// icqChatID from foaf vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// An ICQ chat ID
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const foafIcqChatID = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/icqChatID',
  );

  /// yahooChatID from foaf vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// A Yahoo chat ID
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const foafYahooChatID = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/yahooChatID',
  );

  /// msnChatID from foaf vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// An MSN chat ID
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const foafMsnChatID = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/msnChatID',
  );

  /// name from foaf vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// A name for some thing.
  ///
  /// Can be used on: http://www.w3.org/2002/07/owl#Thing
  ///
  static const foafName = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/name',
  );

  /// firstName from foaf vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// The first name of a person.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Person
  ///
  static const foafFirstName = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/firstName',
  );

  /// lastName from foaf vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// The last name of a person.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Person
  ///
  static const foafLastName = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/lastName',
  );

  /// surname from foaf vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// The surname of some person.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Person
  ///
  static const foafSurname = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/surname',
  );

  /// family_name from foaf vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// The family name of some person.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Person, http://xmlns.com/foaf/0.1/Person
  ///
  static const foafFamily_name = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/family_name',
  );

  /// familyName from foaf vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// The family name of some person.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Person, http://xmlns.com/foaf/0.1/Person
  ///
  static const foafFamilyName = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/familyName',
  );

  /// homepage from foaf vocabulary [Expects: http://xmlns.com/foaf/0.1/Document]
  ///
  /// A homepage for some thing.
  ///
  /// Can be used on: http://www.w3.org/2002/07/owl#Thing
  ///
  static const foafHomepage = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/homepage',
  );

  /// weblog from foaf vocabulary [Expects: http://xmlns.com/foaf/0.1/Document]
  ///
  /// A weblog of some thing (whether person, group, company etc.).
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const foafWeblog = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/weblog',
  );

  /// openid from foaf vocabulary [Expects: http://xmlns.com/foaf/0.1/Document]
  ///
  /// An OpenID for an Agent.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const foafOpenid = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/openid',
  );

  /// tipjar from foaf vocabulary [Expects: http://xmlns.com/foaf/0.1/Document]
  ///
  /// A tipjar document for this agent, describing means for payment and reward.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const foafTipjar = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/tipjar',
  );

  /// plan from foaf vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// A .plan comment, in the tradition of finger and '.plan' files.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Person
  ///
  static const foafPlan = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/plan',
  );

  /// made from foaf vocabulary [Expects: http://www.w3.org/2002/07/owl#Thing]
  ///
  /// Something that was made by this agent.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const foafMade = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/made',
  );

  /// maker from foaf vocabulary [Expects: http://xmlns.com/foaf/0.1/Agent]
  ///
  /// An agent that
  /// made this thing.
  ///
  /// Can be used on: http://www.w3.org/2002/07/owl#Thing
  ///
  static const foafMaker = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/maker',
  );

  /// img from foaf vocabulary [Expects: http://xmlns.com/foaf/0.1/Image]
  ///
  /// An image that can be used to represent some thing (ie. those depictions which are particularly representative of something, eg. one's photo on a homepage).
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Person
  ///
  static const foafImg = IriTerm.prevalidated('http://xmlns.com/foaf/0.1/img');

  /// depiction from foaf vocabulary [Expects: http://xmlns.com/foaf/0.1/Image]
  ///
  /// A depiction of some thing.
  ///
  /// Can be used on: http://www.w3.org/2002/07/owl#Thing
  ///
  static const foafDepiction = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/depiction',
  );

  /// myersBriggs from foaf vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// A Myers Briggs (MBTI) personality classification.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Person
  ///
  static const foafMyersBriggs = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/myersBriggs',
  );

  /// workplaceHomepage from foaf vocabulary [Expects: http://xmlns.com/foaf/0.1/Document]
  ///
  /// A workplace homepage of some person; the homepage of an organization they work for.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Person
  ///
  static const foafWorkplaceHomepage = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/workplaceHomepage',
  );

  /// workInfoHomepage from foaf vocabulary [Expects: http://xmlns.com/foaf/0.1/Document]
  ///
  /// A work info homepage of some person; a page about their work for some organization.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Person
  ///
  static const foafWorkInfoHomepage = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/workInfoHomepage',
  );

  /// schoolHomepage from foaf vocabulary [Expects: http://xmlns.com/foaf/0.1/Document]
  ///
  /// A homepage of a school attended by the person.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Person
  ///
  static const foafSchoolHomepage = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/schoolHomepage',
  );

  /// knows from foaf vocabulary [Expects: http://xmlns.com/foaf/0.1/Person]
  ///
  /// A person known by this person (indicating some level of reciprocated interaction between the parties).
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Person
  ///
  static const foafKnows = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/knows',
  );

  /// interest from foaf vocabulary [Expects: http://xmlns.com/foaf/0.1/Document]
  ///
  /// A page about a topic of interest to this person.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const foafInterest = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/interest',
  );

  /// topic_interest from foaf vocabulary [Expects: http://www.w3.org/2002/07/owl#Thing]
  ///
  /// A thing of interest to this person.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const foafTopic_interest = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/topic_interest',
  );

  /// publications from foaf vocabulary [Expects: http://xmlns.com/foaf/0.1/Document]
  ///
  /// A link to the publications of this person.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Person
  ///
  static const foafPublications = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/publications',
  );

  /// currentProject from foaf vocabulary [Expects: http://www.w3.org/2002/07/owl#Thing]
  ///
  /// A current project this person works on.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Person
  ///
  static const foafCurrentProject = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/currentProject',
  );

  /// pastProject from foaf vocabulary [Expects: http://www.w3.org/2002/07/owl#Thing]
  ///
  /// A project this person has previously worked on.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Person
  ///
  static const foafPastProject = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/pastProject',
  );

  /// fundedBy from foaf vocabulary [Expects: http://www.w3.org/2002/07/owl#Thing]
  ///
  /// An organization funding a project or person.
  ///
  /// Can be used on: http://www.w3.org/2002/07/owl#Thing
  ///
  static const foafFundedBy = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/fundedBy',
  );

  /// logo from foaf vocabulary [Expects: http://www.w3.org/2002/07/owl#Thing]
  ///
  /// A logo representing some thing.
  ///
  /// Can be used on: http://www.w3.org/2002/07/owl#Thing
  ///
  static const foafLogo = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/logo',
  );

  /// page from foaf vocabulary [Expects: http://xmlns.com/foaf/0.1/Document]
  ///
  /// A page or document about this thing.
  ///
  /// Can be used on: http://www.w3.org/2002/07/owl#Thing
  ///
  static const foafPage = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/page',
  );

  /// theme from foaf vocabulary [Expects: http://www.w3.org/2002/07/owl#Thing]
  ///
  /// A theme.
  ///
  /// Can be used on: http://www.w3.org/2002/07/owl#Thing
  ///
  static const foafTheme = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/theme',
  );

  /// account from foaf vocabulary [Expects: http://xmlns.com/foaf/0.1/OnlineAccount]
  ///
  /// Indicates an account held by this agent.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const foafAccount = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/account',
  );

  /// holdsAccount from foaf vocabulary [Expects: http://xmlns.com/foaf/0.1/OnlineAccount]
  ///
  /// Indicates an account held by this agent.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const foafHoldsAccount = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/holdsAccount',
  );

  /// birthday from foaf vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// The birthday of this Agent, represented in mm-dd string form, eg. '12-31'.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const foafBirthday = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/birthday',
  );

  /// age from foaf vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// The age in years of some agent.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const foafAge = IriTerm.prevalidated('http://xmlns.com/foaf/0.1/age');

  /// status from foaf vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// A string expressing what the user is happy for the general public (normally) to know about their current activity.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const foafStatus = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/status',
  );

  /// emailAddress from contact vocabulary [Expects: http://www.w3.org/2000/10/swap/pim/contact#_EmailAddress]
  ///
  /// emailAddress is a string. Use of this is discouraged. Use :mailbox instead
  ///
  /// Can be used on: http://www.w3.org/2000/10/swap/pim/contact#SocialEntity
  ///
  static const contactEmailAddress = IriTerm.prevalidated(
    'http://www.w3.org/2000/10/swap/pim/contact#emailAddress',
  );

  /// mailbox from contact vocabulary [Expects: http://www.w3.org/2000/10/swap/pim/contact#Mailbox]
  ///
  ///
  ///
  /// Can be used on: http://www.w3.org/2000/10/swap/pim/contact#SocialEntity
  ///
  static const contactMailbox = IriTerm.prevalidated(
    'http://www.w3.org/2000/10/swap/pim/contact#mailbox',
  );

  /// mailboxURI from contact vocabulary [Expects: http://www.w3.org/2000/10/swap/pim/contact#_URI]
  ///
  /// mailboxURI is a string. Use of this is discouraged. Use :mailbox instead
  ///
  /// Can be used on: http://www.w3.org/2000/10/swap/pim/contact#SocialEntity
  ///
  static const contactMailboxURI = IriTerm.prevalidated(
    'http://www.w3.org/2000/10/swap/pim/contact#mailboxURI',
  );

  /// interviewee from bibo vocabulary [Expects: http://xmlns.com/foaf/0.1/Agent]
  ///
  /// An agent that is interviewed by another agent.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const biboInterviewee = IriTerm.prevalidated(
    'http://purl.org/ontology/bibo/interviewee',
  );

  /// interviewer from bibo vocabulary [Expects: http://xmlns.com/foaf/0.1/Agent]
  ///
  /// An agent that interview another agent.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const biboInterviewer = IriTerm.prevalidated(
    'http://purl.org/ontology/bibo/interviewer',
  );

  /// abstract_ from bibo vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// A summary of the resource.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const biboAbstract_ = IriTerm.prevalidated(
    'http://purl.org/ontology/bibo/abstract',
  );

  /// prefixName from bibo vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// The prefix of a name
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const biboPrefixName = IriTerm.prevalidated(
    'http://purl.org/ontology/bibo/prefixName',
  );

  /// suffixName from bibo vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// The suffix of a name
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const biboSuffixName = IriTerm.prevalidated(
    'http://purl.org/ontology/bibo/suffixName',
  );
}
