// Copyright (c) 2025, Klas Kala√ü <habbatical@gmail.com>
// All rights reserved. Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// GENERATED CODE - DO NOT MODIFY BY HAND
// Generated by VocabularyBuilder

import 'package:rdf_core/rdf_core.dart';

/// TaxiReservation class from Schema vocabulary
///
/// A reservation for a taxi.\n\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, use {[Offer]}.
///
/// Inherits from:
/// - Intangible (https://schema.org/Intangible)
/// - Reservation (https://schema.org/Reservation)
/// - Thing (https://schema.org/Thing)
///
/// This class provides access to all properties that can be used with TaxiReservation.
/// [Class Reference](https://schema.org/TaxiReservation)
///
/// [Vocabulary Reference](https://schema.org/)
class SchemaTaxiReservation {
  // Private constructor prevents instantiation
  const SchemaTaxiReservation._();

  /// IRI term for the TaxiReservation class
  /// Use this to specify that a resource is of this type.
  static const classIri = IriTerm.prevalidated(
    'https://schema.org/TaxiReservation',
  );

  /// additionalType [Expects: https://schema.org/Text, https://schema.org/URL]
  ///
  /// An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. Typically the value is a URI-identified RDF class, and in this case corresponds to the
  /// use of rdf:type in RDF. Text values can be used sparingly, for cases where useful information can be added without their being an appropriate schema to reference. In the case of text values, the class label should follow the schema.org <a href="https://schema.org/docs/styleguide.html">style guide</a>.
  ///
  /// Can be used on: https://schema.org/Thing
  ///
  static const additionalType = IriTerm.prevalidated(
    'https://schema.org/additionalType',
  );

  /// bookingAgent [Expects: https://schema.org/Organization, https://schema.org/Person]
  ///
  /// 'bookingAgent' is an out-dated term indicating a 'broker' that serves as a booking agent.
  ///
  /// Can be used on: https://schema.org/Reservation
  ///
  static const bookingAgent = IriTerm.prevalidated(
    'https://schema.org/bookingAgent',
  );

  /// bookingTime [Expects: https://schema.org/DateTime]
  ///
  /// The date and time the reservation was booked.
  ///
  /// Can be used on: https://schema.org/Reservation
  ///
  static const bookingTime = IriTerm.prevalidated(
    'https://schema.org/bookingTime',
  );

  /// disambiguatingDescription [Expects: https://schema.org/Text]
  ///
  /// A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation.
  ///
  /// Can be used on: https://schema.org/Thing
  ///
  static const disambiguatingDescription = IriTerm.prevalidated(
    'https://schema.org/disambiguatingDescription',
  );

  /// interactionCount
  ///
  /// This property is deprecated, alongside the UserInteraction types on which it depended.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const interactionCount = IriTerm.prevalidated(
    'https://schema.org/interactionCount',
  );

  /// modifiedTime [Expects: https://schema.org/DateTime]
  ///
  /// The date and time the reservation was modified.
  ///
  /// Can be used on: https://schema.org/Reservation
  ///
  static const modifiedTime = IriTerm.prevalidated(
    'https://schema.org/modifiedTime',
  );

  /// name [Expects: https://schema.org/Text]
  ///
  /// The name of the item.
  ///
  /// Can be used on: https://schema.org/Thing
  ///
  static const name = IriTerm.prevalidated('https://schema.org/name');

  /// partySize [Expects: https://schema.org/Integer, https://schema.org/QuantitativeValue]
  ///
  /// Number of people the reservation should accommodate.
  ///
  /// Can be used on: https://schema.org/FoodEstablishmentReservation, https://schema.org/TaxiReservation
  ///
  static const partySize = IriTerm.prevalidated('https://schema.org/partySize');

  /// pickupLocation [Expects: https://schema.org/Place]
  ///
  /// Where a taxi will pick up a passenger or a rental car can be picked up.
  ///
  /// Can be used on: https://schema.org/RentalCarReservation, https://schema.org/TaxiReservation
  ///
  static const pickupLocation = IriTerm.prevalidated(
    'https://schema.org/pickupLocation',
  );

  /// pickupTime [Expects: https://schema.org/DateTime]
  ///
  /// When a taxi will pick up a passenger or a rental car can be picked up.
  ///
  /// Can be used on: https://schema.org/RentalCarReservation, https://schema.org/TaxiReservation
  ///
  static const pickupTime = IriTerm.prevalidated(
    'https://schema.org/pickupTime',
  );

  /// potentialAction [Expects: https://schema.org/Action]
  ///
  /// Indicates a potential Action, which describes an idealized action in which this thing would play an 'object' role.
  ///
  /// Can be used on: https://schema.org/Thing
  ///
  static const potentialAction = IriTerm.prevalidated(
    'https://schema.org/potentialAction',
  );

  /// priceCurrency [Expects: https://schema.org/Text]
  ///
  /// The currency of the price, or a price component when attached to {[PriceSpecification]} and its subtypes.\n\nUse standard formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217), e.g. "USD"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies, e.g. "BTC"; well known names for [Local Exchange Trading Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system) (LETS) and other currency types, e.g. "Ithaca HOUR".
  ///
  /// Can be used on: https://schema.org/DonateAction, https://schema.org/Offer, https://schema.org/PriceSpecification, https://schema.org/Reservation, https://schema.org/Ticket, https://schema.org/TradeAction
  ///
  static const priceCurrency = IriTerm.prevalidated(
    'https://schema.org/priceCurrency',
  );

  /// programMembershipUsed [Expects: https://schema.org/ProgramMembership]
  ///
  /// Any membership in a frequent flyer, hotel loyalty program, etc. being applied to the reservation.
  ///
  /// Can be used on: https://schema.org/Reservation
  ///
  static const programMembershipUsed = IriTerm.prevalidated(
    'https://schema.org/programMembershipUsed',
  );

  /// reservationFor [Expects: https://schema.org/Thing]
  ///
  /// The thing -- flight, event, restaurant, etc. being reserved.
  ///
  /// Can be used on: https://schema.org/Reservation
  ///
  static const reservationFor = IriTerm.prevalidated(
    'https://schema.org/reservationFor',
  );

  /// reservationId [Expects: https://schema.org/Text]
  ///
  /// A unique identifier for the reservation.
  ///
  /// Can be used on: https://schema.org/Reservation
  ///
  static const reservationId = IriTerm.prevalidated(
    'https://schema.org/reservationId',
  );

  /// reservationStatus [Expects: https://schema.org/ReservationStatusType]
  ///
  /// The current status of the reservation.
  ///
  /// Can be used on: https://schema.org/Reservation
  ///
  static const reservationStatus = IriTerm.prevalidated(
    'https://schema.org/reservationStatus',
  );

  /// reservedTicket [Expects: https://schema.org/Ticket]
  ///
  /// A ticket associated with the reservation.
  ///
  /// Can be used on: https://schema.org/Reservation
  ///
  static const reservedTicket = IriTerm.prevalidated(
    'https://schema.org/reservedTicket',
  );

  /// sameAs [Expects: https://schema.org/URL]
  ///
  /// URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Wikidata entry, or official website.
  ///
  /// Can be used on: https://schema.org/Thing
  ///
  static const sameAs = IriTerm.prevalidated('https://schema.org/sameAs');

  /// totalPrice [Expects: https://schema.org/Number, https://schema.org/PriceSpecification, https://schema.org/Text]
  ///
  /// The total price for the reservation or ticket, including applicable taxes, shipping, etc.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  ///
  /// Can be used on: https://schema.org/Reservation, https://schema.org/Ticket
  ///
  static const totalPrice = IriTerm.prevalidated(
    'https://schema.org/totalPrice',
  );

  /// underName [Expects: https://schema.org/Organization, https://schema.org/Person]
  ///
  /// The person or organization the reservation or ticket is for.
  ///
  /// Can be used on: https://schema.org/Reservation, https://schema.org/Ticket
  ///
  static const underName = IriTerm.prevalidated('https://schema.org/underName');

  /// url [Expects: https://schema.org/URL]
  ///
  /// URL of the item.
  ///
  /// Can be used on: https://schema.org/Thing
  ///
  static const url = IriTerm.prevalidated('https://schema.org/url');

  /// alternateName [Expects: https://schema.org/Text]
  ///
  /// An alias for the item.
  ///
  /// Can be used on: https://schema.org/Thing
  ///
  static const alternateName = IriTerm.prevalidated(
    'https://schema.org/alternateName',
  );

  /// broker [Expects: https://schema.org/Organization, https://schema.org/Person]
  ///
  /// An entity that arranges for an exchange between a buyer and a seller.  In most cases a broker never acquires or releases ownership of a product or service involved in an exchange.  If it is not clear whether an entity is a broker, seller, or buyer, the latter two terms are preferred.
  ///
  /// Can be used on: https://schema.org/Invoice, https://schema.org/Order, https://schema.org/Reservation, https://schema.org/Service
  ///
  static const broker = IriTerm.prevalidated('https://schema.org/broker');

  /// mainEntityOfPage [Expects: https://schema.org/CreativeWork, https://schema.org/URL]
  ///
  /// Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See [background notes](/docs/datamodel.html#mainEntityBackground) for details.
  ///
  /// Can be used on: https://schema.org/Thing
  ///
  static const mainEntityOfPage = IriTerm.prevalidated(
    'https://schema.org/mainEntityOfPage',
  );

  /// provider [Expects: https://schema.org/Organization, https://schema.org/Person]
  ///
  /// The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller.
  ///
  /// Can be used on: https://schema.org/Action, https://schema.org/CreativeWork, https://schema.org/EducationalOccupationalProgram, https://schema.org/FinancialIncentive, https://schema.org/Invoice, https://schema.org/ParcelDelivery, https://schema.org/Reservation, https://schema.org/Service, https://schema.org/Trip
  ///
  static const provider = IriTerm.prevalidated('https://schema.org/provider');

  /// subjectOf [Expects: https://schema.org/CreativeWork, https://schema.org/Event]
  ///
  /// A CreativeWork or Event about this Thing.
  ///
  /// Can be used on: https://schema.org/Thing
  ///
  static const subjectOf = IriTerm.prevalidated('https://schema.org/subjectOf');

  /// description [Expects: https://schema.org/Text, https://schema.org/TextObject]
  ///
  /// A description of the item.
  ///
  /// Can be used on: https://schema.org/Thing
  ///
  static const description = IriTerm.prevalidated(
    'https://schema.org/description',
  );

  /// image [Expects: https://schema.org/ImageObject, https://schema.org/URL]
  ///
  /// An image of the item. This can be a {[URL]} or a fully described {[ImageObject]}.
  ///
  /// Can be used on: https://schema.org/Thing
  ///
  static const image = IriTerm.prevalidated('https://schema.org/image');

  /// identifier [Expects: https://schema.org/PropertyValue, https://schema.org/Text, https://schema.org/URL]
  ///
  /// The identifier property represents any kind of identifier for any kind of {[Thing]}, such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
  ///
  ///
  /// Can be used on: https://schema.org/Thing
  ///
  static const identifier = IriTerm.prevalidated(
    'https://schema.org/identifier',
  );

  /// source
  ///
  ///
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const source = IriTerm.prevalidated('https://schema.org/source');
}
