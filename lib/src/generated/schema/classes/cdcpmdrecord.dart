// Copyright (c) 2025, Klas Kala√ü <habbatical@gmail.com>
// All rights reserved. Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// GENERATED CODE - DO NOT MODIFY BY HAND
// Generated by VocabularyBuilder

import 'package:rdf_core/rdf_core.dart';

/// CDCPMDRecord class from Schema vocabulary
///
/// A CDCPMDRecord is a data structure representing a record in a CDC tabular data format
/// used for hospital data reporting. See [documentation](/docs/cdc-covid.html) for details, and the linked CDC materials for authoritative
/// definitions used as the source here.
///
///
/// Inherits from:
/// - Intangible (https://schema.org/Intangible)
/// - Resource (http://www.w3.org/2000/01/rdf-schema#Resource)
/// - StructuredValue (https://schema.org/StructuredValue)
/// - Thing (https://schema.org/Thing)
///
/// This class provides access to all properties that can be used with CDCPMDRecord.
/// [Class Reference](https://schema.org/CDCPMDRecord)
///
/// [Vocabulary Reference](https://schema.org/)
class SchemaCDCPMDRecord {
  // Private constructor prevents instantiation
  const SchemaCDCPMDRecord._();

  /// IRI term for the CDCPMDRecord class
  /// Use this to specify that a resource is of this type.
  static const classIri = IriTerm.prevalidated(
    'https://schema.org/CDCPMDRecord',
  );

  /// additionalType [Expects: https://schema.org/Text, https://schema.org/URL]
  ///
  /// An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. Typically the value is a URI-identified RDF class, and in this case corresponds to the
  /// use of rdf:type in RDF. Text values can be used sparingly, for cases where useful information can be added without their being an appropriate schema to reference. In the case of text values, the class label should follow the schema.org <a href="https://schema.org/docs/styleguide.html">style guide</a>.
  ///
  /// Can be used on: https://schema.org/Thing
  ///
  static const additionalType = IriTerm.prevalidated(
    'https://schema.org/additionalType',
  );

  /// cvdCollectionDate [Expects: https://schema.org/DateTime, https://schema.org/Text]
  ///
  /// collectiondate - Date for which patient counts are reported.
  ///
  /// Can be used on: https://schema.org/CDCPMDRecord
  ///
  static const cvdCollectionDate = IriTerm.prevalidated(
    'https://schema.org/cvdCollectionDate',
  );

  /// cvdFacilityCounty [Expects: https://schema.org/Text]
  ///
  /// Name of the County of the NHSN facility that this data record applies to. Use {[cvdFacilityId]} to identify the facility. To provide other details, {[healthcareReportingData]} can be used on a {[Hospital]} entry.
  ///
  /// Can be used on: https://schema.org/CDCPMDRecord
  ///
  static const cvdFacilityCounty = IriTerm.prevalidated(
    'https://schema.org/cvdFacilityCounty',
  );

  /// cvdFacilityId [Expects: https://schema.org/Text]
  ///
  /// Identifier of the NHSN facility that this data record applies to. Use {[cvdFacilityCounty]} to indicate the county. To provide other details, {[healthcareReportingData]} can be used on a {[Hospital]} entry.
  ///
  /// Can be used on: https://schema.org/CDCPMDRecord
  ///
  static const cvdFacilityId = IriTerm.prevalidated(
    'https://schema.org/cvdFacilityId',
  );

  /// cvdNumBeds [Expects: https://schema.org/Number]
  ///
  /// numbeds - HOSPITAL INPATIENT BEDS: Inpatient beds, including all staffed, licensed, and overflow (surge) beds used for inpatients.
  ///
  /// Can be used on: https://schema.org/CDCPMDRecord
  ///
  static const cvdNumBeds = IriTerm.prevalidated(
    'https://schema.org/cvdNumBeds',
  );

  /// cvdNumBedsOcc [Expects: https://schema.org/Number]
  ///
  /// numbedsocc - HOSPITAL INPATIENT BED OCCUPANCY: Total number of staffed inpatient beds that are occupied.
  ///
  /// Can be used on: https://schema.org/CDCPMDRecord
  ///
  static const cvdNumBedsOcc = IriTerm.prevalidated(
    'https://schema.org/cvdNumBedsOcc',
  );

  /// cvdNumC19Died [Expects: https://schema.org/Number]
  ///
  /// numc19died - DEATHS: Patients with suspected or confirmed COVID-19 who died in the hospital, ED, or any overflow location.
  ///
  /// Can be used on: https://schema.org/CDCPMDRecord
  ///
  static const cvdNumC19Died = IriTerm.prevalidated(
    'https://schema.org/cvdNumC19Died',
  );

  /// cvdNumC19HOPats [Expects: https://schema.org/Number]
  ///
  /// numc19hopats - HOSPITAL ONSET: Patients hospitalized in an NHSN inpatient care location with onset of suspected or confirmed COVID-19 14 or more days after hospitalization.
  ///
  /// Can be used on: https://schema.org/CDCPMDRecord
  ///
  static const cvdNumC19HOPats = IriTerm.prevalidated(
    'https://schema.org/cvdNumC19HOPats',
  );

  /// cvdNumC19HospPats [Expects: https://schema.org/Number]
  ///
  /// numc19hosppats - HOSPITALIZED: Patients currently hospitalized in an inpatient care location who have suspected or confirmed COVID-19.
  ///
  /// Can be used on: https://schema.org/CDCPMDRecord
  ///
  static const cvdNumC19HospPats = IriTerm.prevalidated(
    'https://schema.org/cvdNumC19HospPats',
  );

  /// cvdNumC19MechVentPats [Expects: https://schema.org/Number]
  ///
  /// numc19mechventpats - HOSPITALIZED and VENTILATED: Patients hospitalized in an NHSN inpatient care location who have suspected or confirmed COVID-19 and are on a mechanical ventilator.
  ///
  /// Can be used on: https://schema.org/CDCPMDRecord
  ///
  static const cvdNumC19MechVentPats = IriTerm.prevalidated(
    'https://schema.org/cvdNumC19MechVentPats',
  );

  /// cvdNumC19OFMechVentPats [Expects: https://schema.org/Number]
  ///
  /// numc19ofmechventpats - ED/OVERFLOW and VENTILATED: Patients with suspected or confirmed COVID-19 who are in the ED or any overflow location awaiting an inpatient bed and on a mechanical ventilator.
  ///
  /// Can be used on: https://schema.org/CDCPMDRecord
  ///
  static const cvdNumC19OFMechVentPats = IriTerm.prevalidated(
    'https://schema.org/cvdNumC19OFMechVentPats',
  );

  /// cvdNumC19OverflowPats [Expects: https://schema.org/Number]
  ///
  /// numc19overflowpats - ED/OVERFLOW: Patients with suspected or confirmed COVID-19 who are in the ED or any overflow location awaiting an inpatient bed.
  ///
  /// Can be used on: https://schema.org/CDCPMDRecord
  ///
  static const cvdNumC19OverflowPats = IriTerm.prevalidated(
    'https://schema.org/cvdNumC19OverflowPats',
  );

  /// cvdNumICUBeds [Expects: https://schema.org/Number]
  ///
  /// numicubeds - ICU BEDS: Total number of staffed inpatient intensive care unit (ICU) beds.
  ///
  /// Can be used on: https://schema.org/CDCPMDRecord
  ///
  static const cvdNumICUBeds = IriTerm.prevalidated(
    'https://schema.org/cvdNumICUBeds',
  );

  /// cvdNumICUBedsOcc [Expects: https://schema.org/Number]
  ///
  /// numicubedsocc - ICU BED OCCUPANCY: Total number of staffed inpatient ICU beds that are occupied.
  ///
  /// Can be used on: https://schema.org/CDCPMDRecord
  ///
  static const cvdNumICUBedsOcc = IriTerm.prevalidated(
    'https://schema.org/cvdNumICUBedsOcc',
  );

  /// cvdNumTotBeds [Expects: https://schema.org/Number]
  ///
  /// numtotbeds - ALL HOSPITAL BEDS: Total number of all inpatient and outpatient beds, including all staffed, ICU, licensed, and overflow (surge) beds used for inpatients or outpatients.
  ///
  /// Can be used on: https://schema.org/CDCPMDRecord
  ///
  static const cvdNumTotBeds = IriTerm.prevalidated(
    'https://schema.org/cvdNumTotBeds',
  );

  /// cvdNumVent [Expects: https://schema.org/Number]
  ///
  /// numvent - MECHANICAL VENTILATORS: Total number of ventilators available.
  ///
  /// Can be used on: https://schema.org/CDCPMDRecord
  ///
  static const cvdNumVent = IriTerm.prevalidated(
    'https://schema.org/cvdNumVent',
  );

  /// cvdNumVentUse [Expects: https://schema.org/Number]
  ///
  /// numventuse - MECHANICAL VENTILATORS IN USE: Total number of ventilators in use.
  ///
  /// Can be used on: https://schema.org/CDCPMDRecord
  ///
  static const cvdNumVentUse = IriTerm.prevalidated(
    'https://schema.org/cvdNumVentUse',
  );

  /// datePosted [Expects: https://schema.org/Date, https://schema.org/DateTime]
  ///
  /// Publication date of an online listing.
  ///
  /// Can be used on: https://schema.org/CDCPMDRecord, https://schema.org/JobPosting, https://schema.org/RealEstateListing, https://schema.org/SpecialAnnouncement
  ///
  static const datePosted = IriTerm.prevalidated(
    'https://schema.org/datePosted',
  );

  /// disambiguatingDescription [Expects: https://schema.org/Text]
  ///
  /// A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation.
  ///
  /// Can be used on: https://schema.org/Thing
  ///
  static const disambiguatingDescription = IriTerm.prevalidated(
    'https://schema.org/disambiguatingDescription',
  );

  /// interactionCount
  ///
  /// This property is deprecated, alongside the UserInteraction types on which it depended.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const interactionCount = IriTerm.prevalidated(
    'https://schema.org/interactionCount',
  );

  /// name [Expects: https://schema.org/Text]
  ///
  /// The name of the item.
  ///
  /// Can be used on: https://schema.org/Thing
  ///
  static const name = IriTerm.prevalidated('https://schema.org/name');

  /// potentialAction [Expects: https://schema.org/Action]
  ///
  /// Indicates a potential Action, which describes an idealized action in which this thing would play an 'object' role.
  ///
  /// Can be used on: https://schema.org/Thing
  ///
  static const potentialAction = IriTerm.prevalidated(
    'https://schema.org/potentialAction',
  );

  /// sameAs [Expects: https://schema.org/URL]
  ///
  /// URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Wikidata entry, or official website.
  ///
  /// Can be used on: https://schema.org/Thing
  ///
  static const sameAs = IriTerm.prevalidated('https://schema.org/sameAs');

  /// url [Expects: https://schema.org/URL]
  ///
  /// URL of the item.
  ///
  /// Can be used on: https://schema.org/Thing
  ///
  static const url = IriTerm.prevalidated('https://schema.org/url');

  /// alternateName [Expects: https://schema.org/Text]
  ///
  /// An alias for the item.
  ///
  /// Can be used on: https://schema.org/Thing
  ///
  static const alternateName = IriTerm.prevalidated(
    'https://schema.org/alternateName',
  );

  /// mainEntityOfPage [Expects: https://schema.org/CreativeWork, https://schema.org/URL]
  ///
  /// Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See [background notes](/docs/datamodel.html#mainEntityBackground) for details.
  ///
  /// Can be used on: https://schema.org/Thing
  ///
  static const mainEntityOfPage = IriTerm.prevalidated(
    'https://schema.org/mainEntityOfPage',
  );

  /// subjectOf [Expects: https://schema.org/CreativeWork, https://schema.org/Event]
  ///
  /// A CreativeWork or Event about this Thing.
  ///
  /// Can be used on: https://schema.org/Thing
  ///
  static const subjectOf = IriTerm.prevalidated('https://schema.org/subjectOf');

  /// description [Expects: https://schema.org/Text, https://schema.org/TextObject]
  ///
  /// A description of the item.
  ///
  /// Can be used on: https://schema.org/Thing
  ///
  static const description = IriTerm.prevalidated(
    'https://schema.org/description',
  );

  /// image [Expects: https://schema.org/ImageObject, https://schema.org/URL]
  ///
  /// An image of the item. This can be a {[URL]} or a fully described {[ImageObject]}.
  ///
  /// Can be used on: https://schema.org/Thing
  ///
  static const image = IriTerm.prevalidated('https://schema.org/image');

  /// identifier [Expects: https://schema.org/PropertyValue, https://schema.org/Text, https://schema.org/URL]
  ///
  /// The identifier property represents any kind of identifier for any kind of {[Thing]}, such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
  ///
  ///
  /// Can be used on: https://schema.org/Thing
  ///
  static const identifier = IriTerm.prevalidated(
    'https://schema.org/identifier',
  );

  /// source
  ///
  ///
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const source = IriTerm.prevalidated('https://schema.org/source');

  /// type from rdf vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Class]
  ///
  /// The subject is an instance of a class.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfType = IriTerm.prevalidated(
    'http://www.w3.org/1999/02/22-rdf-syntax-ns#type',
  );

  /// value from rdf vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// Idiomatic property used for structured values.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfValue = IriTerm.prevalidated(
    'http://www.w3.org/1999/02/22-rdf-syntax-ns#value',
  );

  /// comment from rdfs vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// A description of the subject resource.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfsComment = IriTerm.prevalidated(
    'http://www.w3.org/2000/01/rdf-schema#comment',
  );

  /// label from rdfs vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// A human-readable name for the subject.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfsLabel = IriTerm.prevalidated(
    'http://www.w3.org/2000/01/rdf-schema#label',
  );

  /// seeAlso from rdfs vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// Further information about the subject resource.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfsSeeAlso = IriTerm.prevalidated(
    'http://www.w3.org/2000/01/rdf-schema#seeAlso',
  );

  /// isDefinedBy from rdfs vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// The definition of the subject resource.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfsIsDefinedBy = IriTerm.prevalidated(
    'http://www.w3.org/2000/01/rdf-schema#isDefinedBy',
  );

  /// member from rdfs vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// A member of the subject resource.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfsMember = IriTerm.prevalidated(
    'http://www.w3.org/2000/01/rdf-schema#member',
  );

  /// annotatedProperty from owl vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// The property that determines the predicate of an annotated axiom or annotated annotation.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const owlAnnotatedProperty = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#annotatedProperty',
  );

  /// annotatedSource from owl vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// The property that determines the subject of an annotated axiom or annotated annotation.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const owlAnnotatedSource = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#annotatedSource',
  );

  /// annotatedTarget from owl vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// The property that determines the object of an annotated axiom or annotated annotation.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const owlAnnotatedTarget = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#annotatedTarget',
  );

  /// deprecated from owl vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// The annotation property that indicates that a given entity has been deprecated.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const owlDeprecated = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#deprecated',
  );

  /// members from owl vocabulary [Expects: http://www.w3.org/1999/02/22-rdf-syntax-ns#List]
  ///
  /// The property that determines the collection of members in either a owl:AllDifferent, owl:AllDisjointClasses or owl:AllDisjointProperties axiom.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const owlMembers = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#members',
  );

  /// versionInfo from owl vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// The annotation property that provides version information for an ontology or another OWL construct.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const owlVersionInfo = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#versionInfo',
  );

  /// abstract_ from bibo vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// A summary of the resource.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const biboAbstract_ = IriTerm.prevalidated(
    'http://purl.org/ontology/bibo/abstract',
  );
}
