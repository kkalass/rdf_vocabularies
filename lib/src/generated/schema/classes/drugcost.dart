// Copyright (c) 2025, Klas Kala√ü <habbatical@gmail.com>
// All rights reserved. Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// GENERATED CODE - DO NOT MODIFY BY HAND
// Generated by VocabularyBuilder

import 'package:rdf_core/rdf_core.dart';

/// DrugCost class from Schema vocabulary
///
/// The cost per unit of a medical drug. Note that this type is not meant to represent the price in an offer of a drug for sale; see the Offer type for that. This type will typically be used to tag wholesale or average retail cost of a drug, or maximum reimbursable cost. Costs of medical drugs vary widely depending on how and where they are paid for, so while this type captures some of the variables, costs should be used with caution by consumers of this schema's markup.
///
/// Inherits from:
/// - MedicalEntity (https://schema.org/MedicalEntity)
/// - Resource (http://www.w3.org/2000/01/rdf-schema#Resource)
/// - Thing (https://schema.org/Thing)
///
/// This class provides access to all properties that can be used with DrugCost.
/// [Class Reference](https://schema.org/DrugCost)
///
/// [Vocabulary Reference](https://schema.org/)
class SchemaDrugCost {
  // Private constructor prevents instantiation
  const SchemaDrugCost._();

  /// IRI term for the DrugCost class
  /// Use this to specify that a resource is of this type.
  static const classIri = IriTerm.prevalidated('https://schema.org/DrugCost');

  /// additionalType [Expects: https://schema.org/Text, https://schema.org/URL]
  ///
  /// An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. Typically the value is a URI-identified RDF class, and in this case corresponds to the
  /// use of rdf:type in RDF. Text values can be used sparingly, for cases where useful information can be added without their being an appropriate schema to reference. In the case of text values, the class label should follow the schema.org <a href="https://schema.org/docs/styleguide.html">style guide</a>.
  ///
  /// Can be used on: https://schema.org/Thing
  ///
  static const additionalType = IriTerm.prevalidated(
    'https://schema.org/additionalType',
  );

  /// applicableLocation [Expects: https://schema.org/AdministrativeArea]
  ///
  /// The location in which the status applies.
  ///
  /// Can be used on: https://schema.org/DrugCost, https://schema.org/DrugLegalStatus
  ///
  static const applicableLocation = IriTerm.prevalidated(
    'https://schema.org/applicableLocation',
  );

  /// code [Expects: https://schema.org/MedicalCode]
  ///
  /// A medical code for the entity, taken from a controlled vocabulary or ontology such as ICD-9, DiseasesDB, MeSH, SNOMED-CT, RxNorm, etc.
  ///
  /// Can be used on: https://schema.org/MedicalEntity
  ///
  static const code = IriTerm.prevalidated('https://schema.org/code');

  /// costCategory [Expects: https://schema.org/DrugCostCategory]
  ///
  /// The category of cost, such as wholesale, retail, reimbursement cap, etc.
  ///
  /// Can be used on: https://schema.org/DrugCost
  ///
  static const costCategory = IriTerm.prevalidated(
    'https://schema.org/costCategory',
  );

  /// costCurrency [Expects: https://schema.org/Text]
  ///
  /// The currency (in 3-letter) of the drug cost. See: http://en.wikipedia.org/wiki/ISO_4217.
  ///
  /// Can be used on: https://schema.org/DrugCost
  ///
  static const costCurrency = IriTerm.prevalidated(
    'https://schema.org/costCurrency',
  );

  /// costOrigin [Expects: https://schema.org/Text]
  ///
  /// Additional details to capture the origin of the cost data. For example, 'Medicare Part B'.
  ///
  /// Can be used on: https://schema.org/DrugCost
  ///
  static const costOrigin = IriTerm.prevalidated(
    'https://schema.org/costOrigin',
  );

  /// costPerUnit [Expects: https://schema.org/Number, https://schema.org/QualitativeValue, https://schema.org/Text]
  ///
  /// The cost per unit of the drug.
  ///
  /// Can be used on: https://schema.org/DrugCost
  ///
  static const costPerUnit = IriTerm.prevalidated(
    'https://schema.org/costPerUnit',
  );

  /// disambiguatingDescription [Expects: https://schema.org/Text]
  ///
  /// A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation.
  ///
  /// Can be used on: https://schema.org/Thing
  ///
  static const disambiguatingDescription = IriTerm.prevalidated(
    'https://schema.org/disambiguatingDescription',
  );

  /// drugUnit [Expects: https://schema.org/Text]
  ///
  /// The unit in which the drug is measured, e.g. '5 mg tablet'.
  ///
  /// Can be used on: https://schema.org/Drug, https://schema.org/DrugCost
  ///
  static const drugUnit = IriTerm.prevalidated('https://schema.org/drugUnit');

  /// guideline [Expects: https://schema.org/MedicalGuideline]
  ///
  /// A medical guideline related to this entity.
  ///
  /// Can be used on: https://schema.org/MedicalEntity
  ///
  static const guideline = IriTerm.prevalidated('https://schema.org/guideline');

  /// interactionCount
  ///
  /// This property is deprecated, alongside the UserInteraction types on which it depended.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const interactionCount = IriTerm.prevalidated(
    'https://schema.org/interactionCount',
  );

  /// legalStatus [Expects: https://schema.org/DrugLegalStatus, https://schema.org/MedicalEnumeration, https://schema.org/Text]
  ///
  /// The drug or supplement's legal status, including any controlled substance schedules that apply.
  ///
  /// Can be used on: https://schema.org/DietarySupplement, https://schema.org/Drug, https://schema.org/MedicalEntity
  ///
  static const legalStatus = IriTerm.prevalidated(
    'https://schema.org/legalStatus',
  );

  /// medicineSystem [Expects: https://schema.org/MedicineSystem]
  ///
  /// The system of medicine that includes this MedicalEntity, for example 'evidence-based', 'homeopathic', 'chiropractic', etc.
  ///
  /// Can be used on: https://schema.org/MedicalEntity
  ///
  static const medicineSystem = IriTerm.prevalidated(
    'https://schema.org/medicineSystem',
  );

  /// name [Expects: https://schema.org/Text]
  ///
  /// The name of the item.
  ///
  /// Can be used on: https://schema.org/Thing
  ///
  static const name = IriTerm.prevalidated('https://schema.org/name');

  /// potentialAction [Expects: https://schema.org/Action]
  ///
  /// Indicates a potential Action, which describes an idealized action in which this thing would play an 'object' role.
  ///
  /// Can be used on: https://schema.org/Thing
  ///
  static const potentialAction = IriTerm.prevalidated(
    'https://schema.org/potentialAction',
  );

  /// recognizingAuthority [Expects: https://schema.org/Organization]
  ///
  /// If applicable, the organization that officially recognizes this entity as part of its endorsed system of medicine.
  ///
  /// Can be used on: https://schema.org/MedicalEntity
  ///
  static const recognizingAuthority = IriTerm.prevalidated(
    'https://schema.org/recognizingAuthority',
  );

  /// relevantSpecialty [Expects: https://schema.org/MedicalSpecialty]
  ///
  /// If applicable, a medical specialty in which this entity is relevant.
  ///
  /// Can be used on: https://schema.org/MedicalEntity
  ///
  static const relevantSpecialty = IriTerm.prevalidated(
    'https://schema.org/relevantSpecialty',
  );

  /// sameAs [Expects: https://schema.org/URL]
  ///
  /// URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Wikidata entry, or official website.
  ///
  /// Can be used on: https://schema.org/Thing
  ///
  static const sameAs = IriTerm.prevalidated('https://schema.org/sameAs');

  /// study [Expects: https://schema.org/MedicalStudy]
  ///
  /// A medical study or trial related to this entity.
  ///
  /// Can be used on: https://schema.org/MedicalEntity
  ///
  static const study = IriTerm.prevalidated('https://schema.org/study');

  /// url [Expects: https://schema.org/URL]
  ///
  /// URL of the item.
  ///
  /// Can be used on: https://schema.org/Thing
  ///
  static const url = IriTerm.prevalidated('https://schema.org/url');

  /// alternateName [Expects: https://schema.org/Text]
  ///
  /// An alias for the item.
  ///
  /// Can be used on: https://schema.org/Thing
  ///
  static const alternateName = IriTerm.prevalidated(
    'https://schema.org/alternateName',
  );

  /// funding [Expects: https://schema.org/Grant]
  ///
  /// A {[Grant]} that directly or indirectly provide funding or sponsorship for this item. See also {[ownershipFundingInfo]}.
  ///
  /// Can be used on: https://schema.org/BioChemEntity, https://schema.org/CreativeWork, https://schema.org/Event, https://schema.org/MedicalEntity, https://schema.org/Organization, https://schema.org/Person, https://schema.org/Product
  ///
  static const funding = IriTerm.prevalidated('https://schema.org/funding');

  /// mainEntityOfPage [Expects: https://schema.org/CreativeWork, https://schema.org/URL]
  ///
  /// Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See [background notes](/docs/datamodel.html#mainEntityBackground) for details.
  ///
  /// Can be used on: https://schema.org/Thing
  ///
  static const mainEntityOfPage = IriTerm.prevalidated(
    'https://schema.org/mainEntityOfPage',
  );

  /// subjectOf [Expects: https://schema.org/CreativeWork, https://schema.org/Event]
  ///
  /// A CreativeWork or Event about this Thing.
  ///
  /// Can be used on: https://schema.org/Thing
  ///
  static const subjectOf = IriTerm.prevalidated('https://schema.org/subjectOf');

  /// description [Expects: https://schema.org/Text, https://schema.org/TextObject]
  ///
  /// A description of the item.
  ///
  /// Can be used on: https://schema.org/Thing
  ///
  static const description = IriTerm.prevalidated(
    'https://schema.org/description',
  );

  /// image [Expects: https://schema.org/ImageObject, https://schema.org/URL]
  ///
  /// An image of the item. This can be a {[URL]} or a fully described {[ImageObject]}.
  ///
  /// Can be used on: https://schema.org/Thing
  ///
  static const image = IriTerm.prevalidated('https://schema.org/image');

  /// identifier [Expects: https://schema.org/PropertyValue, https://schema.org/Text, https://schema.org/URL]
  ///
  /// The identifier property represents any kind of identifier for any kind of {[Thing]}, such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
  ///
  ///
  /// Can be used on: https://schema.org/Thing
  ///
  static const identifier = IriTerm.prevalidated(
    'https://schema.org/identifier',
  );

  /// source
  ///
  ///
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const source = IriTerm.prevalidated('https://schema.org/source');

  /// type from rdf vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Class]
  ///
  /// The subject is an instance of a class.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfType = IriTerm.prevalidated(
    'http://www.w3.org/1999/02/22-rdf-syntax-ns#type',
  );

  /// value from rdf vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// Idiomatic property used for structured values.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfValue = IriTerm.prevalidated(
    'http://www.w3.org/1999/02/22-rdf-syntax-ns#value',
  );

  /// comment from rdfs vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// A description of the subject resource.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfsComment = IriTerm.prevalidated(
    'http://www.w3.org/2000/01/rdf-schema#comment',
  );

  /// label from rdfs vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// A human-readable name for the subject.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfsLabel = IriTerm.prevalidated(
    'http://www.w3.org/2000/01/rdf-schema#label',
  );

  /// seeAlso from rdfs vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// Further information about the subject resource.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfsSeeAlso = IriTerm.prevalidated(
    'http://www.w3.org/2000/01/rdf-schema#seeAlso',
  );

  /// isDefinedBy from rdfs vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// The definition of the subject resource.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfsIsDefinedBy = IriTerm.prevalidated(
    'http://www.w3.org/2000/01/rdf-schema#isDefinedBy',
  );

  /// member from rdfs vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// A member of the subject resource.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfsMember = IriTerm.prevalidated(
    'http://www.w3.org/2000/01/rdf-schema#member',
  );

  /// annotatedProperty from owl vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// The property that determines the predicate of an annotated axiom or annotated annotation.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const owlAnnotatedProperty = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#annotatedProperty',
  );

  /// annotatedSource from owl vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// The property that determines the subject of an annotated axiom or annotated annotation.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const owlAnnotatedSource = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#annotatedSource',
  );

  /// annotatedTarget from owl vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// The property that determines the object of an annotated axiom or annotated annotation.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const owlAnnotatedTarget = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#annotatedTarget',
  );

  /// deprecated from owl vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// The annotation property that indicates that a given entity has been deprecated.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const owlDeprecated = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#deprecated',
  );

  /// members from owl vocabulary [Expects: http://www.w3.org/1999/02/22-rdf-syntax-ns#List]
  ///
  /// The property that determines the collection of members in either a owl:AllDifferent, owl:AllDisjointClasses or owl:AllDisjointProperties axiom.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const owlMembers = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#members',
  );

  /// versionInfo from owl vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// The annotation property that provides version information for an ontology or another OWL construct.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const owlVersionInfo = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#versionInfo',
  );

  /// abstract_ from bibo vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// A summary of the resource.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const biboAbstract_ = IriTerm.prevalidated(
    'http://purl.org/ontology/bibo/abstract',
  );
}
