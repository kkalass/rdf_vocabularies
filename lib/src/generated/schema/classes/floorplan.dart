// Copyright (c) 2025, Klas Kalaß <habbatical@gmail.com>
// All rights reserved. Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// GENERATED CODE - DO NOT MODIFY BY HAND
// Generated by VocabularyBuilder

import 'package:rdf_core/rdf_core.dart';

/// FloorPlan class from Schema vocabulary
///
/// A FloorPlan is an explicit representation of a collection of similar accommodations, allowing the provision of common information (room counts, sizes, layout diagrams) and offers for rental or sale. In typical use, some {[ApartmentComplex]} has an {[accommodationFloorPlan]} which is a {[FloorPlan]}.  A FloorPlan is always in the context of a particular place, either a larger {[ApartmentComplex]} or a single {[Apartment]}. The visual/spatial aspects of a floor plan (i.e. room layout, [see wikipedia](https://en.wikipedia.org/wiki/Floor_plan)) can be indicated using {[image]}.
///
/// Inherits from:
/// - Intangible (https://schema.org/Intangible)
/// - Resource (http://www.w3.org/2000/01/rdf-schema#Resource)
/// - Thing (https://schema.org/Thing)
///
/// This class provides access to all properties that can be used with FloorPlan.
/// [Class Reference](https://schema.org/FloorPlan)
///
/// [Vocabulary Reference](https://schema.org/)
class SchemaFloorPlan {
  // Private constructor prevents instantiation
  const SchemaFloorPlan._();

  /// IRI term for the FloorPlan class
  /// Use this to specify that a resource is of this type.
  static const classIri = IriTerm.prevalidated('https://schema.org/FloorPlan');

  /// additionalType [Expects: https://schema.org/Text, https://schema.org/URL]
  ///
  /// An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. Typically the value is a URI-identified RDF class, and in this case corresponds to the
  /// use of rdf:type in RDF. Text values can be used sparingly, for cases where useful information can be added without their being an appropriate schema to reference. In the case of text values, the class label should follow the schema.org <a href="https://schema.org/docs/styleguide.html">style guide</a>.
  ///
  /// Can be used on: https://schema.org/Thing
  ///
  static const additionalType = IriTerm.prevalidated(
    'https://schema.org/additionalType',
  );

  /// amenityFeature [Expects: https://schema.org/LocationFeatureSpecification]
  ///
  /// An amenity feature (e.g. a characteristic or service) of the Accommodation. This generic property does not make a statement about whether the feature is included in an offer for the main accommodation or available at extra costs.
  ///
  /// Can be used on: https://schema.org/Accommodation, https://schema.org/FloorPlan, https://schema.org/LodgingBusiness, https://schema.org/Place
  ///
  static const amenityFeature = IriTerm.prevalidated(
    'https://schema.org/amenityFeature',
  );

  /// disambiguatingDescription [Expects: https://schema.org/Text]
  ///
  /// A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation.
  ///
  /// Can be used on: https://schema.org/Thing
  ///
  static const disambiguatingDescription = IriTerm.prevalidated(
    'https://schema.org/disambiguatingDescription',
  );

  /// floorSize [Expects: https://schema.org/QuantitativeValue]
  ///
  /// The size of the accommodation, e.g. in square meter or squarefoot.
  /// Typical unit code(s): MTK for square meter, FTK for square foot, or YDK for square yard.
  ///
  /// Can be used on: https://schema.org/Accommodation, https://schema.org/FloorPlan
  ///
  static const floorSize = IriTerm.prevalidated('https://schema.org/floorSize');

  /// interactionCount
  ///
  /// This property is deprecated, alongside the UserInteraction types on which it depended.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const interactionCount = IriTerm.prevalidated(
    'https://schema.org/interactionCount',
  );

  /// isPlanForApartment [Expects: https://schema.org/Accommodation]
  ///
  /// Indicates some accommodation that this floor plan describes.
  ///
  /// Can be used on: https://schema.org/FloorPlan
  ///
  static const isPlanForApartment = IriTerm.prevalidated(
    'https://schema.org/isPlanForApartment',
  );

  /// layoutImage [Expects: https://schema.org/ImageObject, https://schema.org/URL]
  ///
  /// A schematic image showing the floorplan layout.
  ///
  /// Can be used on: https://schema.org/FloorPlan
  ///
  static const layoutImage = IriTerm.prevalidated(
    'https://schema.org/layoutImage',
  );

  /// name [Expects: https://schema.org/Text]
  ///
  /// The name of the item.
  ///
  /// Can be used on: https://schema.org/Thing
  ///
  static const name = IriTerm.prevalidated('https://schema.org/name');

  /// numberOfAccommodationUnits [Expects: https://schema.org/QuantitativeValue]
  ///
  /// Indicates the total (available plus unavailable) number of accommodation units in an {[ApartmentComplex]}, or the number of accommodation units for a specific {[FloorPlan]} (within its specific {[ApartmentComplex]}). See also {[numberOfAvailableAccommodationUnits]}.
  ///
  /// Can be used on: https://schema.org/ApartmentComplex, https://schema.org/FloorPlan
  ///
  static const numberOfAccommodationUnits = IriTerm.prevalidated(
    'https://schema.org/numberOfAccommodationUnits',
  );

  /// numberOfAvailableAccommodationUnits [Expects: https://schema.org/QuantitativeValue]
  ///
  /// Indicates the number of available accommodation units in an {[ApartmentComplex]}, or the number of accommodation units for a specific {[FloorPlan]} (within its specific {[ApartmentComplex]}). See also {[numberOfAccommodationUnits]}.
  ///
  /// Can be used on: https://schema.org/ApartmentComplex, https://schema.org/FloorPlan
  ///
  static const numberOfAvailableAccommodationUnits = IriTerm.prevalidated(
    'https://schema.org/numberOfAvailableAccommodationUnits',
  );

  /// numberOfBathroomsTotal [Expects: https://schema.org/Integer]
  ///
  /// The total integer number of bathrooms in some {[Accommodation]}, following real estate conventions as [documented in RESO](https://ddwiki.reso.org/display/DDW17/BathroomsTotalInteger+Field): "The simple sum of the number of bathrooms. For example for a property with two Full Bathrooms and one Half Bathroom, the Bathrooms Total Integer will be 3.". See also {[numberOfRooms]}.
  ///
  /// Can be used on: https://schema.org/Accommodation, https://schema.org/FloorPlan
  ///
  static const numberOfBathroomsTotal = IriTerm.prevalidated(
    'https://schema.org/numberOfBathroomsTotal',
  );

  /// numberOfBedrooms [Expects: https://schema.org/Number, https://schema.org/QuantitativeValue]
  ///
  /// The total integer number of bedrooms in a some {[Accommodation]}, {[ApartmentComplex]} or {[FloorPlan]}.
  ///
  /// Can be used on: https://schema.org/Accommodation, https://schema.org/ApartmentComplex, https://schema.org/FloorPlan
  ///
  static const numberOfBedrooms = IriTerm.prevalidated(
    'https://schema.org/numberOfBedrooms',
  );

  /// numberOfFullBathrooms [Expects: https://schema.org/Number]
  ///
  /// Number of full bathrooms - The total number of full and ¾ bathrooms in an {[Accommodation]}. This corresponds to the [BathroomsFull field in RESO](https://ddwiki.reso.org/display/DDW17/BathroomsFull+Field).
  ///
  /// Can be used on: https://schema.org/Accommodation, https://schema.org/FloorPlan
  ///
  static const numberOfFullBathrooms = IriTerm.prevalidated(
    'https://schema.org/numberOfFullBathrooms',
  );

  /// numberOfPartialBathrooms [Expects: https://schema.org/Number]
  ///
  /// Number of partial bathrooms - The total number of half and ¼ bathrooms in an {[Accommodation]}. This corresponds to the [BathroomsPartial field in RESO](https://ddwiki.reso.org/display/DDW17/BathroomsPartial+Field).
  ///
  /// Can be used on: https://schema.org/Accommodation, https://schema.org/FloorPlan
  ///
  static const numberOfPartialBathrooms = IriTerm.prevalidated(
    'https://schema.org/numberOfPartialBathrooms',
  );

  /// numberOfRooms [Expects: https://schema.org/Number, https://schema.org/QuantitativeValue]
  ///
  /// The number of rooms (excluding bathrooms and closets) of the accommodation or lodging business.
  /// Typical unit code(s): ROM for room or C62 for no unit. The type of room can be put in the unitText property of the QuantitativeValue.
  ///
  /// Can be used on: https://schema.org/Accommodation, https://schema.org/Apartment, https://schema.org/FloorPlan, https://schema.org/House, https://schema.org/LodgingBusiness, https://schema.org/SingleFamilyResidence, https://schema.org/Suite
  ///
  static const numberOfRooms = IriTerm.prevalidated(
    'https://schema.org/numberOfRooms',
  );

  /// petsAllowed [Expects: https://schema.org/Boolean, https://schema.org/Text]
  ///
  /// Indicates whether pets are allowed to enter the accommodation or lodging business. More detailed information can be put in a text value.
  ///
  /// Can be used on: https://schema.org/Accommodation, https://schema.org/ApartmentComplex, https://schema.org/FloorPlan, https://schema.org/LodgingBusiness
  ///
  static const petsAllowed = IriTerm.prevalidated(
    'https://schema.org/petsAllowed',
  );

  /// potentialAction [Expects: https://schema.org/Action]
  ///
  /// Indicates a potential Action, which describes an idealized action in which this thing would play an 'object' role.
  ///
  /// Can be used on: https://schema.org/Thing
  ///
  static const potentialAction = IriTerm.prevalidated(
    'https://schema.org/potentialAction',
  );

  /// sameAs [Expects: https://schema.org/URL]
  ///
  /// URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Wikidata entry, or official website.
  ///
  /// Can be used on: https://schema.org/Thing
  ///
  static const sameAs = IriTerm.prevalidated('https://schema.org/sameAs');

  /// url [Expects: https://schema.org/URL]
  ///
  /// URL of the item.
  ///
  /// Can be used on: https://schema.org/Thing
  ///
  static const url = IriTerm.prevalidated('https://schema.org/url');

  /// alternateName [Expects: https://schema.org/Text]
  ///
  /// An alias for the item.
  ///
  /// Can be used on: https://schema.org/Thing
  ///
  static const alternateName = IriTerm.prevalidated(
    'https://schema.org/alternateName',
  );

  /// mainEntityOfPage [Expects: https://schema.org/CreativeWork, https://schema.org/URL]
  ///
  /// Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See [background notes](/docs/datamodel.html#mainEntityBackground) for details.
  ///
  /// Can be used on: https://schema.org/Thing
  ///
  static const mainEntityOfPage = IriTerm.prevalidated(
    'https://schema.org/mainEntityOfPage',
  );

  /// subjectOf [Expects: https://schema.org/CreativeWork, https://schema.org/Event]
  ///
  /// A CreativeWork or Event about this Thing.
  ///
  /// Can be used on: https://schema.org/Thing
  ///
  static const subjectOf = IriTerm.prevalidated('https://schema.org/subjectOf');

  /// description [Expects: https://schema.org/Text, https://schema.org/TextObject]
  ///
  /// A description of the item.
  ///
  /// Can be used on: https://schema.org/Thing
  ///
  static const description = IriTerm.prevalidated(
    'https://schema.org/description',
  );

  /// image [Expects: https://schema.org/ImageObject, https://schema.org/URL]
  ///
  /// An image of the item. This can be a {[URL]} or a fully described {[ImageObject]}.
  ///
  /// Can be used on: https://schema.org/Thing
  ///
  static const image = IriTerm.prevalidated('https://schema.org/image');

  /// identifier [Expects: https://schema.org/PropertyValue, https://schema.org/Text, https://schema.org/URL]
  ///
  /// The identifier property represents any kind of identifier for any kind of {[Thing]}, such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
  ///
  ///
  /// Can be used on: https://schema.org/Thing
  ///
  static const identifier = IriTerm.prevalidated(
    'https://schema.org/identifier',
  );

  /// source
  ///
  ///
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const source = IriTerm.prevalidated('https://schema.org/source');

  /// type from rdf vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Class]
  ///
  /// The subject is an instance of a class.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfType = IriTerm.prevalidated(
    'http://www.w3.org/1999/02/22-rdf-syntax-ns#type',
  );

  /// value from rdf vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// Idiomatic property used for structured values.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfValue = IriTerm.prevalidated(
    'http://www.w3.org/1999/02/22-rdf-syntax-ns#value',
  );

  /// comment from rdfs vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// A description of the subject resource.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfsComment = IriTerm.prevalidated(
    'http://www.w3.org/2000/01/rdf-schema#comment',
  );

  /// label from rdfs vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// A human-readable name for the subject.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfsLabel = IriTerm.prevalidated(
    'http://www.w3.org/2000/01/rdf-schema#label',
  );

  /// seeAlso from rdfs vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// Further information about the subject resource.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfsSeeAlso = IriTerm.prevalidated(
    'http://www.w3.org/2000/01/rdf-schema#seeAlso',
  );

  /// isDefinedBy from rdfs vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// The definition of the subject resource.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfsIsDefinedBy = IriTerm.prevalidated(
    'http://www.w3.org/2000/01/rdf-schema#isDefinedBy',
  );

  /// member from rdfs vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// A member of the subject resource.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfsMember = IriTerm.prevalidated(
    'http://www.w3.org/2000/01/rdf-schema#member',
  );

  /// annotatedProperty from owl vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// The property that determines the predicate of an annotated axiom or annotated annotation.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const owlAnnotatedProperty = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#annotatedProperty',
  );

  /// annotatedSource from owl vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// The property that determines the subject of an annotated axiom or annotated annotation.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const owlAnnotatedSource = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#annotatedSource',
  );

  /// annotatedTarget from owl vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// The property that determines the object of an annotated axiom or annotated annotation.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const owlAnnotatedTarget = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#annotatedTarget',
  );

  /// deprecated from owl vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// The annotation property that indicates that a given entity has been deprecated.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const owlDeprecated = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#deprecated',
  );

  /// members from owl vocabulary [Expects: http://www.w3.org/1999/02/22-rdf-syntax-ns#List]
  ///
  /// The property that determines the collection of members in either a owl:AllDifferent, owl:AllDisjointClasses or owl:AllDisjointProperties axiom.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const owlMembers = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#members',
  );

  /// versionInfo from owl vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// The annotation property that provides version information for an ontology or another OWL construct.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const owlVersionInfo = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#versionInfo',
  );

  /// abstract_ from bibo vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// A summary of the resource.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const biboAbstract_ = IriTerm.prevalidated(
    'http://purl.org/ontology/bibo/abstract',
  );
}
