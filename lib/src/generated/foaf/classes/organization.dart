// Copyright (c) 2025, Klas Kala√ü <habbatical@gmail.com>
// All rights reserved. Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// GENERATED CODE - DO NOT MODIFY BY HAND
// Generated by VocabularyBuilder

import 'package:rdf_core/rdf_core.dart';

/// Organization class from Foaf vocabulary
///
/// An organization.
///
/// Inherits from:
/// - Agent (http://xmlns.com/foaf/0.1/Agent)
///
/// This class provides access to all properties that can be used with Organization.
/// [Class Reference](http://xmlns.com/foaf/0.1/Organization)
///
/// [Vocabulary Reference](http://xmlns.com/foaf/0.1/)
class FoafOrganization {
  // Private constructor prevents instantiation
  const FoafOrganization._();

  /// IRI term for the Organization class
  /// Use this to specify that a resource is of this type.
  static const classIri = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/Organization',
  );

  /// mbox [Expects: http://www.w3.org/2002/07/owl#Thing]
  ///
  /// A
  /// personal mailbox, ie. an Internet mailbox associated with exactly one owner, the first owner of this mailbox. This is a 'static inverse functional property', in that  there is (across time and change) at most one individual that ever has any particular value for foaf:mbox.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const mbox = IriTerm.prevalidated('http://xmlns.com/foaf/0.1/mbox');

  /// mbox_sha1sum [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// The sha1sum of the URI of an Internet mailbox associated with exactly one owner, the  first owner of the mailbox.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const mbox_sha1sum = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/mbox_sha1sum',
  );

  /// gender [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// The gender of this Agent (typically but not necessarily 'male' or 'female').
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const gender = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/gender',
  );

  /// dnaChecksum [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// A checksum for the DNA of some thing. Joke.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const dnaChecksum = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/dnaChecksum',
  );

  /// title
  ///
  /// Title (Mr, Mrs, Ms, Dr. etc)
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const title = IriTerm.prevalidated('http://xmlns.com/foaf/0.1/title');

  /// nick
  ///
  /// A short informal nickname characterising an agent (includes login identifiers, IRC and other chat nicknames).
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const nick = IriTerm.prevalidated('http://xmlns.com/foaf/0.1/nick');

  /// jabberID [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// A jabber ID for something.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const jabberID = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/jabberID',
  );

  /// aimChatID [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// An AIM chat ID
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const aimChatID = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/aimChatID',
  );

  /// skypeID [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// A Skype ID
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const skypeID = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/skypeID',
  );

  /// icqChatID [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// An ICQ chat ID
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const icqChatID = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/icqChatID',
  );

  /// yahooChatID [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// A Yahoo chat ID
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const yahooChatID = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/yahooChatID',
  );

  /// msnChatID [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// An MSN chat ID
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const msnChatID = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/msnChatID',
  );

  /// givenName
  ///
  /// The given name of some person.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const givenName = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/givenName',
  );

  /// givenname
  ///
  /// The given name of some person.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const givenname = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/givenname',
  );

  /// phone
  ///
  /// A phone,  specified using fully qualified tel: URI scheme (refs: http://www.w3.org/Addressing/schemes.html#tel).
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const phone = IriTerm.prevalidated('http://xmlns.com/foaf/0.1/phone');

  /// weblog [Expects: http://xmlns.com/foaf/0.1/Document]
  ///
  /// A weblog of some thing (whether person, group, company etc.).
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const weblog = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/weblog',
  );

  /// openid [Expects: http://xmlns.com/foaf/0.1/Document]
  ///
  /// An OpenID for an Agent.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const openid = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/openid',
  );

  /// tipjar [Expects: http://xmlns.com/foaf/0.1/Document]
  ///
  /// A tipjar document for this agent, describing means for payment and reward.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const tipjar = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/tipjar',
  );

  /// made [Expects: http://www.w3.org/2002/07/owl#Thing]
  ///
  /// Something that was made by this agent.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const made = IriTerm.prevalidated('http://xmlns.com/foaf/0.1/made');

  /// interest [Expects: http://xmlns.com/foaf/0.1/Document]
  ///
  /// A page about a topic of interest to this person.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const interest = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/interest',
  );

  /// topic_interest [Expects: http://www.w3.org/2002/07/owl#Thing]
  ///
  /// A thing of interest to this person.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const topic_interest = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/topic_interest',
  );

  /// account [Expects: http://xmlns.com/foaf/0.1/OnlineAccount]
  ///
  /// Indicates an account held by this agent.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const account = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/account',
  );

  /// holdsAccount [Expects: http://xmlns.com/foaf/0.1/OnlineAccount]
  ///
  /// Indicates an account held by this agent.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const holdsAccount = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/holdsAccount',
  );

  /// membershipClass
  ///
  /// Indicates the class of individuals that are a member of a Group
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const membershipClass = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/membershipClass',
  );

  /// birthday [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// The birthday of this Agent, represented in mm-dd string form, eg. '12-31'.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const birthday = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/birthday',
  );

  /// age [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// The age in years of some agent.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const age = IriTerm.prevalidated('http://xmlns.com/foaf/0.1/age');

  /// status [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// A string expressing what the user is happy for the general public (normally) to know about their current activity.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const status = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/status',
  );

  /// interviewee from bibo vocabulary [Expects: http://xmlns.com/foaf/0.1/Agent]
  ///
  /// An agent that is interviewed by another agent.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const biboInterviewee = IriTerm.prevalidated(
    'http://purl.org/ontology/bibo/interviewee',
  );

  /// interviewer from bibo vocabulary [Expects: http://xmlns.com/foaf/0.1/Agent]
  ///
  /// An agent that interview another agent.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const biboInterviewer = IriTerm.prevalidated(
    'http://purl.org/ontology/bibo/interviewer',
  );

  /// prefixName from bibo vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// The prefix of a name
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const biboPrefixName = IriTerm.prevalidated(
    'http://purl.org/ontology/bibo/prefixName',
  );

  /// suffixName from bibo vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// The suffix of a name
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const biboSuffixName = IriTerm.prevalidated(
    'http://purl.org/ontology/bibo/suffixName',
  );
}
