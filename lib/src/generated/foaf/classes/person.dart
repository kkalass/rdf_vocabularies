// Copyright (c) 2025, Klas Kala√ü <habbatical@gmail.com>
// All rights reserved. Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// GENERATED CODE - DO NOT MODIFY BY HAND
// Generated by VocabularyBuilder

import 'package:rdf_core/rdf_core.dart';

/// Person class from Foaf vocabulary
///
/// A person.
///
/// Inherits from:
/// - Agent (http://xmlns.com/foaf/0.1/Agent)
/// - SpatialThing (http://www.w3.org/2003/01/geo/wgs84_pos#SpatialThing)
/// - Thing (http://schema.org/Thing)
///
/// Equivalent to:
/// - Person (http://schema.org/Person)
/// - Person (http://www.w3.org/2000/10/swap/pim/contact#Person)
///
/// This class provides access to all properties that can be used with Person.
/// [Class Reference](http://xmlns.com/foaf/0.1/Person)
///
/// [Vocabulary Reference](http://xmlns.com/foaf/0.1/)
class FoafPerson {
  // Private constructor prevents instantiation
  const FoafPerson._();

  /// IRI term for the Person class
  /// Use this to specify that a resource is of this type.
  static const classIri = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/Person',
  );

  /// mbox [Expects: http://www.w3.org/2002/07/owl#Thing]
  ///
  /// A
  /// personal mailbox, ie. an Internet mailbox associated with exactly one owner, the first owner of this mailbox. This is a 'static inverse functional property', in that  there is (across time and change) at most one individual that ever has any particular value for foaf:mbox.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const mbox = IriTerm.prevalidated('http://xmlns.com/foaf/0.1/mbox');

  /// mbox_sha1sum [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// The sha1sum of the URI of an Internet mailbox associated with exactly one owner, the  first owner of the mailbox.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const mbox_sha1sum = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/mbox_sha1sum',
  );

  /// gender [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// The gender of this Agent (typically but not necessarily 'male' or 'female').
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const gender = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/gender',
  );

  /// geekcode [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// A textual geekcode for this person, see http://www.geekcode.com/geek.html
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Person
  ///
  static const geekcode = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/geekcode',
  );

  /// dnaChecksum [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// A checksum for the DNA of some thing. Joke.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const dnaChecksum = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/dnaChecksum',
  );

  /// based_near [Expects: http://www.w3.org/2003/01/geo/wgs84_pos#SpatialThing]
  ///
  /// A location that something is based near, for some broadly human notion of near.
  ///
  /// Can be used on: http://www.w3.org/2003/01/geo/wgs84_pos#SpatialThing
  ///
  static const based_near = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/based_near',
  );

  /// title
  ///
  /// Title (Mr, Mrs, Ms, Dr. etc)
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const title = IriTerm.prevalidated('http://xmlns.com/foaf/0.1/title');

  /// nick
  ///
  /// A short informal nickname characterising an agent (includes login identifiers, IRC and other chat nicknames).
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const nick = IriTerm.prevalidated('http://xmlns.com/foaf/0.1/nick');

  /// jabberID [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// A jabber ID for something.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const jabberID = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/jabberID',
  );

  /// aimChatID [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// An AIM chat ID
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const aimChatID = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/aimChatID',
  );

  /// skypeID [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// A Skype ID
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const skypeID = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/skypeID',
  );

  /// icqChatID [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// An ICQ chat ID
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const icqChatID = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/icqChatID',
  );

  /// yahooChatID [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// A Yahoo chat ID
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const yahooChatID = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/yahooChatID',
  );

  /// msnChatID [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// An MSN chat ID
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const msnChatID = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/msnChatID',
  );

  /// firstName [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// The first name of a person.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Person
  ///
  static const firstName = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/firstName',
  );

  /// lastName [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// The last name of a person.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Person
  ///
  static const lastName = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/lastName',
  );

  /// givenName
  ///
  /// The given name of some person.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const givenName = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/givenName',
  );

  /// givenname
  ///
  /// The given name of some person.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const givenname = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/givenname',
  );

  /// surname [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// The surname of some person.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Person
  ///
  static const surname = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/surname',
  );

  /// family_name [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// The family name of some person.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Person, http://xmlns.com/foaf/0.1/Person
  ///
  static const family_name = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/family_name',
  );

  /// familyName [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// The family name of some person.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Person, http://xmlns.com/foaf/0.1/Person
  ///
  static const familyName = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/familyName',
  );

  /// phone
  ///
  /// A phone,  specified using fully qualified tel: URI scheme (refs: http://www.w3.org/Addressing/schemes.html#tel).
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const phone = IriTerm.prevalidated('http://xmlns.com/foaf/0.1/phone');

  /// weblog [Expects: http://xmlns.com/foaf/0.1/Document]
  ///
  /// A weblog of some thing (whether person, group, company etc.).
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const weblog = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/weblog',
  );

  /// openid [Expects: http://xmlns.com/foaf/0.1/Document]
  ///
  /// An OpenID for an Agent.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const openid = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/openid',
  );

  /// tipjar [Expects: http://xmlns.com/foaf/0.1/Document]
  ///
  /// A tipjar document for this agent, describing means for payment and reward.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const tipjar = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/tipjar',
  );

  /// plan [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// A .plan comment, in the tradition of finger and '.plan' files.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Person
  ///
  static const plan = IriTerm.prevalidated('http://xmlns.com/foaf/0.1/plan');

  /// made [Expects: http://www.w3.org/2002/07/owl#Thing]
  ///
  /// Something that was made by this agent.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const made = IriTerm.prevalidated('http://xmlns.com/foaf/0.1/made');

  /// img [Expects: http://xmlns.com/foaf/0.1/Image]
  ///
  /// An image that can be used to represent some thing (ie. those depictions which are particularly representative of something, eg. one's photo on a homepage).
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Person
  ///
  static const img = IriTerm.prevalidated('http://xmlns.com/foaf/0.1/img');

  /// myersBriggs [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// A Myers Briggs (MBTI) personality classification.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Person
  ///
  static const myersBriggs = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/myersBriggs',
  );

  /// workplaceHomepage [Expects: http://xmlns.com/foaf/0.1/Document]
  ///
  /// A workplace homepage of some person; the homepage of an organization they work for.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Person
  ///
  static const workplaceHomepage = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/workplaceHomepage',
  );

  /// workInfoHomepage [Expects: http://xmlns.com/foaf/0.1/Document]
  ///
  /// A work info homepage of some person; a page about their work for some organization.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Person
  ///
  static const workInfoHomepage = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/workInfoHomepage',
  );

  /// schoolHomepage [Expects: http://xmlns.com/foaf/0.1/Document]
  ///
  /// A homepage of a school attended by the person.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Person
  ///
  static const schoolHomepage = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/schoolHomepage',
  );

  /// knows [Expects: http://xmlns.com/foaf/0.1/Person]
  ///
  /// A person known by this person (indicating some level of reciprocated interaction between the parties).
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Person
  ///
  static const knows = IriTerm.prevalidated('http://xmlns.com/foaf/0.1/knows');

  /// interest [Expects: http://xmlns.com/foaf/0.1/Document]
  ///
  /// A page about a topic of interest to this person.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const interest = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/interest',
  );

  /// topic_interest [Expects: http://www.w3.org/2002/07/owl#Thing]
  ///
  /// A thing of interest to this person.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const topic_interest = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/topic_interest',
  );

  /// publications [Expects: http://xmlns.com/foaf/0.1/Document]
  ///
  /// A link to the publications of this person.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Person
  ///
  static const publications = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/publications',
  );

  /// currentProject [Expects: http://www.w3.org/2002/07/owl#Thing]
  ///
  /// A current project this person works on.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Person
  ///
  static const currentProject = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/currentProject',
  );

  /// pastProject [Expects: http://www.w3.org/2002/07/owl#Thing]
  ///
  /// A project this person has previously worked on.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Person
  ///
  static const pastProject = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/pastProject',
  );

  /// account [Expects: http://xmlns.com/foaf/0.1/OnlineAccount]
  ///
  /// Indicates an account held by this agent.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const account = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/account',
  );

  /// holdsAccount [Expects: http://xmlns.com/foaf/0.1/OnlineAccount]
  ///
  /// Indicates an account held by this agent.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const holdsAccount = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/holdsAccount',
  );

  /// membershipClass
  ///
  /// Indicates the class of individuals that are a member of a Group
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const membershipClass = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/membershipClass',
  );

  /// birthday [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// The birthday of this Agent, represented in mm-dd string form, eg. '12-31'.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const birthday = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/birthday',
  );

  /// age [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// The age in years of some agent.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const age = IriTerm.prevalidated('http://xmlns.com/foaf/0.1/age');

  /// status [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// A string expressing what the user is happy for the general public (normally) to know about their current activity.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const status = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/status',
  );

  /// additionalName from schemahttp vocabulary [Expects: http://schema.org/Text]
  ///
  /// An additional name for a Person, can be used for a middle name.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const schemahttpAdditionalName = IriTerm.prevalidated(
    'http://schema.org/additionalName',
  );

  /// additionalType from schemahttp vocabulary [Expects: http://schema.org/Text, http://schema.org/URL]
  ///
  /// An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. Typically the value is a URI-identified RDF class, and in this case corresponds to the
  /// use of rdf:type in RDF. Text values can be used sparingly, for cases where useful information can be added without their being an appropriate schema to reference. In the case of text values, the class label should follow the schema.org <a href="http://schema.org/docs/styleguide.html">style guide</a>.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const schemahttpAdditionalType = IriTerm.prevalidated(
    'http://schema.org/additionalType',
  );

  /// address from schemahttp vocabulary [Expects: http://schema.org/PostalAddress, http://schema.org/Text]
  ///
  /// Physical address of the item.
  ///
  /// Can be used on: http://schema.org/GeoCoordinates, http://schema.org/GeoShape, http://schema.org/Organization, http://schema.org/Person, http://schema.org/Place
  ///
  static const schemahttpAddress = IriTerm.prevalidated(
    'http://schema.org/address',
  );

  /// affiliation from schemahttp vocabulary [Expects: http://schema.org/Organization]
  ///
  /// An organization that this person is affiliated with. For example, a school/university, a club, or a team.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const schemahttpAffiliation = IriTerm.prevalidated(
    'http://schema.org/affiliation',
  );

  /// agentInteractionStatistic from schemahttp vocabulary [Expects: http://schema.org/InteractionCounter]
  ///
  /// The number of completed interactions for this entity, in a particular role (the 'agent'), in a particular action (indicated in the statistic), and in a particular context (i.e. interactionService).
  ///
  /// Can be used on: http://schema.org/Organization, http://schema.org/Person
  ///
  static const schemahttpAgentInteractionStatistic = IriTerm.prevalidated(
    'http://schema.org/agentInteractionStatistic',
  );

  /// awards from schemahttp vocabulary [Expects: http://schema.org/Text]
  ///
  /// Awards won by or for this item.
  ///
  /// Can be used on: http://schema.org/CreativeWork, http://schema.org/Organization, http://schema.org/Person, http://schema.org/Product
  ///
  static const schemahttpAwards = IriTerm.prevalidated(
    'http://schema.org/awards',
  );

  /// birthDate from schemahttp vocabulary [Expects: http://schema.org/Date]
  ///
  /// Date of birth.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const schemahttpBirthDate = IriTerm.prevalidated(
    'http://schema.org/birthDate',
  );

  /// birthPlace from schemahttp vocabulary [Expects: http://schema.org/Place]
  ///
  /// The place where the person was born.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const schemahttpBirthPlace = IriTerm.prevalidated(
    'http://schema.org/birthPlace',
  );

  /// brand from schemahttp vocabulary [Expects: http://schema.org/Brand, http://schema.org/Organization]
  ///
  /// The brand(s) associated with a product or service, or the brand(s) maintained by an organization or business person.
  ///
  /// Can be used on: http://schema.org/Organization, http://schema.org/Person, http://schema.org/Product, http://schema.org/Service
  ///
  static const schemahttpBrand = IriTerm.prevalidated(
    'http://schema.org/brand',
  );

  /// callSign from schemahttp vocabulary [Expects: http://schema.org/Text]
  ///
  /// A [callsign](https://en.wikipedia.org/wiki/Call_sign), as used in broadcasting and radio communications to identify people, radio and TV stations, or vehicles.
  ///
  /// Can be used on: http://schema.org/BroadcastService, http://schema.org/Person, http://schema.org/Vehicle
  ///
  static const schemahttpCallSign = IriTerm.prevalidated(
    'http://schema.org/callSign',
  );

  /// children from schemahttp vocabulary [Expects: http://schema.org/Person]
  ///
  /// A child of the person.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const schemahttpChildren = IriTerm.prevalidated(
    'http://schema.org/children',
  );

  /// colleagues from schemahttp vocabulary [Expects: http://schema.org/Person]
  ///
  /// A colleague of the person.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const schemahttpColleagues = IriTerm.prevalidated(
    'http://schema.org/colleagues',
  );

  /// contactPoints from schemahttp vocabulary [Expects: http://schema.org/ContactPoint]
  ///
  /// A contact point for a person or organization.
  ///
  /// Can be used on: http://schema.org/Organization, http://schema.org/Person
  ///
  static const schemahttpContactPoints = IriTerm.prevalidated(
    'http://schema.org/contactPoints',
  );

  /// deathDate from schemahttp vocabulary [Expects: http://schema.org/Date]
  ///
  /// Date of death.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const schemahttpDeathDate = IriTerm.prevalidated(
    'http://schema.org/deathDate',
  );

  /// deathPlace from schemahttp vocabulary [Expects: http://schema.org/Place]
  ///
  /// The place where the person died.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const schemahttpDeathPlace = IriTerm.prevalidated(
    'http://schema.org/deathPlace',
  );

  /// disambiguatingDescription from schemahttp vocabulary [Expects: http://schema.org/Text]
  ///
  /// A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const schemahttpDisambiguatingDescription = IriTerm.prevalidated(
    'http://schema.org/disambiguatingDescription',
  );

  /// duns from schemahttp vocabulary [Expects: http://schema.org/Text]
  ///
  /// The Dun & Bradstreet DUNS number for identifying an organization or business person.
  ///
  /// Can be used on: http://schema.org/Organization, http://schema.org/Person
  ///
  static const schemahttpDuns = IriTerm.prevalidated('http://schema.org/duns');

  /// email from schemahttp vocabulary [Expects: http://schema.org/Text]
  ///
  /// Email address.
  ///
  /// Can be used on: http://schema.org/ContactPoint, http://schema.org/Organization, http://schema.org/Person
  ///
  static const schemahttpEmail = IriTerm.prevalidated(
    'http://schema.org/email',
  );

  /// familyName from schemahttp vocabulary [Expects: http://schema.org/Text]
  ///
  /// Family name. In the U.S., the last name of a Person.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const schemahttpFamilyName = IriTerm.prevalidated(
    'http://schema.org/familyName',
  );

  /// faxNumber from schemahttp vocabulary [Expects: http://schema.org/Text]
  ///
  /// The fax number.
  ///
  /// Can be used on: http://schema.org/ContactPoint, http://schema.org/Organization, http://schema.org/Person, http://schema.org/Place
  ///
  static const schemahttpFaxNumber = IriTerm.prevalidated(
    'http://schema.org/faxNumber',
  );

  /// follows from schemahttp vocabulary [Expects: http://schema.org/Person]
  ///
  /// The most generic uni-directional social relation.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const schemahttpFollows = IriTerm.prevalidated(
    'http://schema.org/follows',
  );

  /// funder from schemahttp vocabulary [Expects: http://schema.org/Organization, http://schema.org/Person]
  ///
  /// A person or organization that supports (sponsors) something through some kind of financial contribution.
  ///
  /// Can be used on: http://schema.org/CreativeWork, http://schema.org/Event, http://schema.org/Grant, http://schema.org/MonetaryGrant, http://schema.org/Organization, http://schema.org/Person
  ///
  static const schemahttpFunder = IriTerm.prevalidated(
    'http://schema.org/funder',
  );

  /// gender from schemahttp vocabulary [Expects: http://schema.org/GenderType, http://schema.org/Text]
  ///
  /// Gender of something, typically a {[Person]}, but possibly also fictional characters, animals, etc. While http://schema.org/Male and http://schema.org/Female may be used, text strings are also acceptable for people who do not identify as a binary gender. The {[gender]} property can also be used in an extended sense to cover e.g. the gender of sports teams. As with the gender of individuals, we do not try to enumerate all possibilities. A mixed-gender {[SportsTeam]} can be indicated with a text value of "Mixed".
  ///
  /// Can be used on: http://schema.org/Person, http://schema.org/SportsTeam
  ///
  static const schemahttpGender = IriTerm.prevalidated(
    'http://schema.org/gender',
  );

  /// givenName from schemahttp vocabulary [Expects: http://schema.org/Text]
  ///
  /// Given name. In the U.S., the first name of a Person.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const schemahttpGivenName = IriTerm.prevalidated(
    'http://schema.org/givenName',
  );

  /// globalLocationNumber from schemahttp vocabulary [Expects: http://schema.org/Text]
  ///
  /// The [Global Location Number](http://www.gs1.org/gln) (GLN, sometimes also referred to as International Location Number or ILN) of the respective organization, person, or place. The GLN is a 13-digit number used to identify parties and physical locations.
  ///
  /// Can be used on: http://schema.org/Organization, http://schema.org/Person, http://schema.org/Place
  ///
  static const schemahttpGlobalLocationNumber = IriTerm.prevalidated(
    'http://schema.org/globalLocationNumber',
  );

  /// hasCertification from schemahttp vocabulary [Expects: http://schema.org/Certification]
  ///
  /// Certification information about a product, organization, service, place, or person.
  ///
  /// Can be used on: http://schema.org/Organization, http://schema.org/Person, http://schema.org/Place, http://schema.org/Product, http://schema.org/Service
  ///
  static const schemahttpHasCertification = IriTerm.prevalidated(
    'http://schema.org/hasCertification',
  );

  /// hasCredential from schemahttp vocabulary [Expects: http://schema.org/EducationalOccupationalCredential]
  ///
  /// A credential awarded to the Person or Organization.
  ///
  /// Can be used on: http://schema.org/Organization, http://schema.org/Person
  ///
  static const schemahttpHasCredential = IriTerm.prevalidated(
    'http://schema.org/hasCredential',
  );

  /// hasOccupation from schemahttp vocabulary [Expects: http://schema.org/Occupation]
  ///
  /// The Person's occupation. For past professions, use Role for expressing dates.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const schemahttpHasOccupation = IriTerm.prevalidated(
    'http://schema.org/hasOccupation',
  );

  /// hasOfferCatalog from schemahttp vocabulary [Expects: http://schema.org/OfferCatalog]
  ///
  /// Indicates an OfferCatalog listing for this Organization, Person, or Service.
  ///
  /// Can be used on: http://schema.org/Organization, http://schema.org/Person, http://schema.org/Service
  ///
  static const schemahttpHasOfferCatalog = IriTerm.prevalidated(
    'http://schema.org/hasOfferCatalog',
  );

  /// hasPOS from schemahttp vocabulary [Expects: http://schema.org/Place]
  ///
  /// Points-of-Sales operated by the organization or person.
  ///
  /// Can be used on: http://schema.org/Organization, http://schema.org/Person
  ///
  static const schemahttpHasPOS = IriTerm.prevalidated(
    'http://schema.org/hasPOS',
  );

  /// height from schemahttp vocabulary [Expects: http://schema.org/Distance, http://schema.org/QuantitativeValue]
  ///
  /// The height of the item.
  ///
  /// Can be used on: http://schema.org/MediaObject, http://schema.org/OfferShippingDetails, http://schema.org/Person, http://schema.org/Product, http://schema.org/ShippingConditions, http://schema.org/VisualArtwork
  ///
  static const schemahttpHeight = IriTerm.prevalidated(
    'http://schema.org/height',
  );

  /// homeLocation from schemahttp vocabulary [Expects: http://schema.org/ContactPoint, http://schema.org/Place]
  ///
  /// A contact location for a person's residence.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const schemahttpHomeLocation = IriTerm.prevalidated(
    'http://schema.org/homeLocation',
  );

  /// honorificPrefix from schemahttp vocabulary [Expects: http://schema.org/Text]
  ///
  /// An honorific prefix preceding a Person's name such as Dr/Mrs/Mr.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const schemahttpHonorificPrefix = IriTerm.prevalidated(
    'http://schema.org/honorificPrefix',
  );

  /// honorificSuffix from schemahttp vocabulary [Expects: http://schema.org/Text]
  ///
  /// An honorific suffix following a Person's name such as M.D./PhD/MSCSW.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const schemahttpHonorificSuffix = IriTerm.prevalidated(
    'http://schema.org/honorificSuffix',
  );

  /// isicV4 from schemahttp vocabulary [Expects: http://schema.org/Text]
  ///
  /// The International Standard of Industrial Classification of All Economic Activities (ISIC), Revision 4 code for a particular organization, business person, or place.
  ///
  /// Can be used on: http://schema.org/Organization, http://schema.org/Person, http://schema.org/Place
  ///
  static const schemahttpIsicV4 = IriTerm.prevalidated(
    'http://schema.org/isicV4',
  );

  /// jobTitle from schemahttp vocabulary [Expects: http://schema.org/DefinedTerm, http://schema.org/Text]
  ///
  /// The job title of the person (for example, Financial Manager).
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const schemahttpJobTitle = IriTerm.prevalidated(
    'http://schema.org/jobTitle',
  );

  /// knows from schemahttp vocabulary [Expects: http://schema.org/Person]
  ///
  /// The most generic bi-directional social/work relation.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const schemahttpKnows = IriTerm.prevalidated(
    'http://schema.org/knows',
  );

  /// knowsAbout from schemahttp vocabulary [Expects: http://schema.org/Text, http://schema.org/Thing, http://schema.org/URL]
  ///
  /// Of a {[Person]}, and less typically of an {[Organization]}, to indicate a topic that is known about - suggesting possible expertise but not implying it. We do not distinguish skill levels here, or relate this to educational content, events, objectives or {[JobPosting]} descriptions.
  ///
  /// Can be used on: http://schema.org/Organization, http://schema.org/Person
  ///
  static const schemahttpKnowsAbout = IriTerm.prevalidated(
    'http://schema.org/knowsAbout',
  );

  /// knowsLanguage from schemahttp vocabulary [Expects: http://schema.org/Language, http://schema.org/Text]
  ///
  /// Of a {[Person]}, and less typically of an {[Organization]}, to indicate a known language. We do not distinguish skill levels or reading/writing/speaking/signing here. Use language codes from the [IETF BCP 47 standard](http://tools.ietf.org/html/bcp47).
  ///
  /// Can be used on: http://schema.org/Organization, http://schema.org/Person
  ///
  static const schemahttpKnowsLanguage = IriTerm.prevalidated(
    'http://schema.org/knowsLanguage',
  );

  /// naics from schemahttp vocabulary [Expects: http://schema.org/Text]
  ///
  /// The North American Industry Classification System (NAICS) code for a particular organization or business person.
  ///
  /// Can be used on: http://schema.org/Organization, http://schema.org/Person
  ///
  static const schemahttpNaics = IriTerm.prevalidated(
    'http://schema.org/naics',
  );

  /// name from schemahttp vocabulary [Expects: http://schema.org/Text]
  ///
  /// The name of the item.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const schemahttpName = IriTerm.prevalidated('http://schema.org/name');

  /// nationality from schemahttp vocabulary [Expects: http://schema.org/Country]
  ///
  /// Nationality of the person.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const schemahttpNationality = IriTerm.prevalidated(
    'http://schema.org/nationality',
  );

  /// netWorth from schemahttp vocabulary [Expects: http://schema.org/MonetaryAmount, http://schema.org/PriceSpecification]
  ///
  /// The total financial value of the person as calculated by subtracting the total value of liabilities from the total value of assets.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const schemahttpNetWorth = IriTerm.prevalidated(
    'http://schema.org/netWorth',
  );

  /// owns from schemahttp vocabulary [Expects: http://schema.org/OwnershipInfo, http://schema.org/Product]
  ///
  /// Products owned by the organization or person.
  ///
  /// Can be used on: http://schema.org/Organization, http://schema.org/Person
  ///
  static const schemahttpOwns = IriTerm.prevalidated('http://schema.org/owns');

  /// parents from schemahttp vocabulary [Expects: http://schema.org/Person]
  ///
  /// A parents of the person.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const schemahttpParents = IriTerm.prevalidated(
    'http://schema.org/parents',
  );

  /// performerIn from schemahttp vocabulary [Expects: http://schema.org/Event]
  ///
  /// Event that this person is a performer or participant in.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const schemahttpPerformerIn = IriTerm.prevalidated(
    'http://schema.org/performerIn',
  );

  /// potentialAction from schemahttp vocabulary [Expects: http://schema.org/Action]
  ///
  /// Indicates a potential Action, which describes an idealized action in which this thing would play an 'object' role.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const schemahttpPotentialAction = IriTerm.prevalidated(
    'http://schema.org/potentialAction',
  );

  /// relatedTo from schemahttp vocabulary [Expects: http://schema.org/Person]
  ///
  /// The most generic familial relation.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const schemahttpRelatedTo = IriTerm.prevalidated(
    'http://schema.org/relatedTo',
  );

  /// sameAs from schemahttp vocabulary [Expects: http://schema.org/URL]
  ///
  /// URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Wikidata entry, or official website.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const schemahttpSameAs = IriTerm.prevalidated(
    'http://schema.org/sameAs',
  );

  /// seeks from schemahttp vocabulary [Expects: http://schema.org/Demand]
  ///
  /// A pointer to products or services sought by the organization or person (demand).
  ///
  /// Can be used on: http://schema.org/Organization, http://schema.org/Person
  ///
  static const schemahttpSeeks = IriTerm.prevalidated(
    'http://schema.org/seeks',
  );

  /// siblings from schemahttp vocabulary [Expects: http://schema.org/Person]
  ///
  /// A sibling of the person.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const schemahttpSiblings = IriTerm.prevalidated(
    'http://schema.org/siblings',
  );

  /// skills from schemahttp vocabulary [Expects: http://schema.org/DefinedTerm, http://schema.org/Text]
  ///
  /// A statement of knowledge, skill, ability, task or any other assertion expressing a competency that is either claimed by a person, an organization or desired or required to fulfill a role or to work in an occupation.
  ///
  /// Can be used on: http://schema.org/JobPosting, http://schema.org/Occupation, http://schema.org/Organization, http://schema.org/Person
  ///
  static const schemahttpSkills = IriTerm.prevalidated(
    'http://schema.org/skills',
  );

  /// spouse from schemahttp vocabulary [Expects: http://schema.org/Person]
  ///
  /// The person's spouse.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const schemahttpSpouse = IriTerm.prevalidated(
    'http://schema.org/spouse',
  );

  /// taxID from schemahttp vocabulary [Expects: http://schema.org/Text]
  ///
  /// The Tax / Fiscal ID of the organization or person, e.g. the TIN in the US or the CIF/NIF in Spain.
  ///
  /// Can be used on: http://schema.org/Organization, http://schema.org/Person
  ///
  static const schemahttpTaxID = IriTerm.prevalidated(
    'http://schema.org/taxID',
  );

  /// telephone from schemahttp vocabulary [Expects: http://schema.org/Text]
  ///
  /// The telephone number.
  ///
  /// Can be used on: http://schema.org/ContactPoint, http://schema.org/Organization, http://schema.org/Person, http://schema.org/Place
  ///
  static const schemahttpTelephone = IriTerm.prevalidated(
    'http://schema.org/telephone',
  );

  /// url from schemahttp vocabulary [Expects: http://schema.org/URL]
  ///
  /// URL of the item.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const schemahttpUrl = IriTerm.prevalidated('http://schema.org/url');

  /// vatID from schemahttp vocabulary [Expects: http://schema.org/Text]
  ///
  /// The Value-added Tax ID of the organization or person.
  ///
  /// Can be used on: http://schema.org/Organization, http://schema.org/Person
  ///
  static const schemahttpVatID = IriTerm.prevalidated(
    'http://schema.org/vatID',
  );

  /// weight from schemahttp vocabulary [Expects: http://schema.org/Mass, http://schema.org/QuantitativeValue]
  ///
  /// The weight of the product or person.
  ///
  /// Can be used on: http://schema.org/OfferShippingDetails, http://schema.org/Person, http://schema.org/Product, http://schema.org/ShippingConditions, http://schema.org/VisualArtwork
  ///
  static const schemahttpWeight = IriTerm.prevalidated(
    'http://schema.org/weight',
  );

  /// workLocation from schemahttp vocabulary [Expects: http://schema.org/ContactPoint, http://schema.org/Place]
  ///
  /// A contact location for a person's place of work.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const schemahttpWorkLocation = IriTerm.prevalidated(
    'http://schema.org/workLocation',
  );

  /// worksFor from schemahttp vocabulary [Expects: http://schema.org/Organization]
  ///
  /// Organizations that the person works for.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const schemahttpWorksFor = IriTerm.prevalidated(
    'http://schema.org/worksFor',
  );

  /// alternateName from schemahttp vocabulary [Expects: http://schema.org/Text]
  ///
  /// An alias for the item.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const schemahttpAlternateName = IriTerm.prevalidated(
    'http://schema.org/alternateName',
  );

  /// alumniOf from schemahttp vocabulary [Expects: http://schema.org/EducationalOrganization, http://schema.org/Organization]
  ///
  /// An organization that the person is an alumni of.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const schemahttpAlumniOf = IriTerm.prevalidated(
    'http://schema.org/alumniOf',
  );

  /// award from schemahttp vocabulary [Expects: http://schema.org/Text]
  ///
  /// An award won by or for this item.
  ///
  /// Can be used on: http://schema.org/CreativeWork, http://schema.org/Organization, http://schema.org/Person, http://schema.org/Product, http://schema.org/Service
  ///
  static const schemahttpAward = IriTerm.prevalidated(
    'http://schema.org/award',
  );

  /// colleague from schemahttp vocabulary [Expects: http://schema.org/Person, http://schema.org/URL]
  ///
  /// A colleague of the person.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const schemahttpColleague = IriTerm.prevalidated(
    'http://schema.org/colleague',
  );

  /// contactPoint from schemahttp vocabulary [Expects: http://schema.org/ContactPoint]
  ///
  /// A contact point for a person or organization.
  ///
  /// Can be used on: http://schema.org/HealthInsurancePlan, http://schema.org/Organization, http://schema.org/Person
  ///
  static const schemahttpContactPoint = IriTerm.prevalidated(
    'http://schema.org/contactPoint',
  );

  /// funding from schemahttp vocabulary [Expects: http://schema.org/Grant]
  ///
  /// A {[Grant]} that directly or indirectly provide funding or sponsorship for this item. See also {[ownershipFundingInfo]}.
  ///
  /// Can be used on: http://schema.org/BioChemEntity, http://schema.org/CreativeWork, http://schema.org/Event, http://schema.org/MedicalEntity, http://schema.org/Organization, http://schema.org/Person, http://schema.org/Product
  ///
  static const schemahttpFunding = IriTerm.prevalidated(
    'http://schema.org/funding',
  );

  /// interactionStatistic from schemahttp vocabulary [Expects: http://schema.org/InteractionCounter]
  ///
  /// The number of interactions for the CreativeWork using the WebSite or SoftwareApplication. The most specific child type of InteractionCounter should be used.
  ///
  /// Can be used on: http://schema.org/CreativeWork, http://schema.org/Organization, http://schema.org/Person
  ///
  static const schemahttpInteractionStatistic = IriTerm.prevalidated(
    'http://schema.org/interactionStatistic',
  );

  /// mainEntityOfPage from schemahttp vocabulary [Expects: http://schema.org/CreativeWork, http://schema.org/URL]
  ///
  /// Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See [background notes](/docs/datamodel.html#mainEntityBackground) for details.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const schemahttpMainEntityOfPage = IriTerm.prevalidated(
    'http://schema.org/mainEntityOfPage',
  );

  /// makesOffer from schemahttp vocabulary [Expects: http://schema.org/Offer]
  ///
  /// A pointer to products or services offered by the organization or person.
  ///
  /// Can be used on: http://schema.org/Organization, http://schema.org/Person
  ///
  static const schemahttpMakesOffer = IriTerm.prevalidated(
    'http://schema.org/makesOffer',
  );

  /// parent from schemahttp vocabulary [Expects: http://schema.org/Person]
  ///
  /// A parent of this person.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const schemahttpParent = IriTerm.prevalidated(
    'http://schema.org/parent',
  );

  /// sibling from schemahttp vocabulary [Expects: http://schema.org/Person]
  ///
  /// A sibling of the person.
  ///
  /// Can be used on: http://schema.org/Person
  ///
  static const schemahttpSibling = IriTerm.prevalidated(
    'http://schema.org/sibling',
  );

  /// sponsor from schemahttp vocabulary [Expects: http://schema.org/Organization, http://schema.org/Person]
  ///
  /// A person or organization that supports a thing through a pledge, promise, or financial contribution. E.g. a sponsor of a Medical Study or a corporate sponsor of an event.
  ///
  /// Can be used on: http://schema.org/CreativeWork, http://schema.org/Event, http://schema.org/Grant, http://schema.org/MedicalStudy, http://schema.org/Organization, http://schema.org/Person
  ///
  static const schemahttpSponsor = IriTerm.prevalidated(
    'http://schema.org/sponsor',
  );

  /// subjectOf from schemahttp vocabulary [Expects: http://schema.org/CreativeWork, http://schema.org/Event]
  ///
  /// A CreativeWork or Event about this Thing.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const schemahttpSubjectOf = IriTerm.prevalidated(
    'http://schema.org/subjectOf',
  );

  /// memberOf from schemahttp vocabulary [Expects: http://schema.org/MemberProgramTier, http://schema.org/Organization, http://schema.org/ProgramMembership]
  ///
  /// An Organization (or ProgramMembership) to which this Person or Organization belongs.
  ///
  /// Can be used on: http://schema.org/Organization, http://schema.org/Person
  ///
  static const schemahttpMemberOf = IriTerm.prevalidated(
    'http://schema.org/memberOf',
  );

  /// description from schemahttp vocabulary [Expects: http://schema.org/Text, http://schema.org/TextObject]
  ///
  /// A description of the item.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const schemahttpDescription = IriTerm.prevalidated(
    'http://schema.org/description',
  );

  /// image from schemahttp vocabulary [Expects: http://schema.org/ImageObject, http://schema.org/URL]
  ///
  /// An image of the item. This can be a {[URL]} or a fully described {[ImageObject]}.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const schemahttpImage = IriTerm.prevalidated(
    'http://schema.org/image',
  );

  /// publishingPrinciples from schemahttp vocabulary [Expects: http://schema.org/CreativeWork, http://schema.org/URL]
  ///
  /// The publishingPrinciples property indicates (typically via {[URL]}) a document describing the editorial principles of an {[Organization]} (or individual, e.g. a {[Person]} writing a blog) that relate to their activities as a publisher, e.g. ethics or diversity policies. When applied to a {[CreativeWork]} (e.g. {[NewsArticle]}) the principles are those of the party primarily responsible for the creation of the {[CreativeWork]}.
  ///
  /// While such policies are most typically expressed in natural language, sometimes related information (e.g. indicating a {[funder]}) can be expressed using schema.org terminology.
  ///
  ///
  /// Can be used on: http://schema.org/CreativeWork, http://schema.org/Organization, http://schema.org/Person
  ///
  static const schemahttpPublishingPrinciples = IriTerm.prevalidated(
    'http://schema.org/publishingPrinciples',
  );

  /// identifier from schemahttp vocabulary [Expects: http://schema.org/PropertyValue, http://schema.org/Text, http://schema.org/URL]
  ///
  /// The identifier property represents any kind of identifier for any kind of {[Thing]}, such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
  ///
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const schemahttpIdentifier = IriTerm.prevalidated(
    'http://schema.org/identifier',
  );

  /// interviewee from bibo vocabulary [Expects: http://xmlns.com/foaf/0.1/Agent]
  ///
  /// An agent that is interviewed by another agent.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const biboInterviewee = IriTerm.prevalidated(
    'http://purl.org/ontology/bibo/interviewee',
  );

  /// interviewer from bibo vocabulary [Expects: http://xmlns.com/foaf/0.1/Agent]
  ///
  /// An agent that interview another agent.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const biboInterviewer = IriTerm.prevalidated(
    'http://purl.org/ontology/bibo/interviewer',
  );

  /// prefixName from bibo vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// The prefix of a name
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const biboPrefixName = IriTerm.prevalidated(
    'http://purl.org/ontology/bibo/prefixName',
  );

  /// suffixName from bibo vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// The suffix of a name
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Agent
  ///
  static const biboSuffixName = IriTerm.prevalidated(
    'http://purl.org/ontology/bibo/suffixName',
  );
}
