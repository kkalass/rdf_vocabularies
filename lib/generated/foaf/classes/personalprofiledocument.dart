// Copyright (c) 2025, Klas Kala√ü <habbatical@gmail.com>
// All rights reserved. Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// GENERATED CODE - DO NOT MODIFY BY HAND
// Generated by VocabularyBuilder

/// PersonalProfileDocument class from Foaf vocabulary
library foaf_foafpersonalprofiledocument_vocab;

import 'package:rdf_core/rdf_core.dart';

/// PersonalProfileDocument class from Foaf vocabulary
///
/// A personal profile RDF document.
///
/// Inherits from:
/// - Document (http://xmlns.com/foaf/0.1/Document)
/// - Thing (http://schema.org/Thing)
///
/// This class provides access to all properties that can be used with PersonalProfileDocument.
/// [Class Reference](http://xmlns.com/foaf/0.1/PersonalProfileDocument)
///
/// [Vocabulary Reference](http://xmlns.com/foaf/0.1/)
class FoafPersonalProfileDocument {
  // Private constructor prevents instantiation
  const FoafPersonalProfileDocument._();

  /// IRI term for the PersonalProfileDocument class
  /// Use this to specify that a resource is of this type.
  static const classIri = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/PersonalProfileDocument',
  );

  /// dnaChecksum [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// A checksum for the DNA of some thing. Joke.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const dnaChecksum = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/dnaChecksum',
  );

  /// sha1
  ///
  /// A sha1sum hash, in hex.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Document
  ///
  static const sha1 = IriTerm.prevalidated('http://xmlns.com/foaf/0.1/sha1');

  /// title
  ///
  /// Title (Mr, Mrs, Ms, Dr. etc)
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const title = IriTerm.prevalidated('http://xmlns.com/foaf/0.1/title');

  /// nick
  ///
  /// A short informal nickname characterising an agent (includes login identifiers, IRC and other chat nicknames).
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const nick = IriTerm.prevalidated('http://xmlns.com/foaf/0.1/nick');

  /// givenName
  ///
  /// The given name of some person.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const givenName = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/givenName',
  );

  /// givenname
  ///
  /// The given name of some person.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const givenname = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/givenname',
  );

  /// phone
  ///
  /// A phone,  specified using fully qualified tel: URI scheme (refs: http://www.w3.org/Addressing/schemes.html#tel).
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const phone = IriTerm.prevalidated('http://xmlns.com/foaf/0.1/phone');

  /// topic [Expects: http://www.w3.org/2002/07/owl#Thing]
  ///
  /// A topic of some page or document.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Document
  ///
  static const topic = IriTerm.prevalidated('http://xmlns.com/foaf/0.1/topic');

  /// primaryTopic [Expects: http://www.w3.org/2002/07/owl#Thing]
  ///
  /// The primary topic of some page or document.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Document
  ///
  static const primaryTopic = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/primaryTopic',
  );

  /// membershipClass
  ///
  /// Indicates the class of individuals that are a member of a Group
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const membershipClass = IriTerm.prevalidated(
    'http://xmlns.com/foaf/0.1/membershipClass',
  );

  /// additionalType from schemahttp vocabulary [Expects: http://schema.org/Text, http://schema.org/URL]
  ///
  /// An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. Typically the value is a URI-identified RDF class, and in this case corresponds to the
  /// use of rdf:type in RDF. Text values can be used sparingly, for cases where useful information can be added without their being an appropriate schema to reference. In the case of text values, the class label should follow the schema.org <a href="http://schema.org/docs/styleguide.html">style guide</a>.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const schemahttpAdditionalType = IriTerm.prevalidated(
    'http://schema.org/additionalType',
  );

  /// disambiguatingDescription from schemahttp vocabulary [Expects: http://schema.org/Text]
  ///
  /// A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const schemahttpDisambiguatingDescription = IriTerm.prevalidated(
    'http://schema.org/disambiguatingDescription',
  );

  /// name from schemahttp vocabulary [Expects: http://schema.org/Text]
  ///
  /// The name of the item.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const schemahttpName = IriTerm.prevalidated('http://schema.org/name');

  /// potentialAction from schemahttp vocabulary [Expects: http://schema.org/Action]
  ///
  /// Indicates a potential Action, which describes an idealized action in which this thing would play an 'object' role.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const schemahttpPotentialAction = IriTerm.prevalidated(
    'http://schema.org/potentialAction',
  );

  /// sameAs from schemahttp vocabulary [Expects: http://schema.org/URL]
  ///
  /// URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Wikidata entry, or official website.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const schemahttpSameAs = IriTerm.prevalidated(
    'http://schema.org/sameAs',
  );

  /// url from schemahttp vocabulary [Expects: http://schema.org/URL]
  ///
  /// URL of the item.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const schemahttpUrl = IriTerm.prevalidated('http://schema.org/url');

  /// alternateName from schemahttp vocabulary [Expects: http://schema.org/Text]
  ///
  /// An alias for the item.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const schemahttpAlternateName = IriTerm.prevalidated(
    'http://schema.org/alternateName',
  );

  /// mainEntityOfPage from schemahttp vocabulary [Expects: http://schema.org/CreativeWork, http://schema.org/URL]
  ///
  /// Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See [background notes](/docs/datamodel.html#mainEntityBackground) for details.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const schemahttpMainEntityOfPage = IriTerm.prevalidated(
    'http://schema.org/mainEntityOfPage',
  );

  /// subjectOf from schemahttp vocabulary [Expects: http://schema.org/CreativeWork, http://schema.org/Event]
  ///
  /// A CreativeWork or Event about this Thing.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const schemahttpSubjectOf = IriTerm.prevalidated(
    'http://schema.org/subjectOf',
  );

  /// description from schemahttp vocabulary [Expects: http://schema.org/Text, http://schema.org/TextObject]
  ///
  /// A description of the item.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const schemahttpDescription = IriTerm.prevalidated(
    'http://schema.org/description',
  );

  /// image from schemahttp vocabulary [Expects: http://schema.org/ImageObject, http://schema.org/URL]
  ///
  /// An image of the item. This can be a {[URL]} or a fully described {[ImageObject]}.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const schemahttpImage = IriTerm.prevalidated(
    'http://schema.org/image',
  );

  /// identifier from schemahttp vocabulary [Expects: http://schema.org/PropertyValue, http://schema.org/Text, http://schema.org/URL]
  ///
  /// The identifier property represents any kind of identifier for any kind of {[Thing]}, such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
  ///
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const schemahttpIdentifier = IriTerm.prevalidated(
    'http://schema.org/identifier',
  );
}
