// Copyright (c) 2025, Klas Kala√ü <habbatical@gmail.com>
// All rights reserved. Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// GENERATED CODE - DO NOT MODIFY BY HAND
// Generated by VocabularyBuilder

/// Owl Vocabulary
library owl_vocab;

import 'package:rdf_core/rdf_core.dart';

/// Main Owl vocabulary class containing all terms
///
/// Contains all terms defined in the http://www.w3.org/2002/07/owl# vocabulary.
class Owl {
  // Private constructor prevents instantiation
  const Owl._();

  /// Base IRI for Owl vocabulary
  /// [Spec](http://www.w3.org/2002/07/owl#)
  static const String namespace = 'http://www.w3.org/2002/07/owl#';
  static const String prefix = 'owl';

  /// IRI for owl:AllDifferent
  ///
  /// The class of collections of pairwise different individuals.
  ///
  static const AllDifferent = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#AllDifferent',
  );

  /// IRI for owl:AllDisjointClasses
  ///
  /// The class of collections of pairwise disjoint classes.
  ///
  static const AllDisjointClasses = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#AllDisjointClasses',
  );

  /// IRI for owl:AllDisjointProperties
  ///
  /// The class of collections of pairwise disjoint properties.
  ///
  static const AllDisjointProperties = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#AllDisjointProperties',
  );

  /// IRI for owl:Annotation
  ///
  /// The class of annotated annotations for which the RDF serialization consists of an annotated subject, predicate and object.
  ///
  static const Annotation = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#Annotation',
  );

  /// IRI for owl:AnnotationProperty
  ///
  /// The class of annotation properties.
  ///
  static const AnnotationProperty = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#AnnotationProperty',
  );

  /// IRI for owl:AsymmetricProperty
  ///
  /// The class of asymmetric properties.
  ///
  static const AsymmetricProperty = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#AsymmetricProperty',
  );

  /// IRI for owl:Axiom
  ///
  /// The class of annotated axioms for which the RDF serialization consists of an annotated subject, predicate and object.
  ///
  static const Axiom = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#Axiom',
  );

  /// IRI for owl:Class
  ///
  /// The class of OWL classes.
  ///
  static const Class = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#Class',
  );

  /// IRI for owl:DataRange
  ///
  /// The class of OWL data ranges, which are special kinds of datatypes. Note: The use of the IRI owl:DataRange has been deprecated as of OWL 2. The IRI rdfs:Datatype SHOULD be used instead.
  ///
  static const DataRange = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#DataRange',
  );

  /// IRI for owl:DatatypeProperty
  ///
  /// The class of data properties.
  ///
  static const DatatypeProperty = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#DatatypeProperty',
  );

  /// IRI for owl:DeprecatedClass
  ///
  /// The class of deprecated classes.
  ///
  static const DeprecatedClass = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#DeprecatedClass',
  );

  /// IRI for owl:DeprecatedProperty
  ///
  /// The class of deprecated properties.
  ///
  static const DeprecatedProperty = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#DeprecatedProperty',
  );

  /// IRI for owl:FunctionalProperty
  ///
  /// The class of functional properties.
  ///
  static const FunctionalProperty = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#FunctionalProperty',
  );

  /// IRI for owl:InverseFunctionalProperty
  ///
  /// The class of inverse-functional properties.
  ///
  static const InverseFunctionalProperty = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#InverseFunctionalProperty',
  );

  /// IRI for owl:IrreflexiveProperty
  ///
  /// The class of irreflexive properties.
  ///
  static const IrreflexiveProperty = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#IrreflexiveProperty',
  );

  /// IRI for owl:NamedIndividual
  ///
  /// The class of named individuals.
  ///
  static const NamedIndividual = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#NamedIndividual',
  );

  /// IRI for owl:NegativePropertyAssertion
  ///
  /// The class of negative property assertions.
  ///
  static const NegativePropertyAssertion = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#NegativePropertyAssertion',
  );

  /// IRI for owl:Nothing
  ///
  /// This is the empty class.
  ///
  static const Nothing = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#Nothing',
  );

  /// IRI for owl:ObjectProperty
  ///
  /// The class of object properties.
  ///
  static const ObjectProperty = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#ObjectProperty',
  );

  /// IRI for owl:Ontology
  ///
  /// The class of ontologies.
  ///
  static const Ontology = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#Ontology',
  );

  /// IRI for owl:OntologyProperty
  ///
  /// The class of ontology properties.
  ///
  static const OntologyProperty = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#OntologyProperty',
  );

  /// IRI for owl:ReflexiveProperty
  ///
  /// The class of reflexive properties.
  ///
  static const ReflexiveProperty = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#ReflexiveProperty',
  );

  /// IRI for owl:Restriction
  ///
  /// The class of property restrictions.
  ///
  static const Restriction = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#Restriction',
  );

  /// IRI for owl:SymmetricProperty
  ///
  /// The class of symmetric properties.
  ///
  static const SymmetricProperty = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#SymmetricProperty',
  );

  /// IRI for owl:TransitiveProperty
  ///
  /// The class of transitive properties.
  ///
  static const TransitiveProperty = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#TransitiveProperty',
  );

  /// IRI for owl:Thing
  ///
  /// The class of OWL individuals.
  ///
  static const Thing = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#Thing',
  );

  /// IRI for owl:allValuesFrom [Expects: http://www.w3.org/2000/01/rdf-schema#Class]
  ///
  /// The property that determines the class that a universal property restriction refers to.
  ///
  /// Can be used on: http://www.w3.org/2002/07/owl#Restriction
  ///
  static const allValuesFrom = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#allValuesFrom',
  );

  /// IRI for owl:annotatedProperty [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// The property that determines the predicate of an annotated axiom or annotated annotation.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const annotatedProperty = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#annotatedProperty',
  );

  /// IRI for owl:annotatedSource [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// The property that determines the subject of an annotated axiom or annotated annotation.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const annotatedSource = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#annotatedSource',
  );

  /// IRI for owl:annotatedTarget [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// The property that determines the object of an annotated axiom or annotated annotation.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const annotatedTarget = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#annotatedTarget',
  );

  /// IRI for owl:assertionProperty [Expects: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property]
  ///
  /// The property that determines the predicate of a negative property assertion.
  ///
  /// Can be used on: http://www.w3.org/2002/07/owl#NegativePropertyAssertion
  ///
  static const assertionProperty = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#assertionProperty',
  );

  /// IRI for owl:backwardCompatibleWith [Expects: http://www.w3.org/2002/07/owl#Ontology]
  ///
  /// The annotation property that indicates that a given ontology is backward compatible with another ontology.
  ///
  /// Can be used on: http://www.w3.org/2002/07/owl#Ontology
  ///
  static const backwardCompatibleWith = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#backwardCompatibleWith',
  );

  /// IRI for owl:bottomDataProperty [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// The data property that does not relate any individual to any data value.
  ///
  /// Can be used on: http://www.w3.org/2002/07/owl#Thing
  ///
  static const bottomDataProperty = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#bottomDataProperty',
  );

  /// IRI for owl:bottomObjectProperty [Expects: http://www.w3.org/2002/07/owl#Thing]
  ///
  /// The object property that does not relate any two individuals.
  ///
  /// Can be used on: http://www.w3.org/2002/07/owl#Thing
  ///
  static const bottomObjectProperty = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#bottomObjectProperty',
  );

  /// IRI for owl:cardinality [Expects: http://www.w3.org/2001/XMLSchema#nonNegativeInteger]
  ///
  /// The property that determines the cardinality of an exact cardinality restriction.
  ///
  /// Can be used on: http://www.w3.org/2002/07/owl#Restriction
  ///
  static const cardinality = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#cardinality',
  );

  /// IRI for owl:complementOf [Expects: http://www.w3.org/2002/07/owl#Class]
  ///
  /// The property that determines that a given class is the complement of another class.
  ///
  /// Can be used on: http://www.w3.org/2002/07/owl#Class
  ///
  static const complementOf = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#complementOf',
  );

  /// IRI for owl:datatypeComplementOf [Expects: http://www.w3.org/2000/01/rdf-schema#Datatype]
  ///
  /// The property that determines that a given data range is the complement of another data range with respect to the data domain.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Datatype
  ///
  static const datatypeComplementOf = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#datatypeComplementOf',
  );

  /// IRI for owl:deprecated [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// The annotation property that indicates that a given entity has been deprecated.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const deprecated = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#deprecated',
  );

  /// IRI for owl:differentFrom [Expects: http://www.w3.org/2002/07/owl#Thing]
  ///
  /// The property that determines that two given individuals are different.
  ///
  /// Can be used on: http://www.w3.org/2002/07/owl#Thing
  ///
  static const differentFrom = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#differentFrom',
  );

  /// IRI for owl:disjointUnionOf [Expects: http://www.w3.org/1999/02/22-rdf-syntax-ns#List]
  ///
  /// The property that determines that a given class is equivalent to the disjoint union of a collection of other classes.
  ///
  /// Can be used on: http://www.w3.org/2002/07/owl#Class
  ///
  static const disjointUnionOf = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#disjointUnionOf',
  );

  /// IRI for owl:disjointWith [Expects: http://www.w3.org/2002/07/owl#Class]
  ///
  /// The property that determines that two given classes are disjoint.
  ///
  /// Can be used on: http://www.w3.org/2002/07/owl#Class
  ///
  static const disjointWith = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#disjointWith',
  );

  /// IRI for owl:distinctMembers [Expects: http://www.w3.org/1999/02/22-rdf-syntax-ns#List]
  ///
  /// The property that determines the collection of pairwise different individuals in a owl:AllDifferent axiom.
  ///
  /// Can be used on: http://www.w3.org/2002/07/owl#AllDifferent
  ///
  static const distinctMembers = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#distinctMembers',
  );

  /// IRI for owl:equivalentClass [Expects: http://www.w3.org/2000/01/rdf-schema#Class]
  ///
  /// The property that determines that two given classes are equivalent, and that is used to specify datatype definitions.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Class
  ///
  static const equivalentClass = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#equivalentClass',
  );

  /// IRI for owl:equivalentProperty [Expects: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property]
  ///
  /// The property that determines that two given properties are equivalent.
  ///
  /// Can be used on: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  ///
  static const equivalentProperty = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#equivalentProperty',
  );

  /// IRI for owl:hasKey [Expects: http://www.w3.org/1999/02/22-rdf-syntax-ns#List]
  ///
  /// The property that determines the collection of properties that jointly build a key.
  ///
  /// Can be used on: http://www.w3.org/2002/07/owl#Class
  ///
  static const hasKey = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#hasKey',
  );

  /// IRI for owl:hasSelf [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// The property that determines the property that a self restriction refers to.
  ///
  /// Can be used on: http://www.w3.org/2002/07/owl#Restriction
  ///
  static const hasSelf = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#hasSelf',
  );

  /// IRI for owl:hasValue [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// The property that determines the individual that a has-value restriction refers to.
  ///
  /// Can be used on: http://www.w3.org/2002/07/owl#Restriction
  ///
  static const hasValue = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#hasValue',
  );

  /// IRI for owl:imports [Expects: http://www.w3.org/2002/07/owl#Ontology]
  ///
  /// The property that is used for importing other ontologies into a given ontology.
  ///
  /// Can be used on: http://www.w3.org/2002/07/owl#Ontology
  ///
  static const imports = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#imports',
  );

  /// IRI for owl:incompatibleWith [Expects: http://www.w3.org/2002/07/owl#Ontology]
  ///
  /// The annotation property that indicates that a given ontology is incompatible with another ontology.
  ///
  /// Can be used on: http://www.w3.org/2002/07/owl#Ontology
  ///
  static const incompatibleWith = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#incompatibleWith',
  );

  /// IRI for owl:intersectionOf [Expects: http://www.w3.org/1999/02/22-rdf-syntax-ns#List]
  ///
  /// The property that determines the collection of classes or data ranges that build an intersection.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Class
  ///
  static const intersectionOf = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#intersectionOf',
  );

  /// IRI for owl:inverseOf [Expects: http://www.w3.org/2002/07/owl#ObjectProperty]
  ///
  /// The property that determines that two given properties are inverse.
  ///
  /// Can be used on: http://www.w3.org/2002/07/owl#ObjectProperty
  ///
  static const inverseOf = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#inverseOf',
  );

  /// IRI for owl:maxCardinality [Expects: http://www.w3.org/2001/XMLSchema#nonNegativeInteger]
  ///
  /// The property that determines the cardinality of a maximum cardinality restriction.
  ///
  /// Can be used on: http://www.w3.org/2002/07/owl#Restriction
  ///
  static const maxCardinality = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#maxCardinality',
  );

  /// IRI for owl:maxQualifiedCardinality [Expects: http://www.w3.org/2001/XMLSchema#nonNegativeInteger]
  ///
  /// The property that determines the cardinality of a maximum qualified cardinality restriction.
  ///
  /// Can be used on: http://www.w3.org/2002/07/owl#Restriction
  ///
  static const maxQualifiedCardinality = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#maxQualifiedCardinality',
  );

  /// IRI for owl:members [Expects: http://www.w3.org/1999/02/22-rdf-syntax-ns#List]
  ///
  /// The property that determines the collection of members in either a owl:AllDifferent, owl:AllDisjointClasses or owl:AllDisjointProperties axiom.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const members = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#members',
  );

  /// IRI for owl:minCardinality [Expects: http://www.w3.org/2001/XMLSchema#nonNegativeInteger]
  ///
  /// The property that determines the cardinality of a minimum cardinality restriction.
  ///
  /// Can be used on: http://www.w3.org/2002/07/owl#Restriction
  ///
  static const minCardinality = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#minCardinality',
  );

  /// IRI for owl:minQualifiedCardinality [Expects: http://www.w3.org/2001/XMLSchema#nonNegativeInteger]
  ///
  /// The property that determines the cardinality of a minimum qualified cardinality restriction.
  ///
  /// Can be used on: http://www.w3.org/2002/07/owl#Restriction
  ///
  static const minQualifiedCardinality = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#minQualifiedCardinality',
  );

  /// IRI for owl:onClass [Expects: http://www.w3.org/2002/07/owl#Class]
  ///
  /// The property that determines the class that a qualified object cardinality restriction refers to.
  ///
  /// Can be used on: http://www.w3.org/2002/07/owl#Restriction
  ///
  static const onClass = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#onClass',
  );

  /// IRI for owl:onDataRange [Expects: http://www.w3.org/2000/01/rdf-schema#Datatype]
  ///
  /// The property that determines the data range that a qualified data cardinality restriction refers to.
  ///
  /// Can be used on: http://www.w3.org/2002/07/owl#Restriction
  ///
  static const onDataRange = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#onDataRange',
  );

  /// IRI for owl:onDatatype [Expects: http://www.w3.org/2000/01/rdf-schema#Datatype]
  ///
  /// The property that determines the datatype that a datatype restriction refers to.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Datatype
  ///
  static const onDatatype = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#onDatatype',
  );

  /// IRI for owl:oneOf [Expects: http://www.w3.org/1999/02/22-rdf-syntax-ns#List]
  ///
  /// The property that determines the collection of individuals or data values that build an enumeration.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Class
  ///
  static const oneOf = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#oneOf',
  );

  /// IRI for owl:onProperties [Expects: http://www.w3.org/1999/02/22-rdf-syntax-ns#List]
  ///
  /// The property that determines the n-tuple of properties that a property restriction on an n-ary data range refers to.
  ///
  /// Can be used on: http://www.w3.org/2002/07/owl#Restriction
  ///
  static const onProperties = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#onProperties',
  );

  /// IRI for owl:onProperty [Expects: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property]
  ///
  /// The property that determines the property that a property restriction refers to.
  ///
  /// Can be used on: http://www.w3.org/2002/07/owl#Restriction
  ///
  static const onProperty = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#onProperty',
  );

  /// IRI for owl:priorVersion [Expects: http://www.w3.org/2002/07/owl#Ontology]
  ///
  /// The annotation property that indicates the predecessor ontology of a given ontology.
  ///
  /// Can be used on: http://www.w3.org/2002/07/owl#Ontology
  ///
  static const priorVersion = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#priorVersion',
  );

  /// IRI for owl:propertyChainAxiom [Expects: http://www.w3.org/1999/02/22-rdf-syntax-ns#List]
  ///
  /// The property that determines the n-tuple of properties that build a sub property chain of a given property.
  ///
  /// Can be used on: http://www.w3.org/2002/07/owl#ObjectProperty
  ///
  static const propertyChainAxiom = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#propertyChainAxiom',
  );

  /// IRI for owl:propertyDisjointWith [Expects: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property]
  ///
  /// The property that determines that two given properties are disjoint.
  ///
  /// Can be used on: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  ///
  static const propertyDisjointWith = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#propertyDisjointWith',
  );

  /// IRI for owl:qualifiedCardinality [Expects: http://www.w3.org/2001/XMLSchema#nonNegativeInteger]
  ///
  /// The property that determines the cardinality of an exact qualified cardinality restriction.
  ///
  /// Can be used on: http://www.w3.org/2002/07/owl#Restriction
  ///
  static const qualifiedCardinality = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#qualifiedCardinality',
  );

  /// IRI for owl:sameAs [Expects: http://www.w3.org/2002/07/owl#Thing]
  ///
  /// The property that determines that two given individuals are equal.
  ///
  /// Can be used on: http://www.w3.org/2002/07/owl#Thing
  ///
  static const sameAs = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#sameAs',
  );

  /// IRI for owl:someValuesFrom [Expects: http://www.w3.org/2000/01/rdf-schema#Class]
  ///
  /// The property that determines the class that an existential property restriction refers to.
  ///
  /// Can be used on: http://www.w3.org/2002/07/owl#Restriction
  ///
  static const someValuesFrom = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#someValuesFrom',
  );

  /// IRI for owl:sourceIndividual [Expects: http://www.w3.org/2002/07/owl#Thing]
  ///
  /// The property that determines the subject of a negative property assertion.
  ///
  /// Can be used on: http://www.w3.org/2002/07/owl#NegativePropertyAssertion
  ///
  static const sourceIndividual = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#sourceIndividual',
  );

  /// IRI for owl:targetIndividual [Expects: http://www.w3.org/2002/07/owl#Thing]
  ///
  /// The property that determines the object of a negative object property assertion.
  ///
  /// Can be used on: http://www.w3.org/2002/07/owl#NegativePropertyAssertion
  ///
  static const targetIndividual = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#targetIndividual',
  );

  /// IRI for owl:targetValue [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// The property that determines the value of a negative data property assertion.
  ///
  /// Can be used on: http://www.w3.org/2002/07/owl#NegativePropertyAssertion
  ///
  static const targetValue = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#targetValue',
  );

  /// IRI for owl:topDataProperty [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// The data property that relates every individual to every data value.
  ///
  /// Can be used on: http://www.w3.org/2002/07/owl#Thing
  ///
  static const topDataProperty = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#topDataProperty',
  );

  /// IRI for owl:topObjectProperty [Expects: http://www.w3.org/2002/07/owl#Thing]
  ///
  /// The object property that relates every two individuals.
  ///
  /// Can be used on: http://www.w3.org/2002/07/owl#Thing
  ///
  static const topObjectProperty = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#topObjectProperty',
  );

  /// IRI for owl:unionOf [Expects: http://www.w3.org/1999/02/22-rdf-syntax-ns#List]
  ///
  /// The property that determines the collection of classes or data ranges that build a union.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Class
  ///
  static const unionOf = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#unionOf',
  );

  /// IRI for owl:versionInfo [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// The annotation property that provides version information for an ontology or another OWL construct.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const versionInfo = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#versionInfo',
  );

  /// IRI for owl:versionIRI [Expects: http://www.w3.org/2002/07/owl#Ontology]
  ///
  /// The property that identifies the version IRI of an ontology.
  ///
  /// Can be used on: http://www.w3.org/2002/07/owl#Ontology
  ///
  static const versionIRI = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#versionIRI',
  );

  /// IRI for owl:withRestrictions [Expects: http://www.w3.org/1999/02/22-rdf-syntax-ns#List]
  ///
  /// The property that determines the collection of facet-value pairs that define a datatype restriction.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Datatype
  ///
  static const withRestrictions = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#withRestrictions',
  );
}
