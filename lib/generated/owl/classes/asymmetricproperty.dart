// Copyright (c) 2025, Klas Kala√ü <habbatical@gmail.com>
// All rights reserved. Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// GENERATED CODE - DO NOT MODIFY BY HAND
// Generated by VocabularyBuilder

/// AsymmetricProperty class from Owl vocabulary
library owl_owlasymmetricproperty_vocab;

import 'package:rdf_core/rdf_core.dart';

/// AsymmetricProperty class from Owl vocabulary
///
/// The class of asymmetric properties.
///
/// Inherits from:
/// - Intangible (https://schema.org/Intangible)
/// - ObjectProperty (http://www.w3.org/2002/07/owl#ObjectProperty)
/// - Property (http://www.w3.org/1999/02/22-rdf-syntax-ns#Property)
/// - Resource (http://www.w3.org/2000/01/rdf-schema#Resource)
/// - Thing (https://schema.org/Thing)
///
/// This class provides access to all properties that can be used with AsymmetricProperty.
/// [Class Reference](http://www.w3.org/2002/07/owl#AsymmetricProperty)
///
/// [Vocabulary Reference](http://www.w3.org/2002/07/owl#)
class OwlAsymmetricProperty {
  // Private constructor prevents instantiation
  const OwlAsymmetricProperty._();

  /// IRI term for the AsymmetricProperty class
  /// Use this to specify that a resource is of this type.
  static const classIri = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#AsymmetricProperty',
  );

  /// annotatedProperty [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// The property that determines the predicate of an annotated axiom or annotated annotation.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const annotatedProperty = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#annotatedProperty',
  );

  /// annotatedSource [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// The property that determines the subject of an annotated axiom or annotated annotation.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const annotatedSource = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#annotatedSource',
  );

  /// annotatedTarget [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// The property that determines the object of an annotated axiom or annotated annotation.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const annotatedTarget = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#annotatedTarget',
  );

  /// deprecated [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// The annotation property that indicates that a given entity has been deprecated.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const deprecated = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#deprecated',
  );

  /// equivalentProperty [Expects: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property]
  ///
  /// The property that determines that two given properties are equivalent.
  ///
  /// Can be used on: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  ///
  static const equivalentProperty = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#equivalentProperty',
  );

  /// inverseOf [Expects: http://www.w3.org/2002/07/owl#ObjectProperty]
  ///
  /// The property that determines that two given properties are inverse.
  ///
  /// Can be used on: http://www.w3.org/2002/07/owl#ObjectProperty
  ///
  static const inverseOf = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#inverseOf',
  );

  /// members [Expects: http://www.w3.org/1999/02/22-rdf-syntax-ns#List]
  ///
  /// The property that determines the collection of members in either a owl:AllDifferent, owl:AllDisjointClasses or owl:AllDisjointProperties axiom.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const members = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#members',
  );

  /// propertyChainAxiom [Expects: http://www.w3.org/1999/02/22-rdf-syntax-ns#List]
  ///
  /// The property that determines the n-tuple of properties that build a sub property chain of a given property.
  ///
  /// Can be used on: http://www.w3.org/2002/07/owl#ObjectProperty
  ///
  static const propertyChainAxiom = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#propertyChainAxiom',
  );

  /// propertyDisjointWith [Expects: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property]
  ///
  /// The property that determines that two given properties are disjoint.
  ///
  /// Can be used on: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  ///
  static const propertyDisjointWith = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#propertyDisjointWith',
  );

  /// versionInfo [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// The annotation property that provides version information for an ontology or another OWL construct.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const versionInfo = IriTerm.prevalidated(
    'http://www.w3.org/2002/07/owl#versionInfo',
  );

  /// type from rdf vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Class]
  ///
  /// The subject is an instance of a class.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfType = IriTerm.prevalidated(
    'http://www.w3.org/1999/02/22-rdf-syntax-ns#type',
  );

  /// value from rdf vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// Idiomatic property used for structured values.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfValue = IriTerm.prevalidated(
    'http://www.w3.org/1999/02/22-rdf-syntax-ns#value',
  );

  /// subPropertyOf from rdfs vocabulary [Expects: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property]
  ///
  /// The subject is a subproperty of a property.
  ///
  /// Can be used on: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  ///
  static const rdfsSubPropertyOf = IriTerm.prevalidated(
    'http://www.w3.org/2000/01/rdf-schema#subPropertyOf',
  );

  /// comment from rdfs vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// A description of the subject resource.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfsComment = IriTerm.prevalidated(
    'http://www.w3.org/2000/01/rdf-schema#comment',
  );

  /// label from rdfs vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// A human-readable name for the subject.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfsLabel = IriTerm.prevalidated(
    'http://www.w3.org/2000/01/rdf-schema#label',
  );

  /// domain from rdfs vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Class]
  ///
  /// A domain of the subject property.
  ///
  /// Can be used on: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  ///
  static const rdfsDomain = IriTerm.prevalidated(
    'http://www.w3.org/2000/01/rdf-schema#domain',
  );

  /// range from rdfs vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Class]
  ///
  /// A range of the subject property.
  ///
  /// Can be used on: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  ///
  static const rdfsRange = IriTerm.prevalidated(
    'http://www.w3.org/2000/01/rdf-schema#range',
  );

  /// seeAlso from rdfs vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// Further information about the subject resource.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfsSeeAlso = IriTerm.prevalidated(
    'http://www.w3.org/2000/01/rdf-schema#seeAlso',
  );

  /// isDefinedBy from rdfs vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// The definition of the subject resource.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfsIsDefinedBy = IriTerm.prevalidated(
    'http://www.w3.org/2000/01/rdf-schema#isDefinedBy',
  );

  /// member from rdfs vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// A member of the subject resource.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfsMember = IriTerm.prevalidated(
    'http://www.w3.org/2000/01/rdf-schema#member',
  );

  /// additionalType from schema vocabulary [Expects: https://schema.org/Text, https://schema.org/URL]
  ///
  /// An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. Typically the value is a URI-identified RDF class, and in this case corresponds to the
  /// use of rdf:type in RDF. Text values can be used sparingly, for cases where useful information can be added without their being an appropriate schema to reference. In the case of text values, the class label should follow the schema.org <a href="https://schema.org/docs/styleguide.html">style guide</a>.
  ///
  /// Can be used on: https://schema.org/Thing
  ///
  static const schemaAdditionalType = IriTerm.prevalidated(
    'https://schema.org/additionalType',
  );

  /// disambiguatingDescription from schema vocabulary [Expects: https://schema.org/Text]
  ///
  /// A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation.
  ///
  /// Can be used on: https://schema.org/Thing
  ///
  static const schemaDisambiguatingDescription = IriTerm.prevalidated(
    'https://schema.org/disambiguatingDescription',
  );

  /// name from schema vocabulary [Expects: https://schema.org/Text]
  ///
  /// The name of the item.
  ///
  /// Can be used on: https://schema.org/Thing
  ///
  static const schemaName = IriTerm.prevalidated('https://schema.org/name');

  /// potentialAction from schema vocabulary [Expects: https://schema.org/Action]
  ///
  /// Indicates a potential Action, which describes an idealized action in which this thing would play an 'object' role.
  ///
  /// Can be used on: https://schema.org/Thing
  ///
  static const schemaPotentialAction = IriTerm.prevalidated(
    'https://schema.org/potentialAction',
  );

  /// sameAs from schema vocabulary [Expects: https://schema.org/URL]
  ///
  /// URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Wikidata entry, or official website.
  ///
  /// Can be used on: https://schema.org/Thing
  ///
  static const schemaSameAs = IriTerm.prevalidated('https://schema.org/sameAs');

  /// url from schema vocabulary [Expects: https://schema.org/URL]
  ///
  /// URL of the item.
  ///
  /// Can be used on: https://schema.org/Thing
  ///
  static const schemaUrl = IriTerm.prevalidated('https://schema.org/url');

  /// alternateName from schema vocabulary [Expects: https://schema.org/Text]
  ///
  /// An alias for the item.
  ///
  /// Can be used on: https://schema.org/Thing
  ///
  static const schemaAlternateName = IriTerm.prevalidated(
    'https://schema.org/alternateName',
  );

  /// mainEntityOfPage from schema vocabulary [Expects: https://schema.org/CreativeWork, https://schema.org/URL]
  ///
  /// Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See [background notes](/docs/datamodel.html#mainEntityBackground) for details.
  ///
  /// Can be used on: https://schema.org/Thing
  ///
  static const schemaMainEntityOfPage = IriTerm.prevalidated(
    'https://schema.org/mainEntityOfPage',
  );

  /// subjectOf from schema vocabulary [Expects: https://schema.org/CreativeWork, https://schema.org/Event]
  ///
  /// A CreativeWork or Event about this Thing.
  ///
  /// Can be used on: https://schema.org/Thing
  ///
  static const schemaSubjectOf = IriTerm.prevalidated(
    'https://schema.org/subjectOf',
  );

  /// description from schema vocabulary [Expects: https://schema.org/Text, https://schema.org/TextObject]
  ///
  /// A description of the item.
  ///
  /// Can be used on: https://schema.org/Thing
  ///
  static const schemaDescription = IriTerm.prevalidated(
    'https://schema.org/description',
  );

  /// image from schema vocabulary [Expects: https://schema.org/ImageObject, https://schema.org/URL]
  ///
  /// An image of the item. This can be a {[URL]} or a fully described {[ImageObject]}.
  ///
  /// Can be used on: https://schema.org/Thing
  ///
  static const schemaImage = IriTerm.prevalidated('https://schema.org/image');

  /// identifier from schema vocabulary [Expects: https://schema.org/PropertyValue, https://schema.org/Text, https://schema.org/URL]
  ///
  /// The identifier property represents any kind of identifier for any kind of {[Thing]}, such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
  ///
  ///
  /// Can be used on: https://schema.org/Thing
  ///
  static const schemaIdentifier = IriTerm.prevalidated(
    'https://schema.org/identifier',
  );

  /// abstract_ from bibo vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// A summary of the resource.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const biboAbstract_ = IriTerm.prevalidated(
    'http://purl.org/ontology/bibo/abstract',
  );
}
