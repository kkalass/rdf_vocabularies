// Copyright (c) 2025, Klas Kala√ü <habbatical@gmail.com>
// All rights reserved. Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// GENERATED CODE - DO NOT MODIFY BY HAND
// Generated by VocabularyBuilder

/// Acl Vocabulary
library acl_vocab;

import 'package:rdf_core/rdf_core.dart';

/// Main Acl vocabulary class containing all terms
///
/// Contains all terms defined in the http://www.w3.org/ns/auth/acl# vocabulary.
class Acl {
  // Private constructor prevents instantiation
  const Acl._();

  /// Base IRI for Acl vocabulary
  /// [Spec](http://www.w3.org/ns/auth/acl#)
  static const String namespace = 'http://www.w3.org/ns/auth/acl#';
  static const String prefix = 'acl';

  /// IRI for acl:Access
  ///
  /// Any kind of access to a resource. Don't use this, use R W and RW
  ///
  static const Access = IriTerm.prevalidated(
    'http://www.w3.org/ns/auth/acl#Access',
  );

  /// IRI for acl:Append
  ///
  /// Append accesses are specific write access which only add information, and do not remove information.
  /// For text files, for example, append access allows bytes to be added onto the end of the file.
  /// For RDF graphs, Append access allows adds triples to the graph but does not remove any.
  /// Append access is useful for dropbox functionality.
  /// Dropbox can be used for link notification, which the information added is a notification
  /// that a some link has been made elsewhere relevant to the given resource.
  ///
  ///
  static const Append = IriTerm.prevalidated(
    'http://www.w3.org/ns/auth/acl#Append',
  );

  /// IRI for acl:AuthenticatedAgent
  ///
  /// A class of agents who have been authenticated.
  /// In other words, anyone can access this resource, but not anonymously.
  /// The social expectation is that the authentication process will provide an
  /// identify and a name, or pseudonym.
  /// (A new ID should not be minted for every access: the intent is that the user
  /// is able to continue to use the ID for continues interactions with peers,
  /// and for example to develop a reputation)
  ///
  ///
  static const AuthenticatedAgent = IriTerm.prevalidated(
    'http://www.w3.org/ns/auth/acl#AuthenticatedAgent',
  );

  /// IRI for acl:Authorization
  ///
  /// An element of access control,
  /// allowing agent to agents access of some kind to resources or classes of resources
  ///
  static const Authorization = IriTerm.prevalidated(
    'http://www.w3.org/ns/auth/acl#Authorization',
  );

  /// IRI for acl:Control
  ///
  /// Allows read/write access to the ACL for the resource(s)
  ///
  static const Control = IriTerm.prevalidated(
    'http://www.w3.org/ns/auth/acl#Control',
  );

  /// IRI for acl:Origin
  ///
  /// An Origin is basically a web site
  /// (Note WITHOUT the trailing slash after the domain name and port in its URI)
  /// and is the basis for controlling access to data by web apps
  /// in the Same Origin Model of web security.
  /// All scripts from the same origin are given the same right.
  ///
  /// [See also](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin)
  ///
  static const Origin = IriTerm.prevalidated(
    'http://www.w3.org/ns/auth/acl#Origin',
  );

  /// IRI for acl:Read
  ///
  /// The class of read operations
  ///
  static const Read = IriTerm.prevalidated(
    'http://www.w3.org/ns/auth/acl#Read',
  );

  /// IRI for acl:Write
  ///
  ///
  ///
  static const Write = IriTerm.prevalidated(
    'http://www.w3.org/ns/auth/acl#Write',
  );

  /// IRI for acl:accessControl [Expects: http://www.w3.org/2006/gen/ont#InformationResource]
  ///
  /// The Access Control file for this information resource.
  /// This may of course be a virtual resource implemented by the access control system.
  /// Note that HTTP header `Link: <foo.acl>; rel="acl"` can also be used for this.
  ///
  /// Can be used on: http://www.w3.org/2006/gen/ont#InformationResource
  ///
  /// [See also](https://solidproject.org/TR/wac#acl-link-relation)
  ///
  static const accessControl = IriTerm.prevalidated(
    'http://www.w3.org/ns/auth/acl#accessControl',
  );

  /// IRI for acl:accessTo [Expects: http://www.w3.org/2006/gen/ont#InformationResource]
  ///
  /// The information resource to which access is being granted.
  ///
  /// Can be used on: http://www.w3.org/ns/auth/acl#Authorization
  ///
  static const accessTo = IriTerm.prevalidated(
    'http://www.w3.org/ns/auth/acl#accessTo',
  );

  /// IRI for acl:accessToClass [Expects: http://www.w3.org/2000/01/rdf-schema#Class]
  ///
  /// A class of information resources to which access is being granted.
  ///
  /// Can be used on: http://www.w3.org/ns/auth/acl#Authorization
  ///
  static const accessToClass = IriTerm.prevalidated(
    'http://www.w3.org/ns/auth/acl#accessToClass',
  );

  /// IRI for acl:agent [Expects: http://xmlns.com/foaf/0.1/Agent]
  ///
  /// A person or social entity to being given the right
  ///
  /// Can be used on: http://www.w3.org/ns/auth/acl#Authorization
  ///
  static const agent = IriTerm.prevalidated(
    'http://www.w3.org/ns/auth/acl#agent',
  );

  /// IRI for acl:agentClass [Expects: http://www.w3.org/2000/01/rdf-schema#Class]
  ///
  /// A class of persons or social entities to being given the right
  ///
  /// Can be used on: http://www.w3.org/ns/auth/acl#Authorization
  ///
  static const agentClass = IriTerm.prevalidated(
    'http://www.w3.org/ns/auth/acl#agentClass',
  );

  /// IRI for acl:agentGroup [Expects: http://www.w3.org/2006/vcard/ns#Group]
  ///
  /// A group of persons or social entities to being given the right.
  /// The right is given to any entity which is a vcard:member of the group,
  /// as defined by the document received when the Group is dereferenced.
  ///
  /// Can be used on: http://www.w3.org/ns/auth/acl#Authorization
  ///
  static const agentGroup = IriTerm.prevalidated(
    'http://www.w3.org/ns/auth/acl#agentGroup',
  );

  /// IRI for acl:default_
  ///
  /// If a resource has no ACL file (it is 404),
  /// then access to the resource is given by the ACL of the immediately
  /// containing directory, or failing that (404) the ACL of the recursively next
  /// containing directory which has an ACL file.
  /// Within that ACL file,
  /// any Authorization which has that directory as its acl:default applies to the
  /// resource. (The highest directory must have an ACL file.)
  ///
  ///
  /// Can be used on: http://www.w3.org/ns/auth/acl#Authorization
  ///
  static const default_ = IriTerm.prevalidated(
    'http://www.w3.org/ns/auth/acl#default',
  );

  /// IRI for acl:defaultForNew
  ///
  /// THIS IS OBSOLETE AS OF 2017-08-01.   See 'default'.
  /// Was: A directory for which this authorization is used for new files in the directory.
  ///
  /// Can be used on: http://www.w3.org/ns/auth/acl#Authorization
  ///
  static const defaultForNew = IriTerm.prevalidated(
    'http://www.w3.org/ns/auth/acl#defaultForNew',
  );

  /// IRI for acl:delegates [Expects: http://xmlns.com/foaf/0.1/Agent]
  ///
  /// Delegates a person or another agent to act on behalf of the agent.
  /// For example, Alice delegates Bob to act on behalf of Alice for ACL purposes.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const delegates = IriTerm.prevalidated(
    'http://www.w3.org/ns/auth/acl#delegates',
  );

  /// IRI for acl:mode [Expects: http://www.w3.org/2000/01/rdf-schema#Class]
  ///
  /// A mode of access such as read or write.
  ///
  /// Can be used on: http://www.w3.org/ns/auth/acl#Authorization
  ///
  static const mode = IriTerm.prevalidated(
    'http://www.w3.org/ns/auth/acl#mode',
  );

  /// IRI for acl:origin [Expects: http://www.w3.org/ns/auth/acl#Origin]
  ///
  /// A web application, identified by its Origin, such as
  /// <https://scripts.example.com>, being given the right.
  /// When a user of the web application at a certain origin accesses the server,
  /// then the browser sets the Origin: header to warn that a possibly untrusted webapp
  /// is being used.
  /// Then, BOTH the user AND the origin must have the required access.
  ///
  /// Can be used on: http://www.w3.org/ns/auth/acl#Authorization
  ///
  /// [See also](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin)
  ///
  static const origin = IriTerm.prevalidated(
    'http://www.w3.org/ns/auth/acl#origin',
  );

  /// IRI for acl:owner [Expects: http://xmlns.com/foaf/0.1/Agent]
  ///
  /// The person or other agent which owns this.
  /// For example, the owner of a file in a filesystem.
  /// There is a sense of "right to control".   Typically defaults to the agent who created
  /// something, but can be changed.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const owner = IriTerm.prevalidated(
    'http://www.w3.org/ns/auth/acl#owner',
  );
}
