// Copyright (c) 2025, Klas Kala√ü <habbatical@gmail.com>
// All rights reserved. Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// GENERATED CODE - DO NOT MODIFY BY HAND
// Generated by VocabularyBuilder

/// Skos Vocabulary
library skos_vocab;

import 'package:rdf_core/rdf_core.dart';

/// Main Skos vocabulary class containing all terms
///
/// Contains all terms defined in the http://www.w3.org/2004/02/skos/core# vocabulary.
class Skos {
  // Private constructor prevents instantiation
  const Skos._();

  /// Base IRI for Skos vocabulary
  /// [Spec](http://www.w3.org/2004/02/skos/core#)
  static const String namespace = 'http://www.w3.org/2004/02/skos/core#';
  static const String prefix = 'skos';

  /// IRI for skos:Concept
  ///
  ///
  ///
  static const Concept = IriTerm.prevalidated(
    'http://www.w3.org/2004/02/skos/core#Concept',
  );

  /// IRI for skos:ConceptScheme
  ///
  ///
  ///
  static const ConceptScheme = IriTerm.prevalidated(
    'http://www.w3.org/2004/02/skos/core#ConceptScheme',
  );

  /// IRI for skos:Collection
  ///
  ///
  ///
  static const Collection = IriTerm.prevalidated(
    'http://www.w3.org/2004/02/skos/core#Collection',
  );

  /// IRI for skos:OrderedCollection
  ///
  ///
  ///
  static const OrderedCollection = IriTerm.prevalidated(
    'http://www.w3.org/2004/02/skos/core#OrderedCollection',
  );

  /// IRI for skos:inScheme [Expects: http://www.w3.org/2004/02/skos/core#ConceptScheme]
  ///
  ///
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const inScheme = IriTerm.prevalidated(
    'http://www.w3.org/2004/02/skos/core#inScheme',
  );

  /// IRI for skos:hasTopConcept [Expects: http://www.w3.org/2004/02/skos/core#Concept]
  ///
  ///
  ///
  /// Can be used on: http://www.w3.org/2004/02/skos/core#ConceptScheme
  ///
  static const hasTopConcept = IriTerm.prevalidated(
    'http://www.w3.org/2004/02/skos/core#hasTopConcept',
  );

  /// IRI for skos:topConceptOf [Expects: http://www.w3.org/2004/02/skos/core#ConceptScheme]
  ///
  ///
  ///
  /// Can be used on: http://www.w3.org/2004/02/skos/core#Concept
  ///
  static const topConceptOf = IriTerm.prevalidated(
    'http://www.w3.org/2004/02/skos/core#topConceptOf',
  );

  /// IRI for skos:prefLabel
  ///
  /// A resource has no more than one value of skos:prefLabel per language tag, and no more than one value of skos:prefLabel without language tag.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const prefLabel = IriTerm.prevalidated(
    'http://www.w3.org/2004/02/skos/core#prefLabel',
  );

  /// IRI for skos:altLabel
  ///
  /// The range of skos:altLabel is the class of RDF plain literals.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const altLabel = IriTerm.prevalidated(
    'http://www.w3.org/2004/02/skos/core#altLabel',
  );

  /// IRI for skos:hiddenLabel
  ///
  /// The range of skos:hiddenLabel is the class of RDF plain literals.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const hiddenLabel = IriTerm.prevalidated(
    'http://www.w3.org/2004/02/skos/core#hiddenLabel',
  );

  /// IRI for skos:notation
  ///
  ///
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const notation = IriTerm.prevalidated(
    'http://www.w3.org/2004/02/skos/core#notation',
  );

  /// IRI for skos:note
  ///
  ///
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const note = IriTerm.prevalidated(
    'http://www.w3.org/2004/02/skos/core#note',
  );

  /// IRI for skos:changeNote
  ///
  ///
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const changeNote = IriTerm.prevalidated(
    'http://www.w3.org/2004/02/skos/core#changeNote',
  );

  /// IRI for skos:definition
  ///
  ///
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const definition = IriTerm.prevalidated(
    'http://www.w3.org/2004/02/skos/core#definition',
  );

  /// IRI for skos:editorialNote
  ///
  ///
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const editorialNote = IriTerm.prevalidated(
    'http://www.w3.org/2004/02/skos/core#editorialNote',
  );

  /// IRI for skos:example
  ///
  ///
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const example = IriTerm.prevalidated(
    'http://www.w3.org/2004/02/skos/core#example',
  );

  /// IRI for skos:historyNote
  ///
  ///
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const historyNote = IriTerm.prevalidated(
    'http://www.w3.org/2004/02/skos/core#historyNote',
  );

  /// IRI for skos:scopeNote
  ///
  ///
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const scopeNote = IriTerm.prevalidated(
    'http://www.w3.org/2004/02/skos/core#scopeNote',
  );

  /// IRI for skos:semanticRelation [Expects: http://www.w3.org/2004/02/skos/core#Concept]
  ///
  ///
  ///
  /// Can be used on: http://www.w3.org/2004/02/skos/core#Concept
  ///
  static const semanticRelation = IriTerm.prevalidated(
    'http://www.w3.org/2004/02/skos/core#semanticRelation',
  );

  /// IRI for skos:broader
  ///
  /// Broader concepts are typically rendered as parents in a concept hierarchy (tree).
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const broader = IriTerm.prevalidated(
    'http://www.w3.org/2004/02/skos/core#broader',
  );

  /// IRI for skos:narrower
  ///
  /// Narrower concepts are typically rendered as children in a concept hierarchy (tree).
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const narrower = IriTerm.prevalidated(
    'http://www.w3.org/2004/02/skos/core#narrower',
  );

  /// IRI for skos:related
  ///
  /// skos:related is disjoint with skos:broaderTransitive
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const related = IriTerm.prevalidated(
    'http://www.w3.org/2004/02/skos/core#related',
  );

  /// IRI for skos:broaderTransitive
  ///
  ///
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const broaderTransitive = IriTerm.prevalidated(
    'http://www.w3.org/2004/02/skos/core#broaderTransitive',
  );

  /// IRI for skos:narrowerTransitive
  ///
  ///
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const narrowerTransitive = IriTerm.prevalidated(
    'http://www.w3.org/2004/02/skos/core#narrowerTransitive',
  );

  /// IRI for skos:member
  ///
  ///
  ///
  /// Can be used on: http://www.w3.org/2004/02/skos/core#Collection
  ///
  static const member = IriTerm.prevalidated(
    'http://www.w3.org/2004/02/skos/core#member',
  );

  /// IRI for skos:memberList [Expects: http://www.w3.org/1999/02/22-rdf-syntax-ns#List]
  ///
  /// For any resource, every item in the list given as the value of the skos:memberList property is also a value of the skos:member property.
  ///
  /// Can be used on: http://www.w3.org/2004/02/skos/core#OrderedCollection
  ///
  static const memberList = IriTerm.prevalidated(
    'http://www.w3.org/2004/02/skos/core#memberList',
  );

  /// IRI for skos:mappingRelation
  ///
  /// These concept mapping relations mirror semantic relations, and the data model defined below is similar (with the exception of skos:exactMatch) to the data model defined for semantic relations. A distinct vocabulary is provided for concept mapping relations, to provide a convenient way to differentiate links within a concept scheme from links between concept schemes. However, this pattern of usage is not a formal requirement of the SKOS data model, and relies on informal definitions of best practice.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const mappingRelation = IriTerm.prevalidated(
    'http://www.w3.org/2004/02/skos/core#mappingRelation',
  );

  /// IRI for skos:broadMatch
  ///
  ///
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const broadMatch = IriTerm.prevalidated(
    'http://www.w3.org/2004/02/skos/core#broadMatch',
  );

  /// IRI for skos:narrowMatch
  ///
  ///
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const narrowMatch = IriTerm.prevalidated(
    'http://www.w3.org/2004/02/skos/core#narrowMatch',
  );

  /// IRI for skos:relatedMatch
  ///
  ///
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const relatedMatch = IriTerm.prevalidated(
    'http://www.w3.org/2004/02/skos/core#relatedMatch',
  );

  /// IRI for skos:exactMatch
  ///
  /// skos:exactMatch is disjoint with each of the properties skos:broadMatch and skos:relatedMatch.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const exactMatch = IriTerm.prevalidated(
    'http://www.w3.org/2004/02/skos/core#exactMatch',
  );

  /// IRI for skos:closeMatch
  ///
  ///
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const closeMatch = IriTerm.prevalidated(
    'http://www.w3.org/2004/02/skos/core#closeMatch',
  );
}
