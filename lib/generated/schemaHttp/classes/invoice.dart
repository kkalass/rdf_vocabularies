// Copyright (c) 2025, Klas Kala√ü <habbatical@gmail.com>
// All rights reserved. Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// GENERATED CODE - DO NOT MODIFY BY HAND
// Generated by VocabularyBuilder

/// Invoice class from SchemaHttp vocabulary
library schemahttp_schemahttpinvoice_vocab;

import 'package:rdf_core/rdf_core.dart';

/// Invoice class from SchemaHttp vocabulary
///
/// A statement of the money due for goods or services; a bill.
///
/// Inherits from:
/// - Intangible (http://schema.org/Intangible)
/// - Thing (http://schema.org/Thing)
///
/// This class provides access to all properties that can be used with Invoice.
/// [Class Reference](http://schema.org/Invoice)
///
/// [Vocabulary Reference](http://schema.org/)
class SchemaHttpInvoice {
  // Private constructor prevents instantiation
  const SchemaHttpInvoice._();

  /// IRI term for the Invoice class
  /// Use this to specify that a resource is of this type.
  static const classIri = IriTerm.prevalidated('http://schema.org/Invoice');

  /// accountId [Expects: http://schema.org/Text]
  ///
  /// The identifier for the account the payment will be applied to.
  ///
  /// Can be used on: http://schema.org/Invoice
  ///
  static const accountId = IriTerm.prevalidated('http://schema.org/accountId');

  /// additionalType [Expects: http://schema.org/Text, http://schema.org/URL]
  ///
  /// An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. Typically the value is a URI-identified RDF class, and in this case corresponds to the
  /// use of rdf:type in RDF. Text values can be used sparingly, for cases where useful information can be added without their being an appropriate schema to reference. In the case of text values, the class label should follow the schema.org <a href="http://schema.org/docs/styleguide.html">style guide</a>.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const additionalType = IriTerm.prevalidated(
    'http://schema.org/additionalType',
  );

  /// billingPeriod [Expects: http://schema.org/Duration]
  ///
  /// The time interval used to compute the invoice.
  ///
  /// Can be used on: http://schema.org/Invoice
  ///
  static const billingPeriod = IriTerm.prevalidated(
    'http://schema.org/billingPeriod',
  );

  /// confirmationNumber [Expects: http://schema.org/Text]
  ///
  /// A number that confirms the given order or payment has been received.
  ///
  /// Can be used on: http://schema.org/Invoice, http://schema.org/Order
  ///
  static const confirmationNumber = IriTerm.prevalidated(
    'http://schema.org/confirmationNumber',
  );

  /// customer [Expects: http://schema.org/Organization, http://schema.org/Person]
  ///
  /// Party placing the order or paying the invoice.
  ///
  /// Can be used on: http://schema.org/Invoice, http://schema.org/Order
  ///
  static const customer = IriTerm.prevalidated('http://schema.org/customer');

  /// disambiguatingDescription [Expects: http://schema.org/Text]
  ///
  /// A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const disambiguatingDescription = IriTerm.prevalidated(
    'http://schema.org/disambiguatingDescription',
  );

  /// interactionCount
  ///
  /// This property is deprecated, alongside the UserInteraction types on which it depended.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const interactionCount = IriTerm.prevalidated(
    'http://schema.org/interactionCount',
  );

  /// minimumPaymentDue [Expects: http://schema.org/MonetaryAmount, http://schema.org/PriceSpecification]
  ///
  /// The minimum payment required at this time.
  ///
  /// Can be used on: http://schema.org/Invoice
  ///
  static const minimumPaymentDue = IriTerm.prevalidated(
    'http://schema.org/minimumPaymentDue',
  );

  /// name [Expects: http://schema.org/Text]
  ///
  /// The name of the item.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const name = IriTerm.prevalidated('http://schema.org/name');

  /// paymentDue [Expects: http://schema.org/DateTime]
  ///
  /// The date that payment is due.
  ///
  /// Can be used on: http://schema.org/Invoice, http://schema.org/Order
  ///
  static const paymentDue = IriTerm.prevalidated(
    'http://schema.org/paymentDue',
  );

  /// paymentMethod [Expects: http://schema.org/PaymentMethod, http://schema.org/Text]
  ///
  /// The name of the credit card or other method of payment for the order.
  ///
  /// Can be used on: http://schema.org/Invoice, http://schema.org/Order
  ///
  static const paymentMethod = IriTerm.prevalidated(
    'http://schema.org/paymentMethod',
  );

  /// paymentMethodId [Expects: http://schema.org/Text]
  ///
  /// An identifier for the method of payment used (e.g. the last 4 digits of the credit card).
  ///
  /// Can be used on: http://schema.org/Invoice, http://schema.org/Order
  ///
  static const paymentMethodId = IriTerm.prevalidated(
    'http://schema.org/paymentMethodId',
  );

  /// paymentStatus [Expects: http://schema.org/PaymentStatusType, http://schema.org/Text]
  ///
  /// The status of payment; whether the invoice has been paid or not.
  ///
  /// Can be used on: http://schema.org/Invoice
  ///
  static const paymentStatus = IriTerm.prevalidated(
    'http://schema.org/paymentStatus',
  );

  /// potentialAction [Expects: http://schema.org/Action]
  ///
  /// Indicates a potential Action, which describes an idealized action in which this thing would play an 'object' role.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const potentialAction = IriTerm.prevalidated(
    'http://schema.org/potentialAction',
  );

  /// referencesOrder [Expects: http://schema.org/Order]
  ///
  /// The Order(s) related to this Invoice. One or more Orders may be combined into a single Invoice.
  ///
  /// Can be used on: http://schema.org/Invoice
  ///
  static const referencesOrder = IriTerm.prevalidated(
    'http://schema.org/referencesOrder',
  );

  /// sameAs [Expects: http://schema.org/URL]
  ///
  /// URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Wikidata entry, or official website.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const sameAs = IriTerm.prevalidated('http://schema.org/sameAs');

  /// scheduledPaymentDate [Expects: http://schema.org/Date]
  ///
  /// The date the invoice is scheduled to be paid.
  ///
  /// Can be used on: http://schema.org/Invoice
  ///
  static const scheduledPaymentDate = IriTerm.prevalidated(
    'http://schema.org/scheduledPaymentDate',
  );

  /// totalPaymentDue [Expects: http://schema.org/MonetaryAmount, http://schema.org/PriceSpecification]
  ///
  /// The total amount due.
  ///
  /// Can be used on: http://schema.org/Invoice
  ///
  static const totalPaymentDue = IriTerm.prevalidated(
    'http://schema.org/totalPaymentDue',
  );

  /// url [Expects: http://schema.org/URL]
  ///
  /// URL of the item.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const url = IriTerm.prevalidated('http://schema.org/url');

  /// alternateName [Expects: http://schema.org/Text]
  ///
  /// An alias for the item.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const alternateName = IriTerm.prevalidated(
    'http://schema.org/alternateName',
  );

  /// broker [Expects: http://schema.org/Organization, http://schema.org/Person]
  ///
  /// An entity that arranges for an exchange between a buyer and a seller.  In most cases a broker never acquires or releases ownership of a product or service involved in an exchange.  If it is not clear whether an entity is a broker, seller, or buyer, the latter two terms are preferred.
  ///
  /// Can be used on: http://schema.org/Invoice, http://schema.org/Order, http://schema.org/Reservation, http://schema.org/Service
  ///
  static const broker = IriTerm.prevalidated('http://schema.org/broker');

  /// category [Expects: http://schema.org/CategoryCode, http://schema.org/PhysicalActivityCategory, http://schema.org/Text, http://schema.org/Thing, http://schema.org/URL]
  ///
  /// A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy.
  ///
  /// Can be used on: http://schema.org/ActionAccessSpecification, http://schema.org/Invoice, http://schema.org/Offer, http://schema.org/PhysicalActivity, http://schema.org/Product, http://schema.org/Recommendation, http://schema.org/Service, http://schema.org/SpecialAnnouncement
  ///
  static const category = IriTerm.prevalidated('http://schema.org/category');

  /// mainEntityOfPage [Expects: http://schema.org/CreativeWork, http://schema.org/URL]
  ///
  /// Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See [background notes](/docs/datamodel.html#mainEntityBackground) for details.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const mainEntityOfPage = IriTerm.prevalidated(
    'http://schema.org/mainEntityOfPage',
  );

  /// paymentDueDate [Expects: http://schema.org/Date, http://schema.org/DateTime]
  ///
  /// The date that payment is due.
  ///
  /// Can be used on: http://schema.org/Invoice, http://schema.org/Order
  ///
  static const paymentDueDate = IriTerm.prevalidated(
    'http://schema.org/paymentDueDate',
  );

  /// provider [Expects: http://schema.org/Organization, http://schema.org/Person]
  ///
  /// The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller.
  ///
  /// Can be used on: http://schema.org/Action, http://schema.org/CreativeWork, http://schema.org/EducationalOccupationalProgram, http://schema.org/FinancialIncentive, http://schema.org/Invoice, http://schema.org/ParcelDelivery, http://schema.org/Reservation, http://schema.org/Service, http://schema.org/Trip
  ///
  static const provider = IriTerm.prevalidated('http://schema.org/provider');

  /// subjectOf [Expects: http://schema.org/CreativeWork, http://schema.org/Event]
  ///
  /// A CreativeWork or Event about this Thing.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const subjectOf = IriTerm.prevalidated('http://schema.org/subjectOf');

  /// description [Expects: http://schema.org/Text, http://schema.org/TextObject]
  ///
  /// A description of the item.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const description = IriTerm.prevalidated(
    'http://schema.org/description',
  );

  /// image [Expects: http://schema.org/ImageObject, http://schema.org/URL]
  ///
  /// An image of the item. This can be a {[URL]} or a fully described {[ImageObject]}.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const image = IriTerm.prevalidated('http://schema.org/image');

  /// identifier [Expects: http://schema.org/PropertyValue, http://schema.org/Text, http://schema.org/URL]
  ///
  /// The identifier property represents any kind of identifier for any kind of {[Thing]}, such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
  ///
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const identifier = IriTerm.prevalidated(
    'http://schema.org/identifier',
  );

  /// source
  ///
  ///
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const source = IriTerm.prevalidated('http://schema.org/source');
}
