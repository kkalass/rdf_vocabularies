// Copyright (c) 2025, Klas Kala√ü <habbatical@gmail.com>
// All rights reserved. Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// GENERATED CODE - DO NOT MODIFY BY HAND
// Generated by VocabularyBuilder

/// ConsumeAction class from SchemaHttp vocabulary
library schemahttp_schemahttpconsumeaction_vocab;

import 'package:rdf_core/rdf_core.dart';

/// ConsumeAction class from SchemaHttp vocabulary
///
/// The act of ingesting information/resources/food.
///
/// Inherits from:
/// - Action (http://schema.org/Action)
/// - Thing (http://schema.org/Thing)
///
/// This class provides access to all properties that can be used with ConsumeAction.
/// [Class Reference](http://schema.org/ConsumeAction)
///
/// [Vocabulary Reference](http://schema.org/)
class SchemaHttpConsumeAction {
  // Private constructor prevents instantiation
  const SchemaHttpConsumeAction._();

  /// IRI term for the ConsumeAction class
  /// Use this to specify that a resource is of this type.
  static const classIri = IriTerm.prevalidated(
    'http://schema.org/ConsumeAction',
  );

  /// actionAccessibilityRequirement [Expects: http://schema.org/ActionAccessSpecification]
  ///
  /// A set of requirements that must be fulfilled in order to perform an Action. If more than one value is specified, fulfilling one set of requirements will allow the Action to be performed.
  ///
  /// Can be used on: http://schema.org/ConsumeAction
  ///
  static const actionAccessibilityRequirement = IriTerm.prevalidated(
    'http://schema.org/actionAccessibilityRequirement',
  );

  /// actionProcess [Expects: http://schema.org/HowTo]
  ///
  /// Description of the process by which the action was performed.
  ///
  /// Can be used on: http://schema.org/Action
  ///
  static const actionProcess = IriTerm.prevalidated(
    'http://schema.org/actionProcess',
  );

  /// actionStatus [Expects: http://schema.org/ActionStatusType]
  ///
  /// Indicates the current disposition of the Action.
  ///
  /// Can be used on: http://schema.org/Action
  ///
  static const actionStatus = IriTerm.prevalidated(
    'http://schema.org/actionStatus',
  );

  /// additionalType [Expects: http://schema.org/Text, http://schema.org/URL]
  ///
  /// An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. Typically the value is a URI-identified RDF class, and in this case corresponds to the
  /// use of rdf:type in RDF. Text values can be used sparingly, for cases where useful information can be added without their being an appropriate schema to reference. In the case of text values, the class label should follow the schema.org <a href="http://schema.org/docs/styleguide.html">style guide</a>.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const additionalType = IriTerm.prevalidated(
    'http://schema.org/additionalType',
  );

  /// agent [Expects: http://schema.org/Organization, http://schema.org/Person]
  ///
  /// The direct performer or driver of the action (animate or inanimate). E.g. *John* wrote a book.
  ///
  /// Can be used on: http://schema.org/Action
  ///
  static const agent = IriTerm.prevalidated('http://schema.org/agent');

  /// disambiguatingDescription [Expects: http://schema.org/Text]
  ///
  /// A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const disambiguatingDescription = IriTerm.prevalidated(
    'http://schema.org/disambiguatingDescription',
  );

  /// endTime [Expects: http://schema.org/DateTime, http://schema.org/Time]
  ///
  /// The endTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to end. For actions that span a period of time, when the action was performed. E.g. John wrote a book from January to *December*. For media, including audio and video, it's the time offset of the end of a clip within a larger file.\n\nNote that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions.
  ///
  /// Can be used on: http://schema.org/Action, http://schema.org/FoodEstablishmentReservation, http://schema.org/InteractionCounter, http://schema.org/MediaObject, http://schema.org/Schedule
  ///
  static const endTime = IriTerm.prevalidated('http://schema.org/endTime');

  /// error [Expects: http://schema.org/Thing]
  ///
  /// For failed actions, more information on the cause of the failure.
  ///
  /// Can be used on: http://schema.org/Action
  ///
  static const error = IriTerm.prevalidated('http://schema.org/error');

  /// expectsAcceptanceOf [Expects: http://schema.org/Offer]
  ///
  /// An Offer which must be accepted before the user can perform the Action. For example, the user may need to buy a movie before being able to watch it.
  ///
  /// Can be used on: http://schema.org/ActionAccessSpecification, http://schema.org/ConsumeAction, http://schema.org/MediaSubscription
  ///
  static const expectsAcceptanceOf = IriTerm.prevalidated(
    'http://schema.org/expectsAcceptanceOf',
  );

  /// interactionCount
  ///
  /// This property is deprecated, alongside the UserInteraction types on which it depended.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const interactionCount = IriTerm.prevalidated(
    'http://schema.org/interactionCount',
  );

  /// name [Expects: http://schema.org/Text]
  ///
  /// The name of the item.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const name = IriTerm.prevalidated('http://schema.org/name');

  /// potentialAction [Expects: http://schema.org/Action]
  ///
  /// Indicates a potential Action, which describes an idealized action in which this thing would play an 'object' role.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const potentialAction = IriTerm.prevalidated(
    'http://schema.org/potentialAction',
  );

  /// sameAs [Expects: http://schema.org/URL]
  ///
  /// URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Wikidata entry, or official website.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const sameAs = IriTerm.prevalidated('http://schema.org/sameAs');

  /// startTime [Expects: http://schema.org/DateTime, http://schema.org/Time]
  ///
  /// The startTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to start. For actions that span a period of time, when the action was performed. E.g. John wrote a book from *January* to December. For media, including audio and video, it's the time offset of the start of a clip within a larger file.\n\nNote that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions.
  ///
  /// Can be used on: http://schema.org/Action, http://schema.org/FoodEstablishmentReservation, http://schema.org/InteractionCounter, http://schema.org/MediaObject, http://schema.org/Schedule
  ///
  static const startTime = IriTerm.prevalidated('http://schema.org/startTime');

  /// target [Expects: http://schema.org/EntryPoint, http://schema.org/URL]
  ///
  /// Indicates a target EntryPoint, or url, for an Action.
  ///
  /// Can be used on: http://schema.org/Action
  ///
  static const target = IriTerm.prevalidated('http://schema.org/target');

  /// url [Expects: http://schema.org/URL]
  ///
  /// URL of the item.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const url = IriTerm.prevalidated('http://schema.org/url');

  /// alternateName [Expects: http://schema.org/Text]
  ///
  /// An alias for the item.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const alternateName = IriTerm.prevalidated(
    'http://schema.org/alternateName',
  );

  /// mainEntityOfPage [Expects: http://schema.org/CreativeWork, http://schema.org/URL]
  ///
  /// Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See [background notes](/docs/datamodel.html#mainEntityBackground) for details.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const mainEntityOfPage = IriTerm.prevalidated(
    'http://schema.org/mainEntityOfPage',
  );

  /// provider [Expects: http://schema.org/Organization, http://schema.org/Person]
  ///
  /// The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller.
  ///
  /// Can be used on: http://schema.org/Action, http://schema.org/CreativeWork, http://schema.org/EducationalOccupationalProgram, http://schema.org/FinancialIncentive, http://schema.org/Invoice, http://schema.org/ParcelDelivery, http://schema.org/Reservation, http://schema.org/Service, http://schema.org/Trip
  ///
  static const provider = IriTerm.prevalidated('http://schema.org/provider');

  /// subjectOf [Expects: http://schema.org/CreativeWork, http://schema.org/Event]
  ///
  /// A CreativeWork or Event about this Thing.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const subjectOf = IriTerm.prevalidated('http://schema.org/subjectOf');

  /// result [Expects: http://schema.org/Thing]
  ///
  /// The result produced in the action. E.g. John wrote *a book*.
  ///
  /// Can be used on: http://schema.org/Action
  ///
  static const result = IriTerm.prevalidated('http://schema.org/result');

  /// description [Expects: http://schema.org/Text, http://schema.org/TextObject]
  ///
  /// A description of the item.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const description = IriTerm.prevalidated(
    'http://schema.org/description',
  );

  /// image [Expects: http://schema.org/ImageObject, http://schema.org/URL]
  ///
  /// An image of the item. This can be a {[URL]} or a fully described {[ImageObject]}.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const image = IriTerm.prevalidated('http://schema.org/image');

  /// instrument [Expects: http://schema.org/Thing]
  ///
  /// The object that helped the agent perform the action. E.g. John wrote a book with *a pen*.
  ///
  /// Can be used on: http://schema.org/Action
  ///
  static const instrument = IriTerm.prevalidated(
    'http://schema.org/instrument',
  );

  /// object [Expects: http://schema.org/Thing]
  ///
  /// The object upon which the action is carried out, whose state is kept intact or changed. Also known as the semantic roles patient, affected or undergoer (which change their state) or theme (which doesn't). E.g. John read *a book*.
  ///
  /// Can be used on: http://schema.org/Action
  ///
  static const object = IriTerm.prevalidated('http://schema.org/object');

  /// location [Expects: http://schema.org/Place, http://schema.org/PostalAddress, http://schema.org/Text, http://schema.org/VirtualLocation]
  ///
  /// The location of, for example, where an event is happening, where an organization is located, or where an action takes place.
  ///
  /// Can be used on: http://schema.org/Action, http://schema.org/Event, http://schema.org/InteractionCounter, http://schema.org/Organization
  ///
  static const location = IriTerm.prevalidated('http://schema.org/location');

  /// participant [Expects: http://schema.org/Organization, http://schema.org/Person]
  ///
  /// Other co-agents that participated in the action indirectly. E.g. John wrote a book with *Steve*.
  ///
  /// Can be used on: http://schema.org/Action
  ///
  static const participant = IriTerm.prevalidated(
    'http://schema.org/participant',
  );

  /// identifier [Expects: http://schema.org/PropertyValue, http://schema.org/Text, http://schema.org/URL]
  ///
  /// The identifier property represents any kind of identifier for any kind of {[Thing]}, such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
  ///
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const identifier = IriTerm.prevalidated(
    'http://schema.org/identifier',
  );

  /// source
  ///
  ///
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const source = IriTerm.prevalidated('http://schema.org/source');
}
