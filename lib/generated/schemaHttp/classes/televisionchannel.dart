// Copyright (c) 2025, Klas Kala√ü <habbatical@gmail.com>
// All rights reserved. Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// GENERATED CODE - DO NOT MODIFY BY HAND
// Generated by VocabularyBuilder

/// TelevisionChannel class from SchemaHttp vocabulary
library schemahttp_schemahttptelevisionchannel_vocab;

import 'package:rdf_core/rdf_core.dart';

/// TelevisionChannel class from SchemaHttp vocabulary
///
/// A unique instance of a television BroadcastService on a CableOrSatelliteService lineup.
///
/// Inherits from:
/// - BroadcastChannel (http://schema.org/BroadcastChannel)
/// - Intangible (http://schema.org/Intangible)
/// - Thing (http://schema.org/Thing)
///
/// This class provides access to all properties that can be used with TelevisionChannel.
/// [Class Reference](http://schema.org/TelevisionChannel)
///
/// [Vocabulary Reference](http://schema.org/)
class SchemaHttpTelevisionChannel {
  // Private constructor prevents instantiation
  const SchemaHttpTelevisionChannel._();

  /// IRI term for the TelevisionChannel class
  /// Use this to specify that a resource is of this type.
  static const classIri = IriTerm.prevalidated(
    'http://schema.org/TelevisionChannel',
  );

  /// additionalType [Expects: http://schema.org/Text, http://schema.org/URL]
  ///
  /// An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. Typically the value is a URI-identified RDF class, and in this case corresponds to the
  /// use of rdf:type in RDF. Text values can be used sparingly, for cases where useful information can be added without their being an appropriate schema to reference. In the case of text values, the class label should follow the schema.org <a href="http://schema.org/docs/styleguide.html">style guide</a>.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const additionalType = IriTerm.prevalidated(
    'http://schema.org/additionalType',
  );

  /// broadcastChannelId [Expects: http://schema.org/Text]
  ///
  /// The unique address by which the BroadcastService can be identified in a provider lineup. In US, this is typically a number.
  ///
  /// Can be used on: http://schema.org/BroadcastChannel
  ///
  static const broadcastChannelId = IriTerm.prevalidated(
    'http://schema.org/broadcastChannelId',
  );

  /// broadcastFrequency [Expects: http://schema.org/BroadcastFrequencySpecification, http://schema.org/Text]
  ///
  /// The frequency used for over-the-air broadcasts. Numeric values or simple ranges, e.g. 87-99. In addition a shortcut idiom is supported for frequencies of AM and FM radio channels, e.g. "87 FM".
  ///
  /// Can be used on: http://schema.org/BroadcastChannel, http://schema.org/BroadcastService
  ///
  static const broadcastFrequency = IriTerm.prevalidated(
    'http://schema.org/broadcastFrequency',
  );

  /// broadcastServiceTier [Expects: http://schema.org/Text]
  ///
  /// The type of service required to have access to the channel (e.g. Standard or Premium).
  ///
  /// Can be used on: http://schema.org/BroadcastChannel
  ///
  static const broadcastServiceTier = IriTerm.prevalidated(
    'http://schema.org/broadcastServiceTier',
  );

  /// disambiguatingDescription [Expects: http://schema.org/Text]
  ///
  /// A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const disambiguatingDescription = IriTerm.prevalidated(
    'http://schema.org/disambiguatingDescription',
  );

  /// inBroadcastLineup [Expects: http://schema.org/CableOrSatelliteService]
  ///
  /// The CableOrSatelliteService offering the channel.
  ///
  /// Can be used on: http://schema.org/BroadcastChannel
  ///
  static const inBroadcastLineup = IriTerm.prevalidated(
    'http://schema.org/inBroadcastLineup',
  );

  /// interactionCount
  ///
  /// This property is deprecated, alongside the UserInteraction types on which it depended.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const interactionCount = IriTerm.prevalidated(
    'http://schema.org/interactionCount',
  );

  /// name [Expects: http://schema.org/Text]
  ///
  /// The name of the item.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const name = IriTerm.prevalidated('http://schema.org/name');

  /// potentialAction [Expects: http://schema.org/Action]
  ///
  /// Indicates a potential Action, which describes an idealized action in which this thing would play an 'object' role.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const potentialAction = IriTerm.prevalidated(
    'http://schema.org/potentialAction',
  );

  /// sameAs [Expects: http://schema.org/URL]
  ///
  /// URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Wikidata entry, or official website.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const sameAs = IriTerm.prevalidated('http://schema.org/sameAs');

  /// url [Expects: http://schema.org/URL]
  ///
  /// URL of the item.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const url = IriTerm.prevalidated('http://schema.org/url');

  /// alternateName [Expects: http://schema.org/Text]
  ///
  /// An alias for the item.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const alternateName = IriTerm.prevalidated(
    'http://schema.org/alternateName',
  );

  /// genre [Expects: http://schema.org/Text, http://schema.org/URL]
  ///
  /// Genre of the creative work, broadcast channel or group.
  ///
  /// Can be used on: http://schema.org/BroadcastChannel, http://schema.org/CreativeWork, http://schema.org/MusicGroup
  ///
  static const genre = IriTerm.prevalidated('http://schema.org/genre');

  /// mainEntityOfPage [Expects: http://schema.org/CreativeWork, http://schema.org/URL]
  ///
  /// Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See [background notes](/docs/datamodel.html#mainEntityBackground) for details.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const mainEntityOfPage = IriTerm.prevalidated(
    'http://schema.org/mainEntityOfPage',
  );

  /// providesBroadcastService [Expects: http://schema.org/BroadcastService]
  ///
  /// The BroadcastService offered on this channel.
  ///
  /// Can be used on: http://schema.org/BroadcastChannel
  ///
  static const providesBroadcastService = IriTerm.prevalidated(
    'http://schema.org/providesBroadcastService',
  );

  /// subjectOf [Expects: http://schema.org/CreativeWork, http://schema.org/Event]
  ///
  /// A CreativeWork or Event about this Thing.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const subjectOf = IriTerm.prevalidated('http://schema.org/subjectOf');

  /// description [Expects: http://schema.org/Text, http://schema.org/TextObject]
  ///
  /// A description of the item.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const description = IriTerm.prevalidated(
    'http://schema.org/description',
  );

  /// image [Expects: http://schema.org/ImageObject, http://schema.org/URL]
  ///
  /// An image of the item. This can be a {[URL]} or a fully described {[ImageObject]}.
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const image = IriTerm.prevalidated('http://schema.org/image');

  /// identifier [Expects: http://schema.org/PropertyValue, http://schema.org/Text, http://schema.org/URL]
  ///
  /// The identifier property represents any kind of identifier for any kind of {[Thing]}, such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
  ///
  ///
  /// Can be used on: http://schema.org/Thing
  ///
  static const identifier = IriTerm.prevalidated(
    'http://schema.org/identifier',
  );

  /// source
  ///
  ///
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const source = IriTerm.prevalidated('http://schema.org/source');
}
